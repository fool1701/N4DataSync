<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="devIpDriver" runtimeProfile="wb" qualifiedName="com.tridium.ddfIp.ui.BDdfIpAdapterEditor" name="BDdfIpAdapterEditor" packageName="com.tridium.ddfIp.ui" public="true">
<description>
Edits a BDdfIpAdapter that references an Ip Address that corresponds&#xa; to a local network interface on the host that is running the station.&#xa; &#xa; The user interface consists of a text drop down list box.&#xa; &#xa; All available adapters (as reported by the Ip Communicator) appear in the drop down list.&#xa; The current adapter is automatically selected. The list also features a [*** Default Local Host ***]&#xa; adpater (the text for &#x22;Default Local Host&#x22; is localized to the user&#x27;s local language).&#xa; &#xa; If the Ip Communicator does not report any adpaters then the text box portion will be editable.&#xa; This accomodates offline-editing scenarios (the Ip Communicator does not report any available&#xa; network interfaces if the station is in offline mode). This would also accomodate the extremely&#xa; rare scenario where the station is running on a platform computer that has no network interfaces&#xa; (extremely unlikely!). The real purpose here is to support offline editing.
</description>
<tag name="@author">lperkins</tag>
<extends>
<type class="javax.baja.workbench.fieldeditor.BWbFieldEditor"/>
</extends>
<!-- com.tridium.ddfIp.ui.BDdfIpAdapterEditor() -->
<constructor name="BDdfIpAdapterEditor" public="true">
<description/>
</constructor>

<!-- com.tridium.ddfIp.ui.BDdfIpAdapterEditor.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- com.tridium.ddfIp.ui.BDdfIpAdapterEditor.doLoadValue(javax.baja.sys.BObject, javax.baja.sys.Context) -->
<method name="doLoadValue"  protected="true">
<description>
This the override method used to populate the &#xa; editor&#x27;s state based on the specified value.
</description>
<parameter name="value">
<type class="javax.baja.sys.BObject"/>
</parameter>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- com.tridium.ddfIp.ui.BDdfIpAdapterEditor.doSaveValue(javax.baja.sys.BObject, javax.baja.sys.Context) -->
<method name="doSaveValue"  protected="true">
<description>
This is the override method for saving the editor&#x27;s&#xa; state back into an BObject form.  If the editor is&#xa; a edit-by-reference editor (BComplex) then it should&#xa; save its state back to the specified value instance and &#xa; return that instance.  If the editor is edit-by-value &#xa; (BSimple) then it should create a new instance and &#xa; return it.&#xa; &lt;p&gt;&#xa; The default implementation assumes an editor which&#xa; is view only and does nothing but return the value.
</description>
<parameter name="value">
<type class="javax.baja.sys.BObject"/>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="javax.baja.workbench.CannotSaveException"/>
</throws>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- com.tridium.ddfIp.ui.BDdfIpAdapterEditor.makeAdapterDropDown() -->
<method name="makeAdapterDropDown"  protected="true">
<description>
Constructs the BTextDropDown that will serve as the &#x22;Adapter&#x22; drop drown. This method adds all&#xa; available adapters (as reported by the Ip Communicator) to the drop down list. The current&#xa; adapter is automatically selected. The list also features a [*** Default Local Host ***]&#xa; adpater. If the Ip Communicator does not report any adpaters then the text box portion will&#xa; be editable. This accomodates offline-editing scenarios (the Ip Communicator will not report&#xa; any available network interfaces if the station is in offline mode)
</description>
<return>
<type class="javax.baja.ui.BTextDropDown"/>
</return>
</method>

<!-- com.tridium.ddfIp.ui.BDdfIpAdapterEditor.layoutUi() -->
<method name="layoutUi"  protected="true">
<description>
Contructs this widget&#x27;s content as a BGridPane with 2 columns. Inside the grid&#xa; pane is the localized label &#x22;Adapter&#x22; on the left and a text drop down on the&#xa; right.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddfIp.ui.BDdfIpAdapterEditor.getIpCommunicator() -->
<method name="getIpCommunicator"  protected="true">
<description>
This method gets the most immediate Ip Communicator parent of&#xa; the &#x27;ipAddress&#x27; structure.
</description>
<return>
<type class="com.tridium.ddfIp.comm.BDdfIpCommunicator"/>
</return>
</method>

<!-- com.tridium.ddfIp.ui.BDdfIpAdapterEditor.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

<!-- com.tridium.ddfIp.ui.BDdfIpAdapterEditor.ipAdapter -->
<field name="ipAdapter"  protected="true">
<type class="com.tridium.ddfIp.comm.BDdfIpAdapter"/>
<description>
This is the current Ip Adapter that this widget is operating upon. More specifically, this is&#xa; the most recent value that was passed to the doLoadValue method.
</description>
</field>

<!-- com.tridium.ddfIp.ui.BDdfIpAdapterEditor.LEX -->
<field name="LEX"  public="true" static="true" final="true">
<type class="javax.baja.util.Lexicon"/>
<description/>
</field>

<!-- com.tridium.ddfIp.ui.BDdfIpAdapterEditor.IP_ADAPTER_KEY -->
<field name="IP_ADAPTER_KEY"  public="true" static="true" final="true">
<type class="java.lang.String"/>
<description>
This is the key into the devIpDriver&#x27;s lexicon for the localized &#x22;Adapter&#x22; string.
</description>
</field>

<!-- com.tridium.ddfIp.ui.BDdfIpAdapterEditor.IP_ADAPTER_TEXT -->
<field name="IP_ADAPTER_TEXT"  public="true" static="true" final="true">
<type class="java.lang.String"/>
<description>
This is the localized text that means &#x22;Adapter&#x22; as taken from the devIpDriver lexicon.
</description>
</field>

<!-- com.tridium.ddfIp.ui.BDdfIpAdapterEditor.DEFAULT_LOCAL_HOST_KEY -->
<field name="DEFAULT_LOCAL_HOST_KEY"  public="true" static="true" final="true">
<type class="java.lang.String"/>
<description>
This is the key into the devIpDriver&#x27;s lexicon for the localized &#x22;Default Local Host&#x22; string.
</description>
</field>

<!-- com.tridium.ddfIp.ui.BDdfIpAdapterEditor.DEFAULT_LOCAL_HOST_TEXT -->
<field name="DEFAULT_LOCAL_HOST_TEXT"  public="true" static="true" final="true">
<type class="java.lang.String"/>
<description>
This is the localized text that means &#x22;Default Local Host&#x22; as taken from the devIpDriver lexicon.
</description>
</field>

<!-- com.tridium.ddfIp.ui.BDdfIpAdapterEditor.adapterDropDown -->
<field name="adapterDropDown"  protected="true">
<type class="javax.baja.ui.BTextDropDown"/>
<description>
/**&#xa; This is the text box / drop-down-list-box where the end-user selects the adapter. The&#xa; adapter description is what the user really sees, although the adapterId is&#xa; what really uniquely identifies the adapter (it is really quite un-user-friendly&#xa; so this drop down displays the adapter description
</description>
</field>

</class>
</bajadoc>
