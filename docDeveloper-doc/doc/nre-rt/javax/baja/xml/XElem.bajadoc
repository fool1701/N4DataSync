<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="nre" runtimeProfile="rt" qualifiedName="javax.baja.xml.XElem" name="XElem" packageName="javax.baja.xml" public="true">
<description>
XElem models a XML Element construct.
</description>
<tag name="@author">Brian Frank on 6 Apr 02</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="javax.baja.xml.XContent"/>
</extends>
<implements>
<type class="com.tridium.nre.util.IElement"/>
</implements>
<!-- javax.baja.xml.XElem(java.lang.String, java.lang.String, java.lang.String) -->
<constructor name="XElem" public="true">
<parameter name="nsPrefix">
<type class="java.lang.String"/>
<description>
namespace prefix
</description>
</parameter>
<parameter name="nsUri">
<type class="java.lang.String"/>
<description>
namespace URI
</description>
</parameter>
<parameter name="name">
<type class="java.lang.String"/>
<description>
element name
</description>
</parameter>
<description>
Create a new element and define a new namespace&#xa; attribute for the element using the specified&#xa; prefix and uri.
</description>
</constructor>

<!-- javax.baja.xml.XElem(javax.baja.xml.XNs, java.lang.String) -->
<constructor name="XElem" public="true">
<parameter name="ns">
<type class="javax.baja.xml.XNs"/>
<description>
Namespace
</description>
</parameter>
<parameter name="name">
<type class="java.lang.String"/>
<description>
element name
</description>
</parameter>
<description>
Create a new element with the specified namespace and local name.
</description>
</constructor>

<!-- javax.baja.xml.XElem(java.lang.String) -->
<constructor name="XElem" public="true">
<parameter name="name">
<type class="java.lang.String"/>
<description>
element name
</description>
</parameter>
<description>
Convenience for &lt;code&gt;XElem(null, name)&lt;/code&gt;.
</description>
</constructor>

<!-- javax.baja.xml.XElem() -->
<constructor name="XElem" public="true">
<description>
Convenience for &lt;code&gt;XElem(null, &amp;#x22;unnamed&amp;#x22;)&lt;/code&gt;.
</description>
</constructor>

<!-- javax.baja.xml.XElem.ns() -->
<method name="ns"  public="true" final="true">
<description>
Get the namespace for this element.  If no namespace&#xa; has been defined for this element then return null.
</description>
<return>
<type class="javax.baja.xml.XNs"/>
<description>
element namespace, or null
</description>
</return>
</method>

<!-- javax.baja.xml.XElem.prefix() -->
<method name="prefix"  public="true" final="true">
<description>
Return &lt;code&gt;ns().prefix()&lt;/code&gt; or null if no&#xa; namespace is defined for this element.
</description>
<return>
<type class="java.lang.String"/>
<description>
namespace prefix, or null
</description>
</return>
</method>

<!-- javax.baja.xml.XElem.uri() -->
<method name="uri"  public="true" final="true">
<description>
Return &lt;code&gt;ns().uri()&lt;/code&gt; or null if no&#xa; namespace is defined for this element.
</description>
<return>
<type class="java.lang.String"/>
<description>
namespace uri, or null
</description>
</return>
</method>

<!-- javax.baja.xml.XElem.name() -->
<method name="name"  public="true" final="true">
<description>
Get the local name of the element (without prefix).
</description>
<return>
<type class="java.lang.String"/>
<description>
element name
</description>
</return>
</method>

<!-- javax.baja.xml.XElem.qname() -->
<method name="qname"  public="true" final="true">
<description>
Get the qualified name of the element.  If this element&#xa; has no namespace or is in the default namespace return&#xa; the local name.  Otherwise return &lt;code&gt;&amp;lt;prefix&amp;gt;:&amp;lt;name&amp;gt;&lt;/code&gt;.
</description>
<return>
<type class="java.lang.String"/>
<description>
fully qualified element name
</description>
</return>
</method>

<!-- javax.baja.xml.XElem.findNs(java.lang.String) -->
<method name="findNs"  public="true" final="true">
<description>
Check is this element defines a namespace for the&#xa; specified uri.  If we find one, then return an&#xa; XNs instance for it, otherwise return null.
</description>
<parameter name="uri">
<type class="java.lang.String"/>
<description>
Uri to search namespaces for
</description>
</parameter>
<return>
<type class="javax.baja.xml.XNs"/>
<description>
Namespace for &lt;code&gt;uri&lt;/code&gt;, or null
</description>
</return>
</method>

<!-- javax.baja.xml.XElem.setNs(javax.baja.xml.XNs) -->
<method name="setNs"  public="true" final="true">
<description>
Set this element&#x27;s namespace.
</description>
<parameter name="ns">
<type class="javax.baja.xml.XNs"/>
<description>
new namespace
</description>
</parameter>
<return>
<type class="javax.baja.xml.XNs"/>
<description>
the same namespace passed in (for builder-style calls)
</description>
</return>
</method>

<!-- javax.baja.xml.XElem.setName(java.lang.String) -->
<method name="setName"  public="true" final="true">
<description>
Set this element&#x27;s local name.
</description>
<parameter name="name">
<type class="java.lang.String"/>
<description>
the new name for this element
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.xml.XElem.defineDefaultNs(java.lang.String) -->
<method name="defineDefaultNs"  public="true">
<description>
Define the default namespace for this element and&#xa; add the &lt;code&gt;xmlns&lt;/code&gt; attribute.  Return the XNs instance&#xa; used to identify the namespace.  Note this does not put&#xa; this XElem in the namespace unless setNs() is called.
</description>
<parameter name="uri">
<type class="java.lang.String"/>
<description>
uri of the namespace
</description>
</parameter>
<return>
<type class="javax.baja.xml.XNs"/>
<description>
newly defined namespace
</description>
</return>
</method>

<!-- javax.baja.xml.XElem.defineNs(java.lang.String, java.lang.String) -->
<method name="defineNs"  public="true">
<description>
Define the a new namespace for this element and&#xa; add the &lt;code&gt;xmlns:&amp;lt;prefix&amp;gt;&lt;/code&gt; attribute.  Return the XNs&#xa; instance used to identify the namespace.  Note this&#xa; does not put this XElem in the namespace unless setNs()&#xa; is called.
</description>
<parameter name="prefix">
<type class="java.lang.String"/>
<description>
prefix for the namespace
</description>
</parameter>
<parameter name="uri">
<type class="java.lang.String"/>
<description>
uri of the namespace
</description>
</parameter>
<return>
<type class="javax.baja.xml.XNs"/>
<description>
newly defined namespace
</description>
</return>
</method>

<!-- javax.baja.xml.XElem.defineNs(javax.baja.xml.XNs) -->
<method name="defineNs"  public="true">
<description>
Define a namespace for this element by adding the&#xa; &lt;code&gt;xmlns:&amp;lt;prefix&amp;gt;&lt;/code&gt; attribute.  Return the ns instance&#xa; passed as the parameter.  Note this does not put this&#xa; XElem in the namespace unless setNs() is called.
</description>
<parameter name="ns">
<type class="javax.baja.xml.XNs"/>
<description>
new namespace
</description>
</parameter>
<return>
<type class="javax.baja.xml.XNs"/>
<description>
the same namespace
</description>
</return>
</method>

<!-- javax.baja.xml.XElem.attrSize() -->
<method name="attrSize"  public="true" final="true">
<description>
Get the number of attributes in this element.
</description>
<return>
<type class="int"/>
<description>
number of attributes for this element
</description>
</return>
</method>

<!-- javax.baja.xml.XElem.attrNs(int) -->
<method name="attrNs"  public="true" final="true">
<description>
Get the attribute namespace for the specified index.&#xa; Return null if no namespace is defined for the attribute.&#xa; Note that the special prefixes &#x22;xml&#x22; and &#x22;xmlns&#x22; return&#xa; null for their namespace, and are combined into the name.
</description>
<parameter name="index">
<type class="int"/>
<description>
Index (0..&lt;code&gt;attrSize() - 1&lt;/code&gt;) of attribute
</description>
</parameter>
<return>
<type class="javax.baja.xml.XNs"/>
<description>
namespace for attribute
</description>
</return>
</method>

<!-- javax.baja.xml.XElem.attrName(int) -->
<method name="attrName"  public="true" final="true">
<description>
Get the attribute name for the specified index.&#xa; Note that the special prefixes &#x22;xml&#x22; and &#x22;xmlns&#x22; return&#xa; null for their namespace, and are combined into the name.
</description>
<parameter name="index">
<type class="int"/>
<description>
Index (0..&lt;code&gt;attrSize() - 1&lt;/code&gt;) of attribute
</description>
</parameter>
<return>
<type class="java.lang.String"/>
<description>
name of attribute
</description>
</return>
</method>

<!-- javax.baja.xml.XElem.attrValue(int) -->
<method name="attrValue"  public="true" final="true">
<description>
Get the attribute value for the specified index.
</description>
<parameter name="index">
<type class="int"/>
<description>
Index (0..&lt;code&gt;attrSize() - 1&lt;/code&gt;) of attribute
</description>
</parameter>
<return>
<type class="java.lang.String"/>
<description>
value of attribute
</description>
</return>
</method>

<!-- javax.baja.xml.XElem.attrIndex(javax.baja.xml.XNs, java.lang.String) -->
<method name="attrIndex"  public="true" final="true">
<description>
Get the index of the first attribute with the&#xa; specified namespace and local name or return -1&#xa; if no match.
</description>
<parameter name="ns">
<type class="javax.baja.xml.XNs"/>
<description>
namespace to search
</description>
</parameter>
<parameter name="name">
<type class="java.lang.String"/>
<description>
name of attribute
</description>
</parameter>
<return>
<type class="int"/>
<description>
index of attribute, or -1 if not found
</description>
</return>
</method>

<!-- javax.baja.xml.XElem.attrIndex(java.lang.String) -->
<method name="attrIndex"  public="true" final="true">
<description>
Get the index of the first attribute with the&#xa; specified name not in an explicit namespace.&#xa; Return -1 if no match.
</description>
<parameter name="name">
<type class="java.lang.String"/>
<description>
name of attribute
</description>
</parameter>
<return>
<type class="int"/>
<description>
index of attribute, or -1 if not found
</description>
</return>
</method>

<!-- javax.baja.xml.XElem.get(javax.baja.xml.XNs, java.lang.String) -->
<method name="get"  public="true" final="true">
<description>
Get an attribute by the specified namespace and&#xa; local name.  If not found then throw XException.&#xa; Note that the specific prefixes &#x22;xml&#x22; and &#x22;xmlns&#x22;&#xa; are always combined into the name.
</description>
<parameter name="ns">
<type class="javax.baja.xml.XNs"/>
<description>
namespace of attribute
</description>
</parameter>
<parameter name="name">
<type class="java.lang.String"/>
<description>
name of attribute
</description>
</parameter>
<return>
<type class="java.lang.String"/>
<description>
string value of attribute
</description>
</return>
</method>

<!-- javax.baja.xml.XElem.get(java.lang.String) -->
<method name="get"  public="true" final="true">
<description>
Get an attribute by the specified name not in an&#xa; explicit namespace.  If not found then throw XException.&#xa; Note that the specific prefixes &#x22;xml&#x22; and &#x22;xmlns&#x22;&#xa; are always combined into the name.
</description>
<parameter name="name">
<type class="java.lang.String"/>
<description>
name of attribute
</description>
</parameter>
<return>
<type class="java.lang.String"/>
<description>
string value of attribute
</description>
</return>
</method>

<!-- javax.baja.xml.XElem.get(javax.baja.xml.XNs, java.lang.String, java.lang.String) -->
<method name="get"  public="true" final="true">
<description>
Get an attribute by the specified namespace and local&#xa; name.  If not found then return the given def value.
</description>
<parameter name="ns">
<type class="javax.baja.xml.XNs"/>
<description>
namespace of attribute
</description>
</parameter>
<parameter name="name">
<type class="java.lang.String"/>
<description>
name of attribute
</description>
</parameter>
<parameter name="def">
<type class="java.lang.String"/>
<description>
value to return if attribute is not found
</description>
</parameter>
<return>
<type class="java.lang.String"/>
<description>
string value of attribute, or &lt;code&gt;def&lt;/code&gt;
</description>
</return>
</method>

<!-- javax.baja.xml.XElem.get(java.lang.String, java.lang.String) -->
<method name="get"  public="true" final="true">
<description>
Get an attribute by the specified name.  If not&#xa; found then return the given def value.
</description>
<parameter name="name">
<type class="java.lang.String"/>
<description>
name of attribute
</description>
</parameter>
<parameter name="def">
<type class="java.lang.String"/>
<description>
value to return if attribute is not found
</description>
</parameter>
<return>
<type class="java.lang.String"/>
<description>
string value of attribute, or &lt;code&gt;def&lt;/code&gt;
</description>
</return>
</method>

<!-- javax.baja.xml.XElem.getb(java.lang.String) -->
<method name="getb"  public="true" final="true">
<description>
Get a boolean attribute by the specified name.  If&#xa; not found then return throw an XException.  If the&#xa; value cannot be parsed as &#x22;true&#x22; or &#x22;false&#x22; then&#xa; throw an XException.
</description>
<parameter name="name">
<type class="java.lang.String"/>
<description>
name of attribute
</description>
</parameter>
<return>
<type class="boolean"/>
<description>
value of attribute coerced to boolean
</description>
</return>
</method>

<!-- javax.baja.xml.XElem.getb(java.lang.String, boolean) -->
<method name="getb"  public="true" final="true">
<description>
Get a boolean attribute by the specified name.  If&#xa; not found then return the given def value.  If the&#xa; value cannot be parsed as &#x22;true&#x22; or &#x22;false&#x22; then&#xa; throw an XException.
</description>
<parameter name="name">
<type class="java.lang.String"/>
<description>
name of attribute
</description>
</parameter>
<parameter name="def">
<type class="boolean"/>
<description>
value to return if attribute is not found
</description>
</parameter>
<return>
<type class="boolean"/>
<description>
value of attribute coerced to boolean, or def
</description>
</return>
</method>

<!-- javax.baja.xml.XElem.geti(java.lang.String) -->
<method name="geti"  public="true" final="true">
<description>
Get an int attribute by the specified name.  If&#xa; not found then return throw an XException.  If the&#xa; value cannot be parsed then throw an XException.
</description>
<parameter name="name">
<type class="java.lang.String"/>
<description>
name of attribute
</description>
</parameter>
<return>
<type class="int"/>
<description>
value of attribute parsed as int
</description>
</return>
</method>

<!-- javax.baja.xml.XElem.geti(java.lang.String, int) -->
<method name="geti"  public="true" final="true">
<description>
Get an int attribute by the specified name.  If&#xa; not found then return the given def value.  If the&#xa; value cannot be parsed then throw an XException.
</description>
<parameter name="name">
<type class="java.lang.String"/>
<description>
name of attribute
</description>
</parameter>
<parameter name="def">
<type class="int"/>
<description>
value to return if attribute is not found
</description>
</parameter>
<return>
<type class="int"/>
<description>
value of attribute parsed as int
</description>
</return>
</method>

<!-- javax.baja.xml.XElem.getl(java.lang.String) -->
<method name="getl"  public="true" final="true">
<description>
Get a long attribute by the specified name.  If&#xa; not found then return throw an XException.  If the&#xa; value cannot be parsed then throw an XException.
</description>
<parameter name="name">
<type class="java.lang.String"/>
<description>
name of attribute
</description>
</parameter>
<return>
<type class="long"/>
<description>
value of attribute parsed as long
</description>
</return>
</method>

<!-- javax.baja.xml.XElem.getl(java.lang.String, long) -->
<method name="getl"  public="true" final="true">
<description>
Get a long attribute by the specified name.  If&#xa; not found then return the given def value.  If the&#xa; value cannot be parsed then throw an XException.
</description>
<parameter name="name">
<type class="java.lang.String"/>
<description>
name of attribute
</description>
</parameter>
<parameter name="def">
<type class="long"/>
<description>
value to return if attribute is not found
</description>
</parameter>
<return>
<type class="long"/>
<description>
value of attribute parsed as long
</description>
</return>
</method>

<!-- javax.baja.xml.XElem.getf(java.lang.String) -->
<method name="getf"  public="true" final="true">
<description>
Get a float attribute by the specified name.  If&#xa; not found then return throw an XException.  If the&#xa; value cannot be parsed then throw an XException.
</description>
<parameter name="name">
<type class="java.lang.String"/>
<description>
name of attribute
</description>
</parameter>
<return>
<type class="float"/>
<description>
value of attribute parsed as float
</description>
</return>
</method>

<!-- javax.baja.xml.XElem.getf(java.lang.String, float) -->
<method name="getf"  public="true" final="true">
<description>
Get a float attribute by the specified name.  If&#xa; not found then return the given def value.  If the&#xa; value cannot be parsed then throw an XException.
</description>
<parameter name="name">
<type class="java.lang.String"/>
<description>
name of attribute
</description>
</parameter>
<parameter name="def">
<type class="float"/>
<description>
value to return if attribute is not found
</description>
</parameter>
<return>
<type class="float"/>
<description>
value of attribute parsed as float
</description>
</return>
</method>

<!-- javax.baja.xml.XElem.getd(java.lang.String) -->
<method name="getd"  public="true" final="true">
<description>
Get a double attribute by the specified name.  If&#xa; not found then return throw an XException.  If the&#xa; value cannot be parsed then throw an XException.
</description>
<parameter name="name">
<type class="java.lang.String"/>
<description>
name of attribute
</description>
</parameter>
<return>
<type class="double"/>
<description>
value of attribute parsed as double
</description>
</return>
</method>

<!-- javax.baja.xml.XElem.getd(java.lang.String, double) -->
<method name="getd"  public="true" final="true">
<description>
Get a double attribute by the specified name.  If&#xa; not found then return the given def value.  If the&#xa; value cannot be parsed then throw an XException.
</description>
<parameter name="name">
<type class="java.lang.String"/>
<description>
name of attribute
</description>
</parameter>
<parameter name="def">
<type class="double"/>
<description>
value to return if attribute is not found
</description>
</parameter>
<return>
<type class="double"/>
<description>
value of attribute parsed as double
</description>
</return>
</method>

<!-- javax.baja.xml.XElem.setAttr(javax.baja.xml.XNs, java.lang.String, java.lang.String) -->
<method name="setAttr"  public="true" final="true">
<description>
Set the attribute value for the first attribute&#xa; found with the specified namespace and local name.&#xa; If no attribute is found with the name then add it.
</description>
<parameter name="ns">
<type class="javax.baja.xml.XNs"/>
<description>
namespace of attribute
</description>
</parameter>
<parameter name="name">
<type class="java.lang.String"/>
<description>
name of attribute
</description>
</parameter>
<parameter name="value">
<type class="java.lang.String"/>
<description>
value for attribute
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.xml.XElem.setAttr(java.lang.String, java.lang.String) -->
<method name="setAttr"  public="true" final="true">
<description>
Set the attribute value for the first attribute&#xa; found with the specified name.  If no attribute&#xa; is found with the name then add it.
</description>
<parameter name="name">
<type class="java.lang.String"/>
<description>
name of attribute
</description>
</parameter>
<parameter name="value">
<type class="java.lang.String"/>
<description>
value for attribute
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.xml.XElem.setAttr(int, java.lang.String) -->
<method name="setAttr"  public="true" final="true">
<description>
Set the attribute value at the specified index.
</description>
<parameter name="index">
<type class="int"/>
<description>
index of attribute (0..&lt;code&gt;attrSize() - 1&lt;/code&gt;)
</description>
</parameter>
<parameter name="value">
<type class="java.lang.String"/>
<description>
value of attribute
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.xml.XElem.addAttr(java.lang.String, java.lang.String) -->
<method name="addAttr"  public="true" final="true">
<description>
Add the specified attribute name value pair using&#xa; the null namespace.
</description>
<parameter name="name">
<type class="java.lang.String"/>
<description>
name of attribute
</description>
</parameter>
<parameter name="value">
<type class="java.lang.String"/>
<description>
value for attribute
</description>
</parameter>
<return>
<type class="javax.baja.xml.XElem"/>
<description>
this
</description>
</return>
</method>

<!-- javax.baja.xml.XElem.addAttr(javax.baja.xml.XNs, java.lang.String, java.lang.String) -->
<method name="addAttr"  public="true" final="true">
<description>
Add the specified attribute name value pair.
</description>
<parameter name="ns">
<type class="javax.baja.xml.XNs"/>
<description>
namespace of attribute
</description>
</parameter>
<parameter name="name">
<type class="java.lang.String"/>
<description>
name of attribute
</description>
</parameter>
<parameter name="value">
<type class="java.lang.String"/>
<description>
value for attribute
</description>
</parameter>
<return>
<type class="javax.baja.xml.XElem"/>
<description>
this
</description>
</return>
</method>

<!-- javax.baja.xml.XElem.removeAttr(javax.baja.xml.XNs, java.lang.String) -->
<method name="removeAttr"  public="true" final="true">
<description>
Remove the first attribute with the specified namespace&#xa; and local name.
</description>
<parameter name="ns">
<type class="javax.baja.xml.XNs"/>
<description>
namespace of attribute
</description>
</parameter>
<parameter name="name">
<type class="java.lang.String"/>
<description>
name of attribute
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.xml.XElem.removeAttr(java.lang.String) -->
<method name="removeAttr"  public="true" final="true">
<description>
Remove the first attribute with the specified&#xa; name in the null namespace.
</description>
<parameter name="name">
<type class="java.lang.String"/>
<description>
name of attribute
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.xml.XElem.removeAttr(int) -->
<method name="removeAttr"  public="true" final="true">
<description>
Remove the attribute at the specified index.
</description>
<parameter name="index">
<type class="int"/>
<description>
index of attribute (0..&lt;code&gt;attrSize() - 1&lt;/code&gt;)
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.xml.XElem.clearAttr() -->
<method name="clearAttr"  public="true" final="true">
<description>
Clear the attribute list to a count of 0.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.xml.XElem.contentSize() -->
<method name="contentSize"  public="true" final="true">
<description>
Get the number of XContent children of this element.
</description>
<return>
<type class="int"/>
<description>
number of children this element has
</description>
</return>
</method>

<!-- javax.baja.xml.XElem.content(int) -->
<method name="content"  public="true" final="true">
<description>
Get the XContent child at the specified index.
</description>
<parameter name="index">
<type class="int"/>
<description>
index of child (0..&lt;code&gt;contentSize() - 1&lt;/code&gt;)
</description>
</parameter>
<return>
<type class="javax.baja.xml.XContent"/>
<description>
child content
</description>
</return>
</method>

<!-- javax.baja.xml.XElem.content() -->
<method name="content"  public="true" final="true">
<description>
Get the array of XContent children for this element.
</description>
<return>
<type class="javax.baja.xml.XContent" dimension="1"/>
<description>
all children of this element
</description>
</return>
</method>

<!-- javax.baja.xml.XElem.contentIndex(javax.baja.xml.XContent) -->
<method name="contentIndex"  public="true">
<description>
Get the index of the specified content instance (using&#xa; == operator) or return -1 if the specified content is&#xa; not a child of this element.
</description>
<parameter name="child">
<type class="javax.baja.xml.XContent"/>
<description>
child to find
</description>
</parameter>
<return>
<type class="int"/>
<description>
index of &lt;code&gt;child&lt;/code&gt;
</description>
</return>
</method>

<!-- javax.baja.xml.XElem.elem(int) -->
<method name="elem"  public="true" final="true">
<description>
Get the XContent at the specified index cast to a XElem.
</description>
<parameter name="index">
<type class="int"/>
<description>
index of child (0..&lt;code&gt;contentSize() - 1&lt;/code&gt;)
</description>
</parameter>
<return>
<type class="javax.baja.xml.XElem"/>
<description>
child element
</description>
</return>
</method>

<!-- javax.baja.xml.XElem.elems() -->
<method name="elems"  public="true" final="true">
<description>
Get the array of XElem children for this element.
</description>
<return>
<type class="javax.baja.xml.XElem" dimension="1"/>
<description>
array of all child elements
</description>
</return>
</method>

<!-- javax.baja.xml.XElem.elems(javax.baja.xml.XNs, java.lang.String) -->
<method name="elems"  public="true" final="true">
<description>
Get all the children elements in the specified&#xa; namespace and with the specified local name.
</description>
<parameter name="ns">
<type class="javax.baja.xml.XNs"/>
<description>
namespace to search
</description>
</parameter>
<parameter name="name">
<type class="java.lang.String"/>
<description>
name to search
</description>
</parameter>
<return>
<type class="javax.baja.xml.XElem" dimension="1"/>
<description>
array of elements matching namespace and name
</description>
</return>
</method>

<!-- javax.baja.xml.XElem.elems(javax.baja.xml.XNs) -->
<method name="elems"  public="true" final="true">
<description>
Get all the children elements in the specified namespace.
</description>
<parameter name="ns">
<type class="javax.baja.xml.XNs"/>
<description>
namespace
</description>
</parameter>
<return>
<type class="javax.baja.xml.XElem" dimension="1"/>
<description>
all elements in namespace &lt;code&gt;ns&lt;/code&gt;
</description>
</return>
</method>

<!-- javax.baja.xml.XElem.elems(java.lang.String) -->
<method name="elems"  public="true" final="true">
<description>
Get all the children elements with the specified&#xa; local name regardless of namespace.
</description>
<parameter name="name">
<type class="java.lang.String"/>
<description>
name of element
</description>
</parameter>
<return>
<type class="javax.baja.xml.XElem" dimension="1"/>
<description>
array of all elements with name &lt;code&gt;name&lt;/code&gt;
</description>
</return>
</method>

<!-- javax.baja.xml.XElem.elem(javax.baja.xml.XNs, java.lang.String) -->
<method name="elem"  public="true" final="true">
<description>
Get the first child element in the specified&#xa; namespace and with the specified local name.  If&#xa; not found then return null.
</description>
<parameter name="ns">
<type class="javax.baja.xml.XNs"/>
<description>
namespace to search
</description>
</parameter>
<parameter name="name">
<type class="java.lang.String"/>
<description>
name to search
</description>
</parameter>
<return>
<type class="javax.baja.xml.XElem"/>
<description>
First element matching namespace and name
</description>
</return>
</method>

<!-- javax.baja.xml.XElem.elem(java.lang.String) -->
<method name="elem"  public="true" final="true">
<description>
Get the first child element the specified local name&#xa; regardless of namespace.  If not found then return null.
</description>
<parameter name="name">
<type class="java.lang.String"/>
<description>
name to search
</description>
</parameter>
<return>
<type class="javax.baja.xml.XElem"/>
<description>
first element with &lt;code&gt;name&lt;/code&gt;, or null
</description>
</return>
</method>

<!-- javax.baja.xml.XElem.addText(java.lang.String) -->
<method name="addText"  public="true" final="true">
<description>
Creates and adds a text descendent.
</description>
<parameter name="txt">
<type class="java.lang.String"/>
<description>
text to add
</description>
</parameter>
<return>
<type class="javax.baja.xml.XElem"/>
<description>
this
</description>
</return>
</method>

<!-- javax.baja.xml.XElem.text() -->
<method name="text"  public="true">
<description>
If the first content child is a XText instance, then&#xa; return it.  Otherwise return null.
</description>
<return>
<type class="javax.baja.xml.XText"/>
<description>
text if the first child is a text content, otherwise null.
</description>
</return>
</method>

<!-- javax.baja.xml.XElem.text(int) -->
<method name="text"  public="true" final="true">
<description>
Get the XContent at the specified index cast to a XText.
</description>
<parameter name="index">
<type class="int"/>
<description>
index of child (0..&lt;code&gt;contentSize() - 1&lt;/code&gt;)
</description>
</parameter>
<return>
<type class="javax.baja.xml.XText"/>
<description>
child element
</description>
</return>
</method>

<!-- javax.baja.xml.XElem.string() -->
<method name="string"  public="true">
<description>
If the first content child is a XText instance, then&#xa; return the result of calling XText.string().  Otherwise&#xa; return null.
</description>
<return>
<type class="java.lang.String"/>
<description>
content of first element if it is text, otherwise null
</description>
</return>
</method>

<!-- javax.baja.xml.XElem.addContent(javax.baja.xml.XContent) -->
<method name="addContent"  public="true" final="true">
<description>
Add the specified content to the end of the content list.
</description>
<parameter name="child">
<type class="javax.baja.xml.XContent"/>
<description>
content to add
</description>
</parameter>
<return>
<type class="javax.baja.xml.XElem"/>
<description>
this
</description>
</return>
</method>

<!-- javax.baja.xml.XElem.addContent(int, javax.baja.xml.XContent) -->
<method name="addContent"  public="true" final="true">
<description>
Insert the content instance as a child of this&#xa; element at the specified index.
</description>
<parameter name="index">
<type class="int"/>
<description>
index to insert at
</description>
</parameter>
<parameter name="child">
<type class="javax.baja.xml.XContent"/>
<description>
content to insert
</description>
</parameter>
<return>
<type class="javax.baja.xml.XElem"/>
<description>
this
</description>
</return>
</method>

<!-- javax.baja.xml.XElem.replaceContent(int, javax.baja.xml.XContent) -->
<method name="replaceContent"  public="true" final="true">
<description>
Replace the content instance at the specified index&#xa; with the new content child.
</description>
<parameter name="index">
<type class="int"/>
<description>
index to insert at
</description>
</parameter>
<parameter name="child">
<type class="javax.baja.xml.XContent"/>
<description>
content used to replace existing content
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.xml.XElem.removeContent(javax.baja.xml.XContent) -->
<method name="removeContent"  public="true" final="true">
<description>
Remove the specified content instance (using == operator).
</description>
<parameter name="child">
<type class="javax.baja.xml.XContent"/>
<description>
content to remove
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.xml.XElem.removeContent(int) -->
<method name="removeContent"  public="true" final="true">
<description>
Remove the content child at the specified index.
</description>
<parameter name="index">
<type class="int"/>
<description>
index of content to remove
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.xml.XElem.clearContent() -->
<method name="clearContent"  public="true" final="true">
<description>
Get the content children and set content count to 0.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.xml.XElem.dump() -->
<method name="dump"  public="true">
<description>
Dump to standard out.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.xml.XElem.write(java.io.File) -->
<method name="write"  public="true">
<description>
Write to the specified File.
</description>
<parameter name="file">
<type class="java.io.File"/>
<description>
File to write to
</description>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
<description>
if writing fails
</description>
</throws>
</method>

<!-- javax.baja.xml.XElem.write(javax.baja.xml.XWriter) -->
<method name="write"  public="true">
<description>
Write to the specified XWriter stream with indent of 0.
</description>
<parameter name="out">
<type class="javax.baja.xml.XWriter"/>
<description>
XWriter stream to write to
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.xml.XElem.write(javax.baja.xml.XWriter, int) -->
<method name="write"  public="true">
<description>
Write to the specified XWriter stream.
</description>
<parameter name="out">
<type class="javax.baja.xml.XWriter"/>
<description>
XWriter stream to write to
</description>
</parameter>
<parameter name="indent">
<type class="int"/>
<description>
starting indent
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.xml.XElem.write(javax.baja.xml.XWriter, int, boolean) -->
<method name="write"  public="true">
<description>
Write an XML start tag, with optional self closing.
</description>
<tag name="@since">Niagara 4.6</tag>
<parameter name="out">
<type class="javax.baja.xml.XWriter"/>
<description>
XWriter stream to write to
</description>
</parameter>
<parameter name="indent">
<type class="int"/>
<description>
starting indent
</description>
</parameter>
<parameter name="close">
<type class="boolean"/>
<description>
If true, then write the self closing &lt;code&gt;&amp;#x22;/&amp;gt;&amp;#x22;&lt;/code&gt; at the&#xa;              end of the tag.
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.xml.XElem.line() -->
<method name="line"  public="true" final="true">
<description>
Get the line number of this element in the&#xa; document or 0 if unknown.
</description>
<return>
<type class="int"/>
<description>
line number of this element, if known, or 0
</description>
</return>
</method>

<!-- javax.baja.xml.XElem.copy() -->
<method name="copy"  public="true" final="true">
<description>
Make a new cloned copy of this XElem instance.
</description>
<return>
<type class="javax.baja.xml.XElem"/>
<description>
shallow copy of this
</description>
</return>
</method>

<!-- javax.baja.xml.XElem.deepcopy() -->
<method name="deepcopy"  public="true" final="true">
<description>
Make a new cloned copy of this XElem instance.  Makes a&#xa; cloned copies of all descendents of type XElem or XText.
</description>
<return>
<type class="javax.baja.xml.XElem"/>
<description>
deep ccopy of this.
</description>
</return>
</method>

<!-- javax.baja.xml.XElem.toString() -->
<method name="toString"  public="true">
<description>
To string returns the start tag.
</description>
<return>
<type class="java.lang.String"/>
<description>
the start tag of this element
</description>
</return>
</method>

</class>
</bajadoc>
