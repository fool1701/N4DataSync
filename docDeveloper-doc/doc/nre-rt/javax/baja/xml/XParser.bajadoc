<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="nre" runtimeProfile="rt" qualifiedName="javax.baja.xml.XParser" name="XParser" packageName="javax.baja.xml" public="true">
<description>
XParser is a very simple lightweight XML parser.  It&#xa; may be used as a pull parser by iterating through the&#xa; element and text sections of an XML stream or it may&#xa; be used to read an entire XML tree into memory as XElems.&#xa; &lt;p&gt;&#xa; XParser works in conjunction with XWriter to support plain&#xa; text or PKZIP documents.  This check happens automatically&#xa; by sniffing the first few bytes of the input stream.  If a&#xa; zip file is detected, the first zip entry is parsed.  Note&#xa; that when reading from a zip file, no guarantee is made where&#xa; the stream is positioned once the XML has been read.
</description>
<tag name="@author">Brian Frank on 21 Dec 01</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="java.lang.Object"/>
</extends>
<!-- javax.baja.xml.XParser(java.io.InputStream) -->
<constructor name="XParser" protected="true">
<parameter name="in">
<type class="java.io.InputStream"/>
<description>
input stream to parse
</description>
</parameter>
<throws>
<type class="java.io.IOException"/>
<description>
if in cannot be opened
</description>
</throws>
<description>
Private constructor.
</description>
</constructor>

<!-- javax.baja.xml.XParser(java.io.InputStream, boolean) -->
<constructor name="XParser" protected="true">
<parameter name="in">
<type class="java.io.InputStream"/>
<description>
input stream to parse
</description>
</parameter>
<parameter name="preserveWhitespace">
<type class="boolean"/>
<description>
if true, then significant whitespace (whitespace between&#xa;                           starting and ending tags) is not discarded by the parser
</description>
</parameter>
<throws>
<type class="java.io.IOException"/>
<description>
if in cannot be opened
</description>
</throws>
<description>
Private constructor
</description>
</constructor>

<!-- javax.baja.xml.XParser.make(java.io.File) -->
<method name="make"  public="true" static="true">
<description>
Make an XParser to parse the specified file.
</description>
<parameter name="file">
<type class="java.io.File"/>
<description>
File to parse
</description>
</parameter>
<return>
<type class="javax.baja.xml.XParser"/>
<description>
parser for file
</description>
</return>
<throws>
<type class="java.lang.Exception"/>
<description>
if parser cannot be created
</description>
</throws>
</method>

<!-- javax.baja.xml.XParser.make(java.lang.String) -->
<method name="make"  public="true" static="true">
<description>
Make an XParser to parse an ASCII string.
</description>
<parameter name="xml">
<type class="java.lang.String"/>
<description>
text to parse
</description>
</parameter>
<return>
<type class="javax.baja.xml.XParser"/>
<description>
parser for text
</description>
</return>
<throws>
<type class="java.lang.Exception"/>
<description>
if parser cannot be created
</description>
</throws>
</method>

<!-- javax.baja.xml.XParser.make(java.io.InputStream) -->
<method name="make"  public="true" static="true">
<description>
Make an XParser to parse XML from the specified input stream.
</description>
<parameter name="in">
<type class="java.io.InputStream"/>
<description>
input stream to parse
</description>
</parameter>
<return>
<type class="javax.baja.xml.XParser"/>
<description>
parser for input stream
</description>
</return>
<throws>
<type class="java.lang.Exception"/>
<description>
if parser cannot be created
</description>
</throws>
</method>

<!-- javax.baja.xml.XParser.make(java.io.File, boolean) -->
<method name="make"  public="true" static="true">
<description>
Make an XParser to parse the specified file.
</description>
<parameter name="file">
<type class="java.io.File"/>
<description>
File to parse
</description>
</parameter>
<parameter name="preserveWhitespace">
<type class="boolean"/>
<description>
if true, then significant whitespace (whitespace between&#xa;                           starting and ending tags) is not discarded by the parser
</description>
</parameter>
<return>
<type class="javax.baja.xml.XParser"/>
<description>
parser for text
</description>
</return>
<throws>
<type class="java.lang.Exception"/>
<description>
if parser cannot be created
</description>
</throws>
</method>

<!-- javax.baja.xml.XParser.make(java.lang.String, boolean) -->
<method name="make"  public="true" static="true">
<description>
Make an XParser to parse an ASCII string.
</description>
<parameter name="xml">
<type class="java.lang.String"/>
<description>
text to parse
</description>
</parameter>
<parameter name="preserveWhitespace">
<type class="boolean"/>
<description>
if true, then significant whitespace (whitespace between&#xa;                           starting and ending tags) is not discarded by the parser
</description>
</parameter>
<return>
<type class="javax.baja.xml.XParser"/>
<description>
parser for text
</description>
</return>
<throws>
<type class="java.lang.Exception"/>
<description>
if parser cannot be created
</description>
</throws>
</method>

<!-- javax.baja.xml.XParser.make(java.io.InputStream, boolean) -->
<method name="make"  public="true" static="true">
<description>
Make an XParser to parse XML from the specified input stream
</description>
<parameter name="in">
<type class="java.io.InputStream"/>
<description>
input stream to parse
</description>
</parameter>
<parameter name="preserveWhitespace">
<type class="boolean"/>
<description>
if true, then significant whitespace (whitespace between&#xa;                           starting and ending tags) is not discarded by the parser
</description>
</parameter>
<return>
<type class="javax.baja.xml.XParser"/>
<description>
parser for input stream
</description>
</return>
<throws>
<type class="java.lang.Exception"/>
<description>
if parser cannot be created
</description>
</throws>
</method>

<!-- javax.baja.xml.XParser.getEncoding() -->
<method name="getEncoding"  public="true">
<description>
Get the character encoding of the underlying input stream.
</description>
<return>
<type class="java.lang.String"/>
<description>
character encoding of underlying input stream
</description>
</return>
<throws>
<type class="java.io.IOException"/>
<description>
if encoding detection fails
</description>
</throws>
</method>

<!-- javax.baja.xml.XParser.isZipped() -->
<method name="isZipped"  public="true">
<description>
Return if the stream was zipped.
</description>
<return>
<type class="boolean"/>
<description>
true if the underlying input stream is zipped
</description>
</return>
<throws>
<type class="java.io.IOException"/>
<description>
if zipped detection fails
</description>
</throws>
</method>

<!-- javax.baja.xml.XParser.parse() -->
<method name="parse"  public="true" final="true">
<description>
Convenience for &lt;code&gt;parse(true)&lt;/code&gt;.
</description>
<return>
<type class="javax.baja.xml.XElem"/>
<description>
XElem of the first element in the document
</description>
</return>
<throws>
<type class="java.lang.Exception"/>
<description>
if parsing fails
</description>
</throws>
</method>

<!-- javax.baja.xml.XParser.parse(boolean) -->
<method name="parse"  public="true" final="true">
<description>
Parse the entire next element into memory as a tree&#xa; of XElems and optionally close the underlying input&#xa; stream.
</description>
<parameter name="close">
<type class="boolean"/>
<description>
whether to close the input stream after parsing
</description>
</parameter>
<return>
<type class="javax.baja.xml.XElem"/>
<description>
XElem of the first element in the document
</description>
</return>
<throws>
<type class="java.lang.Exception"/>
<description>
if parsing fails
</description>
</throws>
</method>

<!-- javax.baja.xml.XParser.parseCurrent() -->
<method name="parseCurrent"  public="true" final="true">
<description>
Convenience for &lt;code&gt;parseCurrent(false)&lt;/code&gt;.
</description>
<return>
<type class="javax.baja.xml.XElem"/>
<description>
XElem of the current element in the document
</description>
</return>
<throws>
<type class="java.lang.Exception"/>
<description>
if parsing fails
</description>
</throws>
</method>

<!-- javax.baja.xml.XParser.parseCurrent(boolean) -->
<method name="parseCurrent"  public="true">
<description>
Parse the entire current element into memory as a tree&#xa; of XElems and optionally close the underlying input&#xa; stream.
</description>
<parameter name="close">
<type class="boolean"/>
<description>
whether to close the input stream after parsing
</description>
</parameter>
<return>
<type class="javax.baja.xml.XElem"/>
<description>
XElem of the current element in the document
</description>
</return>
<throws>
<type class="java.lang.Exception"/>
<description>
if parsing fails
</description>
</throws>
</method>

<!-- javax.baja.xml.XParser.next() -->
<method name="next"  public="true" final="true">
<description>
Advance the parser to the next node and return the node type.&#xa; Return the current node type: ELEM_START, ELEM_END, or TEXT.&#xa; If no more data to parse then return EOF.
</description>
<return>
<type class="int"/>
<description>
type of the current node
</description>
</return>
<throws>
<type class="java.lang.Exception"/>
<description>
if parsing fails
</description>
</throws>
</method>

<!-- javax.baja.xml.XParser.skip() -->
<method name="skip"  public="true">
<description>
Convenience for &lt;code&gt;skip(depth())&lt;/code&gt;.
</description>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
<description>
if parsing fails
</description>
</throws>
</method>

<!-- javax.baja.xml.XParser.skip(int) -->
<method name="skip"  public="true">
<description>
Skip parses all the content until reaching the end tag&#xa; of the specified depth.  When this method returns, the&#xa; next call to &lt;code&gt;next()&lt;/code&gt; will return the element&#xa; or text immediately following the end tag.
</description>
<parameter name="toDepth">
<type class="int"/>
<description>
depth of elements to skip to
</description>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
<description>
if parsing fails
</description>
</throws>
</method>

<!-- javax.baja.xml.XParser.type() -->
<method name="type"  public="true" final="true">
<description>
Get the current node type constant which is always the&#xa; result of the last call to next().  This constant may be&#xa; ELEM_START, ELEM_END, TEXT, or EOF.
</description>
<return>
<type class="int"/>
<description>
current node type
</description>
</return>
</method>

<!-- javax.baja.xml.XParser.depth() -->
<method name="depth"  public="true" final="true">
<description>
Get the depth of the current element with the document&#xa; root being a depth of one.  A depth of 0 indicates&#xa; a position before or after the root element.
</description>
<return>
<type class="int"/>
<description>
current node depth
</description>
</return>
</method>

<!-- javax.baja.xml.XParser.elem() -->
<method name="elem"  public="true" final="true">
<description>
Get the current element if &lt;code&gt;type()&lt;/code&gt; is ELEM_START or&#xa; ELEM_END.  If &lt;code&gt;type()&lt;/code&gt; is TEXT then this is the parent&#xa; element of the current character data.  After ELEM_END this XElem&#xa; instance is no longer valid and will be reused for further&#xa; processing.  If depth is zero return null.
</description>
<return>
<type class="javax.baja.xml.XElem"/>
<description>
the current element
</description>
</return>
</method>

<!-- javax.baja.xml.XParser.elem(int) -->
<method name="elem"  public="true" final="true">
<description>
Get the at the current depth.  Depth must be between 0 and&#xa; &lt;code&gt;depth()&lt;/code&gt; inclusively.  Calling &lt;code&gt;elem(0)&lt;/code&gt;&#xa; will return the root element and &lt;code&gt;elem(depth()-1)&lt;/code&gt;&#xa; returns the current element.  If depth is invalid, return null.
</description>
<parameter name="depth">
<type class="int"/>
<description>
depth
</description>
</parameter>
<return>
<type class="javax.baja.xml.XElem"/>
<description>
the element at depth
</description>
</return>
</method>

<!-- javax.baja.xml.XParser.text() -->
<method name="text"  public="true" final="true">
<description>
If the current type is TEXT return the XText instance used to&#xa; store the character data.  After a call to &lt;code&gt;next()&lt;/code&gt;&#xa; this XText instance is no longer valid and will be reused for&#xa; further processing.  If the current type is not TEXT then&#xa; return null.
</description>
<return>
<type class="javax.baja.xml.XText"/>
<description>
current element as Text
</description>
</return>
</method>

<!-- javax.baja.xml.XParser.line() -->
<method name="line"  public="true" final="true">
<description>
Get current line number.
</description>
<return>
<type class="int"/>
<description>
current line number, if available
</description>
</return>
</method>

<!-- javax.baja.xml.XParser.column() -->
<method name="column"  public="true" final="true">
<description>
Get current column number.
</description>
<return>
<type class="int"/>
<description>
current column number, if available
</description>
</return>
</method>

<!-- javax.baja.xml.XParser.emptyElem() -->
<method name="emptyElem"  public="true" final="true">
<description>
Get whether the last element was empty
</description>
<return>
<type class="boolean"/>
<description>
true if the last element was empty, false otherwise
</description>
</return>
</method>

<!-- javax.baja.xml.XParser.close() -->
<method name="close"  public="true" final="true">
<description>
Close the underlying input stream.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.xml.XParser.EOF -->
<field name="EOF"  public="true" static="true" final="true">
<type class="int"/>
<description>
Indicates end of file  (or input stream)
</description>
</field>

<!-- javax.baja.xml.XParser.ELEM_START -->
<field name="ELEM_START"  public="true" static="true" final="true">
<type class="int"/>
<description>
Indicates parser currently on element start.
</description>
</field>

<!-- javax.baja.xml.XParser.ELEM_END -->
<field name="ELEM_END"  public="true" static="true" final="true">
<type class="int"/>
<description>
Indicates parser currently on element end.
</description>
</field>

<!-- javax.baja.xml.XParser.TEXT -->
<field name="TEXT"  public="true" static="true" final="true">
<type class="int"/>
<description>
Indicates parser currently at character data.
</description>
</field>

</class>
</bajadoc>
