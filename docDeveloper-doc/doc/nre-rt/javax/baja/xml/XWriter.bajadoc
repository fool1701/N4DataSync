<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="nre" runtimeProfile="rt" qualifiedName="javax.baja.xml.XWriter" name="XWriter" packageName="javax.baja.xml" public="true">
<description>
XWriter is a specialized Writer that provides&#xa; support for generating an XML output stream.
</description>
<tag name="@author">Brian Frank on 29 Sept 00</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="java.io.Writer"/>
</extends>
<!-- javax.baja.xml.XWriter(java.io.File) -->
<constructor name="XWriter" public="true">
<parameter name="file">
<type class="java.io.File"/>
<description>
file to write to
</description>
</parameter>
<throws>
<type class="java.io.IOException"/>
<description>
if opening file fails
</description>
</throws>
<description>
Construct writer for specified file.
</description>
</constructor>

<!-- javax.baja.xml.XWriter(java.io.OutputStream) -->
<constructor name="XWriter" public="true">
<parameter name="out">
<type class="java.io.OutputStream"/>
<description>
output stream to write to
</description>
</parameter>
<throws>
<type class="java.io.IOException"/>
<description>
if &lt;code&gt;out&lt;/code&gt; is not valid
</description>
</throws>
<description>
Construct writer for specified output stream.
</description>
</constructor>

<!-- javax.baja.xml.XWriter() -->
<constructor name="XWriter" public="true">
<description>
Construct writer for lazily initialized output when&#xa; using in-memory (or non-file) sink that doesn&#x27;t require&#xa; sync() and is guaranteed not to throw a checked exception.&#xa;&#xa; You must call setOutputStream(OutputStream) prior&#xa; to writing anything via public API.
</description>
<tag name="@since">Niagara 4.9</tag>
</constructor>

<!-- javax.baja.xml.XWriter.setOutputStream(java.io.OutputStream) -->
<method name="setOutputStream"  public="true">
<description>
Allow for lazy initialization of the output stream&#xa; via an API that doesn&#x27;t include a checked exception&#xa; in the method signature. This should only be used&#xa; for in-memory (more specifically non-FileOutputStream)&#xa; based output streams. Can only be called once per&#xa; instance, and only for instances created via the default&#xa; constructor.
</description>
<tag name="@since">Niagara 4.9</tag>
<parameter name="outputStream">
<type class="java.io.OutputStream"/>
<description>
OutputStream that is not an instance of FileOutputStream
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.xml.XWriter.w(java.lang.Object) -->
<method name="w"  public="true">
<description>
Write the specified Object and return this.
</description>
<parameter name="x">
<type class="java.lang.Object"/>
<description>
object to write
</description>
</parameter>
<return>
<type class="javax.baja.xml.XWriter"/>
<description>
this
</description>
</return>
</method>

<!-- javax.baja.xml.XWriter.w(boolean) -->
<method name="w"  public="true" final="true">
<description>
Write the specified boolean and return this.
</description>
<parameter name="x">
<type class="boolean"/>
<description>
boolean to write
</description>
</parameter>
<return>
<type class="javax.baja.xml.XWriter"/>
<description>
this
</description>
</return>
</method>

<!-- javax.baja.xml.XWriter.w(char) -->
<method name="w"  public="true" final="true">
<description>
Write the specified char and return this.
</description>
<parameter name="x">
<type class="char"/>
<description>
char to write
</description>
</parameter>
<return>
<type class="javax.baja.xml.XWriter"/>
<description>
this
</description>
</return>
</method>

<!-- javax.baja.xml.XWriter.w(int) -->
<method name="w"  public="true" final="true">
<description>
Write the specified int and return this.
</description>
<parameter name="x">
<type class="int"/>
<description>
int to write
</description>
</parameter>
<return>
<type class="javax.baja.xml.XWriter"/>
<description>
this
</description>
</return>
</method>

<!-- javax.baja.xml.XWriter.w(long) -->
<method name="w"  public="true" final="true">
<description>
Write the specified long and return this.
</description>
<parameter name="x">
<type class="long"/>
<description>
long to write
</description>
</parameter>
<return>
<type class="javax.baja.xml.XWriter"/>
<description>
this
</description>
</return>
</method>

<!-- javax.baja.xml.XWriter.w(float) -->
<method name="w"  public="true" final="true">
<description>
Write the specified float and return this.
</description>
<parameter name="x">
<type class="float"/>
<description>
float to write
</description>
</parameter>
<return>
<type class="javax.baja.xml.XWriter"/>
<description>
this
</description>
</return>
</method>

<!-- javax.baja.xml.XWriter.w(double) -->
<method name="w"  public="true" final="true">
<description>
Write the specified double and return this.
</description>
<parameter name="x">
<type class="double"/>
<description>
double to write
</description>
</parameter>
<return>
<type class="javax.baja.xml.XWriter"/>
<description>
this
</description>
</return>
</method>

<!-- javax.baja.xml.XWriter.nl() -->
<method name="nl"  public="true" final="true">
<description>
Write a newline character and return this.
</description>
<return>
<type class="javax.baja.xml.XWriter"/>
<description>
this
</description>
</return>
</method>

<!-- javax.baja.xml.XWriter.indent(int) -->
<method name="indent"  public="true" final="true">
<description>
Write the specified number of spaces.
</description>
<parameter name="indent">
<type class="int"/>
<description>
number of spaces to indent
</description>
</parameter>
<return>
<type class="javax.baja.xml.XWriter"/>
<description>
this
</description>
</return>
</method>

<!-- javax.baja.xml.XWriter.attr(java.lang.String, java.lang.String) -->
<method name="attr"  public="true" final="true">
<description>
Write an attribute pair &lt;code&gt;name=&amp;#x22;value&amp;#x22;&lt;/code&gt;&#xa; where the value is written using safe().
</description>
<parameter name="name">
<type class="java.lang.String"/>
<description>
name of attribute
</description>
</parameter>
<parameter name="value">
<type class="java.lang.String"/>
<description>
value of attribute
</description>
</parameter>
<return>
<type class="javax.baja.xml.XWriter"/>
<description>
this
</description>
</return>
</method>

<!-- javax.baja.xml.XWriter.prolog() -->
<method name="prolog"  public="true">
<description>
This write the standard prolog&#xa; &lt;code&gt;&amp;lt;?xml version=&amp;#x22;1.0&amp;#x22; encoding=&amp;#x22;UTF-8&amp;#x22;?&amp;gt;&lt;/code&gt;
</description>
<return>
<type class="javax.baja.xml.XWriter"/>
<description>
this
</description>
</return>
</method>

<!-- javax.baja.xml.XWriter.safe(java.lang.String, boolean) -->
<method name="safe"  public="true" final="true">
<description>
Convenience for &lt;code&gt;XWriter.safe(this, s, escapeWhitespace)&lt;/code&gt;.
</description>
<parameter name="s">
<type class="java.lang.String"/>
<description>
String to write
</description>
</parameter>
<parameter name="escapeWhitespace">
<type class="boolean"/>
<description>
whether to escape whitespace when writing
</description>
</parameter>
<return>
<type class="javax.baja.xml.XWriter"/>
<description>
this
</description>
</return>
</method>

<!-- javax.baja.xml.XWriter.safe(java.lang.String) -->
<method name="safe"  public="true" final="true">
<description>
Convenience for &lt;code&gt;XWriter.safe(this, s, true)&lt;/code&gt;.
</description>
<parameter name="s">
<type class="java.lang.String"/>
<description>
String to write
</description>
</parameter>
<return>
<type class="javax.baja.xml.XWriter"/>
<description>
this
</description>
</return>
</method>

<!-- javax.baja.xml.XWriter.safe(int, boolean) -->
<method name="safe"  public="true" final="true">
<description>
Convenience for &lt;code&gt;XWriter.safe(this, c, escapeWhitespace)&lt;/code&gt;.
</description>
<parameter name="c">
<type class="int"/>
<description>
character to write
</description>
</parameter>
<parameter name="escapeWhitespace">
<type class="boolean"/>
<description>
whether to escape whitespace when writing
</description>
</parameter>
<return>
<type class="javax.baja.xml.XWriter"/>
<description>
this
</description>
</return>
</method>

<!-- javax.baja.xml.XWriter.safe(java.io.Writer, java.lang.String, boolean) -->
<method name="safe"  public="true" static="true">
<description>
This writes each character in the string to the output stream&#xa; using the &lt;code&gt;safe(Writer, int, boolean)&lt;/code&gt; method.
</description>
<parameter name="out">
<type class="java.io.Writer"/>
<description>
Writer to write to
</description>
</parameter>
<parameter name="s">
<type class="java.lang.String"/>
<description>
String to write
</description>
</parameter>
<parameter name="escapeWhitespace">
<type class="boolean"/>
<description>
whether to escape whitespace when writing
</description>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.io.IOException"/>
<description>
if writing fails
</description>
</throws>
</method>

<!-- javax.baja.xml.XWriter.safe(java.io.Writer, int, boolean) -->
<method name="safe"  public="true" static="true">
<description>
Write a &#x22;safe&#x22; character.  This method will escape unsafe&#xa; characters common in XML and HTML markup.&#xa; &lt;ul&gt;&#xa; &lt;li&gt;&#x27;&amp;lt;&#x27; -&amp;gt; &amp;amp;lt;&lt;/li&gt;&#xa; &lt;li&gt;&#x27;&amp;gt;&#x27; -&amp;gt; &amp;amp;gt;&lt;/li&gt;&#xa; &lt;li&gt;&#x27;&amp;amp;&#x27; -&amp;gt; &amp;amp;amp;&lt;/li&gt;&#xa; &lt;li&gt;&#x27;&amp;#39;&#x27; -&amp;gt; &amp;amp;#x27;&lt;/li&gt;&#xa; &lt;li&gt;&#x27;&amp;quot;&#x27; -&amp;gt; &amp;amp;#x22;&lt;/li&gt;&#xa; &lt;li&gt;Below 0x20 -&amp;gt; &amp;amp;#x{hex};&lt;/li&gt;&#xa; &lt;li&gt;Above 0x7E -&amp;gt; &amp;amp;#x{hex};&lt;/li&gt;&#xa; &lt;/ul&gt;
</description>
<parameter name="out">
<type class="java.io.Writer"/>
<description>
Writer to write to
</description>
</parameter>
<parameter name="c">
<type class="int"/>
<description>
character to write
</description>
</parameter>
<parameter name="escapeWhitespace">
<type class="boolean"/>
<description>
whether to escape whitespace when writing
</description>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.io.IOException"/>
<description>
if writing fails
</description>
</throws>
</method>

<!-- javax.baja.xml.XWriter.safeToString(java.lang.String, boolean) -->
<method name="safeToString"  public="true" static="true">
<description>
Create a &#x22;safe&#x22; version of the specified string.
</description>
<parameter name="s">
<type class="java.lang.String"/>
<description>
String to write
</description>
</parameter>
<parameter name="escapeWhitespace">
<type class="boolean"/>
<description>
whether to escape whitespace when writing
</description>
</parameter>
<return>
<type class="java.lang.String"/>
<description>
safe version of &lt;code&gt;s&lt;/code&gt;
</description>
</return>
</method>

<!-- javax.baja.xml.XWriter.isZipped() -->
<method name="isZipped"  public="true">
<description>
Return if this XWriter is being used to generate a PKZIP file&#xa; containing the XML document. See &lt;code&gt;setZipped()&lt;/code&gt;
</description>
<return>
<type class="boolean"/>
<description>
true if this writer is writing a zip file
</description>
</return>
</method>

<!-- javax.baja.xml.XWriter.setZipped(boolean) -->
<method name="setZipped"  public="true">
<description>
If set to true, then XWriter generates a compressed PKZIP&#xa; file with one entry called &#x22;file.xml&#x22;.  This method cannot be&#xa; called once bytes have been written.  Zipped XWriters should&#xa; only be used with stand alone files, it should not be used in&#xa; streams mixed with other data.  This feature is used in conjunction&#xa; with XParser, which automatically detects plain text XML versus&#xa; PKZIP documents.
</description>
<parameter name="zipped">
<type class="boolean"/>
<description>
true if this document should be zipped
</description>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.io.IOException"/>
<description>
never?
</description>
</throws>
</method>

<!-- javax.baja.xml.XWriter.write(int) -->
<method name="write"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="c">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.xml.XWriter.write(char[]) -->
<method name="write"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="buf">
<type class="char" dimension="1"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.xml.XWriter.write(char[], int, int) -->
<method name="write"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="buf">
<type class="char" dimension="1"/>
</parameter>
<parameter name="off">
<type class="int"/>
</parameter>
<parameter name="len">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.xml.XWriter.write(java.lang.String) -->
<method name="write"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="str">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.xml.XWriter.write(java.lang.String, int, int) -->
<method name="write"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="str">
<type class="java.lang.String"/>
</parameter>
<parameter name="off">
<type class="int"/>
</parameter>
<parameter name="len">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.xml.XWriter.flush() -->
<method name="flush"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.xml.XWriter.close() -->
<method name="close"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="void"/>
</return>
</method>

</class>
</bajadoc>
