<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="nre" runtimeProfile="rt" qualifiedName="javax.baja.xml.XText" name="XText" packageName="javax.baja.xml" public="true" final="true">
<description>
XText is the XContent element child used to store character&#xa; data.  XText is used to model both CDATA sections and normal&#xa; character data.
</description>
<tag name="@author">Brian Frank on 6 Apr 02</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="javax.baja.xml.XContent"/>
</extends>
<!-- javax.baja.xml.XText(char[], int) -->
<constructor name="XText" public="true">
<parameter name="data">
<type class="char" dimension="1"/>
<description>
text
</description>
</parameter>
<parameter name="length">
<type class="int"/>
<description>
length of data to include
</description>
</parameter>
<description>
Create text with specified char buffer and length.
</description>
</constructor>

<!-- javax.baja.xml.XText(char[]) -->
<constructor name="XText" public="true">
<parameter name="data">
<type class="char" dimension="1"/>
<description>
text
</description>
</parameter>
<description>
Create text with specified char buffer using&#xa; length of data.length.
</description>
</constructor>

<!-- javax.baja.xml.XText(java.lang.String) -->
<constructor name="XText" public="true">
<parameter name="string">
<type class="java.lang.String"/>
<description>
text
</description>
</parameter>
<description>
Create text with specified String.
</description>
</constructor>

<!-- javax.baja.xml.XText() -->
<constructor name="XText" public="true">
<description>
Create empty text.
</description>
</constructor>

<!-- javax.baja.xml.XText.isCDATA() -->
<method name="isCDATA"  public="true" final="true">
<description>
Return true if this XText models a CDATA section of data.
</description>
<return>
<type class="boolean"/>
<description>
true if this is CDATA, false otherwise
</description>
</return>
</method>

<!-- javax.baja.xml.XText.setCDATA(boolean) -->
<method name="setCDATA"  public="true" final="true">
<description>
Set the CDATA flag.
</description>
<parameter name="cdata">
<type class="boolean"/>
<description>
true if this XText is a CDATA section
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.xml.XText.string() -->
<method name="string"  public="true" final="true">
<description>
Get the character data as a string.
</description>
<return>
<type class="java.lang.String"/>
<description>
this as a string
</description>
</return>
</method>

<!-- javax.baja.xml.XText.length() -->
<method name="length"  public="true" final="true">
<description>
Get the length of the character data.
</description>
<return>
<type class="int"/>
<description>
length of data
</description>
</return>
</method>

<!-- javax.baja.xml.XText.data() -->
<method name="data"  public="true" final="true">
<description>
Get a direct reference to the character data buffer.&#xa; Only the range of characters from 0 to length()-1 are&#xa; valid.  Do not modify the buffer directly, rather use&#xa; the dedicated modification method.
</description>
<return>
<type class="char" dimension="1"/>
<description>
the data for this XText
</description>
</return>
</method>

<!-- javax.baja.xml.XText.append(int) -->
<method name="append"  public="true" final="true">
<description>
Append the specified character to the end of&#xa; the character data.
</description>
<parameter name="c">
<type class="int"/>
<description>
character to append
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.xml.XText.append(java.lang.String) -->
<method name="append"  public="true" final="true">
<description>
Append the specified string to the end of&#xa; the character data.
</description>
<parameter name="s">
<type class="java.lang.String"/>
<description>
string to append
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.xml.XText.append(char[], int, int) -->
<method name="append"  public="true" final="true">
<description>
Append the specified string to the end of&#xa; the character data.
</description>
<parameter name="buf">
<type class="char" dimension="1"/>
<description>
data to append
</description>
</parameter>
<parameter name="off">
<type class="int"/>
<description>
offset in &lt;code&gt;buf&lt;/code&gt; to start reading from
</description>
</parameter>
<parameter name="len">
<type class="int"/>
<description>
length of data to append
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.xml.XText.set(int, int) -->
<method name="set"  public="true" final="true">
<description>
Set the character at the specified index.
</description>
<parameter name="index">
<type class="int"/>
<description>
index to set
</description>
</parameter>
<parameter name="c">
<type class="int"/>
<description>
character to set
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.xml.XText.setLength(int) -->
<method name="setLength"  public="true" final="true">
<description>
Set the length of valid characters in the buffer.
</description>
<parameter name="length">
<type class="int"/>
<description>
length
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.xml.XText.copy() -->
<method name="copy"  public="true" final="true">
<description>
Make a new cloned copy of this XText instance.
</description>
<return>
<type class="javax.baja.xml.XText"/>
<description>
a copy of this
</description>
</return>
</method>

<!-- javax.baja.xml.XText.write(javax.baja.xml.XWriter) -->
<method name="write"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Write to the specified XWriter stream.
</description>
<parameter name="out">
<type class="javax.baja.xml.XWriter"/>
<description>
XWriter to write to
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.xml.XText.toString() -->
<method name="toString"  public="true">
<description>
Return &lt;code&gt;string()&lt;/code&gt;.
</description>
<return>
<type class="java.lang.String"/>
<description>
this as string
</description>
</return>
</method>

</class>
</bajadoc>
