<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="nre" runtimeProfile="rt" qualifiedName="javax.baja.nre.util.TextUtil" name="TextUtil" packageName="javax.baja.nre.util" public="true">
<description>
Text utilities.
</description>
<tag name="@author">Brian Frank</tag>
<tag name="@creation">17 Mar 00</tag>
<tag name="@version">$Revision: 51$ $Date: 8/13/09 11:00:33 AM EDT$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="java.lang.Object"/>
</extends>
<!-- javax.baja.nre.util.TextUtil() -->
<constructor name="TextUtil" public="true">
<description/>
</constructor>

<!-- javax.baja.nre.util.TextUtil.stringToBytes(java.lang.String) -->
<method name="stringToBytes"  public="true" static="true">
<description>
Convert the passed in String to a UTF-8 encoded byte array.
</description>
<parameter name="string">
<type class="java.lang.String"/>
<description>
the string to be converted
</description>
</parameter>
<return>
<type class="byte" dimension="1"/>
<description>
a byte array representation
</description>
</return>
</method>

<!-- javax.baja.nre.util.TextUtil.byteToString(int) -->
<method name="byteToString"  public="true" static="true">
<description/>
<parameter name="b">
<type class="int"/>
</parameter>
<return>
<type class="java.lang.String"/>
<description>
byte to decimal string.
</description>
</return>
</method>

<!-- javax.baja.nre.util.TextUtil.bytesToHexString(byte[]) -->
<method name="bytesToHexString"  public="true" static="true">
<description/>
<parameter name="bs">
<type class="byte" dimension="1"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.nre.util.TextUtil.byteToHexString(int) -->
<method name="byteToHexString"  public="true" static="true">
<description/>
<parameter name="b">
<type class="int"/>
</parameter>
<return>
<type class="java.lang.String"/>
<description>
byte to two character hex string.
</description>
</return>
</method>

<!-- javax.baja.nre.util.TextUtil.byteToChar(int, char) -->
<method name="byteToChar"  public="true" static="true">
<description>
Translate the byte into an ASCII char if it&#xa; is printable.  If not return the given&#xa; unprintable char.
</description>
<parameter name="b">
<type class="int"/>
</parameter>
<parameter name="unprintable">
<type class="char"/>
</parameter>
<return>
<type class="char"/>
</return>
</method>

<!-- javax.baja.nre.util.TextUtil.intToHexString(int) -->
<method name="intToHexString"  public="true" static="true">
<description/>
<tag name="@since">Niagara 3.4</tag>
<parameter name="i">
<type class="int"/>
</parameter>
<return>
<type class="java.lang.String"/>
<description>
int to eight character hex string
</description>
</return>
</method>

<!-- javax.baja.nre.util.TextUtil.intToHexString(int, int) -->
<method name="intToHexString"  public="true" static="true">
<description/>
<tag name="@since">Niagara 3.4</tag>
<parameter name="i">
<type class="int"/>
</parameter>
<parameter name="len">
<type class="int"/>
</parameter>
<return>
<type class="java.lang.String"/>
<description>
int to hex string of given length.
</description>
</return>
</method>

<!-- javax.baja.nre.util.TextUtil.charToInt(char) -->
<method name="charToInt"  public="true" static="true">
<description>
Convert a character to a digit.  For example&#xa; the char &#x27;3&#x27; will return 3.
</description>
<parameter name="c">
<type class="char"/>
</parameter>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.nre.util.TextUtil.hexCharToInt(char) -->
<method name="hexCharToInt"  public="true" static="true">
<description>
Convert the given hex character to a digit.&#xa; For instance &lt;code&gt;&amp;#x27;0&amp;#x27; -&amp;gt; 0, &amp;#x27;A&amp;#x27; -&amp;gt; 10, &amp;#x27;f&amp;#x27; -&amp;gt; 15&lt;/code&gt;.
</description>
<parameter name="c">
<type class="char"/>
</parameter>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.nre.util.TextUtil.isHex(java.lang.String) -->
<method name="isHex"  public="true" static="true">
<description>
check if all the characters in a given string&#xa; are hexidecimal, i.e [0-9], [A-F]
</description>
<parameter name="str">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.nre.util.TextUtil.getSpaces(int) -->
<method name="getSpaces"  public="true" static="true">
<description>
Get a string which is a number of spaces.
</description>
<parameter name="num">
<type class="int"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.nre.util.TextUtil.pad(java.lang.String, int) -->
<method name="pad"  public="true" static="true">
<description>
Pad to the right.
</description>
<tag name="@see">#padRight(String, int)</tag>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<parameter name="width">
<type class="int"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.nre.util.TextUtil.padRight(java.lang.String, int) -->
<method name="padRight"  public="true" static="true">
<description>
Pad the given string with spaces to the right&#xa; so that it is the given width.  If s.length()&#xa; is greater than width, s is returned.
</description>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<parameter name="width">
<type class="int"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.nre.util.TextUtil.padLeft(java.lang.String, int) -->
<method name="padLeft"  public="true" static="true">
<description>
Pad the given string with spaces to the left&#xa; so that it is the given width.  If s.length()&#xa; is greater than width, s is returned.
</description>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<parameter name="width">
<type class="int"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.nre.util.TextUtil.truncate(java.lang.String, int) -->
<method name="truncate"  public="true" static="true">
<description>
Ensure that the given string is no more than &#x27;max&#x27; characters long.
</description>
<parameter name="str">
<type class="java.lang.String"/>
</parameter>
<parameter name="max">
<type class="int"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.nre.util.TextUtil.padZeros(java.lang.String, int) -->
<method name="padZeros"  public="true" static="true">
<description>
Pad the given string with zeros to the left&#xa; so that it is the given width.  If s.length()&#xa; is greater than width, s is returned.
</description>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<parameter name="width">
<type class="int"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.nre.util.TextUtil.getZeros(int) -->
<method name="getZeros"  public="true" static="true">
<description>
Get a string which is a number of zeros.
</description>
<tag name="@since">Niagara 3.4</tag>
<parameter name="num">
<type class="int"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.nre.util.TextUtil.toUpperCase(char) -->
<method name="toUpperCase"  public="true" static="true">
<description>
Do an ASCII only upper case conversion.  Case conversion &#xa; with Locale can result in unexpected side effects.
</description>
<parameter name="c">
<type class="char"/>
</parameter>
<return>
<type class="char"/>
</return>
</method>

<!-- javax.baja.nre.util.TextUtil.toLowerCase(char) -->
<method name="toLowerCase"  public="true" static="true">
<description>
Do an ASCII only lower case conversion.  Case conversion &#xa; with Locale can result in unexpected side effects.
</description>
<parameter name="c">
<type class="char"/>
</parameter>
<return>
<type class="char"/>
</return>
</method>

<!-- javax.baja.nre.util.TextUtil.toUpperCase(java.lang.String) -->
<method name="toUpperCase"  public="true" static="true">
<description>
Do an ASCII only upper case conversion.  Case conversion &#xa; with Locale can result in unexpected side effects.
</description>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.nre.util.TextUtil.toLowerCase(java.lang.String) -->
<method name="toLowerCase"  public="true" static="true">
<description>
Do an ASCII only lower case conversion.  Case conversion &#xa; with Locale can result in unexpected side effects.
</description>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.nre.util.TextUtil.capitalize(java.lang.String) -->
<method name="capitalize"  public="true" static="true">
<description>
Capitalize a string using java bean&#xa; conventions.  For instance &#x22;fooBar&#x22; becomes&#xa; &#x22;FooBar&#x22;, for use such as &#x22;getFooBar&#x22;.
</description>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.nre.util.TextUtil.decapitalize(java.lang.String) -->
<method name="decapitalize"  public="true" static="true">
<description>
Decapitalize a string using java bean&#xa; conventions.  For instance &#x22;FooBar&#x22; becomes&#xa; &#x22;fooBar&#x22;.
</description>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.nre.util.TextUtil.toFriendly(java.lang.String) -->
<method name="toFriendly"  public="true" static="true">
<description>
Translate a programatic name to a friendly&#xa; name.  This is done based on standard identifier&#xa; capitalization.  So the string &#x22;fooBar&#x22; would&#xa; be translated as &#x22;Foo Bar&#x22;.
</description>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.nre.util.TextUtil.fromFriendly(java.lang.String) -->
<method name="fromFriendly"  public="true" static="true">
<description>
Translate a friendly string back into its&#xa; programatic name.
</description>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.nre.util.TextUtil.getClassName(java.lang.Class&lt;?&gt;) -->
<method name="getClassName"  public="true" static="true">
<description>
Get the simple classname without the package name.
</description>
<parameter name="cls">
<parameterizedType class="java.lang.Class">
<args>
<wildcardType class="?">
</wildcardType>
</args>
</parameterizedType>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.nre.util.TextUtil.getClassName(java.lang.String) -->
<method name="getClassName"  public="true" static="true">
<description>
Get the simple classname without the package name,&#xa; and if an array type, then strip off the trailing&#xa; semicolon.
</description>
<parameter name="className">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.nre.util.TextUtil.getPackageName(java.lang.Class&lt;?&gt;) -->
<method name="getPackageName"  public="true" static="true">
<description>
Get the package name.
</description>
<parameter name="cls">
<parameterizedType class="java.lang.Class">
<args>
<wildcardType class="?">
</wildcardType>
</args>
</parameterizedType>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.nre.util.TextUtil.getPackageName(java.lang.String) -->
<method name="getPackageName"  public="true" static="true">
<description>
Get the package name from a fully qualified classname.
</description>
<parameter name="className">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="java.lang.String"/>
<description>
null if no package is specified.
</description>
</return>
</method>

<!-- javax.baja.nre.util.TextUtil.stripMarkup(java.lang.String) -->
<method name="stripMarkup"  public="true" static="true">
<description>
Strip all the XML or HTML markup out of a&#xa; piece of text and return the plain text.
</description>
<parameter name="text">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.nre.util.TextUtil.split(java.lang.String, char) -->
<method name="split"  public="true" static="true">
<description>
Parse a string into an array, using a given delimiter.
</description>
<parameter name="str">
<type class="java.lang.String"/>
</parameter>
<parameter name="delim">
<type class="char"/>
</parameter>
<return>
<type class="java.lang.String" dimension="1"/>
</return>
</method>

<!-- javax.baja.nre.util.TextUtil.splitAndTrim(java.lang.String, char) -->
<method name="splitAndTrim"  public="true" static="true">
<description>
Parse a string into an array, using a given delimiter, and&#xa; trim the whitespace from ends each string.
</description>
<parameter name="str">
<type class="java.lang.String"/>
</parameter>
<parameter name="delim">
<type class="char"/>
</parameter>
<return>
<type class="java.lang.String" dimension="1"/>
</return>
</method>

<!-- javax.baja.nre.util.TextUtil.ensureCapacity(java.lang.String[], int) -->
<method name="ensureCapacity"  public="true" static="true">
<description>
Ensure the given string has the specified capacity. If&#xa; so then return x, otherwise return a bigger String array&#xa; with the existing contents.
</description>
<parameter name="x">
<type class="java.lang.String" dimension="1"/>
</parameter>
<parameter name="len">
<type class="int"/>
</parameter>
<return>
<type class="java.lang.String" dimension="1"/>
</return>
</method>

<!-- javax.baja.nre.util.TextUtil.trim(java.lang.String[]) -->
<method name="trim"  public="true" static="true">
<description>
Trim all the Strings in the specified array.
</description>
<parameter name="list">
<type class="java.lang.String" dimension="1"/>
</parameter>
<return>
<type class="java.lang.String" dimension="1"/>
</return>
</method>

<!-- javax.baja.nre.util.TextUtil.join(java.lang.String[], char) -->
<method name="join"  public="true" static="true">
<description>
Join an array into a string, using a given delimiter.
</description>
<parameter name="v">
<type class="java.lang.String" dimension="1"/>
</parameter>
<parameter name="delim">
<type class="char"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.nre.util.TextUtil.trimLeft(java.lang.String) -->
<method name="trimLeft"  public="true" static="true">
<description>
Trim the whitespace from the beginning of a string.
</description>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.nre.util.TextUtil.trimRight(java.lang.String) -->
<method name="trimRight"  public="true" static="true">
<description>
Trim the whitespace from the end of a string.
</description>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.nre.util.TextUtil.replace(java.lang.String, java.lang.String, java.lang.String) -->
<method name="replace"  public="true" static="true">
<description>
Replace, in the given text, all occurrences of the old string&#xa; with the new string.
</description>
<parameter name="text">
<type class="java.lang.String"/>
</parameter>
<parameter name="oldStr">
<type class="java.lang.String"/>
</parameter>
<parameter name="newStr">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.nre.util.TextUtil.replace(java.lang.StringBuffer, java.lang.String, java.lang.String) -->
<method name="replace"  public="true" static="true">
<description>
Replace, in the given text buffer, all occurrences of the old string&#xa; with the new string.
</description>
<parameter name="text">
<type class="java.lang.StringBuffer"/>
</parameter>
<parameter name="oldStr">
<type class="java.lang.String"/>
</parameter>
<parameter name="newStr">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="java.lang.StringBuffer"/>
</return>
</method>

<!-- javax.baja.nre.util.TextUtil.indexOf(java.lang.StringBuffer, java.lang.String) -->
<method name="indexOf"  public="true" static="true">
<description>
Returns the index within the StringBuffer of the first occurrence &#xa; of the specified substring.
</description>
<parameter name="buffer">
<type class="java.lang.StringBuffer"/>
</parameter>
<parameter name="pattern">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="int"/>
<description>
if the string argument occurs as a substring within the &#xa; StringBuffer, then the index of the first character of the first &#xa; such substring is returned; If it does not occur as a substring, &#xa; -1 is returned.
</description>
</return>
</method>

<!-- javax.baja.nre.util.TextUtil.indexOf(java.lang.StringBuffer, java.lang.String, int) -->
<method name="indexOf"  public="true" static="true">
<description>
Returns the index within the StringBuffer of the first occurrence &#xa; of the specified substring, starting at the specified index. &#xa; &lt;p&gt;&#xa; There is no restriction on the value of fromIndex. If it is negative, &#xa; it has the same effect as if it were zero: this entire string may be searched. &#xa; If it is greater than the length of this string, it has the same effect as if &#xa; it were equal to the length of this string: -1 is returned.
</description>
<parameter name="buffer">
<type class="java.lang.StringBuffer"/>
</parameter>
<parameter name="pattern">
<type class="java.lang.String"/>
</parameter>
<parameter name="fromIndex">
<type class="int"/>
</parameter>
<return>
<type class="int"/>
<description>
if the string argument occurs as a substring within the &#xa; StringBuffer at a starting index no smaller than fromIndex, &#xa; then the index of the first character of the first &#xa; such substring is returned; If it does not occur as a substring&#xa; starting at fromIndex or beyond, -1 is returned.
</description>
</return>
</method>

<!-- javax.baja.nre.util.TextUtil.unquote(java.lang.String) -->
<method name="unquote"  public="true" static="true">
<description>
Remove double quotes surrounding the provided string. Returns the provided&#xa; string unmodified if it is not surrounded in double quotes.
</description>
<tag name="@since">Niagara 4.9</tag>
<parameter name="value">
<type class="java.lang.String"/>
<description>
the string to unquote
</description>
</parameter>
<return>
<type class="java.lang.String"/>
<description>
the unquoted string, or null if the provided string was null
</description>
</return>
</method>

</class>
</bajadoc>
