<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="nre" runtimeProfile="rt" qualifiedName="javax.baja.nre.util.ByteArrayUtil" name="ByteArrayUtil" packageName="javax.baja.nre.util" public="true">
<description>
Byte array utilities.
</description>
<tag name="@author">Brian Frank</tag>
<tag name="@creation">5 Feb 01</tag>
<tag name="@version">$Revision: 10$ $Date: 5/13/11 5:06:53 PM EDT$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="java.lang.Object"/>
</extends>
<!-- javax.baja.nre.util.ByteArrayUtil() -->
<constructor name="ByteArrayUtil" public="true">
<description/>
</constructor>

<!-- javax.baja.nre.util.ByteArrayUtil.clone(byte[]) -->
<method name="clone"  public="true" static="true">
<description>
Create a copy of the specified byte array.
</description>
<parameter name="a">
<type class="byte" dimension="1"/>
</parameter>
<return>
<type class="byte" dimension="1"/>
</return>
</method>

<!-- javax.baja.nre.util.ByteArrayUtil.copy(byte[], byte[]) -->
<method name="copy"  public="true" static="true">
<description>
Copy the contents of the source byte array&#xa; into the target byte array.
</description>
<parameter name="source">
<type class="byte" dimension="1"/>
</parameter>
<parameter name="target">
<type class="byte" dimension="1"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.nre.util.ByteArrayUtil.equals(byte[], byte[]) -->
<method name="equals"  public="true" static="true">
<description>
Return true if the two specified byte arrays&#xa; have equal lengths and contents.
</description>
<parameter name="a1">
<type class="byte" dimension="1"/>
</parameter>
<parameter name="a2">
<type class="byte" dimension="1"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.nre.util.ByteArrayUtil.memset(byte[], byte) -->
<method name="memset"  public="true" static="true">
<description/>
<parameter name="buf">
<type class="byte" dimension="1"/>
</parameter>
<parameter name="value">
<type class="byte"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.nre.util.ByteArrayUtil.readUnsignedByte(byte[], int) -->
<method name="readUnsignedByte"  public="true" static="true">
<description>
Read an unsigned byte from the byte&#xa; array at the given offset.
</description>
<parameter name="buf">
<type class="byte" dimension="1"/>
</parameter>
<parameter name="offset">
<type class="int"/>
</parameter>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.nre.util.ByteArrayUtil.readShort(byte[], int) -->
<method name="readShort"  public="true" static="true">
<description>
Read an signed short from the byte&#xa; array at the given offset using network&#xa; byte ordering.
</description>
<parameter name="buf">
<type class="byte" dimension="1"/>
</parameter>
<parameter name="offset">
<type class="int"/>
</parameter>
<return>
<type class="short"/>
</return>
</method>

<!-- javax.baja.nre.util.ByteArrayUtil.readUnsignedShort(byte[], int) -->
<method name="readUnsignedShort"  public="true" static="true">
<description>
Read an unsigned short from the byte&#xa; array at the given offset using network byte&#xa; ordering.
</description>
<parameter name="buf">
<type class="byte" dimension="1"/>
</parameter>
<parameter name="offset">
<type class="int"/>
</parameter>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.nre.util.ByteArrayUtil.readInt(byte[], int) -->
<method name="readInt"  public="true" static="true">
<description>
Read a 4 byte integer from the byte&#xa; array at the given offset using network&#xa; byte ordering.
</description>
<parameter name="buf">
<type class="byte" dimension="1"/>
</parameter>
<parameter name="offset">
<type class="int"/>
</parameter>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.nre.util.ByteArrayUtil.readLong(byte[], int) -->
<method name="readLong"  public="true" static="true">
<description>
Read a 8 byte long from the byte&#xa; array at the given offset using network&#xa; byte ordering.
</description>
<parameter name="buf">
<type class="byte" dimension="1"/>
</parameter>
<parameter name="offset">
<type class="int"/>
</parameter>
<return>
<type class="long"/>
</return>
</method>

<!-- javax.baja.nre.util.ByteArrayUtil.writeByte(byte[], int, int) -->
<method name="writeByte"  public="true" static="true">
<description>
Write the specified byte into the byte array at&#xa; the give offset.
</description>
<parameter name="buf">
<type class="byte" dimension="1"/>
</parameter>
<parameter name="offset">
<type class="int"/>
</parameter>
<parameter name="value">
<type class="int"/>
</parameter>
<return>
<type class="int"/>
<description>
offset + 1
</description>
</return>
</method>

<!-- javax.baja.nre.util.ByteArrayUtil.writeShort(byte[], int, int) -->
<method name="writeShort"  public="true" static="true">
<description>
Write the 2 bytes at specified offset with&#xa; the given short value.
</description>
<parameter name="buf">
<type class="byte" dimension="1"/>
</parameter>
<parameter name="offset">
<type class="int"/>
</parameter>
<parameter name="value">
<type class="int"/>
</parameter>
<return>
<type class="int"/>
<description>
offset + 2
</description>
</return>
</method>

<!-- javax.baja.nre.util.ByteArrayUtil.writeInt(byte[], int, int) -->
<method name="writeInt"  public="true" static="true">
<description>
Write the 4 bytes at the specified offset with&#xa; the given integer value.
</description>
<parameter name="buf">
<type class="byte" dimension="1"/>
</parameter>
<parameter name="offset">
<type class="int"/>
</parameter>
<parameter name="value">
<type class="int"/>
</parameter>
<return>
<type class="int"/>
<description>
offset + 4
</description>
</return>
</method>

<!-- javax.baja.nre.util.ByteArrayUtil.writeLong(byte[], int, long) -->
<method name="writeLong"  public="true" static="true">
<description>
Write the 8 bytes at the specified offset with&#xa; the given long value.
</description>
<parameter name="buf">
<type class="byte" dimension="1"/>
</parameter>
<parameter name="offset">
<type class="int"/>
</parameter>
<parameter name="value">
<type class="long"/>
</parameter>
<return>
<type class="int"/>
<description>
offset + 8
</description>
</return>
</method>

<!-- javax.baja.nre.util.ByteArrayUtil.toHexString(byte[]) -->
<method name="toHexString"  public="true" static="true">
<description>
Convenience for &lt;code&gt;toHexString(b, 0, b.length)&lt;/code&gt;.
</description>
<parameter name="b">
<type class="byte" dimension="1"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.nre.util.ByteArrayUtil.toHexString(byte[], java.lang.String) -->
<method name="toHexString"  public="true" static="true">
<description/>
<parameter name="b">
<type class="byte" dimension="1"/>
</parameter>
<parameter name="delimiter">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.nre.util.ByteArrayUtil.toHexString(byte[], int, int) -->
<method name="toHexString"  public="true" static="true">
<description>
Return the byte array as a hex string.
</description>
<parameter name="b">
<type class="byte" dimension="1"/>
</parameter>
<parameter name="off">
<type class="int"/>
</parameter>
<parameter name="len">
<type class="int"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.nre.util.ByteArrayUtil.toHexString(byte[], int, int, java.lang.String) -->
<method name="toHexString"  public="true" static="true">
<description/>
<parameter name="b">
<type class="byte" dimension="1"/>
</parameter>
<parameter name="off">
<type class="int"/>
</parameter>
<parameter name="len">
<type class="int"/>
</parameter>
<parameter name="delimiter">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.nre.util.ByteArrayUtil.hexStringToBytes(java.lang.String) -->
<method name="hexStringToBytes"  public="true" static="true">
<description>
Convert a hex string into the equivalent byte array.
</description>
<parameter name="hex">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="byte" dimension="1"/>
</return>
</method>

<!-- javax.baja.nre.util.ByteArrayUtil.hexDump(byte[]) -->
<method name="hexDump"  public="true" static="true">
<description>
Dump a byte array to standard out.
</description>
<parameter name="b">
<type class="byte" dimension="1"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.nre.util.ByteArrayUtil.hexDump(java.lang.String, byte[]) -->
<method name="hexDump"  public="true" static="true">
<description/>
<parameter name="linePrefix">
<type class="java.lang.String"/>
</parameter>
<parameter name="b">
<type class="byte" dimension="1"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.nre.util.ByteArrayUtil.hexDump(byte[], int, int) -->
<method name="hexDump"  public="true" static="true">
<description>
Dump a slice of a byte array to standard out.
</description>
<parameter name="b">
<type class="byte" dimension="1"/>
</parameter>
<parameter name="offset">
<type class="int"/>
</parameter>
<parameter name="length">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.nre.util.ByteArrayUtil.hexDump(java.lang.String, byte[], int, int) -->
<method name="hexDump"  public="true" static="true">
<description/>
<parameter name="linePrefix">
<type class="java.lang.String"/>
</parameter>
<parameter name="b">
<type class="byte" dimension="1"/>
</parameter>
<parameter name="offset">
<type class="int"/>
</parameter>
<parameter name="length">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.nre.util.ByteArrayUtil.hexDump(java.io.PrintWriter, byte[], int, int) -->
<method name="hexDump"  public="true" static="true">
<description>
Dump a byte array to the given print writer.
</description>
<parameter name="out">
<type class="java.io.PrintWriter"/>
</parameter>
<parameter name="b">
<type class="byte" dimension="1"/>
</parameter>
<parameter name="offset">
<type class="int"/>
</parameter>
<parameter name="length">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.nre.util.ByteArrayUtil.hexDump(java.lang.String, java.io.PrintWriter, byte[], int, int) -->
<method name="hexDump"  public="true" static="true">
<description/>
<parameter name="linePrefix">
<type class="java.lang.String"/>
</parameter>
<parameter name="out">
<type class="java.io.PrintWriter"/>
</parameter>
<parameter name="b">
<type class="byte" dimension="1"/>
</parameter>
<parameter name="offset">
<type class="int"/>
</parameter>
<parameter name="length">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

</class>
</bajadoc>
