<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="nre" runtimeProfile="rt" qualifiedName="javax.baja.nre.util.SortUtil" name="SortUtil" packageName="javax.baja.nre.util" public="true">
<description>
Sorting utilities.
</description>
<tag name="@author">Brian Frank</tag>
<tag name="@creation">4 Aug 01</tag>
<tag name="@version">$Revision: 9$ $Date: 4/23/08 11:54:57 AM EDT$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="java.lang.Object"/>
</extends>
<!-- javax.baja.nre.util.SortUtil() -->
<constructor name="SortUtil" public="true">
<description/>
</constructor>

<!-- javax.baja.nre.util.SortUtil.&lt;T&gt;sort(T[]) -->
<method name="sort"  public="true" static="true">
<typeParameters>
<typeVariable class="T">
</typeVariable>
</typeParameters>
<description>
Convenience for &lt;code&gt;sort(values, values, ASCENDING)&lt;/code&gt;.
</description>
<parameter name="values">
<type class="java.lang.T" dimension="1"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.nre.util.SortUtil.&lt;T&gt;rsort(T[]) -->
<method name="rsort"  public="true" static="true">
<typeParameters>
<typeVariable class="T">
</typeVariable>
</typeParameters>
<description>
Convenience for &lt;code&gt;sort(values, values, DESCENDING)&lt;/code&gt;.
</description>
<parameter name="values">
<type class="java.lang.T" dimension="1"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.nre.util.SortUtil.&lt;K, V&gt;sort(K[], V[]) -->
<method name="sort"  public="true" static="true">
<typeParameters>
<typeVariable class="K">
</typeVariable>
<typeVariable class="V">
</typeVariable>
</typeParameters>
<description>
Convenience for &lt;code&gt;sort(keys, values, ASCENDING)&lt;/code&gt;.
</description>
<parameter name="keys">
<type class="java.lang.K" dimension="1"/>
</parameter>
<parameter name="values">
<type class="java.lang.V" dimension="1"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.nre.util.SortUtil.&lt;K, V&gt;rsort(K[], V[]) -->
<method name="rsort"  public="true" static="true">
<typeParameters>
<typeVariable class="K">
</typeVariable>
<typeVariable class="V">
</typeVariable>
</typeParameters>
<description>
Convenience for &lt;code&gt;sort(keys, values, DESCENDING)&lt;/code&gt;.
</description>
<parameter name="keys">
<type class="java.lang.K" dimension="1"/>
</parameter>
<parameter name="values">
<type class="java.lang.V" dimension="1"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.nre.util.SortUtil.&lt;K, V&gt;sort(K[], V[], boolean) -->
<method name="sort"  public="true" static="true">
<typeParameters>
<typeVariable class="K">
</typeVariable>
<typeVariable class="V">
</typeVariable>
</typeParameters>
<description>
Convenience for &lt;code&gt;sort(keys, values, ascending ? ASCENDING : DESCENDING)&lt;/code&gt;.
</description>
<parameter name="keys">
<type class="java.lang.K" dimension="1"/>
</parameter>
<parameter name="values">
<type class="java.lang.V" dimension="1"/>
</parameter>
<parameter name="ascending">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.nre.util.SortUtil.&lt;K, V&gt;sort(K[], V[], java.util.Comparator&lt;? super K&gt;) -->
<method name="sort"  public="true" static="true">
<typeParameters>
<typeVariable class="K">
</typeVariable>
<typeVariable class="V">
</typeVariable>
</typeParameters>
<description>
Given a an array of keys and values, perform an in place sort&#xa; using the given Comparator.  The indices of the keys and values &#xa; array should correspond.  Both the keys and values array will &#xa; be modified to reflect the results of the sort.  The keys and&#xa; values parameters may reference the same array.
</description>
<parameter name="keys">
<type class="java.lang.K" dimension="1"/>
</parameter>
<parameter name="values">
<type class="java.lang.V" dimension="1"/>
</parameter>
<parameter name="comparator">
<parameterizedType class="java.util.Comparator">
<args>
<wildcardType class="?">
<bounds kind="super">
<typeVariable class="K"/>
</bounds>
</wildcardType>
</args>
</parameterizedType>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.nre.util.SortUtil.&lt;T&gt;compare(T, T) -->
<method name="compare"  public="true" static="true">
<annotation><type class="java.lang.SuppressWarnings"/>
<elementValue name="value">
<annotationValue kind="array">
<elementArray>
<annotationValue kind="expr">
<expression>&#x22;unchecked&#x22;</expression>
</annotationValue>
</elementArray>
</annotationValue>
</elementValue>
</annotation>
<typeParameters>
<typeVariable class="T">
</typeVariable>
</typeParameters>
<description>
Compare two objects.  The two objects should be of the&#xa; same class.  If the objects implement the Comparable&#xa; interface then that is how they are compared.  If not&#xa; then the results of their toString() methods are used&#xa; for the comparision.  This method works with null values,&#xa; where null objects are less than non-null objects.
</description>
<parameter name="v1">
<typeVariable class="T"/>
</parameter>
<parameter name="v2">
<typeVariable class="T"/>
</parameter>
<return>
<type class="int"/>
<description>
a negative integer, zero, or a positive integer &#xa; as v1 is less than, equal to, or greater than the v2.
</description>
</return>
</method>

<!-- javax.baja.nre.util.SortUtil.ASCENDING -->
<field name="ASCENDING"  public="true" static="true" final="true">
<parameterizedType class="java.util.Comparator">
<args>
<wildcardType class="?">
<bounds kind="super">
<type class="java.lang.Object"/>
</bounds>
</wildcardType>
</args>
</parameterizedType>
<description>
Comparator that uses &lt;code&gt;SortUtil.compare()&lt;/code&gt;.
</description>
</field>

<!-- javax.baja.nre.util.SortUtil.DESCENDING -->
<field name="DESCENDING"  public="true" static="true" final="true">
<parameterizedType class="java.util.Comparator">
<args>
<wildcardType class="?">
<bounds kind="super">
<type class="java.lang.Object"/>
</bounds>
</wildcardType>
</args>
</parameterizedType>
<description>
Comparator that uses reverse of &lt;code&gt;SortUtil.compare()&lt;/code&gt;.
</description>
</field>

</class>
</bajadoc>
