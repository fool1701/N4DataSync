<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="nre" runtimeProfile="rt" qualifiedName="javax.baja.nre.util.SecurityUtil" name="SecurityUtil" packageName="javax.baja.nre.util" public="true" final="true">
<description>
The purpose of these functions is to not use the standard java methods,&#xa; but instead to use security safe methods that reduce the attack surface&#xa; by avoiding things like fast fail and String.
</description>
<extends>
<type class="java.lang.Object"/>
</extends>
<!-- javax.baja.nre.util.SecurityUtil.equals(java.lang.String, java.lang.String) -->
<method name="equals"  public="true" static="true">
<description>
Performs a time safe string comparison. Doesn&#x27;t fast fail like typical&#xa; array comparison methods.
</description>
<parameter name="a">
<type class="java.lang.String"/>
<description>
source string
</description>
</parameter>
<parameter name="b">
<type class="java.lang.String"/>
<description>
comparative string
</description>
</parameter>
<return>
<type class="boolean"/>
<description>
true if they match, otherwise false
</description>
</return>
</method>

<!-- javax.baja.nre.util.SecurityUtil.equals(char[], char[]) -->
<method name="equals"  public="true" static="true">
<description>
Performs a time safe char array comparison. Doesn&#x27;t fast fail like typical&#xa; array comparison methods.
</description>
<parameter name="a">
<type class="char" dimension="1"/>
</parameter>
<parameter name="b">
<type class="char" dimension="1"/>
</parameter>
<return>
<type class="boolean"/>
<description>
true if they match, otherwise false
</description>
</return>
</method>

<!-- javax.baja.nre.util.SecurityUtil.equals(byte[], byte[]) -->
<method name="equals"  public="true" static="true">
<description>
Performs a time safe byte array comparison. Doesn&#x27;t fast fail like typical&#xa; array comparison methods.
</description>
<parameter name="a">
<type class="byte" dimension="1"/>
</parameter>
<parameter name="b">
<type class="byte" dimension="1"/>
</parameter>
<return>
<type class="boolean"/>
<description>
true if they match, otherwise false
</description>
</return>
</method>

<!-- javax.baja.nre.util.SecurityUtil.zeroByteArray(byte[]) -->
<method name="zeroByteArray"  public="true" static="true">
<description>
Simple method for erasing the supplied byte array
</description>
<parameter name="bytes">
<type class="byte" dimension="1"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.nre.util.SecurityUtil.zeroCharArray(char[]) -->
<method name="zeroCharArray"  public="true" static="true">
<description>
Simple method for erasing the supplied char array
</description>
<parameter name="chars">
<type class="char" dimension="1"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.nre.util.SecurityUtil.toHexChars(byte[]) -->
<method name="toHexChars"  public="true" static="true">
<description>
Converts a byte array to a valid hex char array without&#xa; having to use String.
</description>
<parameter name="bytes">
<type class="byte" dimension="1"/>
</parameter>
<return>
<type class="char" dimension="1"/>
<description>
the converted char array
</description>
</return>
</method>

<!-- javax.baja.nre.util.SecurityUtil.toBytesFromUTF8Chars(char[]) -->
<method name="toBytesFromUTF8Chars"  public="true" static="true">
<description/>
<parameter name="chars">
<type class="char" dimension="1"/>
</parameter>
<return>
<type class="byte" dimension="1"/>
</return>
</method>

<!-- javax.baja.nre.util.SecurityUtil.toUTF8CharsFromBytes(byte[]) -->
<method name="toUTF8CharsFromBytes"  public="true" static="true">
<description/>
<parameter name="bytes">
<type class="byte" dimension="1"/>
</parameter>
<return>
<type class="char" dimension="1"/>
</return>
</method>

<!-- javax.baja.nre.util.SecurityUtil.fromHexChars(char[]) -->
<method name="fromHexChars"  public="true" static="true">
<description>
Converts a hex array to a byte array without&#xa; having to use String.
</description>
<parameter name="chars">
<type class="char" dimension="1"/>
</parameter>
<return>
<type class="byte" dimension="1"/>
<description>
the converted byte array
</description>
</return>
</method>

<!-- javax.baja.nre.util.SecurityUtil.resolveChrootPath(java.io.File, java.io.File) -->
<method name="resolveChrootPath"  public="true" static="true">
<description>
Resolves a joined canonicalized path verifying that&#xa; it doesn&#x27;t resolve above the chroot path
</description>
<parameter name="chrootFile">
<type class="java.io.File"/>
</parameter>
<parameter name="relativePathFile">
<type class="java.io.File"/>
</parameter>
<return>
<type class="java.io.File"/>
</return>
</method>

<!-- javax.baja.nre.util.SecurityUtil.resolveChrootPath(java.io.File, java.lang.String) -->
<method name="resolveChrootPath"  public="true" static="true">
<description/>
<parameter name="chrootFile">
<type class="java.io.File"/>
</parameter>
<parameter name="relativePathFile">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="java.io.File"/>
</return>
</method>

<!-- javax.baja.nre.util.SecurityUtil.resolveChrootPath(java.lang.String, java.lang.String) -->
<method name="resolveChrootPath"  public="true" static="true">
<description>
Resolves a joined canonicalized path verifying that&#xa; it doesn&#x27;t resolve above the chroot path
</description>
<parameter name="chrootFile">
<type class="java.lang.String"/>
</parameter>
<parameter name="relativePathFile">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="java.io.File"/>
</return>
</method>

<!-- javax.baja.nre.util.SecurityUtil.calculateSessionIdHash(java.lang.String) -->
<method name="calculateSessionIdHash"  public="true" static="true">
<description>
Calculates a SHA-256 hash based on a provided session id and using a transient&#xa; process salt created during SecurityUtil load time.&#xa;&#xa; NOTE: This allows the salt to change between process starts but is consistent during&#xa; process execution.
</description>
<tag name="@since">Niagara 4.13</tag>
<parameter name="sessionId">
<type class="java.lang.String"/>
<description>
the session id for the session
</description>
</parameter>
<return>
<type class="java.lang.String"/>
<description>
a hex string representing the calculated hash
</description>
</return>
</method>

</class>
</bajadoc>
