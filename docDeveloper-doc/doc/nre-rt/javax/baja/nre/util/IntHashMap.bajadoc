<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="nre" runtimeProfile="rt" qualifiedName="javax.baja.nre.util.IntHashMap" name="IntHashMap" packageName="javax.baja.nre.util" public="true">
<description>
IntHashMap is an optimized hashtable for hashing objects &#xa; by an integer keys.  It removes the need to use wrapper &#xa; Integers as with the standard collection classes.&#xa;&#xa; Note to developers: This class was written long before java.util.function&#xa; and lambdas became part of the Java language and API - even before generics&#xa; support. New API code shouldn&#x27;t use this class, as&#xa; &lt;code&gt;<see ref="java.util.Map">java.util.Map</see>&lt;/code&gt; with an Integer key type is more standard and more descriptive.
</description>
<tag name="@author">Brian Frank</tag>
<tag name="@creation">2 Oct 97</tag>
<tag name="@version">$Revision: 6$ $Date: 6/22/11 3:16:22 PM EDT$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="java.lang.Object"/>
</extends>
<!-- javax.baja.nre.util.IntHashMap() -->
<constructor name="IntHashMap" public="true">
<description>
Default constructor.
</description>
</constructor>

<!-- javax.baja.nre.util.IntHashMap(int) -->
<constructor name="IntHashMap" public="true">
<parameter name="initialCapacity">
<type class="int"/>
</parameter>
<description>
Constructor with initial capacity.
</description>
</constructor>

<!-- javax.baja.nre.util.IntHashMap(int, float) -->
<constructor name="IntHashMap" public="true">
<parameter name="initialCapacity">
<type class="int"/>
</parameter>
<parameter name="loadFactor">
<type class="float"/>
</parameter>
<description>
Constructor with capacity and load factor.
</description>
</constructor>

<!-- javax.baja.nre.util.IntHashMap.size() -->
<method name="size"  public="true">
<description/>
<return>
<type class="int"/>
<description>
the count of elements in the table.
</description>
</return>
</method>

<!-- javax.baja.nre.util.IntHashMap.isEmpty() -->
<method name="isEmpty"  public="true">
<description/>
<return>
<type class="boolean"/>
<description>
if the table is empty.
</description>
</return>
</method>

<!-- javax.baja.nre.util.IntHashMap.iterator() -->
<method name="iterator"  public="true">
<description/>
<return>
<type class="javax.baja.nre.util.IntHashMap$Iterator"/>
<description>
an iterator of the values for this table.
</description>
</return>
</method>

<!-- javax.baja.nre.util.IntHashMap.get(int) -->
<method name="get"  public="true">
<description>
Get the object identified by the given int key.
</description>
<parameter name="key">
<type class="int"/>
</parameter>
<return>
<type class="java.lang.Object"/>
<description>
null if not in table.
</description>
</return>
</method>

<!-- javax.baja.nre.util.IntHashMap.containsKey(int) -->
<method name="containsKey"  public="true">
<description>
Get whether the specified key value is defined within the map.
</description>
<parameter name="key">
<type class="int"/>
</parameter>
<return>
<type class="boolean"/>
<description>
true if key is defined, false otherwise
</description>
</return>
</method>

<!-- javax.baja.nre.util.IntHashMap.put(int, java.lang.Object) -->
<method name="put"  public="true">
<description>
Put the given object into the table keyed on the int.
</description>
<parameter name="key">
<type class="int"/>
</parameter>
<parameter name="value">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="java.lang.Object"/>
<description>
the previous value at this key, or null &#xa;  if it did not have one.
</description>
</return>
</method>

<!-- javax.baja.nre.util.IntHashMap.remove(int) -->
<method name="remove"  public="true">
<description>
Remove the vaulue identified by the key.
</description>
<parameter name="key">
<type class="int"/>
</parameter>
<return>
<type class="java.lang.Object"/>
<description>
the old object at the key, or null if&#xa;    there was no previous object for the key.
</description>
</return>
</method>

<!-- javax.baja.nre.util.IntHashMap.clear() -->
<method name="clear"  public="true">
<description>
Clear the hashtable of entries.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.nre.util.IntHashMap.equals(java.lang.Object) -->
<method name="equals"  public="true">
<description>
Return if the specified object another IntHashMap &#xa; with the exact same key-value pairs.
</description>
<parameter name="obj">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.nre.util.IntHashMap.hashCode() -->
<method name="hashCode"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.nre.util.IntHashMap.clone() -->
<method name="clone"  public="true">
<description>
Clone the IntHashMap into a new instance.
</description>
<return>
<type class="java.lang.Object"/>
</return>
</method>

<!-- javax.baja.nre.util.IntHashMap.toArray(java.lang.Object[]) -->
<method name="toArray"  public="true">
<description>
Get an array containing all values in &#xa; hash table.
</description>
<parameter name="a">
<type class="java.lang.Object" dimension="1"/>
</parameter>
<return>
<type class="java.lang.Object" dimension="1"/>
</return>
</method>

</class>
</bajadoc>
