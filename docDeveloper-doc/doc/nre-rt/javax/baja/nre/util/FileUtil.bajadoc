<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="nre" runtimeProfile="rt" qualifiedName="javax.baja.nre.util.FileUtil" name="FileUtil" packageName="javax.baja.nre.util" public="true">
<description>
FileUtil provides handy utility methods for&#xa; implementation of BIFile.
</description>
<tag name="@author">Brian Frank</tag>
<tag name="@creation">24 Jan 03</tag>
<tag name="@version">$Revision: 20$ $Date: 8/14/09 9:56:04 AM EDT$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="java.lang.Object"/>
</extends>
<!-- javax.baja.nre.util.FileUtil() -->
<constructor name="FileUtil" public="true">
<description/>
</constructor>

<!-- javax.baja.nre.util.FileUtil.getBase(java.lang.String) -->
<method name="getBase"  public="true" static="true">
<description>
Get the base name without the extension for the&#xa; specified file name.  The extension appears after&#xa; the last &#x27;.&#x27; in the file name.  Return fileName if&#xa; no &#x27;.&#x27; appears in the file name.
</description>
<parameter name="fileName">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.nre.util.FileUtil.getExtension(java.lang.String) -->
<method name="getExtension"  public="true" static="true">
<description>
Get the extension for the specified file name.&#xa; The extension appears after the last &#x27;.&#x27; in&#xa; the file name.  Return null if no &#x27;.&#x27; appears&#xa; in the file name.
</description>
<parameter name="fileName">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.nre.util.FileUtil.replaceExtension(java.lang.String, java.lang.String) -->
<method name="replaceExtension"  public="true" static="true">
<description>
Replace the extension of the specified filename with a new extension, or add an&#xa; extension if the filename has no extension.&#xa;&#xa; Note: As *nix filenames starting with &#x22;.&#x22; are hidden files, files with only a single period&#xa; at the start are treated as a filename with no extension, and an extension will be&#xa; added.
</description>
<tag name="@since">Niagara 4.8</tag>
<parameter name="fileName">
<type class="java.lang.String"/>
<description>
the file name in which the extension should be replaced
</description>
</parameter>
<parameter name="newExtension">
<type class="java.lang.String"/>
<description>
the new file extension (without the &#x22;.&#x22;)
</description>
</parameter>
<return>
<type class="java.lang.String"/>
<description>
the file name, with the extension replaced or added
</description>
</return>
</method>

<!-- javax.baja.nre.util.FileUtil.read(java.io.InputStream, long) -->
<method name="read"  public="true" static="true">
<description>
Read the specified number of bytes from the input&#xa; stream into a byte array.  The stream is closed.
</description>
<parameter name="in">
<type class="java.io.InputStream"/>
</parameter>
<parameter name="size">
<type class="long"/>
</parameter>
<return>
<type class="byte" dimension="1"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.nre.util.FileUtil.pipe(java.io.InputStream, long, java.io.OutputStream) -->
<method name="pipe"  public="true" static="true">
<description>
Read the specified number of bytes off the given input&#xa; stream to the specified output stream.  This does not&#xa; close either the input or output stream.
</description>
<parameter name="in">
<type class="java.io.InputStream"/>
</parameter>
<parameter name="size">
<type class="long"/>
</parameter>
<parameter name="out">
<type class="java.io.OutputStream"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.nre.util.FileUtil.pipe(java.io.InputStream, java.io.OutputStream) -->
<method name="pipe"  public="true" static="true">
<description>
Read the specified number of bytes off the given input&#xa; stream to the specified output stream until the input&#xa; stream returns -1.  This does not close either the input&#xa; or output stream.
</description>
<parameter name="in">
<type class="java.io.InputStream"/>
</parameter>
<parameter name="out">
<type class="java.io.OutputStream"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.nre.util.FileUtil.getCrc(java.io.File) -->
<method name="getCrc"  public="true" static="true">
<description>
Return the calculated CRC
</description>
<tag name="@since">Niagara 3.7</tag>
<parameter name="file">
<type class="java.io.File"/>
</parameter>
<return>
<type class="long"/>
</return>
</method>

<!-- javax.baja.nre.util.FileUtil.getCrc(java.io.InputStream) -->
<method name="getCrc"  public="true" static="true">
<description>
Return the calculated CRC
</description>
<tag name="@since">Niagara 3.5</tag>
<parameter name="in">
<type class="java.io.InputStream"/>
</parameter>
<return>
<type class="long"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.nre.util.FileUtil.renameToBackup(java.io.File, int) -->
<method name="renameToBackup"  public="true" static="true">
<description>
Make a backup of the save file, taking into account&#xa; the proper number of backups configured.  All backup&#xa; files are assumed to be in the same directory and&#xa; have the same prefix as the save file.  This method&#xa; automatically deletes any previous backups if they&#xa; exceed the maxBackup count.  Return the new name for&#xa; saveFile or null if the backup fails.
</description>
<parameter name="saveFile">
<type class="java.io.File"/>
</parameter>
<parameter name="maxBackups">
<type class="int"/>
</parameter>
<return>
<type class="java.io.File"/>
</return>
</method>

<!-- javax.baja.nre.util.FileUtil.renameToBackup(java.io.File) -->
<method name="renameToBackup"  public="true" static="true">
<description>
Given a File, rename it as a backup file by renaming with the&#xa; format &#x22;{orig}_backup_yyMMdd_HHmm.{ext}&#x22;.  Return the backup file&#xa; or null if file doesn&#x27;t exist.
</description>
<parameter name="file">
<type class="java.io.File"/>
</parameter>
<return>
<type class="java.io.File"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.nre.util.FileUtil.getBackups(java.io.File, java.lang.String) -->
<method name="getBackups"  public="true" static="true">
<description>
Get the list of backups files in the given directory with&#xa; the given prefix.  Backups are sorted by age. Index 0 is the&#xa; newest backup and length-1 is the oldest backup file.
</description>
<parameter name="dir">
<type class="java.io.File"/>
</parameter>
<parameter name="prefix">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="java.io.File" dimension="1"/>
</return>
</method>

<!-- javax.baja.nre.util.FileUtil.move(java.io.File, java.io.File) -->
<method name="move"  public="true" static="true">
<description>
Move file
</description>
<parameter name="oldFile">
<type class="java.io.File"/>
</parameter>
<parameter name="newFile">
<type class="java.io.File"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.nre.util.FileUtil.move(java.io.File, java.io.File, boolean) -->
<method name="move"  public="true" static="true">
<description/>
<parameter name="oldFile">
<type class="java.io.File"/>
</parameter>
<parameter name="newFile">
<type class="java.io.File"/>
</parameter>
<parameter name="deleteExisting">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.nre.util.FileUtil.copy(java.io.File, java.io.File) -->
<method name="copy"  public="true" static="true">
<description>
Copy a directory or a data file by routing&#xa; to copyDir() or copyFile().
</description>
<parameter name="oldFile">
<type class="java.io.File"/>
</parameter>
<parameter name="newFile">
<type class="java.io.File"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.nre.util.FileUtil.copyDir(java.io.File, java.io.File) -->
<method name="copyDir"  public="true" static="true">
<description>
Copy directory recursively.
</description>
<parameter name="oldFile">
<type class="java.io.File"/>
</parameter>
<parameter name="newFile">
<type class="java.io.File"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.nre.util.FileUtil.copyFile(java.io.File, java.io.File) -->
<method name="copyFile"  public="true" static="true">
<description>
Copy file contents.
</description>
<parameter name="oldFile">
<type class="java.io.File"/>
</parameter>
<parameter name="newFile">
<type class="java.io.File"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.nre.util.FileUtil.delete(java.io.File) -->
<method name="delete"  public="true" static="true">
<description>
Recursively delete a file or directory.
</description>
<parameter name="file">
<type class="java.io.File"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.nre.util.FileUtil.diff(java.io.BufferedReader, java.io.BufferedReader) -->
<method name="diff"  public="true" static="true">
<description>
Compare two input streams to see if they are identical.
</description>
<parameter name="b1">
<type class="java.io.BufferedReader"/>
</parameter>
<parameter name="b2">
<type class="java.io.BufferedReader"/>
</parameter>
<return>
<type class="boolean"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.nre.util.FileUtil.readString(java.io.File) -->
<method name="readString"  public="true" static="true">
<description>
Convenience for &lt;code&gt;readString(new FileReader(file))&lt;/code&gt;.
</description>
<parameter name="file">
<type class="java.io.File"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.nre.util.FileUtil.readString(java.io.Reader) -->
<method name="readString"  public="true" static="true">
<description>
Read the input stream into a big String, delimted with &#x27;\n&#x27;.&#xa; The input stream is always closed.
</description>
<parameter name="in">
<type class="java.io.Reader"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.nre.util.FileUtil.readLines(java.io.File) -->
<method name="readLines"  public="true" static="true">
<description>
Convenience for &lt;code&gt;readLines(new FileReader(file))&lt;/code&gt;.&#xa;&#xa; Note: callers should consider using &lt;code&gt;<see ref="javax.baja.nre.util.FileUtil#streamLines(java.io.File)">#streamLines(File)</see>&lt;/code&gt; instead
</description>
<parameter name="file">
<type class="java.io.File"/>
</parameter>
<return>
<type class="java.lang.String" dimension="1"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.nre.util.FileUtil.readLines(java.io.Reader) -->
<method name="readLines"  public="true" static="true">
<description>
Read the input stream into an array of lines.&#xa; The input stream is always closed.&#xa;&#xa; Note: callers should consider using &lt;code&gt;<see ref="javax.baja.nre.util.FileUtil#streamLines(java.io.Reader)">#streamLines(Reader)</see>&lt;/code&gt; instead
</description>
<parameter name="in">
<type class="java.io.Reader"/>
</parameter>
<return>
<type class="java.lang.String" dimension="1"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.nre.util.FileUtil.streamLines(java.io.InputStream) -->
<method name="streamLines"  public="true" static="true">
<description>
Convenience for &lt;code&gt;streamLines(new InputStreamReader(in))&lt;/code&gt;.
</description>
<tag name="@since">Niagara 4.2</tag>
<parameter name="in">
<type class="java.io.InputStream"/>
</parameter>
<return>
<parameterizedType class="java.util.stream.Stream">
<args>
<type class="java.lang.String"/>
</args>
</parameterizedType>
</return>
</method>

<!-- javax.baja.nre.util.FileUtil.streamLines(java.io.File) -->
<method name="streamLines"  public="true" static="true">
<description>
Convenience for &lt;code&gt;streamLines(new FileReader(file))&lt;/code&gt;.
</description>
<tag name="@since">Niagara 4.2</tag>
<parameter name="file">
<type class="java.io.File"/>
</parameter>
<return>
<parameterizedType class="java.util.stream.Stream">
<args>
<type class="java.lang.String"/>
</args>
</parameterizedType>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.nre.util.FileUtil.streamLines(java.io.Reader) -->
<method name="streamLines"  public="true" static="true">
<description>
Return a Stream that provides the contents of the reader a line at a time.&#xa;&#xa; The reader is closed at end-of-stream, or when the Stream is closed.
</description>
<tag name="@since">Niagara 4.2</tag>
<parameter name="in">
<type class="java.io.Reader"/>
</parameter>
<return>
<parameterizedType class="java.util.stream.Stream">
<args>
<type class="java.lang.String"/>
</args>
</parameterizedType>
</return>
</method>

<!-- javax.baja.nre.util.FileUtil.getFileInfo(java.io.File) -->
<method name="getFileInfo"  public="true" static="true">
<description/>
<parameter name="file">
<type class="java.io.File"/>
</parameter>
<return>
<type class="javax.baja.nre.util.FileUtil$FileInfo"/>
</return>
</method>

<!-- javax.baja.nre.util.FileUtil.getFileInfo(byte[]) -->
<method name="getFileInfo"  public="true" static="true">
<description/>
<parameter name="contents">
<type class="byte" dimension="1"/>
</parameter>
<return>
<type class="javax.baja.nre.util.FileUtil$FileInfo"/>
</return>
</method>

<!-- javax.baja.nre.util.FileUtil.getFileInfo(java.io.InputStream) -->
<method name="getFileInfo"  public="true" static="true">
<description/>
<parameter name="in">
<type class="java.io.InputStream"/>
</parameter>
<return>
<type class="javax.baja.nre.util.FileUtil$FileInfo"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.nre.util.FileUtil.getFileBufferSize(long) -->
<method name="getFileBufferSize"  public="true" static="true">
<description/>
<parameter name="size">
<type class="long"/>
</parameter>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.nre.util.FileUtil.find(java.io.File, java.lang.String) -->
<method name="find"  public="true" static="true">
<description>
This is a convenience method that calls find(File, String, boolean) with&#xa; the last parameter set to &#x22;false&#x22; (does not match directories).
</description>
<tag name="@see">#find(File, String, boolean)</tag>
<parameter name="contextRoot">
<type class="java.io.File"/>
</parameter>
<parameter name="fileName">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="java.io.File"/>
</return>
</method>

<!-- javax.baja.nre.util.FileUtil.find(java.io.File, java.lang.String, boolean) -->
<method name="find"  public="true" static="true">
<description>
Searches through the directory tree under the given context directory and&#xa; finds the first file that matches the file name. If the third parameter is&#xa; true, the method will also try to match directories, not just &#x22;regular&#x22;&#xa; files.
</description>
<parameter name="contextRoot">
<type class="java.io.File"/>
<description>
The directory to start the search from.
</description>
</parameter>
<parameter name="fileName">
<type class="java.lang.String"/>
<description>
The name of the file (or directory) to search for.
</description>
</parameter>
<parameter name="matchDirectories">
<type class="boolean"/>
<description>
True if the method should try and match the name against directory&#xa;          names, not just file names.
</description>
</parameter>
<return>
<type class="java.io.File"/>
<description>
The java.io.File representing the &lt;em&gt;first&lt;/em&gt; file or&#xa;         directory with the given name, or null if it was not found.
</description>
</return>
</method>

<!-- javax.baja.nre.util.FileUtil.getDownloadFilename(java.net.URLConnection) -->
<method name="getDownloadFilename"  public="true" static="true">
<description>
Get the appropriate filename for the resource pointed to by the URLConnection.&#xa; If the Content-Disposition header contains a filename parameter, use that, otherwise&#xa; use the resource name in the URL to return a URLDecoded filename.
</description>
<tag name="@since">Niagara 4.4</tag>
<parameter name="conn">
<type class="java.net.URLConnection"/>
<description>
URLConnection to remote file
</description>
</parameter>
<return>
<type class="java.lang.String"/>
<description>
filename The filename of the resource
</description>
</return>
</method>

<!-- javax.baja.nre.util.FileUtil.MAX_FILE_PATH_LENGTH -->
<field name="MAX_FILE_PATH_LENGTH"  public="true" static="true" final="true">
<type class="int"/>
<description/>
</field>

</class>
</bajadoc>
