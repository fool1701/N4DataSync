<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="nre" runtimeProfile="rt" qualifiedName="javax.baja.nre.util.Array" name="Array" packageName="javax.baja.nre.util" public="true">
<description>
Array is a dynamic array similar to Vector or ArrayList&#xa; except that it stores its elements in an array of a specific&#xa; type.  This provides fail fast capability when adding&#xa; items of the wrong type and is easy to use when converting&#xa; back to a Java array.&#xa;&#xa; NOTE: This class was written before J2SE 5.0 was available for all Niagara platforms.&#xa; With J2SE 5.0 the &lt;code&gt;<see ref="java.util.Collections">java.util.Collections</see>&lt;/code&gt; API uses generics, eliminating Array&#x27;s main&#xa; advantage over pre-5.0 collections classes.  Programmers writing new classes are encouraged&#xa; to consider using &lt;code&gt;<see ref="java.util.ArrayList">java.util.ArrayList</see>&lt;/code&gt; instead of this class when it suits their needs,&#xa; and to replace existing existing Array variables with &lt;code&gt;<see ref="java.util.ArrayList">java.util.ArrayList</see>&lt;/code&gt;.
</description>
<tag name="@author">Brian Frank</tag>
<tag name="@creation">3 Feb 04</tag>
<tag name="@version">$Revision: 16$ $Date: 11/26/07 2:26:25 PM EST$</tag>
<tag name="@since">Niagara 3.0</tag>
<extends>
<type class="java.lang.Object"/>
</extends>
<implements>
<parameterizedType class="java.lang.Iterable">
<args>
<typeVariable class="T"/>
</args>
</parameterizedType>
</implements>
<typeParameters>
<typeVariable class="T">
</typeVariable>
</typeParameters>
<!-- javax.baja.nre.util.Array() -->
<constructor name="Array" public="true">
<annotation><type class="java.lang.SuppressWarnings"/>
<elementValue name="value">
<annotationValue kind="array">
<elementArray>
<annotationValue kind="expr">
<expression>&#x22;unchecked&#x22;</expression>
</annotationValue>
</elementArray>
</annotationValue>
</elementValue>
</annotation>
<annotation><type class="java.lang.Deprecated"/>
</annotation>
<description>
Convenience for &lt;code&gt;Array(Object.class, 10)&lt;/code&gt;
</description>
<tag name="@deprecated">Use a constructor that has a Class or array parameter instead. This constructor&#xa; should definitely not be used with a parameterized (that is, not raw) Array variable.</tag>
</constructor>

<!-- javax.baja.nre.util.Array(java.lang.Class&lt;T&gt;) -->
<constructor name="Array" public="true">
<parameter name="ofClass">
<parameterizedType class="java.lang.Class">
<args>
<typeVariable class="T"/>
</args>
</parameterizedType>
</parameter>
<description>
Convenience for &lt;code&gt;Array(ofClass, 10)&lt;/code&gt;
</description>
</constructor>

<!-- javax.baja.nre.util.Array(java.lang.Class&lt;T&gt;, int) -->
<constructor name="Array" public="true">
<annotation><type class="java.lang.SuppressWarnings"/>
<elementValue name="value">
<annotationValue kind="array">
<elementArray>
<annotationValue kind="expr">
<expression>&#x22;unchecked&#x22;</expression>
</annotationValue>
</elementArray>
</annotationValue>
</elementValue>
</annotation>
<parameter name="ofClass">
<parameterizedType class="java.lang.Class">
<args>
<typeVariable class="T"/>
</args>
</parameterizedType>
</parameter>
<parameter name="capacity">
<type class="int"/>
</parameter>
<description>
Create an array of the specified type.
</description>
</constructor>

<!-- javax.baja.nre.util.Array(T[]) -->
<constructor name="Array" public="true">
<parameter name="array">
<type class="java.lang.T" dimension="1"/>
</parameter>
<description>
Convenience for &lt;code&gt;Array(array, array.length)&lt;/code&gt;
</description>
</constructor>

<!-- javax.baja.nre.util.Array(T[], int) -->
<constructor name="Array" public="true">
<annotation><type class="java.lang.SuppressWarnings"/>
<elementValue name="value">
<annotationValue kind="array">
<elementArray>
<annotationValue kind="expr">
<expression>&#x22;unchecked&#x22;</expression>
</annotationValue>
</elementArray>
</annotationValue>
</elementValue>
</annotation>
<parameter name="array">
<type class="java.lang.T" dimension="1"/>
</parameter>
<parameter name="size">
<type class="int"/>
</parameter>
<description>
Construct an Array to use the specified array &#xa; as the initial internal array including its&#xa; contents.
</description>
</constructor>

<!-- javax.baja.nre.util.Array(java.lang.Class&lt;T&gt;, java.util.Collection&lt;T&gt;) -->
<constructor name="Array" public="true">
<annotation><type class="java.lang.SuppressWarnings"/>
<elementValue name="value">
<annotationValue kind="array">
<elementArray>
<annotationValue kind="expr">
<expression>&#x22;unchecked&#x22;</expression>
</annotationValue>
</elementArray>
</annotationValue>
</elementValue>
</annotation>
<parameter name="ofClass">
<parameterizedType class="java.lang.Class">
<args>
<typeVariable class="T"/>
</args>
</parameterizedType>
</parameter>
<parameter name="c">
<parameterizedType class="java.util.Collection">
<args>
<typeVariable class="T"/>
</args>
</parameterizedType>
</parameter>
<description>
Construct an Array using &lt;code&gt;Collection.toArray()&lt;/code&gt;
</description>
</constructor>

<!-- javax.baja.nre.util.Array(java.util.Collection&lt;T&gt;) -->
<constructor name="Array" public="true">
<annotation><type class="java.lang.SuppressWarnings"/>
<elementValue name="value">
<annotationValue kind="array">
<elementArray>
<annotationValue kind="expr">
<expression>&#x22;unchecked&#x22;</expression>
</annotationValue>
</elementArray>
</annotationValue>
</elementValue>
</annotation>
<annotation><type class="java.lang.Deprecated"/>
</annotation>
<parameter name="c">
<parameterizedType class="java.util.Collection">
<args>
<typeVariable class="T"/>
</args>
</parameterizedType>
</parameter>
<description>
Convenience for&lt;code&gt;Array(Object.class, c)&lt;/code&gt;
</description>
<tag name="@deprecated">use &lt;code&gt;<see ref="javax.baja.nre.util.Array#Array(java.lang.Class&lt;T&gt;, java.util.Collection&lt;T&gt;)">#Array(Class, Collection)</see>&lt;/code&gt;</tag>
</constructor>

<!-- javax.baja.nre.util.Array.ofClass() -->
<method name="ofClass"  public="true" final="true">
<description>
Get the Class type of the items in this array.
</description>
<return>
<parameterizedType class="java.lang.Class">
<args>
<typeVariable class="T"/>
</args>
</parameterizedType>
</return>
</method>

<!-- javax.baja.nre.util.Array.get(int) -->
<method name="get"  public="true" final="true">
<description>
Get the item at the specified index.
</description>
<parameter name="index">
<type class="int"/>
</parameter>
<return>
<typeVariable class="T"/>
</return>
</method>

<!-- javax.baja.nre.util.Array.indexOf(T) -->
<method name="indexOf"  public="true" final="true">
<description>
Return the index of the specified object using equals(),&#xa; or -1 if not in this array.
</description>
<parameter name="item">
<typeVariable class="T"/>
</parameter>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.nre.util.Array.indexOf(T, int) -->
<method name="indexOf"  public="true" final="true">
<description>
Return the index of the specified object using equals(),&#xa; or -1 if not in this array, starting the search&#xa; at the specified index.
</description>
<parameter name="item">
<typeVariable class="T"/>
</parameter>
<parameter name="fromIndex">
<type class="int"/>
</parameter>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.nre.util.Array.lastIndexOf(T) -->
<method name="lastIndexOf"  public="true" final="true">
<description>
Return the rightmost index of the specified object using equals(),&#xa; or -1 if not in this array, searching backwards starting at&#xa; size() - 1.
</description>
<parameter name="item">
<typeVariable class="T"/>
</parameter>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.nre.util.Array.lastIndexOf(T, int) -->
<method name="lastIndexOf"  public="true" final="true">
<description>
Return the rightmost index of the specified object using equals(),&#xa; or -1 if not in this array, searching backwards starting at the&#xa; specified index.
</description>
<parameter name="item">
<typeVariable class="T"/>
</parameter>
<parameter name="fromIndex">
<type class="int"/>
</parameter>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.nre.util.Array.contains(T) -->
<method name="contains"  public="true" final="true">
<description>
Return if this array contains the specified item using equals().
</description>
<parameter name="item">
<typeVariable class="T"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.nre.util.Array.size() -->
<method name="size"  public="true" final="true">
<description>
Return the number of items in the array.
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.nre.util.Array.isEmpty() -->
<method name="isEmpty"  public="true" final="true">
<description>
Return if size is zero.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.nre.util.Array.equals(java.lang.Object) -->
<method name="equals"  public="true">
<annotation><type class="java.lang.SuppressWarnings"/>
<elementValue name="value">
<annotationValue kind="array">
<elementArray>
<annotationValue kind="expr">
<expression>&#x22;unchecked&#x22;</expression>
</annotationValue>
</elementArray>
</annotationValue>
</elementValue>
</annotation>
<description>
Compare another Array for equality.  Return true only if&#xa; both Arrays have the same size() and ofClass() and every item&#xa; returns true for their equals() method.
</description>
<parameter name="o">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.nre.util.Array.hashCode() -->
<method name="hashCode"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.nre.util.Array.toString() -->
<method name="toString"  public="true">
<description>
Return a string representation of the Array.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.nre.util.Array.&lt;E extends T&gt;add(E) -->
<method name="add"  public="true" final="true">
<typeParameters>
<typeVariable class="E">
<bounds>
<typeVariable class="T"/>
</bounds>
</typeVariable>
</typeParameters>
<description>
Add the item to the end of this array.
</description>
<parameter name="item">
<typeVariable class="E"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.nre.util.Array.&lt;E extends T&gt;add(int, E) -->
<method name="add"  public="true" final="true">
<typeParameters>
<typeVariable class="E">
<bounds>
<typeVariable class="T"/>
</bounds>
</typeVariable>
</typeParameters>
<description>
Add the item at the specified index.  All items after&#xa; index are shifted up one index.
</description>
<parameter name="index">
<type class="int"/>
</parameter>
<parameter name="item">
<typeVariable class="E"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.nre.util.Array.&lt;E extends T&gt;addAll(E[]) -->
<method name="addAll"  public="true" final="true">
<typeParameters>
<typeVariable class="E">
<bounds>
<typeVariable class="T"/>
</bounds>
</typeVariable>
</typeParameters>
<description>
Convenience for &lt;code&gt;add(array, array.length)&lt;/code&gt;.
</description>
<parameter name="array">
<type class="java.lang.E" dimension="1"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.nre.util.Array.addAll(javax.baja.nre.util.Array&lt;? extends T&gt;) -->
<method name="addAll"  public="true" final="true">
<description>
Convenience for &lt;code&gt;add(array.array(), array.size())&lt;/code&gt;.
</description>
<parameter name="array">
<parameterizedType class="javax.baja.nre.util.Array">
<args>
<wildcardType class="?">
<bounds kind="extends">
<typeVariable class="T"/>
</bounds>
</wildcardType>
</args>
</parameterizedType>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.nre.util.Array.&lt;E extends T&gt;addAll(E[], int) -->
<method name="addAll"  public="true" final="true">
<typeParameters>
<typeVariable class="E">
<bounds>
<typeVariable class="T"/>
</bounds>
</typeVariable>
</typeParameters>
<description>
Add all the items from array[0] to array[size-1].
</description>
<parameter name="array">
<type class="java.lang.E" dimension="1"/>
</parameter>
<parameter name="size">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.nre.util.Array.addAll(java.util.Collection&lt;? extends T&gt;) -->
<method name="addAll"  public="true" final="true">
<description>
Add all the items from the collection to this array.
</description>
<parameter name="c">
<parameterizedType class="java.util.Collection">
<args>
<wildcardType class="?">
<bounds kind="extends">
<typeVariable class="T"/>
</bounds>
</wildcardType>
</args>
</parameterizedType>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.nre.util.Array.&lt;E extends T&gt;set(int, E) -->
<method name="set"  public="true" final="true">
<typeParameters>
<typeVariable class="E">
<bounds>
<typeVariable class="T"/>
</bounds>
</typeVariable>
</typeParameters>
<description>
Replace the item at the specified index and return the old item.
</description>
<parameter name="index">
<type class="int"/>
</parameter>
<parameter name="item">
<typeVariable class="E"/>
</parameter>
<return>
<typeVariable class="T"/>
</return>
</method>

<!-- javax.baja.nre.util.Array.remove(int) -->
<method name="remove"  public="true" final="true">
<description>
Remove the item at the specified index and return it.
</description>
<parameter name="index">
<type class="int"/>
</parameter>
<return>
<typeVariable class="T"/>
</return>
</method>

<!-- javax.baja.nre.util.Array.remove(T) -->
<method name="remove"  public="true" final="true">
<description>
If the item is in this array using indexOf() then&#xa; remove it and return true.  If not in this array &#xa; return false.
</description>
<parameter name="item">
<typeVariable class="T"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.nre.util.Array.removeAll(T[]) -->
<method name="removeAll"  public="true">
<description>
Return a new Array having this Array&#x27;s contents,&#xa; with all the specified items filtered out.
</description>
<parameter name="items">
<type class="java.lang.T" dimension="1"/>
</parameter>
<return>
<parameterizedType class="javax.baja.nre.util.Array">
<args>
<typeVariable class="T"/>
</args>
</parameterizedType>
</return>
</method>

<!-- javax.baja.nre.util.Array.removeRange(int, int) -->
<method name="removeRange"  public="true" final="true">
<description>
Remove from this Array all of the items whose index is between&#xa; fromIndex, inclusive and toIndex, exclusive.  Shifts any succeeding&#xa; items to the left (reduces their index).&#xa; This call shortens the array by &lt;tt&gt;(toIndex - fromIndex)&lt;/tt&gt; items.&#xa; (If &lt;tt&gt;toIndex==fromIndex&lt;/tt&gt;, this operation has no effect.)
</description>
<parameter name="fromIndex">
<type class="int"/>
<description>
index of first item to be removed.
</description>
</parameter>
<parameter name="toIndex">
<type class="int"/>
<description>
index after last item to be removed.
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.nre.util.Array.slice(int, int) -->
<method name="slice"  public="true">
<annotation><type class="java.lang.SuppressWarnings"/>
<elementValue name="value">
<annotationValue kind="array">
<elementArray>
<annotationValue kind="expr">
<expression>&#x22;unchecked&#x22;</expression>
</annotationValue>
</elementArray>
</annotationValue>
</elementValue>
</annotation>
<description>
Returns a new Array that is a shallow copy of the portion of this &#xa; Array that lies between &lt;tt&gt;fromIndex&lt;/tt&gt;, inclusive, and &lt;tt&gt;toIndex&lt;/tt&gt;, &#xa; exclusive.  (If &lt;tt&gt;fromIndex&lt;/tt&gt; and &lt;tt&gt;toIndex&lt;/tt&gt; are equal, &#xa; the returned array is empty.)
</description>
<parameter name="fromIndex">
<type class="int"/>
<description>
low endpoint (inclusive) of the slice.
</description>
</parameter>
<parameter name="toIndex">
<type class="int"/>
<description>
high endpoint (exclusive) of the slice.
</description>
</parameter>
<return>
<parameterizedType class="javax.baja.nre.util.Array">
<args>
<typeVariable class="T"/>
</args>
</parameterizedType>
</return>
</method>

<!-- javax.baja.nre.util.Array.intersection(T[]) -->
<method name="intersection"  public="true">
<description>
Return a new Array that contains the intersection of&#xa; this Array&#x27;s contents and the specified items.
</description>
<parameter name="items">
<type class="java.lang.T" dimension="1"/>
</parameter>
<return>
<parameterizedType class="javax.baja.nre.util.Array">
<args>
<typeVariable class="T"/>
</args>
</parameterizedType>
</return>
</method>

<!-- javax.baja.nre.util.Array.&lt;E extends T&gt;push(E) -->
<method name="push"  public="true" final="true">
<typeParameters>
<typeVariable class="E">
<bounds>
<typeVariable class="T"/>
</bounds>
</typeVariable>
</typeParameters>
<description>
Convenience for &lt;code&gt;add(item)&lt;/code&gt; when working&#xa; with the array as a stack.
</description>
<parameter name="item">
<typeVariable class="E"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.nre.util.Array.pop() -->
<method name="pop"  public="true" final="true">
<description>
Convenience for &lt;code&gt;remove(size()-1)&lt;/code&gt; when &#xa; working with the array as a stack.
</description>
<return>
<typeVariable class="T"/>
</return>
</method>

<!-- javax.baja.nre.util.Array.peek() -->
<method name="peek"  public="true" final="true">
<description>
Convenience for &lt;code&gt;get(size()-1)&lt;/code&gt; when &#xa; working with the array as a stack.
</description>
<return>
<typeVariable class="T"/>
</return>
</method>

<!-- javax.baja.nre.util.Array.first() -->
<method name="first"  public="true" final="true">
<description>
Get the item at index 0 or return null if empty.
</description>
<return>
<typeVariable class="T"/>
</return>
</method>

<!-- javax.baja.nre.util.Array.last() -->
<method name="last"  public="true" final="true">
<description>
Get the item at index size-1 or return null if empty.
</description>
<return>
<typeVariable class="T"/>
</return>
</method>

<!-- javax.baja.nre.util.Array.grow(int) -->
<method name="grow"  public="true" final="true">
<annotation><type class="java.lang.SuppressWarnings"/>
<elementValue name="value">
<annotationValue kind="array">
<elementArray>
<annotationValue kind="expr">
<expression>&#x22;unchecked&#x22;</expression>
</annotationValue>
</elementArray>
</annotationValue>
</elementValue>
</annotation>
<description>
Grow the array to ensure the specified length.
</description>
<parameter name="length">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.nre.util.Array.array() -->
<method name="array"  public="true" final="true">
<description>
Get a direct reference to the internal array.  The&#xa; component type of this array is ofClass().  The length&#xa; of the array is not guaranteed to be equal to size().
</description>
<return>
<type class="java.lang.T" dimension="1"/>
</return>
</method>

<!-- javax.baja.nre.util.Array.trim() -->
<method name="trim"  public="true" final="true">
<annotation><type class="java.lang.SuppressWarnings"/>
<elementValue name="value">
<annotationValue kind="array">
<elementArray>
<annotationValue kind="expr">
<expression>&#x22;unchecked&#x22;</expression>
</annotationValue>
</elementArray>
</annotationValue>
</elementValue>
</annotation>
<description>
Trim the internal array to size() and get a direct reference &#xa; to it.  The component type of this array is ofClass().
</description>
<return>
<type class="java.lang.T" dimension="1"/>
</return>
</method>

<!-- javax.baja.nre.util.Array.clear() -->
<method name="clear"  public="true" final="true">
<annotation><type class="java.lang.SuppressWarnings"/>
<elementValue name="value">
<annotationValue kind="array">
<elementArray>
<annotationValue kind="expr">
<expression>&#x22;unchecked&#x22;</expression>
</annotationValue>
</elementArray>
</annotationValue>
</elementValue>
</annotation>
<description>
Remove all the items.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.nre.util.Array.iterator() -->
<method name="iterator"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Return an instance of ListIterator to iterator &#xa; through the items in the array.
</description>
<return>
<parameterizedType class="java.util.ListIterator">
<args>
<typeVariable class="T"/>
</args>
</parameterizedType>
</return>
</method>

<!-- javax.baja.nre.util.Array.list() -->
<method name="list"  public="true" final="true">
<description>
Return a modifiable List which wraps this Array.
</description>
<return>
<parameterizedType class="java.util.List">
<args>
<typeVariable class="T"/>
</args>
</parameterizedType>
</return>
</method>

<!-- javax.baja.nre.util.Array.swap(int, int) -->
<method name="swap"  public="true">
<description>
Swap two items in the array.
</description>
<parameter name="i1">
<type class="int"/>
</parameter>
<parameter name="i2">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.nre.util.Array.copy() -->
<method name="copy"  public="true">
<annotation><type class="java.lang.SuppressWarnings"/>
<elementValue name="value">
<annotationValue kind="array">
<elementArray>
<annotationValue kind="expr">
<expression>&#x22;unchecked&#x22;</expression>
</annotationValue>
</elementArray>
</annotationValue>
</elementValue>
</annotation>
<description>
Return a shallow copy of this array.  The new Array&#xa; has a different internal array, but points to the &#xa; same items.
</description>
<return>
<parameterizedType class="javax.baja.nre.util.Array">
<args>
<typeVariable class="T"/>
</args>
</parameterizedType>
</return>
</method>

<!-- javax.baja.nre.util.Array.copy(int) -->
<method name="copy"  public="true">
<description>
Returns a new Array that is a subsequence of this Array. &#xa; The subsequence begins with the item at the specified &#xa; index and extends to the end of this Array.
</description>
<parameter name="beginIndex">
<type class="int"/>
</parameter>
<return>
<parameterizedType class="javax.baja.nre.util.Array">
<args>
<typeVariable class="T"/>
</args>
</parameterizedType>
</return>
</method>

<!-- javax.baja.nre.util.Array.copy(int, int) -->
<method name="copy"  public="true">
<annotation><type class="java.lang.SuppressWarnings"/>
<elementValue name="value">
<annotationValue kind="array">
<elementArray>
<annotationValue kind="expr">
<expression>&#x22;unchecked&#x22;</expression>
</annotationValue>
</elementArray>
</annotationValue>
</elementValue>
</annotation>
<description>
Returns a new Array that is a subsequence of this Array. &#xa; The subsequence begins at the specified beginIndex and &#xa; extends to the item at index endIndex - 1.
</description>
<parameter name="beginIndex">
<type class="int"/>
</parameter>
<parameter name="endIndex">
<type class="int"/>
</parameter>
<return>
<parameterizedType class="javax.baja.nre.util.Array">
<args>
<typeVariable class="T"/>
</args>
</parameterizedType>
</return>
</method>

<!-- javax.baja.nre.util.Array.filter(javax.baja.nre.util.IFilter) -->
<method name="filter"  public="true">
<description>
Return a new Array with this Array&#x27;s items which&#xa; return true for &lt;code&gt;filter.include()&lt;/code&gt;.&#xa; For example to filter out Strings of length 0:&#xa; &lt;pre&gt;&lt;code&gt;&#xa; a = a.filter(new IFilter()&#xa; {&#xa;   public boolean accept(Object o) { return o.toString().length() &amp;gt; 0; }&#xa; });&#xa; &lt;/code&gt;&lt;/pre&gt;
</description>
<parameter name="filter">
<type class="javax.baja.nre.util.IFilter"/>
</parameter>
<return>
<parameterizedType class="javax.baja.nre.util.Array">
<args>
<typeVariable class="T"/>
</args>
</parameterizedType>
</return>
</method>

<!-- javax.baja.nre.util.Array.filterNull() -->
<method name="filterNull"  public="true">
<description>
Return a new Array with all the null items filtered out.
</description>
<return>
<parameterizedType class="javax.baja.nre.util.Array">
<args>
<typeVariable class="T"/>
</args>
</parameterizedType>
</return>
</method>

<!-- javax.baja.nre.util.Array.&lt;R&gt;apply(java.lang.Class&lt;R&gt;, javax.baja.nre.util.ILambda) -->
<method name="apply"  public="true">
<annotation><type class="java.lang.SuppressWarnings"/>
<elementValue name="value">
<annotationValue kind="array">
<elementArray>
<annotationValue kind="expr">
<expression>&#x22;unchecked&#x22;</expression>
</annotationValue>
</elementArray>
</annotationValue>
</elementValue>
</annotation>
<typeParameters>
<typeVariable class="R">
</typeVariable>
</typeParameters>
<description>
Return a new Array where the items are the result of &#xa; applying the lambda function to all this Array&#x27;s items.&#xa; For example to convert an Array of Strings to lowercase:&#xa; &lt;pre&gt; &#xa; a = a.apply(null, new ILambda() &#xa;   {&#xa;     public Object eval(Object o) { return o.toString().toLowerCase(); }&#xa;   });                                     &#xa; &lt;/pre&gt;          &#xa; The resultOf parameter specifies the ofClass of the new &#xa; array. If resultOf is null then the new array of the &#xa; same class as this array.
</description>
<parameter name="resultOf">
<parameterizedType class="java.lang.Class">
<args>
<typeVariable class="R"/>
</args>
</parameterizedType>
</parameter>
<parameter name="lambda">
<type class="javax.baja.nre.util.ILambda"/>
</parameter>
<return>
<parameterizedType class="javax.baja.nre.util.Array">
<args>
<typeVariable class="R"/>
</args>
</parameterizedType>
</return>
</method>

<!-- javax.baja.nre.util.Array.apply(javax.baja.nre.util.ILambda) -->
<method name="apply"  public="true">
<description>
Convenience for &lt;code&gt;apply(null, lambda)&lt;/code&gt;.
</description>
<parameter name="lambda">
<type class="javax.baja.nre.util.ILambda"/>
</parameter>
<return>
<parameterizedType class="javax.baja.nre.util.Array">
<args>
<typeVariable class="T"/>
</args>
</parameterizedType>
</return>
</method>

<!-- javax.baja.nre.util.Array.sort(java.util.Comparator&lt;? super T&gt;) -->
<method name="sort"  public="true">
<description>
Return a new Array with the items sorted using specified Comparator.
</description>
<parameter name="comparator">
<parameterizedType class="java.util.Comparator">
<args>
<wildcardType class="?">
<bounds kind="super">
<typeVariable class="T"/>
</bounds>
</wildcardType>
</args>
</parameterizedType>
</parameter>
<return>
<parameterizedType class="javax.baja.nre.util.Array">
<args>
<typeVariable class="T"/>
</args>
</parameterizedType>
</return>
</method>

<!-- javax.baja.nre.util.Array.sort() -->
<method name="sort"  public="true">
<description>
Return a new Array with the items sorted in &#xa; ascending order using SortUtil.
</description>
<return>
<parameterizedType class="javax.baja.nre.util.Array">
<args>
<typeVariable class="T"/>
</args>
</parameterizedType>
</return>
</method>

<!-- javax.baja.nre.util.Array.rsort() -->
<method name="rsort"  public="true">
<description>
Return a new Array with the items sorted in &#xa; descending order using SortUtil.
</description>
<return>
<parameterizedType class="javax.baja.nre.util.Array">
<args>
<typeVariable class="T"/>
</args>
</parameterizedType>
</return>
</method>

<!-- javax.baja.nre.util.Array.reverse() -->
<method name="reverse"  public="true">
<annotation><type class="java.lang.SuppressWarnings"/>
<elementValue name="value">
<annotationValue kind="array">
<elementArray>
<annotationValue kind="expr">
<expression>&#x22;unchecked&#x22;</expression>
</annotationValue>
</elementArray>
</annotationValue>
</elementValue>
</annotation>
<description>
Return a new Aray with the order of the items reversed.
</description>
<return>
<parameterizedType class="javax.baja.nre.util.Array">
<args>
<typeVariable class="T"/>
</args>
</parameterizedType>
</return>
</method>

</class>
</bajadoc>
