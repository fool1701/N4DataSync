<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="bql" runtimeProfile="rt" qualifiedName="javax.baja.bql.BIRelational" name="BIRelational" packageName="javax.baja.bql" public="true" interface="true" abstract="true" category="interface">
<description>
BIRelational is an interface for an object that manages relational data.
</description>
<tag name="@author">John Sublett</tag>
<implements>
<type class="javax.baja.sys.BInterface"/>
</implements>
<typeParameters>
<typeVariable class="T">
<bounds>
<type class="javax.baja.sys.BIObject"/>
</bounds>
</typeVariable>
</typeParameters>
<!-- javax.baja.bql.BIRelational.getRelation(java.lang.String, javax.baja.sys.Context) -->
<method name="getRelation"  public="true" abstract="true">
<description>
Get the relation with the specified identifier.
</description>
<parameter name="id">
<type class="java.lang.String"/>
<description>
A string identifier for the relation.  The format&#xa;   of the string is implementation specific.
</description>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
<description>
The Context associated with this request.&#xa;           This parameter was added starting in Niagara 4.0.
</description>
</parameter>
<return>
<parameterizedType class="javax.baja.collection.BITable">
<args>
<typeVariable class="T"/>
</args>
</parameterizedType>
<description>
Returns the relation identified by id or null if the relation&#xa;   cannot be found.
</description>
</return>
</method>

<!-- javax.baja.bql.BIRelational.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
