<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="hierarchy" runtimeProfile="rt" qualifiedName="javax.baja.hierarchy.BRoleHierarchies" name="BRoleHierarchies" packageName="javax.baja.hierarchy" public="true">
<description>
BHierarchyList
</description>
<tag name="@author">Blake Puhak</tag>
<tag name="@creation">09-Feb-2015</tag>
<tag name="@since">Niagara 4.0</tag>
<extends>
<type class="javax.baja.sys.BComponent"/>
</extends>
<implements>
<type class="javax.baja.sys.BIMixIn"/>
</implements>
<property name="hierarchyNames" flags="hr">
<type class="java.lang.String"/>
<description>
Slot for the &lt;code&gt;hierarchyNames&lt;/code&gt; property.&#xa; Comma separated list of Hierarchy Names.
</description>
<tag name="@see">#getHierarchyNames</tag>
<tag name="@see">#setHierarchyNames</tag>
</property>

<!-- javax.baja.hierarchy.BRoleHierarchies() -->
<constructor name="BRoleHierarchies" public="true">
<description/>
</constructor>

<!-- javax.baja.hierarchy.BRoleHierarchies(javax.baja.hierarchy.BHierarchy[]) -->
<constructor name="BRoleHierarchies" public="true">
<parameter name="hierarchies">
<type class="javax.baja.hierarchy.BHierarchy" dimension="1"/>
</parameter>
<description/>
</constructor>

<!-- javax.baja.hierarchy.BRoleHierarchies.getHierarchyNames() -->
<method name="getHierarchyNames"  public="true">
<description>
Get the &lt;code&gt;hierarchyNames&lt;/code&gt; property.&#xa; Comma separated list of Hierarchy Names.
</description>
<tag name="@see">#hierarchyNames</tag>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.hierarchy.BRoleHierarchies.setHierarchyNames(java.lang.String) -->
<method name="setHierarchyNames"  public="true">
<description>
Set the &lt;code&gt;hierarchyNames&lt;/code&gt; property.&#xa; Comma separated list of Hierarchy Names.
</description>
<tag name="@see">#hierarchyNames</tag>
<parameter name="v">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.hierarchy.BRoleHierarchies.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.hierarchy.BRoleHierarchies.getDisplayNameInParent(javax.baja.sys.Context) -->
<method name="getDisplayNameInParent"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.hierarchy.BRoleHierarchies.isNavChild() -->
<method name="isNavChild"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.hierarchy.BRoleHierarchies.isParentLegal(javax.baja.sys.BComponent) -->
<method name="isParentLegal"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="parent">
<type class="javax.baja.sys.BComponent"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.hierarchy.BRoleHierarchies.getRole() -->
<method name="getRole"  public="true">
<description/>
<return>
<type class="javax.baja.role.BIRole"/>
</return>
</method>

<!-- javax.baja.hierarchy.BRoleHierarchies.getHierarchySet() -->
<method name="getHierarchySet"  public="true">
<description/>
<return>
<parameterizedType class="java.util.Set">
<args>
<type class="java.lang.String"/>
</args>
</parameterizedType>
</return>
</method>

<!-- javax.baja.hierarchy.BRoleHierarchies.hasHierarchy(javax.baja.hierarchy.BHierarchy) -->
<method name="hasHierarchy"  public="true">
<description/>
<parameter name="hierarchy">
<type class="javax.baja.hierarchy.BHierarchy"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.hierarchy.BRoleHierarchies.hasHierarchy(java.lang.String) -->
<method name="hasHierarchy"  public="true">
<description/>
<parameter name="hierarchyName">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.hierarchy.BRoleHierarchies.addHierarchy(javax.baja.hierarchy.BHierarchy) -->
<method name="addHierarchy"  public="true">
<description/>
<parameter name="hierarchy">
<type class="javax.baja.hierarchy.BHierarchy"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.hierarchy.BRoleHierarchies.addHierarchy(java.lang.String) -->
<method name="addHierarchy"  public="true">
<description/>
<parameter name="hierarchyName">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.hierarchy.BRoleHierarchies.equivalent(java.lang.Object) -->
<method name="equivalent"  public="true" synchronized="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="obj">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.hierarchy.BRoleHierarchies.removeHierarchy(javax.baja.hierarchy.BHierarchy) -->
<method name="removeHierarchy"  public="true">
<description/>
<parameter name="hierarchy">
<type class="javax.baja.hierarchy.BHierarchy"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.hierarchy.BRoleHierarchies.removeHierarchy(java.lang.String) -->
<method name="removeHierarchy"  public="true">
<description/>
<parameter name="hierarchyName">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.hierarchy.BRoleHierarchies.renameHierarchy(java.lang.String, java.lang.String) -->
<method name="renameHierarchy"  public="true">
<description/>
<parameter name="oldName">
<type class="java.lang.String"/>
</parameter>
<parameter name="newName">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.hierarchy.BRoleHierarchies.delimitHierarchies(java.util.Set&lt;java.lang.String&gt;) -->
<method name="delimitHierarchies"  public="true" static="true">
<description/>
<parameter name="hierarchies">
<parameterizedType class="java.util.Set">
<args>
<type class="java.lang.String"/>
</args>
</parameterizedType>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.hierarchy.BRoleHierarchies.toString(javax.baja.sys.Context) -->
<method name="toString"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.hierarchy.BRoleHierarchies.hierarchyNames -->
<field name="hierarchyNames"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;hierarchyNames&lt;/code&gt; property.&#xa; Comma separated list of Hierarchy Names.
</description>
<tag name="@see">#getHierarchyNames</tag>
<tag name="@see">#setHierarchyNames</tag>
</field>

<!-- javax.baja.hierarchy.BRoleHierarchies.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
