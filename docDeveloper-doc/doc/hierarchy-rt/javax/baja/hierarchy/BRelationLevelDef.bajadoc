<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="hierarchy" runtimeProfile="rt" qualifiedName="javax.baja.hierarchy.BRelationLevelDef" name="BRelationLevelDef" packageName="javax.baja.hierarchy" public="true">
<description>
Defines a level in a hierarchy based on entities that can be traversed by specified relations&#xa; from entity level elements in the previous hierarchy level.  An entity will only be shown once&#xa; even if it can be traversed to by more than one of the specified relations.
</description>
<tag name="@author">Blake Puhak</tag>
<tag name="@creation">24 Mar 2014</tag>
<tag name="@since">Niagara 4.0</tag>
<extends>
<type class="javax.baja.hierarchy.BLevelDef"/>
</extends>
<implements>
<type class="javax.baja.hierarchy.BIEntityLevelDef"/>
</implements>
<property name="inboundRelationIds" flags="">
<type class="java.lang.String"/>
<description>
Slot for the &lt;code&gt;inboundRelationIds&lt;/code&gt; property.&#xa; IDs of inbound relations to traverse.
</description>
<tag name="@since">Niagara 4.3</tag>
<tag name="@see">#getInboundRelationIds</tag>
<tag name="@see">#setInboundRelationIds</tag>
</property>

<property name="outboundRelationIds" flags="">
<type class="java.lang.String"/>
<description>
Slot for the &lt;code&gt;outboundRelationIds&lt;/code&gt; property.&#xa; IDs of outbound relations to traverse.
</description>
<tag name="@since">Niagara 4.3</tag>
<tag name="@see">#getOutboundRelationIds</tag>
<tag name="@see">#setOutboundRelationIds</tag>
</property>

<property name="filterExpression" flags="">
<type class="java.lang.String"/>
<description>
Slot for the &lt;code&gt;filterExpression&lt;/code&gt; property.&#xa; NEQL query that must be satisfied by each each entity to which the relations are traversed in&#xa; order for that entity to be included.
</description>
<tag name="@see">#getFilterExpression</tag>
<tag name="@see">#setFilterExpression</tag>
</property>

<property name="repeatRelation" flags="">
<type class="boolean"/>
<description>
Slot for the &lt;code&gt;repeatRelation&lt;/code&gt; property.&#xa; If true, as long as the relations exist to be traversed, this level def will be repeatedly&#xa; executed to produce additional child level elems.  Otherwise, if false, the relations will only&#xa; be traversed once.
</description>
<tag name="@see">#getRepeatRelation</tag>
<tag name="@see">#setRepeatRelation</tag>
</property>

<property name="cachingRepeatLimit" flags="">
<type class="int"/>
<description>
Slot for the &lt;code&gt;cachingRepeatLimit&lt;/code&gt; property.&#xa; The number of times this level def will be repeated, if possible, when the hierarchy is cached.&#xa; This limit does not affect expansion of a non-cached hierarchy.  This property is only relevant&#xa; when the repeatRelation property is true.
</description>
<tag name="@since">Niagara 4.4</tag>
<tag name="@see">#getCachingRepeatLimit</tag>
<tag name="@see">#setCachingRepeatLimit</tag>
</property>

<property name="sort" flags="">
<type class="javax.baja.hierarchy.BLevelSort"/>
<description>
Slot for the &lt;code&gt;sort&lt;/code&gt; property.&#xa; The order in which level elems will be displayed.  Default is ascending.
</description>
<tag name="@see">#getSort</tag>
<tag name="@see">#setSort</tag>
</property>

<property name="relationId" flags="hr">
<type class="java.lang.String"/>
<description>
Slot for the &lt;code&gt;relationId&lt;/code&gt; property.
</description>
<tag name="@deprecated">since Niagara 4.3; use inboundRelationIds and outboundRelationIds instead</tag>
<tag name="@see">#getRelationId</tag>
<tag name="@see">#setRelationId</tag>
</property>

<property name="inbound" flags="hr">
<type class="boolean"/>
<description>
Slot for the &lt;code&gt;inbound&lt;/code&gt; property.
</description>
<tag name="@deprecated">since Niagara 4.3; use inboundRelationIds and outboundRelationIds instead</tag>
<tag name="@see">#getInbound</tag>
<tag name="@see">#setInbound</tag>
</property>

<!-- javax.baja.hierarchy.BRelationLevelDef() -->
<constructor name="BRelationLevelDef" public="true">
<description/>
</constructor>

<!-- javax.baja.hierarchy.BRelationLevelDef.getInboundRelationIds() -->
<method name="getInboundRelationIds"  public="true">
<description>
Get the &lt;code&gt;inboundRelationIds&lt;/code&gt; property.&#xa; IDs of inbound relations to traverse.
</description>
<tag name="@since">Niagara 4.3</tag>
<tag name="@see">#inboundRelationIds</tag>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.hierarchy.BRelationLevelDef.setInboundRelationIds(java.lang.String) -->
<method name="setInboundRelationIds"  public="true">
<description>
Set the &lt;code&gt;inboundRelationIds&lt;/code&gt; property.&#xa; IDs of inbound relations to traverse.
</description>
<tag name="@since">Niagara 4.3</tag>
<tag name="@see">#inboundRelationIds</tag>
<parameter name="v">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.hierarchy.BRelationLevelDef.getOutboundRelationIds() -->
<method name="getOutboundRelationIds"  public="true">
<description>
Get the &lt;code&gt;outboundRelationIds&lt;/code&gt; property.&#xa; IDs of outbound relations to traverse.
</description>
<tag name="@since">Niagara 4.3</tag>
<tag name="@see">#outboundRelationIds</tag>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.hierarchy.BRelationLevelDef.setOutboundRelationIds(java.lang.String) -->
<method name="setOutboundRelationIds"  public="true">
<description>
Set the &lt;code&gt;outboundRelationIds&lt;/code&gt; property.&#xa; IDs of outbound relations to traverse.
</description>
<tag name="@since">Niagara 4.3</tag>
<tag name="@see">#outboundRelationIds</tag>
<parameter name="v">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.hierarchy.BRelationLevelDef.getFilterExpression() -->
<method name="getFilterExpression"  public="true">
<description>
Get the &lt;code&gt;filterExpression&lt;/code&gt; property.&#xa; NEQL query that must be satisfied by each each entity to which the relations are traversed in&#xa; order for that entity to be included.
</description>
<tag name="@see">#filterExpression</tag>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.hierarchy.BRelationLevelDef.setFilterExpression(java.lang.String) -->
<method name="setFilterExpression"  public="true">
<description>
Set the &lt;code&gt;filterExpression&lt;/code&gt; property.&#xa; NEQL query that must be satisfied by each each entity to which the relations are traversed in&#xa; order for that entity to be included.
</description>
<tag name="@see">#filterExpression</tag>
<parameter name="v">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.hierarchy.BRelationLevelDef.getRepeatRelation() -->
<method name="getRepeatRelation"  public="true">
<description>
Get the &lt;code&gt;repeatRelation&lt;/code&gt; property.&#xa; If true, as long as the relations exist to be traversed, this level def will be repeatedly&#xa; executed to produce additional child level elems.  Otherwise, if false, the relations will only&#xa; be traversed once.
</description>
<tag name="@see">#repeatRelation</tag>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.hierarchy.BRelationLevelDef.setRepeatRelation(boolean) -->
<method name="setRepeatRelation"  public="true">
<description>
Set the &lt;code&gt;repeatRelation&lt;/code&gt; property.&#xa; If true, as long as the relations exist to be traversed, this level def will be repeatedly&#xa; executed to produce additional child level elems.  Otherwise, if false, the relations will only&#xa; be traversed once.
</description>
<tag name="@see">#repeatRelation</tag>
<parameter name="v">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.hierarchy.BRelationLevelDef.getCachingRepeatLimit() -->
<method name="getCachingRepeatLimit"  public="true">
<description>
Get the &lt;code&gt;cachingRepeatLimit&lt;/code&gt; property.&#xa; The number of times this level def will be repeated, if possible, when the hierarchy is cached.&#xa; This limit does not affect expansion of a non-cached hierarchy.  This property is only relevant&#xa; when the repeatRelation property is true.
</description>
<tag name="@since">Niagara 4.4</tag>
<tag name="@see">#cachingRepeatLimit</tag>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.hierarchy.BRelationLevelDef.setCachingRepeatLimit(int) -->
<method name="setCachingRepeatLimit"  public="true">
<description>
Set the &lt;code&gt;cachingRepeatLimit&lt;/code&gt; property.&#xa; The number of times this level def will be repeated, if possible, when the hierarchy is cached.&#xa; This limit does not affect expansion of a non-cached hierarchy.  This property is only relevant&#xa; when the repeatRelation property is true.
</description>
<tag name="@since">Niagara 4.4</tag>
<tag name="@see">#cachingRepeatLimit</tag>
<parameter name="v">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.hierarchy.BRelationLevelDef.getSort() -->
<method name="getSort"  public="true">
<description>
Get the &lt;code&gt;sort&lt;/code&gt; property.&#xa; The order in which level elems will be displayed.  Default is ascending.
</description>
<tag name="@see">#sort</tag>
<return>
<type class="javax.baja.hierarchy.BLevelSort"/>
</return>
</method>

<!-- javax.baja.hierarchy.BRelationLevelDef.setSort(javax.baja.hierarchy.BLevelSort) -->
<method name="setSort"  public="true">
<description>
Set the &lt;code&gt;sort&lt;/code&gt; property.&#xa; The order in which level elems will be displayed.  Default is ascending.
</description>
<tag name="@see">#sort</tag>
<parameter name="v">
<type class="javax.baja.hierarchy.BLevelSort"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.hierarchy.BRelationLevelDef.getRelationId() -->
<method name="getRelationId"  public="true">
<annotation><type class="java.lang.Deprecated"/>
</annotation>
<description>
Get the &lt;code&gt;relationId&lt;/code&gt; property.
</description>
<tag name="@deprecated">since Niagara 4.3; use inboundRelationIds and outboundRelationIds instead</tag>
<tag name="@see">#relationId</tag>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.hierarchy.BRelationLevelDef.setRelationId(java.lang.String) -->
<method name="setRelationId"  public="true">
<annotation><type class="java.lang.Deprecated"/>
</annotation>
<description>
Set the &lt;code&gt;relationId&lt;/code&gt; property.
</description>
<tag name="@deprecated">since Niagara 4.3; use inboundRelationIds and outboundRelationIds instead</tag>
<tag name="@see">#relationId</tag>
<parameter name="v">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.hierarchy.BRelationLevelDef.getInbound() -->
<method name="getInbound"  public="true">
<annotation><type class="java.lang.Deprecated"/>
</annotation>
<description>
Get the &lt;code&gt;inbound&lt;/code&gt; property.
</description>
<tag name="@deprecated">since Niagara 4.3; use inboundRelationIds and outboundRelationIds instead</tag>
<tag name="@see">#inbound</tag>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.hierarchy.BRelationLevelDef.setInbound(boolean) -->
<method name="setInbound"  public="true">
<annotation><type class="java.lang.Deprecated"/>
</annotation>
<description>
Set the &lt;code&gt;inbound&lt;/code&gt; property.
</description>
<tag name="@deprecated">since Niagara 4.3; use inboundRelationIds and outboundRelationIds instead</tag>
<tag name="@see">#inbound</tag>
<parameter name="v">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.hierarchy.BRelationLevelDef.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.hierarchy.BRelationLevelDef.started() -->
<method name="started"  public="true">
<annotation><type class="java.lang.SuppressWarnings"/>
<elementValue name="value">
<annotationValue kind="array">
<elementArray>
<annotationValue kind="expr">
<expression>&#x22;deprecation&#x22;</expression>
</annotationValue>
</elementArray>
</annotationValue>
</elementValue>
</annotation>
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
The started() method is called when a component&#x27;s running state moves to true.  Components are&#xa; started top-down, children after their parent.&#xa;&#xa; &lt;p&gt;Here, the relation level def is also migrated, if necessary, from using the&#xa; &lt;code&gt;<see ref="javax.baja.hierarchy.BRelationLevelDef#relationId">#relationId</see>&lt;/code&gt; and &lt;code&gt;<see ref="javax.baja.hierarchy.BRelationLevelDef#inbound">#inbound</see>&lt;/code&gt; properties to the &lt;code&gt;<see ref="javax.baja.hierarchy.BRelationLevelDef#outboundRelationIds">#outboundRelationIds</see>&lt;/code&gt; and&#xa; &lt;code&gt;<see ref="javax.baja.hierarchy.BRelationLevelDef#inboundRelationIds">#inboundRelationIds</see>&lt;/code&gt; properties.&lt;/p&gt;
</description>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.hierarchy.BRelationLevelDef.changed(javax.baja.sys.Property, javax.baja.sys.Context) -->
<method name="changed"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Enforce the minimum value of the &lt;code&gt;<see ref="javax.baja.hierarchy.BRelationLevelDef#cachingRepeatLimit">#cachingRepeatLimit</see>&lt;/code&gt; property on the server side.
</description>
<parameter name="property">
<type class="javax.baja.sys.Property"/>
<description>
property being changed
</description>
</parameter>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
<description>
execution context
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.hierarchy.BRelationLevelDef.getElements(javax.baja.hierarchy.BLevelElem, javax.baja.sys.Context) -->
<method name="getElements"  public="true">
<annotation><type class="java.lang.SuppressWarnings"/>
<elementValue name="value">
<annotationValue kind="array">
<elementArray>
<annotationValue kind="expr">
<expression>&#x22;try&#x22;</expression>
</annotationValue>
</elementArray>
</annotationValue>
</elementValue>
</annotation>
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Returns level elements for entities found by traversing the relations specified in the&#xa; &lt;code&gt;<see ref="javax.baja.hierarchy.BRelationLevelDef#outboundRelationIds">#outboundRelationIds</see>&lt;/code&gt; and &lt;code&gt;<see ref="javax.baja.hierarchy.BRelationLevelDef#inboundRelationIds">#inboundRelationIds</see>&lt;/code&gt; properties.
</description>
<parameter name="parent">
<type class="javax.baja.hierarchy.BLevelElem"/>
<description>
parent level element used as the base for traversing relations
</description>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
<description>
execution context; its user is not used for getting permissions that determine which&#xa;           elements to return
</description>
</parameter>
<return>
<type class="javax.baja.hierarchy.BLevelElem" dimension="1"/>
<description>
elements as a result of traversing the specified relations
</description>
</return>
</method>

<!-- javax.baja.hierarchy.BRelationLevelDef.toString(javax.baja.sys.Context) -->
<method name="toString"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.hierarchy.BRelationLevelDef.inboundRelationIds -->
<field name="inboundRelationIds"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;inboundRelationIds&lt;/code&gt; property.&#xa; IDs of inbound relations to traverse.
</description>
<tag name="@since">Niagara 4.3</tag>
<tag name="@see">#getInboundRelationIds</tag>
<tag name="@see">#setInboundRelationIds</tag>
</field>

<!-- javax.baja.hierarchy.BRelationLevelDef.outboundRelationIds -->
<field name="outboundRelationIds"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;outboundRelationIds&lt;/code&gt; property.&#xa; IDs of outbound relations to traverse.
</description>
<tag name="@since">Niagara 4.3</tag>
<tag name="@see">#getOutboundRelationIds</tag>
<tag name="@see">#setOutboundRelationIds</tag>
</field>

<!-- javax.baja.hierarchy.BRelationLevelDef.filterExpression -->
<field name="filterExpression"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;filterExpression&lt;/code&gt; property.&#xa; NEQL query that must be satisfied by each each entity to which the relations are traversed in&#xa; order for that entity to be included.
</description>
<tag name="@see">#getFilterExpression</tag>
<tag name="@see">#setFilterExpression</tag>
</field>

<!-- javax.baja.hierarchy.BRelationLevelDef.repeatRelation -->
<field name="repeatRelation"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;repeatRelation&lt;/code&gt; property.&#xa; If true, as long as the relations exist to be traversed, this level def will be repeatedly&#xa; executed to produce additional child level elems.  Otherwise, if false, the relations will only&#xa; be traversed once.
</description>
<tag name="@see">#getRepeatRelation</tag>
<tag name="@see">#setRepeatRelation</tag>
</field>

<!-- javax.baja.hierarchy.BRelationLevelDef.cachingRepeatLimit -->
<field name="cachingRepeatLimit"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;cachingRepeatLimit&lt;/code&gt; property.&#xa; The number of times this level def will be repeated, if possible, when the hierarchy is cached.&#xa; This limit does not affect expansion of a non-cached hierarchy.  This property is only relevant&#xa; when the repeatRelation property is true.
</description>
<tag name="@since">Niagara 4.4</tag>
<tag name="@see">#getCachingRepeatLimit</tag>
<tag name="@see">#setCachingRepeatLimit</tag>
</field>

<!-- javax.baja.hierarchy.BRelationLevelDef.sort -->
<field name="sort"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;sort&lt;/code&gt; property.&#xa; The order in which level elems will be displayed.  Default is ascending.
</description>
<tag name="@see">#getSort</tag>
<tag name="@see">#setSort</tag>
</field>

<!-- javax.baja.hierarchy.BRelationLevelDef.relationId -->
<field name="relationId"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<annotation><type class="java.lang.Deprecated"/>
</annotation>
<description>
Slot for the &lt;code&gt;relationId&lt;/code&gt; property.
</description>
<tag name="@deprecated">since Niagara 4.3; use inboundRelationIds and outboundRelationIds instead</tag>
<tag name="@see">#getRelationId</tag>
<tag name="@see">#setRelationId</tag>
</field>

<!-- javax.baja.hierarchy.BRelationLevelDef.inbound -->
<field name="inbound"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<annotation><type class="java.lang.Deprecated"/>
</annotation>
<description>
Slot for the &lt;code&gt;inbound&lt;/code&gt; property.
</description>
<tag name="@deprecated">since Niagara 4.3; use inboundRelationIds and outboundRelationIds instead</tag>
<tag name="@see">#getInbound</tag>
<tag name="@see">#setInbound</tag>
</field>

<!-- javax.baja.hierarchy.BRelationLevelDef.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
