<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="hierarchy" runtimeProfile="rt" qualifiedName="javax.baja.hierarchy.BHierarchyService" name="BHierarchyService" packageName="javax.baja.hierarchy" public="true">
<description>
Manage hierarchy definitions.
</description>
<tag name="@author">Blake Puhak on 4 Mar 2014</tag>
<tag name="@since">Niagara 4.0</tag>
<extends>
<type class="javax.baja.sys.BAbstractService"/>
</extends>
<implements>
<type class="javax.baja.util.BIRestrictedComponent"/>
</implements>
<property name="hierarchyTimeout" flags="">
<type class="javax.baja.sys.BRelTime"/>
<description>
Slot for the &lt;code&gt;hierarchyTimeout&lt;/code&gt; property.&#xa; Specifies the maximum time to wait for a hierarchy level resolution to complete. The default&#xa; value is 45 seconds.
</description>
<tag name="@since">Niagara 4.3</tag>
<tag name="@see">#getHierarchyTimeout</tag>
<tag name="@see">#setHierarchyTimeout</tag>
</property>

<!-- javax.baja.hierarchy.BHierarchyService() -->
<constructor name="BHierarchyService" public="true">
<description/>
</constructor>

<!-- javax.baja.hierarchy.BHierarchyService.getHierarchyTimeout() -->
<method name="getHierarchyTimeout"  public="true">
<description>
Get the &lt;code&gt;hierarchyTimeout&lt;/code&gt; property.&#xa; Specifies the maximum time to wait for a hierarchy level resolution to complete. The default&#xa; value is 45 seconds.
</description>
<tag name="@since">Niagara 4.3</tag>
<tag name="@see">#hierarchyTimeout</tag>
<return>
<type class="javax.baja.sys.BRelTime"/>
</return>
</method>

<!-- javax.baja.hierarchy.BHierarchyService.setHierarchyTimeout(javax.baja.sys.BRelTime) -->
<method name="setHierarchyTimeout"  public="true">
<description>
Set the &lt;code&gt;hierarchyTimeout&lt;/code&gt; property.&#xa; Specifies the maximum time to wait for a hierarchy level resolution to complete. The default&#xa; value is 45 seconds.
</description>
<tag name="@since">Niagara 4.3</tag>
<tag name="@see">#hierarchyTimeout</tag>
<parameter name="v">
<type class="javax.baja.sys.BRelTime"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.hierarchy.BHierarchyService.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.hierarchy.BHierarchyService.getServiceTypes() -->
<method name="getServiceTypes"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type" dimension="1"/>
</return>
</method>

<!-- javax.baja.hierarchy.BHierarchyService.serviceStarted() -->
<method name="serviceStarted"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.hierarchy.BHierarchyService.serviceStopped() -->
<method name="serviceStopped"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.hierarchy.BHierarchyService.enabled() -->
<method name="enabled"  protected="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
This method is called when moving from disabled&#xa; state into the enabled state.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.hierarchy.BHierarchyService.disabled() -->
<method name="disabled"  protected="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
This method is called when moving from enabled&#xa; state into the disabled state.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.hierarchy.BHierarchyService.getLicenseFeature() -->
<method name="getLicenseFeature"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.license.Feature"/>
</return>
</method>

<!-- javax.baja.hierarchy.BHierarchyService.getLicensedScopes(javax.baja.hierarchy.BHierarchyScope[]) -->
<method name="getLicensedScopes"  public="true" static="true">
<description/>
<parameter name="scopesArray">
<type class="javax.baja.hierarchy.BHierarchyScope" dimension="1"/>
</parameter>
<return>
<type class="javax.baja.hierarchy.BHierarchyScope" dimension="1"/>
</return>
</method>

<!-- javax.baja.hierarchy.BHierarchyService.isChildLegal(javax.baja.sys.BComponent) -->
<method name="isChildLegal"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
One or more instances of a BHierarchy are allowed as children.
</description>
<parameter name="c">
<type class="javax.baja.sys.BComponent"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.hierarchy.BHierarchyService.renamed(javax.baja.sys.Property, java.lang.String, javax.baja.sys.Context) -->
<method name="renamed"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="property">
<type class="javax.baja.sys.Property"/>
</parameter>
<parameter name="oldName">
<type class="java.lang.String"/>
</parameter>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.hierarchy.BHierarchyService.removed(javax.baja.sys.Property, javax.baja.sys.BValue, javax.baja.sys.Context) -->
<method name="removed"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="property">
<type class="javax.baja.sys.Property"/>
</parameter>
<parameter name="oldValue">
<type class="javax.baja.sys.BValue"/>
</parameter>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.hierarchy.BHierarchyService.getHierarchyDefs() -->
<method name="getHierarchyDefs"  public="true">
<description/>
<return>
<type class="javax.baja.hierarchy.BLevelDef" dimension="1"/>
</return>
</method>

<!-- javax.baja.hierarchy.BHierarchyService.getHierarchyElems(javax.baja.hierarchy.BLevelElem, javax.baja.sys.BObject, javax.baja.sys.Context) -->
<method name="getHierarchyElems"  public="true" static="true">
<description>
Return the child level elements of the specified parent.  Can be called on both the client and&#xa; server sides, given a base object that exists in the current VM&#x27;s station space.&#xa; &lt;p&gt;&#xa; On the server side, &lt;code&gt;<see ref="javax.baja.hierarchy.BHierarchyService#getHierarchyRootElems(javax.baja.sys.Context)">#getHierarchyRootElems(Context)</see>&lt;/code&gt; is equivalent to calling this&#xa; method when parent is null.  When the parent is not null, it is close to&#xa; &lt;code&gt;<see ref="javax.baja.hierarchy.BHierarchyService#getChildElems(java.lang.String, javax.baja.sys.BFacets, javax.baja.sys.BFacets, javax.baja.sys.Context)">#getChildElems(String, BFacets, BFacets, Context)</see>&lt;/code&gt; but the parent passed in will be the&#xa; parent of the returned children.  No children will be returned for a parent in a hierarchy that&#xa; the user cannot view.
</description>
<parameter name="parent">
<type class="javax.baja.hierarchy.BLevelElem"/>
<description>
level element on which to find children
</description>
</parameter>
<parameter name="base">
<type class="javax.baja.sys.BObject"/>
<description>
starting point for resolving the hierarchy service and space
</description>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
<description>
execution context; its user is not used for getting permissions that determine which&#xa;           elements to return
</description>
</parameter>
<return>
<type class="javax.baja.hierarchy.BLevelElem" dimension="1"/>
<description>
parent&#x27;s child elements or, if parent is null, elements for each hierarchy in the space
</description>
</return>
</method>

<!-- javax.baja.hierarchy.BHierarchyService.getHierarchyRootElems(javax.baja.sys.Context) -->
<method name="getHierarchyRootElems"  public="true">
<description>
Returns hierarchy root level elements.  These elements will have cached children if the&#xa; hierarchy is cached.  This method works on the server-side only.
</description>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
<description>
execution context; its user is not used for getting permissions that determine&#xa;                which elements to return
</description>
</parameter>
<return>
<type class="javax.baja.hierarchy.BLevelElem" dimension="1"/>
<description>
level elements that represent the root of each hierarchy in the service
</description>
</return>
</method>

<!-- javax.baja.hierarchy.BHierarchyService.getChildElems(java.lang.String, javax.baja.sys.BFacets, javax.baja.sys.BFacets, javax.baja.sys.Context) -->
<method name="getChildElems"  public="true">
<description>
Retrieve child elements at a point within the hierarchy.  This method works on the&#xa; server-side only.
</description>
<tag name="@since">Niagara 4.4</tag>
<parameter name="defPath">
<type class="java.lang.String"/>
<description>
path to the level def for the element for which to retrieve children
</description>
</parameter>
<parameter name="contextParams">
<type class="javax.baja.sys.BFacets"/>
<description>
context parameters that further specify which element to return
</description>
</parameter>
<parameter name="tags">
<type class="javax.baja.sys.BFacets"/>
<description>
tags to apply to the returned element
</description>
</parameter>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
<description>
execution context; its user is not used for getting permissions that determine&#xa;                which elements to return
</description>
</parameter>
<return>
<type class="javax.baja.hierarchy.BLevelElem" dimension="1"/>
<description>
child elements for an element within the hierarchy
</description>
</return>
</method>

<!-- javax.baja.hierarchy.BHierarchyService.resolveHierarchyLevelElem(javax.baja.hierarchy.HierarchyQuery) -->
<method name="resolveHierarchyLevelElem"  public="true">
<description>
Resolve the given HierarchyQuery to a BLevelElem in a hierarchy tree.&#xa; &lt;p&gt;&#xa; Note: This is different that resolving a hierarchy ord as this method as it will always return&#xa; the BLevelElem rather than the target component.&#xa; &lt;p&gt;&#xa; This method was intended to run station-side only and that is being enforced as of Niagara 4.4.
</description>
<tag name="@since">Niagara 4.1</tag>
<parameter name="query">
<type class="javax.baja.hierarchy.HierarchyQuery"/>
<description>
HierarchyQuery to resolve
</description>
</parameter>
<return>
<type class="javax.baja.hierarchy.BLevelElem"/>
<description>
BLevelElem in hierarchy tree that the given query resolves to
</description>
</return>
<throws>
<type class="javax.baja.naming.UnresolvedException"/>
<description>
if the query does not resolve to a LevelElem
</description>
</throws>
</method>

<!-- javax.baja.hierarchy.BHierarchyService.getHierarchySpace(javax.baja.sys.BObject) -->
<method name="getHierarchySpace"  public="true" static="true">
<description/>
<parameter name="base">
<type class="javax.baja.sys.BObject"/>
</parameter>
<return>
<type class="javax.baja.hierarchy.BHierarchySpace"/>
</return>
</method>

<!-- javax.baja.hierarchy.BHierarchyService.getHierarchyService(javax.baja.sys.BObject) -->
<method name="getHierarchyService"  public="true" static="true">
<description/>
<parameter name="base">
<type class="javax.baja.sys.BObject"/>
</parameter>
<return>
<type class="javax.baja.hierarchy.BHierarchyService"/>
</return>
</method>

<!-- javax.baja.hierarchy.BHierarchyService.getHierarchySpace() -->
<method name="getHierarchySpace"  public="true">
<description/>
<return>
<type class="javax.baja.hierarchy.BHierarchySpace"/>
</return>
</method>

<!-- javax.baja.hierarchy.BHierarchyService.getIcon() -->
<method name="getIcon"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.BIcon"/>
</return>
</method>

<!-- javax.baja.hierarchy.BHierarchyService.checkParentForRestrictedComponent(javax.baja.sys.BComponent, javax.baja.sys.Context) -->
<method name="checkParentForRestrictedComponent"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Only one allowed to live under the station&#x27;s BServiceContainer.
</description>
<parameter name="parent">
<type class="javax.baja.sys.BComponent"/>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.hierarchy.BHierarchyService.spy(javax.baja.spy.SpyWriter) -->
<method name="spy"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="out">
<type class="javax.baja.spy.SpyWriter"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.hierarchy.BHierarchyService.hierarchyTimeout -->
<field name="hierarchyTimeout"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;hierarchyTimeout&lt;/code&gt; property.&#xa; Specifies the maximum time to wait for a hierarchy level resolution to complete. The default&#xa; value is 45 seconds.
</description>
<tag name="@since">Niagara 4.3</tag>
<tag name="@see">#getHierarchyTimeout</tag>
<tag name="@see">#setHierarchyTimeout</tag>
</field>

<!-- javax.baja.hierarchy.BHierarchyService.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

<!-- javax.baja.hierarchy.BHierarchyService.log -->
<field name="log"  public="true" static="true" final="true">
<type class="java.util.logging.Logger"/>
<description/>
</field>

<!-- javax.baja.hierarchy.BHierarchyService.LEVEL_DEF_TYPES_PROP_NAME -->
<field name="LEVEL_DEF_TYPES_PROP_NAME"  public="true" static="true" final="true">
<type class="java.lang.String"/>
<description/>
</field>

</class>
</bajadoc>
