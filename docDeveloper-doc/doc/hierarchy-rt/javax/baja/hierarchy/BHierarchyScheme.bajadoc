<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="hierarchy" runtimeProfile="rt" qualifiedName="javax.baja.hierarchy.BHierarchyScheme" name="BHierarchyScheme" packageName="javax.baja.hierarchy" public="true">
<description>
BHierarchyScheme is the ord scheme for accessing hierarchies.
</description>
<tag name="@author">Andrew Saunders</tag>
<tag name="@creation">19 Aug 2013</tag>
<tag name="@version">$Revision: 18$ $Date: 8/18/09 4:28:34 PM EDT$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="javax.baja.space.BSpaceScheme"/>
</extends>
<annotation><type class="javax.baja.nre.annotations.NiagaraSingleton"/>
</annotation>
<!-- javax.baja.hierarchy.BHierarchyScheme() -->
<constructor name="BHierarchyScheme" protected="true">
<description>
Constructor with scheme id.
</description>
</constructor>

<!-- javax.baja.hierarchy.BHierarchyScheme.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.hierarchy.BHierarchyScheme.getSpaceType() -->
<method name="getSpaceType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
BHierarchyScheme is used to access histories in a BHierarchySpace.
</description>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.hierarchy.BHierarchyScheme.parse(java.lang.String) -->
<method name="parse"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
This method gives scheme the chance to return a custom subclass of OrdQuery with a scheme&#xa; specific API.  The default implementation returns an instance of BasicQuery.
</description>
<parameter name="queryBody">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.naming.OrdQuery"/>
</return>
</method>

<!-- javax.baja.hierarchy.BHierarchyScheme.resolve(javax.baja.naming.OrdTarget, javax.baja.naming.OrdQuery, javax.baja.space.BSpace) -->
<method name="resolve"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
This is the subclass hook for resolve after the default implementation has mapped the ord to an&#xa; instanceof BHierarchySpace.
</description>
<parameter name="base">
<type class="javax.baja.naming.OrdTarget"/>
<description>
base ord target; its user is not used for getting permissions that determine which&#xa;             elements to return
</description>
</parameter>
<parameter name="query">
<type class="javax.baja.naming.OrdQuery"/>
<description>
hierarchy query
</description>
</parameter>
<parameter name="space">
<type class="javax.baja.space.BSpace"/>
<description>
hierarchy space
</description>
</parameter>
<return>
<type class="javax.baja.naming.OrdTarget"/>
<description>
if the resolved level element has a target component, return an ord target to it;&#xa; otherwise, return an ord target to the level element
</description>
</return>
</method>

<!-- javax.baja.hierarchy.BHierarchyScheme.INSTANCE -->
<field name="INSTANCE"  public="true" static="true" final="true">
<type class="javax.baja.hierarchy.BHierarchyScheme"/>
<description/>
</field>

<!-- javax.baja.hierarchy.BHierarchyScheme.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

<!-- javax.baja.hierarchy.BHierarchyScheme.HIERARCHY_QUERY_FACET -->
<field name="HIERARCHY_QUERY_FACET"  public="true" static="true" final="true">
<type class="java.lang.String"/>
<description/>
</field>

</class>
</bajadoc>
