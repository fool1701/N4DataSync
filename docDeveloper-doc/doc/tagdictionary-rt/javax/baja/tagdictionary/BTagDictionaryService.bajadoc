<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="tagdictionary" runtimeProfile="rt" qualifiedName="javax.baja.tagdictionary.BTagDictionaryService" name="BTagDictionaryService" packageName="javax.baja.tagdictionary" public="true">
<description>
BTagDictionaryService is the &lt;code&gt;BAbstractService&lt;/code&gt; implementation of&#xa; &lt;code&gt;TagDictionaryService&lt;/code&gt;.
</description>
<tag name="@author">John Sublett on 2/14/14</tag>
<tag name="@since">Niagara 4.0</tag>
<extends>
<type class="javax.baja.sys.BAbstractService"/>
</extends>
<implements>
<type class="javax.baja.tag.TagDictionaryService"/>
</implements>
<implements>
<type class="javax.baja.util.BIRestrictedComponent"/>
</implements>
<implements>
<type class="javax.baja.nav.NavListener"/>
</implements>
<property name="defaultNamespaceId" flags="">
<type class="java.lang.String"/>
<description>
Slot for the &lt;code&gt;defaultNamespaceId&lt;/code&gt; property.&#xa; The default namespace for this service.  This is typically the namespace of a dictionary that is&#xa; installed in the service.  If a default dictionary is defined, global tags that appear in queries&#xa; are treated as tags in the default namespace.
</description>
<tag name="@see">#getDefaultNamespaceId</tag>
<tag name="@see">#setDefaultNamespaceId</tag>
</property>

<property name="tagRuleIndexEnabled" flags="">
<type class="boolean"/>
<description>
Slot for the &lt;code&gt;tagRuleIndexEnabled&lt;/code&gt; property.&#xa; If the tag rule cache is enabled, the rules which imply an implied tag are cached by the tag&#x27;s id.
</description>
<tag name="@see">#getTagRuleIndexEnabled</tag>
<tag name="@see">#setTagRuleIndexEnabled</tag>
</property>

<property name="indexedTags" flags="">
<type class="java.lang.String"/>
<description>
Slot for the &lt;code&gt;indexedTags&lt;/code&gt; property.&#xa; Semicolon separated list of tag ids to index when implied on an entity.
</description>
<tag name="@since">Niagara 4.3</tag>
<tag name="@see">#getIndexedTags</tag>
<tag name="@see">#setIndexedTags</tag>
</property>

<property name="neqlizeOptions" flags="">
<type class="com.tridium.tagdictionary.neqlize.BNeqlizeOptions"/>
<description>
Slot for the &lt;code&gt;neqlizeOptions&lt;/code&gt; property.&#xa; Options to use when converting PX bound ORDs from slots to NEQL queries.
</description>
<tag name="@since">Niagara 4.9</tag>
<tag name="@see">#getNeqlizeOptions</tag>
<tag name="@see">#setNeqlizeOptions</tag>
</property>

<property name="schemaVersion" flags="rh">
<type class="int"/>
<description>
Slot for the &lt;code&gt;schemaVersion&lt;/code&gt; property.
</description>
<tag name="@since">Niagara 4.3</tag>
<tag name="@see">#getSchemaVersion</tag>
<tag name="@see">#setSchemaVersion</tag>
</property>

<action name="clearTagRuleIndex" flags="">
<return>
<type class="void"/>
</return>
<description>
Slot for the &lt;code&gt;clearTagRuleIndex&lt;/code&gt; action.
</description>
<tag name="@see">#clearTagRuleIndex()</tag>
</action>

<action name="invalidateAllTagIndexes" flags="">
<return>
<type class="void"/>
</return>
<description>
Slot for the &lt;code&gt;invalidateAllTagIndexes&lt;/code&gt; action.&#xa; Clear the indexed values for all tags being indexed so tag rules and tag groups are re-evaluated&#xa; the next time those tags are searched for.
</description>
<tag name="@since">Niagara 4.3</tag>
<tag name="@see">#invalidateAllTagIndexes()</tag>
</action>

<action name="invalidateSingleTagIndex" flags="">
<parameter name="parameter">
<type class="javax.baja.sys.BString"/>
</parameter>
<return>
<type class="void"/>
</return>
<description>
Slot for the &lt;code&gt;invalidateSingleTagIndex&lt;/code&gt; action.&#xa; Clear the indexed values for a single tag being indexed so tag rules and tag groups are&#xa; re-evaluated the next time that tag is searched for.
</description>
<tag name="@since">Niagara 4.3</tag>
<tag name="@see">#invalidateSingleTagIndex(BString parameter)</tag>
</action>

<action name="query" flags="ah">
<parameter name="parameter">
<type class="javax.baja.sys.BString"/>
</parameter>
<return>
<type class="void"/>
</return>
<description>
Slot for the &lt;code&gt;query&lt;/code&gt; action.
</description>
<tag name="@deprecated">since Niagara 4.3 and will be removed in future release; no alternative available</tag>
<tag name="@see">#query(BString parameter)</tag>
</action>

<action name="tagsToTagGroup" flags="h">
<return>
<type class="javax.baja.sys.BComponent"/>
</return>
<description>
Slot for the &lt;code&gt;tagsToTagGroup&lt;/code&gt; action.&#xa; Convert direct tags to tagGroups
</description>
<tag name="@since">Niagara 4.3</tag>
<tag name="@see">#tagsToTagGroup()</tag>
</action>

<!-- javax.baja.tagdictionary.BTagDictionaryService() -->
<constructor name="BTagDictionaryService" public="true">
<description/>
</constructor>

<!-- javax.baja.tagdictionary.BTagDictionaryService.getDefaultNamespaceId() -->
<method name="getDefaultNamespaceId"  public="true">
<description>
Get the &lt;code&gt;defaultNamespaceId&lt;/code&gt; property.&#xa; The default namespace for this service.  This is typically the namespace of a dictionary that is&#xa; installed in the service.  If a default dictionary is defined, global tags that appear in queries&#xa; are treated as tags in the default namespace.
</description>
<tag name="@see">#defaultNamespaceId</tag>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionaryService.setDefaultNamespaceId(java.lang.String) -->
<method name="setDefaultNamespaceId"  public="true">
<description>
Set the &lt;code&gt;defaultNamespaceId&lt;/code&gt; property.&#xa; The default namespace for this service.  This is typically the namespace of a dictionary that is&#xa; installed in the service.  If a default dictionary is defined, global tags that appear in queries&#xa; are treated as tags in the default namespace.
</description>
<tag name="@see">#defaultNamespaceId</tag>
<parameter name="v">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionaryService.getTagRuleIndexEnabled() -->
<method name="getTagRuleIndexEnabled"  public="true">
<description>
Get the &lt;code&gt;tagRuleIndexEnabled&lt;/code&gt; property.&#xa; If the tag rule cache is enabled, the rules which imply an implied tag are cached by the tag&#x27;s id.
</description>
<tag name="@see">#tagRuleIndexEnabled</tag>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionaryService.setTagRuleIndexEnabled(boolean) -->
<method name="setTagRuleIndexEnabled"  public="true">
<description>
Set the &lt;code&gt;tagRuleIndexEnabled&lt;/code&gt; property.&#xa; If the tag rule cache is enabled, the rules which imply an implied tag are cached by the tag&#x27;s id.
</description>
<tag name="@see">#tagRuleIndexEnabled</tag>
<parameter name="v">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionaryService.getIndexedTags() -->
<method name="getIndexedTags"  public="true">
<description>
Get the &lt;code&gt;indexedTags&lt;/code&gt; property.&#xa; Semicolon separated list of tag ids to index when implied on an entity.
</description>
<tag name="@since">Niagara 4.3</tag>
<tag name="@see">#indexedTags</tag>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionaryService.setIndexedTags(java.lang.String) -->
<method name="setIndexedTags"  public="true">
<description>
Set the &lt;code&gt;indexedTags&lt;/code&gt; property.&#xa; Semicolon separated list of tag ids to index when implied on an entity.
</description>
<tag name="@since">Niagara 4.3</tag>
<tag name="@see">#indexedTags</tag>
<parameter name="v">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionaryService.getNeqlizeOptions() -->
<method name="getNeqlizeOptions"  public="true">
<description>
Get the &lt;code&gt;neqlizeOptions&lt;/code&gt; property.&#xa; Options to use when converting PX bound ORDs from slots to NEQL queries.
</description>
<tag name="@since">Niagara 4.9</tag>
<tag name="@see">#neqlizeOptions</tag>
<return>
<type class="com.tridium.tagdictionary.neqlize.BNeqlizeOptions"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionaryService.setNeqlizeOptions(com.tridium.tagdictionary.neqlize.BNeqlizeOptions) -->
<method name="setNeqlizeOptions"  public="true">
<description>
Set the &lt;code&gt;neqlizeOptions&lt;/code&gt; property.&#xa; Options to use when converting PX bound ORDs from slots to NEQL queries.
</description>
<tag name="@since">Niagara 4.9</tag>
<tag name="@see">#neqlizeOptions</tag>
<parameter name="v">
<type class="com.tridium.tagdictionary.neqlize.BNeqlizeOptions"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionaryService.getNiagara() -->
<method name="getNiagara"  public="true">
<description>
Get the &lt;code&gt;Niagara&lt;/code&gt; property.&#xa; The Niagara Tag Dictionary required for many built in functions based on tags.
</description>
<tag name="@see">#Niagara</tag>
<return>
<type class="com.tridium.tagdictionary.BNiagaraTagDictionary"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionaryService.setNiagara(com.tridium.tagdictionary.BNiagaraTagDictionary) -->
<method name="setNiagara"  public="true">
<description>
Set the &lt;code&gt;Niagara&lt;/code&gt; property.&#xa; The Niagara Tag Dictionary required for many built in functions based on tags.
</description>
<tag name="@see">#Niagara</tag>
<parameter name="v">
<type class="com.tridium.tagdictionary.BNiagaraTagDictionary"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionaryService.getSchemaVersion() -->
<method name="getSchemaVersion"  public="true">
<description>
Get the &lt;code&gt;schemaVersion&lt;/code&gt; property.
</description>
<tag name="@since">Niagara 4.3</tag>
<tag name="@see">#schemaVersion</tag>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionaryService.setSchemaVersion(int) -->
<method name="setSchemaVersion"  public="true">
<description>
Set the &lt;code&gt;schemaVersion&lt;/code&gt; property.
</description>
<tag name="@since">Niagara 4.3</tag>
<tag name="@see">#schemaVersion</tag>
<parameter name="v">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionaryService.clearTagRuleIndex() -->
<method name="clearTagRuleIndex"  public="true">
<description>
Invoke the &lt;code&gt;clearTagRuleIndex&lt;/code&gt; action.
</description>
<tag name="@see">#clearTagRuleIndex</tag>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionaryService.invalidateAllTagIndexes() -->
<method name="invalidateAllTagIndexes"  public="true">
<description>
Invoke the &lt;code&gt;invalidateAllTagIndexes&lt;/code&gt; action.&#xa; Clear the indexed values for all tags being indexed so tag rules and tag groups are re-evaluated&#xa; the next time those tags are searched for.
</description>
<tag name="@since">Niagara 4.3</tag>
<tag name="@see">#invalidateAllTagIndexes</tag>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionaryService.invalidateSingleTagIndex(javax.baja.sys.BString) -->
<method name="invalidateSingleTagIndex"  public="true">
<description>
Invoke the &lt;code&gt;invalidateSingleTagIndex&lt;/code&gt; action.&#xa; Clear the indexed values for a single tag being indexed so tag rules and tag groups are&#xa; re-evaluated the next time that tag is searched for.
</description>
<tag name="@since">Niagara 4.3</tag>
<tag name="@see">#invalidateSingleTagIndex</tag>
<parameter name="parameter">
<type class="javax.baja.sys.BString"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionaryService.query(javax.baja.sys.BString) -->
<method name="query"  public="true">
<annotation><type class="java.lang.Deprecated"/>
</annotation>
<description>
Invoke the &lt;code&gt;query&lt;/code&gt; action.
</description>
<tag name="@deprecated">since Niagara 4.3 and will be removed in future release; no alternative available</tag>
<tag name="@see">#query</tag>
<parameter name="parameter">
<type class="javax.baja.sys.BString"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionaryService.tagsToTagGroup() -->
<method name="tagsToTagGroup"  public="true">
<description>
Invoke the &lt;code&gt;tagsToTagGroup&lt;/code&gt; action.&#xa; Convert direct tags to tagGroups
</description>
<tag name="@since">Niagara 4.3</tag>
<tag name="@see">#tagsToTagGroup</tag>
<return>
<type class="javax.baja.sys.BComponent"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionaryService.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionaryService.added(javax.baja.sys.Property, javax.baja.sys.Context) -->
<method name="added"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Add a non-BSmartTagDictionary SmartTagDictionary to a list when one might have been added.
</description>
<parameter name="property">
<type class="javax.baja.sys.Property"/>
</parameter>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionaryService.removed(javax.baja.sys.Property, javax.baja.sys.BValue, javax.baja.sys.Context) -->
<method name="removed"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Remove a non-BSmartTagDictionary SmartTagDictionary from a list when one might have been&#xa; removed.
</description>
<parameter name="property">
<type class="javax.baja.sys.Property"/>
</parameter>
<parameter name="oldValue">
<type class="javax.baja.sys.BValue"/>
</parameter>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionaryService.changed(javax.baja.sys.Property, javax.baja.sys.Context) -->
<method name="changed"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Starts the service (see fwServiceStarted()) if the &lt;code&gt;<see ref="javax.baja.tagdictionary.BTagDictionaryService#enabled()">#enabled</see>&lt;/code&gt;&#xa; property is set or stops the service (see &lt;code&gt;<see ref="javax.baja.tagdictionary.BTagDictionaryService#fwServiceStopped()">#fwServiceStopped()</see>&lt;/code&gt;) if the&#xa; property is cleared. Clears the tag rule index whenever the &lt;code&gt;<see ref="javax.baja.tagdictionary.BTagDictionaryService#tagRuleIndexEnabled">#tagRuleIndexEnabled</see>&lt;/code&gt;&#xa; property value changes.  Updates tags that are indexed when the &lt;code&gt;<see ref="javax.baja.tagdictionary.BTagDictionaryService#indexedTags">#indexedTags</see>&lt;/code&gt; property&#xa; value changes.
</description>
<parameter name="property">
<type class="javax.baja.sys.Property"/>
<description>
property that has changed
</description>
</parameter>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
<description>
execution context
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionaryService.descendantsStarted() -->
<method name="descendantsStarted"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Updates the tag index based on indexedTags property after all tag dictionaries, such as the&#xa; Niagara dictionary, have been started so the tag ids in the property can be checked against the&#xa; tag dictionaries.
</description>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.tagdictionary.BTagDictionaryService.getLicenseFeature() -->
<method name="getLicenseFeature"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Enforce the presence of the &#x22;tags&#x22; license feature.
</description>
<return>
<type class="javax.baja.license.Feature"/>
<description>
the license &lt;code&gt;Feature&lt;/code&gt; for the &lt;code&gt;BTagDictionaryService&lt;/code&gt;.
</description>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionaryService.enabled() -->
<method name="enabled"  protected="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Call fwServiceStarted() when moving from the enabled to disabled&#xa; state.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionaryService.disabled() -->
<method name="disabled"  protected="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Call &lt;code&gt;<see ref="javax.baja.tagdictionary.BTagDictionaryService#fwServiceStopped()">#fwServiceStopped()</see>&lt;/code&gt; when moving from the disabled to enabled&#xa; state.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionaryService.fw(int, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object) -->
<method name="fw"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<tag name="@since">Niagara 4.4u1</tag>
<parameter name="x">
<type class="int"/>
</parameter>
<parameter name="a">
<type class="java.lang.Object"/>
</parameter>
<parameter name="b">
<type class="java.lang.Object"/>
</parameter>
<parameter name="c">
<type class="java.lang.Object"/>
</parameter>
<parameter name="d">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="java.lang.Object"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionaryService.getDefaultNamespace() -->
<method name="getDefaultNamespace"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get the default namespace for this service.  This is typically the namespace of a dictionary&#xa; installed in the service.  If a default namespace is defined, global tags that appear in tag&#xa; queries are assumed to be tags in the dictionary that owns the default namespace.
</description>
<return>
<type class="java.lang.String"/>
<description>
&lt;code&gt;<see ref="javax.baja.tagdictionary.BTagDictionaryService#defaultNamespaceId">#defaultNamespaceId</see>&lt;/code&gt; property value if not empty; &lt;code&gt;null&lt;/code&gt; otherwise
</description>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionaryService.setDefaultNamespace(java.lang.String) -->
<method name="setDefaultNamespace"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Set the default namespace for this service.  See &lt;code&gt;<see ref="javax.baja.tagdictionary.BTagDictionaryService#getDefaultNamespace()">#getDefaultNamespace()</see>&lt;/code&gt;.
</description>
<parameter name="defaultNamespace">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionaryService.getTagDictionaries() -->
<method name="getTagDictionaries"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
If a &lt;code&gt;TagDictionary&lt;/code&gt; implements &lt;code&gt;<see ref="javax.baja.status.BIStatus">BIStatus</see>&lt;/code&gt;, include it only&#xa; if it is valid (see &lt;code&gt;<see ref="javax.baja.status.BStatus#isValid()">BStatus#isValid()</see>&lt;/code&gt;). Include all&#xa; &lt;code&gt;TagDictionary&lt;/code&gt;s that do not implement &lt;code&gt;BIStatus&lt;/code&gt;.
</description>
<return>
<parameterizedType class="java.util.Collection">
<args>
<type class="javax.baja.tag.TagDictionary"/>
</args>
</parameterizedType>
<description>
a collection of installed and valid &lt;code&gt;TagDictionary&lt;/code&gt;s
</description>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionaryService.getTagDictionary(java.lang.String) -->
<method name="getTagDictionary"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get the TagDictionary for the specified namespace, if it exists. If the TagDictionary&#xa; implements &lt;code&gt;<see ref="javax.baja.status.BIStatus">BIStatus</see>&lt;/code&gt;, it must be valid (see &lt;code&gt;<see ref="javax.baja.status.BStatus#isValid()">BStatus#isValid()</see>&lt;/code&gt;) to be returned.
</description>
<parameter name="namespace">
<type class="java.lang.String"/>
<description>
The string id of the namespace defined by the target dictionary.
</description>
</parameter>
<return>
<parameterizedType class="java.util.Optional">
<args>
<type class="javax.baja.tag.TagDictionary"/>
</args>
</parameterizedType>
<description>
the TagDictionary with the specified namespace or &lt;code&gt;<see ref="java.util.Optional#empty()">Optional#empty()</see>&lt;/code&gt; if the&#xa; dictionary for the specified namespace is not installed
</description>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionaryService.getSmartTagDictionaries() -->
<method name="getSmartTagDictionaries"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
If a &lt;code&gt;SmartTagDictionary&lt;/code&gt; implements &lt;code&gt;<see ref="javax.baja.status.BIStatus">BIStatus</see>&lt;/code&gt;, include it only&#xa; if it is valid (see &lt;code&gt;<see ref="javax.baja.status.BStatus#isValid()">BStatus#isValid()</see>&lt;/code&gt;). Include all&#xa; &lt;code&gt;SmartTagDictionary&lt;/code&gt;s that do not implement &lt;code&gt;BIStatus&lt;/code&gt;.
</description>
<return>
<parameterizedType class="java.util.Collection">
<args>
<type class="javax.baja.tag.SmartTagDictionary"/>
</args>
</parameterizedType>
<description>
a collection of installed and valid &lt;code&gt;SmartTagDictionary&lt;/code&gt;s
</description>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionaryService.getSmartTagDictionary(java.lang.String) -->
<method name="getSmartTagDictionary"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get the &lt;code&gt;SmartTagDictionary&lt;/code&gt; for the specified namespace, if it exists. If the&#xa; SmartTagDictionary implements &lt;code&gt;<see ref="javax.baja.status.BIStatus">BIStatus</see>&lt;/code&gt;, it must be valid (see&#xa; &lt;code&gt;<see ref="javax.baja.status.BStatus#isValid()">BStatus#isValid()</see>&lt;/code&gt;) to be returned.
</description>
<parameter name="namespace">
<type class="java.lang.String"/>
<description>
namespace defined by an installed tag dictionary, if one exists
</description>
</parameter>
<return>
<parameterizedType class="java.util.Optional">
<args>
<type class="javax.baja.tag.SmartTagDictionary"/>
</args>
</parameterizedType>
<description>
an &lt;code&gt;Optional&lt;/code&gt; that contains the &lt;code&gt;SmartTagDictionary&lt;/code&gt; for the specified&#xa; namespace, if it exists; an empty &lt;code&gt;Optional&lt;/code&gt; otherwise
</description>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionaryService.getImpliedTag(javax.baja.tag.Id, javax.baja.tag.Entity) -->
<method name="getImpliedTag"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get an implied tag for the specified id on the specified entity.&#xa;&#xa; &lt;p&gt;If indexing of the tag has been enabled, check the tag index of the given entity. If the tag&#xa; has never been added to the index, look through the entity&#x27;s direct tag groups (represented by&#xa; an &#x22;n:tagGroup&#x22; relation) and rules of the smart tag dictionaries.&lt;/p&gt;
</description>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
<description>
id of the implied tag
</description>
</parameter>
<parameter name="entity">
<type class="javax.baja.tag.Entity"/>
<description>
entity to evaluate for the implied tag
</description>
</parameter>
<return>
<parameterizedType class="java.util.Optional">
<args>
<type class="javax.baja.tag.Tag"/>
</args>
</parameterizedType>
<description>
an implied tag or &lt;code&gt;<see ref="java.util.Optional#empty()">Optional#empty()</see>&lt;/code&gt; if the tag is not implied on the specified&#xa; entity
</description>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionaryService.getImpliedTags(javax.baja.tag.Entity) -->
<method name="getImpliedTags"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get all tags implied on the specified entity. The resulting collection is populated by, first,&#xa; adding tags implied by tag groups on the entity. Then, the installed SmartTagDictionaries are&#xa; iterated and the implied tags are added from each. See &lt;code&gt;<see ref="javax.baja.tag.SmartTagDictionary#addAllImpliedTags(javax.baja.tag.Entity, java.util.Collection&lt;javax.baja.tag.Tag&gt;)">SmartTagDictionary#addAllImpliedTags(Entity, Collection)</see>&lt;/code&gt; for further details.
</description>
<parameter name="entity">
<type class="javax.baja.tag.Entity"/>
<description>
The entity to evaluate for implied tags.
</description>
</parameter>
<return>
<parameterizedType class="java.util.Collection">
<args>
<type class="javax.baja.tag.Tag"/>
</args>
</parameterizedType>
<description>
a collection of tags implied on the entity
</description>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionaryService.doClearTagRuleIndex() -->
<method name="doClearTagRuleIndex"  public="true">
<description>
Clear all entries of the tag rule index.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionaryService.doInvalidateAllTagIndexes() -->
<method name="doInvalidateAllTagIndexes"  public="true">
<description>
Clear the indexed values for all tags being indexed so tag rules and tag groups are&#xa; re-evaluated the next time those tags are searched for.
</description>
<tag name="@since">Niagara 4.3</tag>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.sys.LocalizableException"/>
<description>
an error occurs while resetting index values
</description>
</throws>
</method>

<!-- javax.baja.tagdictionary.BTagDictionaryService.doInvalidateSingleTagIndex(javax.baja.sys.BString) -->
<method name="doInvalidateSingleTagIndex"  public="true">
<description>
Clear the indexed values for a single tag being indexed so tag rules and tag groups are&#xa; re-evaluated the next time that tag is searched for.
</description>
<tag name="@since">Niagara 4.3</tag>
<parameter name="qName">
<type class="javax.baja.sys.BString"/>
<description>
qualified name of the tag for which index values should be reset
</description>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.sys.LocalizableException"/>
<description>
format of qName is incorrect or an error occurs while resetting&#xa; index values
</description>
</throws>
</method>

<!-- javax.baja.tagdictionary.BTagDictionaryService.addImpliedRelations(javax.baja.tag.Id, javax.baja.tag.Entity, java.util.Collection&lt;javax.baja.tag.Relation&gt;) -->
<method name="addImpliedRelations"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Add to the supplied collection all relations with the specified ID implied by a &lt;code&gt;<see ref="javax.baja.tag.SmartTagDictionary">SmartTagDictionary</see>&lt;/code&gt; for the specified source entity. The smart tag dictionary must be enabled&#xa; and its namespace must match that of the ID.  See &lt;code&gt;<see ref="javax.baja.tag.SmartTagDictionary#addImpliedRelations(javax.baja.tag.Id, javax.baja.tag.Entity, java.util.Collection&lt;javax.baja.tag.Relation&gt;)">SmartTagDictionary#addImpliedRelations(Id, Entity, Collection)</see>&lt;/code&gt; for further details.
</description>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
<description>
The id of the relation.
</description>
</parameter>
<parameter name="source">
<type class="javax.baja.tag.Entity"/>
<description>
The source entity of the relations.
</description>
</parameter>
<parameter name="relations">
<parameterizedType class="java.util.Collection">
<args>
<type class="javax.baja.tag.Relation"/>
</args>
</parameterizedType>
<description>
The collection of relations to populate.
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionaryService.getImpliedRelation(javax.baja.tag.Id, javax.baja.tag.Entity) -->
<method name="getImpliedRelation"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get the first or only relation with the specified id with the specified entity&#xa; as the source.&#xa; &lt;p&gt;&#xa; &lt;p&gt;An installed &lt;code&gt;<see ref="javax.baja.tag.SmartTagDictionary">SmartTagDictionary</see>&lt;/code&gt; that matches the namespace of the id&#xa; (see &lt;code&gt;<see ref="javax.baja.tagdictionary.BTagDictionaryService#getSmartTagDictionary(java.lang.String)">#getSmartTagDictionary(String)</see>&lt;/code&gt;) and is enabled&#xa; (see &lt;code&gt;<see ref="javax.baja.tag.SmartTagDictionary#getEnabled()">SmartTagDictionary#getEnabled()</see>&lt;/code&gt;), if one exists, is used to find&#xa; the implied relation.&lt;/p&gt;
</description>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
<description>
id of the relation
</description>
</parameter>
<parameter name="source">
<type class="javax.baja.tag.Entity"/>
<description>
source entity for the relation
</description>
</parameter>
<return>
<parameterizedType class="java.util.Optional">
<args>
<type class="javax.baja.tag.Relation"/>
</args>
</parameterizedType>
<description>
an &lt;code&gt;Optional&lt;/code&gt; that contains the implied &lt;code&gt;Relation&lt;/code&gt; for the&#xa; entity that matches the id, if it exists; an empty &lt;code&gt;Optional&lt;/code&gt; otherwise.
</description>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionaryService.addAllImpliedRelations(javax.baja.tag.Entity, java.util.Collection&lt;javax.baja.tag.Relation&gt;) -->
<method name="addAllImpliedRelations"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Add all implied relations for the specified source entity to the collection of relations. See&#xa; &lt;code&gt;<see ref="javax.baja.tag.SmartTagDictionary#addAllImpliedRelations(javax.baja.tag.Entity, java.util.Collection&lt;javax.baja.tag.Relation&gt;)">SmartTagDictionary#addAllImpliedRelations(Entity, Collection)</see>&lt;/code&gt; for further details.
</description>
<parameter name="source">
<type class="javax.baja.tag.Entity"/>
<description>
The entity that is the source of the relation.
</description>
</parameter>
<parameter name="relations">
<parameterizedType class="java.util.Collection">
<args>
<type class="javax.baja.tag.Relation"/>
</args>
</parameterizedType>
<description>
The collection of relations to populate.
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionaryService.getDataPolicyForTag(javax.baja.tag.Id) -->
<method name="getDataPolicyForTag"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Searches within the tags of the dictionary that matches the namespace of&#xa; tag id, if it exists (see &lt;code&gt;<see ref="javax.baja.tagdictionary.BTagDictionaryService#getTagDictionary(java.lang.String)">#getTagDictionary(String)</see>&lt;/code&gt;). Returns the&#xa; data policy of the first tag with a matching ID, even if that policy is&#xa; empty.
</description>
<parameter name="tagId">
<type class="javax.baja.tag.Id"/>
<description>
id of the tag
</description>
</parameter>
<return>
<parameterizedType class="java.util.Optional">
<args>
<type class="javax.baja.tag.DataPolicy"/>
</args>
</parameterizedType>
<description>
an &lt;code&gt;Optional&lt;/code&gt; that contains the data policy for the&#xa; entity that matches the id, if it exists; an empty &lt;code&gt;Optional&lt;/code&gt; otherwise.
</description>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionaryService.tagAdded(javax.baja.tag.Entity, javax.baja.tag.Id) -->
<method name="tagAdded"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Call back when a tag with the given Id has been added to the given target entity.&#xa; &lt;p&gt;&#xa; &lt;p&gt;Since Niagara 4.3U1, this no longer calls BTagGroupMonitor#tagAdded(Entity, Id) on the&#xa; monitor property.&lt;/p&gt;
</description>
<parameter name="target">
<type class="javax.baja.tag.Entity"/>
<description>
target entity
</description>
</parameter>
<parameter name="tagId">
<type class="javax.baja.tag.Id"/>
<description>
id of the tag that has been added
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionaryService.tagRemoved(javax.baja.tag.Entity, javax.baja.tag.Id) -->
<method name="tagRemoved"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Call back when a tag with the given Id has been removed from the given target entity.&#xa; &lt;p&gt;&#xa; &lt;p&gt;Since Niagara 4.3U1, this no longer calls BTagGroupMonitor#tagRemoved(Entity, Id) on the&#xa; monitor property.&lt;/p&gt;
</description>
<parameter name="target">
<type class="javax.baja.tag.Entity"/>
<description>
target entity
</description>
</parameter>
<parameter name="tagId">
<type class="javax.baja.tag.Id"/>
<description>
id of the tag that has been removed
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionaryService.doQuery(javax.baja.sys.BString) -->
<method name="doQuery"  public="true">
<annotation><type class="java.lang.Deprecated"/>
</annotation>
<annotation><type class="java.lang.SuppressWarnings"/>
<elementValue name="value">
<annotationValue kind="array">
<elementArray>
<annotationValue kind="expr">
<expression>&#x22;unused&#x22;</expression>
</annotationValue>
</elementArray>
</annotationValue>
</elementValue>
</annotation>
<description>
Perform the query action and print results to the console
</description>
<tag name="@deprecated">will be removed in future release; no alternative available</tag>
<parameter name="query">
<type class="javax.baja.sys.BString"/>
<description>
query to execute
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionaryService.spy(javax.baja.spy.SpyWriter) -->
<method name="spy"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Add implied tag index information to the spy.
</description>
<parameter name="out">
<type class="javax.baja.spy.SpyWriter"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.tagdictionary.BTagDictionaryService.getServiceTypes() -->
<method name="getServiceTypes"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type" dimension="1"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionaryService.checkParentForRestrictedComponent(javax.baja.sys.BComponent, javax.baja.sys.Context) -->
<method name="checkParentForRestrictedComponent"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Only one &lt;code&gt;BTagDictionaryService&lt;/code&gt; allowed to live under the station&#x27;s&#xa; BServiceContainer.
</description>
<parameter name="parent">
<type class="javax.baja.sys.BComponent"/>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionaryService.navEvent(javax.baja.nav.NavEvent) -->
<method name="navEvent"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Check for a rename that would affect tag groups and update the endpoint ord of any relations to&#xa; affected tag groups.  Only considering tag dictionary renames, tag group renames in the tag&#xa; dictionary tag group definitions only (not tag groups in a tag rule tag group list), tag&#xa; dictionary service renames, and renames of any ancestors of the tag dictionary service.
</description>
<tag name="@since">Niagara 4.4u1</tag>
<parameter name="event">
<type class="javax.baja.nav.NavEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionaryService.doTagsToTagGroup() -->
<method name="doTagsToTagGroup"  public="true">
<description/>
<return>
<type class="javax.baja.sys.BComponent"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionaryService.getIcon() -->
<method name="getIcon"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.BIcon"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionaryService.defaultNamespaceId -->
<field name="defaultNamespaceId"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;defaultNamespaceId&lt;/code&gt; property.&#xa; The default namespace for this service.  This is typically the namespace of a dictionary that is&#xa; installed in the service.  If a default dictionary is defined, global tags that appear in queries&#xa; are treated as tags in the default namespace.
</description>
<tag name="@see">#getDefaultNamespaceId</tag>
<tag name="@see">#setDefaultNamespaceId</tag>
</field>

<!-- javax.baja.tagdictionary.BTagDictionaryService.tagRuleIndexEnabled -->
<field name="tagRuleIndexEnabled"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;tagRuleIndexEnabled&lt;/code&gt; property.&#xa; If the tag rule cache is enabled, the rules which imply an implied tag are cached by the tag&#x27;s id.
</description>
<tag name="@see">#getTagRuleIndexEnabled</tag>
<tag name="@see">#setTagRuleIndexEnabled</tag>
</field>

<!-- javax.baja.tagdictionary.BTagDictionaryService.indexedTags -->
<field name="indexedTags"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;indexedTags&lt;/code&gt; property.&#xa; Semicolon separated list of tag ids to index when implied on an entity.
</description>
<tag name="@since">Niagara 4.3</tag>
<tag name="@see">#getIndexedTags</tag>
<tag name="@see">#setIndexedTags</tag>
</field>

<!-- javax.baja.tagdictionary.BTagDictionaryService.neqlizeOptions -->
<field name="neqlizeOptions"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;neqlizeOptions&lt;/code&gt; property.&#xa; Options to use when converting PX bound ORDs from slots to NEQL queries.
</description>
<tag name="@since">Niagara 4.9</tag>
<tag name="@see">#getNeqlizeOptions</tag>
<tag name="@see">#setNeqlizeOptions</tag>
</field>

<!-- javax.baja.tagdictionary.BTagDictionaryService.Niagara -->
<field name="Niagara"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;Niagara&lt;/code&gt; property.&#xa; The Niagara Tag Dictionary required for many built in functions based on tags.
</description>
<tag name="@see">#getNiagara</tag>
<tag name="@see">#setNiagara</tag>
</field>

<!-- javax.baja.tagdictionary.BTagDictionaryService.schemaVersion -->
<field name="schemaVersion"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;schemaVersion&lt;/code&gt; property.
</description>
<tag name="@since">Niagara 4.3</tag>
<tag name="@see">#getSchemaVersion</tag>
<tag name="@see">#setSchemaVersion</tag>
</field>

<!-- javax.baja.tagdictionary.BTagDictionaryService.clearTagRuleIndex -->
<field name="clearTagRuleIndex"  public="true" static="true" final="true">
<type class="javax.baja.sys.Action"/>
<description>
Slot for the &lt;code&gt;clearTagRuleIndex&lt;/code&gt; action.
</description>
<tag name="@see">#clearTagRuleIndex()</tag>
</field>

<!-- javax.baja.tagdictionary.BTagDictionaryService.invalidateAllTagIndexes -->
<field name="invalidateAllTagIndexes"  public="true" static="true" final="true">
<type class="javax.baja.sys.Action"/>
<description>
Slot for the &lt;code&gt;invalidateAllTagIndexes&lt;/code&gt; action.&#xa; Clear the indexed values for all tags being indexed so tag rules and tag groups are re-evaluated&#xa; the next time those tags are searched for.
</description>
<tag name="@since">Niagara 4.3</tag>
<tag name="@see">#invalidateAllTagIndexes()</tag>
</field>

<!-- javax.baja.tagdictionary.BTagDictionaryService.invalidateSingleTagIndex -->
<field name="invalidateSingleTagIndex"  public="true" static="true" final="true">
<type class="javax.baja.sys.Action"/>
<description>
Slot for the &lt;code&gt;invalidateSingleTagIndex&lt;/code&gt; action.&#xa; Clear the indexed values for a single tag being indexed so tag rules and tag groups are&#xa; re-evaluated the next time that tag is searched for.
</description>
<tag name="@since">Niagara 4.3</tag>
<tag name="@see">#invalidateSingleTagIndex(BString parameter)</tag>
</field>

<!-- javax.baja.tagdictionary.BTagDictionaryService.query -->
<field name="query"  public="true" static="true" final="true">
<type class="javax.baja.sys.Action"/>
<annotation><type class="java.lang.Deprecated"/>
</annotation>
<description>
Slot for the &lt;code&gt;query&lt;/code&gt; action.
</description>
<tag name="@deprecated">since Niagara 4.3 and will be removed in future release; no alternative available</tag>
<tag name="@see">#query(BString parameter)</tag>
</field>

<!-- javax.baja.tagdictionary.BTagDictionaryService.tagsToTagGroup -->
<field name="tagsToTagGroup"  public="true" static="true" final="true">
<type class="javax.baja.sys.Action"/>
<description>
Slot for the &lt;code&gt;tagsToTagGroup&lt;/code&gt; action.&#xa; Convert direct tags to tagGroups
</description>
<tag name="@since">Niagara 4.3</tag>
<tag name="@see">#tagsToTagGroup()</tag>
</field>

<!-- javax.baja.tagdictionary.BTagDictionaryService.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

<!-- javax.baja.tagdictionary.BTagDictionaryService.LOGGER_NAME -->
<field name="LOGGER_NAME"  public="true" static="true" final="true">
<type class="java.lang.String"/>
<description/>
</field>

</class>
</bajadoc>
