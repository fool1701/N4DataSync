<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="tagdictionary" runtimeProfile="rt" qualifiedName="javax.baja.tagdictionary.BTagDictionary" name="BTagDictionary" packageName="javax.baja.tagdictionary" public="true">
<description>
BTagDictionary is a &lt;code&gt;BComponent&lt;/code&gt; implementation of &lt;code&gt;TagDictionary&lt;/code&gt;.
</description>
<tag name="@author">John Sublett</tag>
<tag name="@creation">2/13/14</tag>
<tag name="@since">Niagara 4.0</tag>
<extends>
<type class="javax.baja.sys.BComponent"/>
</extends>
<implements>
<type class="javax.baja.tag.TagDictionary"/>
</implements>
<implements>
<type class="javax.baja.status.BIStatus"/>
</implements>
<property name="status" flags="rt">
<type class="javax.baja.status.BStatus"/>
<description>
Slot for the &lt;code&gt;status&lt;/code&gt; property.&#xa; The status of the dictionary.
</description>
<tag name="@see">#getStatus</tag>
<tag name="@see">#setStatus</tag>
</property>

<property name="faultCause" flags="rtd">
<type class="java.lang.String"/>
<description>
Slot for the &lt;code&gt;faultCause&lt;/code&gt; property.&#xa; The fault cause of the dictionary, if it is in fault
</description>
<tag name="@see">#getFaultCause</tag>
<tag name="@see">#setFaultCause</tag>
</property>

<property name="namespace" flags="">
<type class="java.lang.String"/>
<description>
Slot for the &lt;code&gt;namespace&lt;/code&gt; property.&#xa; The namespace for all tags in the dictionary.
</description>
<tag name="@see">#getNamespace</tag>
<tag name="@see">#setNamespace</tag>
</property>

<property name="version" flags="">
<type class="java.lang.String"/>
<description>
Slot for the &lt;code&gt;version&lt;/code&gt; property.&#xa; This value should be updated whenever tags, tag groups, or tag rules are added, removed, or&#xa; changed. The format of this field is not defined and its value is not automatically changed.
</description>
<tag name="@since">Niagara 4.12</tag>
<tag name="@see">#getVersion</tag>
<tag name="@see">#setVersion</tag>
</property>

<property name="neqlizeExcludedTags" flags="">
<type class="java.lang.String"/>
<description>
Slot for the &lt;code&gt;neqlizeExcludedTags&lt;/code&gt; property.&#xa; The list of default tags to exclude when converting bindings to NEQL.&#xa; Items in the value string are pattern filters separated by &#x27;,&#x27;, &#x27;;&#x27;, &#x27;\n&#x27;, &#x27;\t&#x27;, or &#x27; &#x27;&#xa; Items that follow the pattern must be fully qualified (include a namespace).&#xa; They will not inherit the namespace of the dictionary or the default namespace of the tag&#xa; dictionary service.&#xa; Example tag patterns:&#xa; &lt;ul&gt;&#xa; &lt;li&gt;&lt;code&gt;&amp;#x22;hs:*&amp;#x22;&lt;/code&gt;: exclude all tags in the dictionary with the &#x22;hs&#x22; namespace (Haystack).&lt;/li&gt;&#xa; &lt;li&gt;&lt;code&gt;&amp;#x22;*&amp;#x22;&lt;/code&gt;: exclude all tags in all dictionaries (not very helpful).&lt;/li&gt;&#xa; &lt;li&gt;&lt;code&gt;&amp;#x22;*temp*&amp;#x22;&lt;/code&gt;: exclude any tags in any dictionary that contains &#x22;temp&#x22;.&lt;/li&gt;&#xa; &lt;li&gt;&lt;code&gt;&amp;#x22;*:device&amp;#x22;&lt;/code&gt;: exclude any tag named &#x22;device&#x22; from any dictionary.&lt;/li&gt;&#xa; &lt;/ul&gt;
</description>
<tag name="@since">Niagara 4.9</tag>
<tag name="@see">#getNeqlizeExcludedTags</tag>
<tag name="@see">#setNeqlizeExcludedTags</tag>
</property>

<property name="neqlizeExcludedRelations" flags="">
<type class="java.lang.String"/>
<description>
Slot for the &lt;code&gt;neqlizeExcludedRelations&lt;/code&gt; property.&#xa; The list of default relations to exclude when converting bindings to NEQL.&#xa; Items in the value string are pattern filters separated by &#x27;,&#x27;, &#x27;;&#x27;, &#x27;\n&#x27;, &#x27;\t&#x27;, or &#x27; &#x27;&#xa; Items that follow the pattern must be fully qualified (include a namespace).&#xa; They will not inherit the namespace of the dictionary or the default namespace of the tag&#xa; dictionary service.&#xa; Relations also have a direction and that can be incorporated into the filter.&#xa; Example relation patterns:&#xa; &lt;ul&gt;&#xa; &lt;li&gt;&lt;code&gt;&amp;#x22;n:parent&amp;#x22;&lt;/code&gt;: exclude both inbound and outbound relations with that id.&lt;/li&gt;&#xa; &lt;li&gt;&lt;code&gt;&amp;#x22;n:parent*&amp;#x22;&lt;/code&gt;: exclude any relations (inbound or outbound) that starts with &#x22;n:parent&#x22;, such as &#x22;n:parentDevice&#x22;.&lt;/li&gt;&#xa; &lt;li&gt;&lt;code&gt;&amp;#x22;n:parent-&amp;gt;&amp;#x22;&lt;/code&gt;: exclude outbound relations with the id &#x22;n:parent&#x22;.&lt;/li&gt;&#xa; &lt;li&gt;&lt;code&gt;&amp;#x22;n:parent&amp;lt;-&amp;#x22;&lt;/code&gt;: exclude inbound relations with the id &#x22;n:parent&#x22;.&lt;/li&gt;&#xa; &lt;li&gt;&lt;code&gt;&amp;#x22;n:parent*-&amp;gt;&amp;#x22;&lt;/code&gt;: exclude outbound relations with an id that starts with &#x22;n:parent&#x22;.&lt;/li&gt;&#xa; &lt;li&gt;&lt;code&gt;&amp;#x22;n:parent-&amp;gt;*&amp;#x22;&lt;/code&gt;: is not a valid filter; a &lt;code&gt;&amp;#x22;-&amp;gt;&amp;#x22;&lt;/code&gt; or &lt;code&gt;&amp;#x22;&amp;lt;-&amp;#x22;&lt;/code&gt; can only appear at the end.&lt;/li&gt;&#xa; &lt;/ul&gt;
</description>
<tag name="@since">Niagara 4.9</tag>
<tag name="@see">#getNeqlizeExcludedRelations</tag>
<tag name="@see">#setNeqlizeExcludedRelations</tag>
</property>

<property name="enabled" flags="">
<type class="boolean"/>
<description>
Slot for the &lt;code&gt;enabled&lt;/code&gt; property.&#xa; The enabled state of the dictionary.
</description>
<tag name="@see">#getEnabled</tag>
<tag name="@see">#setEnabled</tag>
</property>

<property name="frozen" flags="N">
<type class="boolean"/>
<description>
Slot for the &lt;code&gt;frozen&lt;/code&gt; property.&#xa; Defines this dictionary as a &#x22;frozen&#x22; dictionary. If frozen, the dictionary can only be&#xa; imported; otherwise, manual changes will be allowed.
</description>
<tag name="@see">#getFrozen</tag>
<tag name="@see">#setFrozen</tag>
</property>

<property name="tagDefinitions" flags="">
<type class="javax.baja.tagdictionary.BTagInfoList"/>
<description>
Slot for the &lt;code&gt;tagDefinitions&lt;/code&gt; property.&#xa; The definitions of all tags in the dictionary.
</description>
<tag name="@see">#getTagDefinitions</tag>
<tag name="@see">#setTagDefinitions</tag>
</property>

<property name="tagGroupDefinitions" flags="">
<type class="javax.baja.tagdictionary.BTagGroupInfoList"/>
<description>
Slot for the &lt;code&gt;tagGroupDefinitions&lt;/code&gt; property.&#xa; The definitions of all tag groups in the dictionary.
</description>
<tag name="@see">#getTagGroupDefinitions</tag>
<tag name="@see">#setTagGroupDefinitions</tag>
</property>

<property name="relationDefinitions" flags="">
<type class="javax.baja.tagdictionary.BRelationInfoList"/>
<description>
Slot for the &lt;code&gt;relationDefinitions&lt;/code&gt; property.&#xa; The definitions of all relations in the dictionary.
</description>
<tag name="@see">#getRelationDefinitions</tag>
<tag name="@see">#setRelationDefinitions</tag>
</property>

<property name="importDictionaryOrd" flags="h">
<type class="javax.baja.naming.BOrd"/>
<description>
Slot for the &lt;code&gt;importDictionaryOrd&lt;/code&gt; property.&#xa; The default &lt;code&gt;<see ref="javax.baja.tagdictionary.BTagDictionary#importDictionary">#importDictionary</see>&lt;/code&gt; action argument.
</description>
<tag name="@see">#getImportDictionaryOrd</tag>
<tag name="@see">#setImportDictionaryOrd</tag>
</property>

<action name="importDictionary" flags="ah">
<parameter name="parameter">
<type class="javax.baja.naming.BOrd"/>
</parameter>
<return>
<type class="void"/>
</return>
<description>
Slot for the &lt;code&gt;importDictionary&lt;/code&gt; action.&#xa; Reimport the dictionary from the standard configuration file.
</description>
<tag name="@see">#importDictionary(BOrd parameter)</tag>
</action>

<!-- javax.baja.tagdictionary.BTagDictionary() -->
<constructor name="BTagDictionary" public="true">
<description>
Default constructor
</description>
</constructor>

<!-- javax.baja.tagdictionary.BTagDictionary(java.lang.String) -->
<constructor name="BTagDictionary" public="true">
<parameter name="namespace">
<type class="java.lang.String"/>
<description>
initial value of the namespace property
</description>
</parameter>
<description>
Constructor that initializes the &lt;code&gt;<see ref="javax.baja.tagdictionary.BTagDictionary#namespace">#namespace</see>&lt;/code&gt; property.
</description>
</constructor>

<!-- javax.baja.tagdictionary.BTagDictionary.getStatus() -->
<method name="getStatus"  public="true">
<description>
Get the &lt;code&gt;status&lt;/code&gt; property.&#xa; The status of the dictionary.
</description>
<tag name="@see">#status</tag>
<return>
<type class="javax.baja.status.BStatus"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionary.setStatus(javax.baja.status.BStatus) -->
<method name="setStatus"  public="true">
<description>
Set the &lt;code&gt;status&lt;/code&gt; property.&#xa; The status of the dictionary.
</description>
<tag name="@see">#status</tag>
<parameter name="v">
<type class="javax.baja.status.BStatus"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionary.getFaultCause() -->
<method name="getFaultCause"  public="true">
<description>
Get the &lt;code&gt;faultCause&lt;/code&gt; property.&#xa; The fault cause of the dictionary, if it is in fault
</description>
<tag name="@see">#faultCause</tag>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionary.setFaultCause(java.lang.String) -->
<method name="setFaultCause"  public="true">
<description>
Set the &lt;code&gt;faultCause&lt;/code&gt; property.&#xa; The fault cause of the dictionary, if it is in fault
</description>
<tag name="@see">#faultCause</tag>
<parameter name="v">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionary.getNamespace() -->
<method name="getNamespace"  public="true">
<description>
Get the &lt;code&gt;namespace&lt;/code&gt; property.&#xa; The namespace for all tags in the dictionary.
</description>
<tag name="@see">#namespace</tag>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionary.setNamespace(java.lang.String) -->
<method name="setNamespace"  public="true">
<description>
Set the &lt;code&gt;namespace&lt;/code&gt; property.&#xa; The namespace for all tags in the dictionary.
</description>
<tag name="@see">#namespace</tag>
<parameter name="v">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionary.getVersion() -->
<method name="getVersion"  public="true">
<description>
Get the &lt;code&gt;version&lt;/code&gt; property.&#xa; This value should be updated whenever tags, tag groups, or tag rules are added, removed, or&#xa; changed. The format of this field is not defined and its value is not automatically changed.
</description>
<tag name="@since">Niagara 4.12</tag>
<tag name="@see">#version</tag>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionary.setVersion(java.lang.String) -->
<method name="setVersion"  public="true">
<description>
Set the &lt;code&gt;version&lt;/code&gt; property.&#xa; This value should be updated whenever tags, tag groups, or tag rules are added, removed, or&#xa; changed. The format of this field is not defined and its value is not automatically changed.
</description>
<tag name="@since">Niagara 4.12</tag>
<tag name="@see">#version</tag>
<parameter name="v">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionary.getNeqlizeExcludedTags() -->
<method name="getNeqlizeExcludedTags"  public="true">
<description>
Get the &lt;code&gt;neqlizeExcludedTags&lt;/code&gt; property.&#xa; The list of default tags to exclude when converting bindings to NEQL.&#xa; Items in the value string are pattern filters separated by &#x27;,&#x27;, &#x27;;&#x27;, &#x27;\n&#x27;, &#x27;\t&#x27;, or &#x27; &#x27;&#xa; Items that follow the pattern must be fully qualified (include a namespace).&#xa; They will not inherit the namespace of the dictionary or the default namespace of the tag&#xa; dictionary service.&#xa; Example tag patterns:&#xa; &lt;ul&gt;&#xa; &lt;li&gt;&lt;code&gt;&amp;#x22;hs:*&amp;#x22;&lt;/code&gt;: exclude all tags in the dictionary with the &#x22;hs&#x22; namespace (Haystack).&lt;/li&gt;&#xa; &lt;li&gt;&lt;code&gt;&amp;#x22;*&amp;#x22;&lt;/code&gt;: exclude all tags in all dictionaries (not very helpful).&lt;/li&gt;&#xa; &lt;li&gt;&lt;code&gt;&amp;#x22;*temp*&amp;#x22;&lt;/code&gt;: exclude any tags in any dictionary that contains &#x22;temp&#x22;.&lt;/li&gt;&#xa; &lt;li&gt;&lt;code&gt;&amp;#x22;*:device&amp;#x22;&lt;/code&gt;: exclude any tag named &#x22;device&#x22; from any dictionary.&lt;/li&gt;&#xa; &lt;/ul&gt;
</description>
<tag name="@since">Niagara 4.9</tag>
<tag name="@see">#neqlizeExcludedTags</tag>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionary.setNeqlizeExcludedTags(java.lang.String) -->
<method name="setNeqlizeExcludedTags"  public="true">
<description>
Set the &lt;code&gt;neqlizeExcludedTags&lt;/code&gt; property.&#xa; The list of default tags to exclude when converting bindings to NEQL.&#xa; Items in the value string are pattern filters separated by &#x27;,&#x27;, &#x27;;&#x27;, &#x27;\n&#x27;, &#x27;\t&#x27;, or &#x27; &#x27;&#xa; Items that follow the pattern must be fully qualified (include a namespace).&#xa; They will not inherit the namespace of the dictionary or the default namespace of the tag&#xa; dictionary service.&#xa; Example tag patterns:&#xa; &lt;ul&gt;&#xa; &lt;li&gt;&lt;code&gt;&amp;#x22;hs:*&amp;#x22;&lt;/code&gt;: exclude all tags in the dictionary with the &#x22;hs&#x22; namespace (Haystack).&lt;/li&gt;&#xa; &lt;li&gt;&lt;code&gt;&amp;#x22;*&amp;#x22;&lt;/code&gt;: exclude all tags in all dictionaries (not very helpful).&lt;/li&gt;&#xa; &lt;li&gt;&lt;code&gt;&amp;#x22;*temp*&amp;#x22;&lt;/code&gt;: exclude any tags in any dictionary that contains &#x22;temp&#x22;.&lt;/li&gt;&#xa; &lt;li&gt;&lt;code&gt;&amp;#x22;*:device&amp;#x22;&lt;/code&gt;: exclude any tag named &#x22;device&#x22; from any dictionary.&lt;/li&gt;&#xa; &lt;/ul&gt;
</description>
<tag name="@since">Niagara 4.9</tag>
<tag name="@see">#neqlizeExcludedTags</tag>
<parameter name="v">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionary.getNeqlizeExcludedRelations() -->
<method name="getNeqlizeExcludedRelations"  public="true">
<description>
Get the &lt;code&gt;neqlizeExcludedRelations&lt;/code&gt; property.&#xa; The list of default relations to exclude when converting bindings to NEQL.&#xa; Items in the value string are pattern filters separated by &#x27;,&#x27;, &#x27;;&#x27;, &#x27;\n&#x27;, &#x27;\t&#x27;, or &#x27; &#x27;&#xa; Items that follow the pattern must be fully qualified (include a namespace).&#xa; They will not inherit the namespace of the dictionary or the default namespace of the tag&#xa; dictionary service.&#xa; Relations also have a direction and that can be incorporated into the filter.&#xa; Example relation patterns:&#xa; &lt;ul&gt;&#xa; &lt;li&gt;&lt;code&gt;&amp;#x22;n:parent&amp;#x22;&lt;/code&gt;: exclude both inbound and outbound relations with that id.&lt;/li&gt;&#xa; &lt;li&gt;&lt;code&gt;&amp;#x22;n:parent*&amp;#x22;&lt;/code&gt;: exclude any relations (inbound or outbound) that starts with &#x22;n:parent&#x22;, such as &#x22;n:parentDevice&#x22;.&lt;/li&gt;&#xa; &lt;li&gt;&lt;code&gt;&amp;#x22;n:parent-&amp;gt;&amp;#x22;&lt;/code&gt;: exclude outbound relations with the id &#x22;n:parent&#x22;.&lt;/li&gt;&#xa; &lt;li&gt;&lt;code&gt;&amp;#x22;n:parent&amp;lt;-&amp;#x22;&lt;/code&gt;: exclude inbound relations with the id &#x22;n:parent&#x22;.&lt;/li&gt;&#xa; &lt;li&gt;&lt;code&gt;&amp;#x22;n:parent*-&amp;gt;&amp;#x22;&lt;/code&gt;: exclude outbound relations with an id that starts with &#x22;n:parent&#x22;.&lt;/li&gt;&#xa; &lt;li&gt;&lt;code&gt;&amp;#x22;n:parent-&amp;gt;*&amp;#x22;&lt;/code&gt;: is not a valid filter; a &lt;code&gt;&amp;#x22;-&amp;gt;&amp;#x22;&lt;/code&gt; or &lt;code&gt;&amp;#x22;&amp;lt;-&amp;#x22;&lt;/code&gt; can only appear at the end.&lt;/li&gt;&#xa; &lt;/ul&gt;
</description>
<tag name="@since">Niagara 4.9</tag>
<tag name="@see">#neqlizeExcludedRelations</tag>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionary.setNeqlizeExcludedRelations(java.lang.String) -->
<method name="setNeqlizeExcludedRelations"  public="true">
<description>
Set the &lt;code&gt;neqlizeExcludedRelations&lt;/code&gt; property.&#xa; The list of default relations to exclude when converting bindings to NEQL.&#xa; Items in the value string are pattern filters separated by &#x27;,&#x27;, &#x27;;&#x27;, &#x27;\n&#x27;, &#x27;\t&#x27;, or &#x27; &#x27;&#xa; Items that follow the pattern must be fully qualified (include a namespace).&#xa; They will not inherit the namespace of the dictionary or the default namespace of the tag&#xa; dictionary service.&#xa; Relations also have a direction and that can be incorporated into the filter.&#xa; Example relation patterns:&#xa; &lt;ul&gt;&#xa; &lt;li&gt;&lt;code&gt;&amp;#x22;n:parent&amp;#x22;&lt;/code&gt;: exclude both inbound and outbound relations with that id.&lt;/li&gt;&#xa; &lt;li&gt;&lt;code&gt;&amp;#x22;n:parent*&amp;#x22;&lt;/code&gt;: exclude any relations (inbound or outbound) that starts with &#x22;n:parent&#x22;, such as &#x22;n:parentDevice&#x22;.&lt;/li&gt;&#xa; &lt;li&gt;&lt;code&gt;&amp;#x22;n:parent-&amp;gt;&amp;#x22;&lt;/code&gt;: exclude outbound relations with the id &#x22;n:parent&#x22;.&lt;/li&gt;&#xa; &lt;li&gt;&lt;code&gt;&amp;#x22;n:parent&amp;lt;-&amp;#x22;&lt;/code&gt;: exclude inbound relations with the id &#x22;n:parent&#x22;.&lt;/li&gt;&#xa; &lt;li&gt;&lt;code&gt;&amp;#x22;n:parent*-&amp;gt;&amp;#x22;&lt;/code&gt;: exclude outbound relations with an id that starts with &#x22;n:parent&#x22;.&lt;/li&gt;&#xa; &lt;li&gt;&lt;code&gt;&amp;#x22;n:parent-&amp;gt;*&amp;#x22;&lt;/code&gt;: is not a valid filter; a &lt;code&gt;&amp;#x22;-&amp;gt;&amp;#x22;&lt;/code&gt; or &lt;code&gt;&amp;#x22;&amp;lt;-&amp;#x22;&lt;/code&gt; can only appear at the end.&lt;/li&gt;&#xa; &lt;/ul&gt;
</description>
<tag name="@since">Niagara 4.9</tag>
<tag name="@see">#neqlizeExcludedRelations</tag>
<parameter name="v">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionary.getEnabled() -->
<method name="getEnabled"  public="true">
<description>
Get the &lt;code&gt;enabled&lt;/code&gt; property.&#xa; The enabled state of the dictionary.
</description>
<tag name="@see">#enabled</tag>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionary.setEnabled(boolean) -->
<method name="setEnabled"  public="true">
<description>
Set the &lt;code&gt;enabled&lt;/code&gt; property.&#xa; The enabled state of the dictionary.
</description>
<tag name="@see">#enabled</tag>
<parameter name="v">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionary.getFrozen() -->
<method name="getFrozen"  public="true">
<description>
Get the &lt;code&gt;frozen&lt;/code&gt; property.&#xa; Defines this dictionary as a &#x22;frozen&#x22; dictionary. If frozen, the dictionary can only be&#xa; imported; otherwise, manual changes will be allowed.
</description>
<tag name="@see">#frozen</tag>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionary.setFrozen(boolean) -->
<method name="setFrozen"  public="true">
<description>
Set the &lt;code&gt;frozen&lt;/code&gt; property.&#xa; Defines this dictionary as a &#x22;frozen&#x22; dictionary. If frozen, the dictionary can only be&#xa; imported; otherwise, manual changes will be allowed.
</description>
<tag name="@see">#frozen</tag>
<parameter name="v">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionary.getTagDefinitions() -->
<method name="getTagDefinitions"  public="true">
<description>
Get the &lt;code&gt;tagDefinitions&lt;/code&gt; property.&#xa; The definitions of all tags in the dictionary.
</description>
<tag name="@see">#tagDefinitions</tag>
<return>
<type class="javax.baja.tagdictionary.BTagInfoList"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionary.setTagDefinitions(javax.baja.tagdictionary.BTagInfoList) -->
<method name="setTagDefinitions"  public="true">
<description>
Set the &lt;code&gt;tagDefinitions&lt;/code&gt; property.&#xa; The definitions of all tags in the dictionary.
</description>
<tag name="@see">#tagDefinitions</tag>
<parameter name="v">
<type class="javax.baja.tagdictionary.BTagInfoList"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionary.getTagGroupDefinitions() -->
<method name="getTagGroupDefinitions"  public="true">
<description>
Get the &lt;code&gt;tagGroupDefinitions&lt;/code&gt; property.&#xa; The definitions of all tag groups in the dictionary.
</description>
<tag name="@see">#tagGroupDefinitions</tag>
<return>
<type class="javax.baja.tagdictionary.BTagGroupInfoList"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionary.setTagGroupDefinitions(javax.baja.tagdictionary.BTagGroupInfoList) -->
<method name="setTagGroupDefinitions"  public="true">
<description>
Set the &lt;code&gt;tagGroupDefinitions&lt;/code&gt; property.&#xa; The definitions of all tag groups in the dictionary.
</description>
<tag name="@see">#tagGroupDefinitions</tag>
<parameter name="v">
<type class="javax.baja.tagdictionary.BTagGroupInfoList"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionary.getRelationDefinitions() -->
<method name="getRelationDefinitions"  public="true">
<description>
Get the &lt;code&gt;relationDefinitions&lt;/code&gt; property.&#xa; The definitions of all relations in the dictionary.
</description>
<tag name="@see">#relationDefinitions</tag>
<return>
<type class="javax.baja.tagdictionary.BRelationInfoList"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionary.setRelationDefinitions(javax.baja.tagdictionary.BRelationInfoList) -->
<method name="setRelationDefinitions"  public="true">
<description>
Set the &lt;code&gt;relationDefinitions&lt;/code&gt; property.&#xa; The definitions of all relations in the dictionary.
</description>
<tag name="@see">#relationDefinitions</tag>
<parameter name="v">
<type class="javax.baja.tagdictionary.BRelationInfoList"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionary.getImportDictionaryOrd() -->
<method name="getImportDictionaryOrd"  public="true">
<description>
Get the &lt;code&gt;importDictionaryOrd&lt;/code&gt; property.&#xa; The default &lt;code&gt;<see ref="javax.baja.tagdictionary.BTagDictionary#importDictionary">#importDictionary</see>&lt;/code&gt; action argument.
</description>
<tag name="@see">#importDictionaryOrd</tag>
<return>
<type class="javax.baja.naming.BOrd"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionary.setImportDictionaryOrd(javax.baja.naming.BOrd) -->
<method name="setImportDictionaryOrd"  public="true">
<description>
Set the &lt;code&gt;importDictionaryOrd&lt;/code&gt; property.&#xa; The default &lt;code&gt;<see ref="javax.baja.tagdictionary.BTagDictionary#importDictionary">#importDictionary</see>&lt;/code&gt; action argument.
</description>
<tag name="@see">#importDictionaryOrd</tag>
<parameter name="v">
<type class="javax.baja.naming.BOrd"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionary.importDictionary(javax.baja.naming.BOrd) -->
<method name="importDictionary"  public="true">
<description>
Invoke the &lt;code&gt;importDictionary&lt;/code&gt; action.&#xa; Reimport the dictionary from the standard configuration file.
</description>
<tag name="@see">#importDictionary</tag>
<parameter name="parameter">
<type class="javax.baja.naming.BOrd"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionary.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionary.started() -->
<method name="started"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Checks that the namespace is not empty and not the same as another&#xa; &lt;code&gt;BTagDictionary&lt;/code&gt;.
</description>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.tagdictionary.BTagDictionary.changed(javax.baja.sys.Property, javax.baja.sys.Context) -->
<method name="changed"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Updates the &lt;code&gt;<see ref="javax.baja.tagdictionary.BTagDictionary#status">#status</see>&lt;/code&gt; property.&#xa;&#xa; &lt;p&gt;If the &lt;code&gt;<see ref="javax.baja.tagdictionary.BTagDictionary#namespace">#namespace</see>&lt;/code&gt; property has changed, check that the value is not empty and not&#xa; the same as another &lt;code&gt;BTagDictionary&lt;/code&gt;.&lt;/p&gt;
</description>
<parameter name="p">
<type class="javax.baja.sys.Property"/>
<description>
property that has changed
</description>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
<description>
execution context
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionary.checkSetFlags(javax.baja.sys.Slot, int, javax.baja.sys.Context) -->
<method name="checkSetFlags"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Do not allow the read-only flag on the &lt;code&gt;<see ref="javax.baja.tagdictionary.BTagDictionary#status">#status</see>&lt;/code&gt; or&#xa; &lt;code&gt;<see ref="javax.baja.tagdictionary.BTagDictionary#faultCause">#faultCause</see>&lt;/code&gt; slots to be cleared.
</description>
<parameter name="slot">
<type class="javax.baja.sys.Slot"/>
<description>
slot on which flags are being set
</description>
</parameter>
<parameter name="flags">
<type class="int"/>
<description>
&lt;code&gt;<see ref="javax.baja.sys.Flags">Flags</see>&lt;/code&gt; to be added to the slot
</description>
</parameter>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
<description>
execution context
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionary.getStandardDictionary() -->
<method name="getStandardDictionary"  public="true">
<description>
For &#x22;frozen&#x22; dictionaries, get an instance of the gold standard for this&#xa; dictionary. The default implementation here just returns &lt;code&gt;null&lt;/code&gt;.
</description>
<return>
<type class="javax.baja.tagdictionary.BTagDictionary"/>
<description>
&lt;code&gt;null&lt;/code&gt;
</description>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionary.toString(javax.baja.sys.Context) -->
<method name="toString"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Returns the lexicon property &#x22;tag.dictionary.shortName&#x22; applied to the&#xa; display name of this component (see &lt;code&gt;<see ref="javax.baja.sys.BComplex#getDisplayName(javax.baja.sys.Context)">BComplex#getDisplayName(Context)</see>&lt;/code&gt;)
</description>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
<description>
execution context
</description>
</parameter>
<return>
<type class="java.lang.String"/>
<description>
if the display name exists, the lexicon version that; otherwise see&#xa; &lt;code&gt;<see ref="javax.baja.sys.BObject#toString(javax.baja.sys.Context)">BObject#toString(Context)</see>&lt;/code&gt;
</description>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionary.isParentLegal(javax.baja.sys.BComponent) -->
<method name="isParentLegal"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Checks that the parent to which this component is being added is of type&#xa; &lt;code&gt;<see ref="javax.baja.tag.TagDictionaryService">TagDictionaryService</see>&lt;/code&gt;.
</description>
<parameter name="parent">
<type class="javax.baja.sys.BComponent"/>
<description>
component to which this object is being added
</description>
</parameter>
<return>
<type class="boolean"/>
<description>
&lt;code&gt;true&lt;/code&gt; if the parent is an instance of &lt;code&gt;TagDictionaryService&lt;/code&gt;;&#xa; otherwise, &lt;code&gt;false&lt;/code&gt;
</description>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionary.getTags() -->
<method name="getTags"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Checks that the tag dictionary is operational (see&#xa; &lt;code&gt;<see ref="javax.baja.tagdictionary.BTagDictionary#isOperational()">#isOperational()</see>&lt;/code&gt;) before returning an &lt;code&gt;Iterator&lt;/code&gt;&#xa; on the tags.
</description>
<return>
<parameterizedType class="java.util.Iterator">
<args>
<type class="javax.baja.tag.TagInfo"/>
</args>
</parameterizedType>
<description>
an iterator for the tags
</description>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionary.getTagGroups() -->
<method name="getTagGroups"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Checks that the tag dictionary is operational (see&#xa; &lt;code&gt;<see ref="javax.baja.tagdictionary.BTagDictionary#isOperational()">#isOperational()</see>&lt;/code&gt;) before returning an &lt;code&gt;Iterator&lt;/code&gt;&#xa; on the tag groups.
</description>
<return>
<parameterizedType class="java.util.Iterator">
<args>
<type class="javax.baja.tag.TagGroupInfo"/>
</args>
</parameterizedType>
<description>
an iterator for the tag groups
</description>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionary.getRelations() -->
<method name="getRelations"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Checks that the tag dictionary is operational (see&#xa; &lt;code&gt;<see ref="javax.baja.tagdictionary.BTagDictionary#isOperational()">BTagDictionary#isOperational()</see>&lt;/code&gt;) before returning an &lt;code&gt;Iterator&lt;/code&gt;&#xa; on the relations.
</description>
<return>
<parameterizedType class="java.util.Iterator">
<args>
<type class="javax.baja.tag.RelationInfo"/>
</args>
</parameterizedType>
<description>
an iterator of the relations
</description>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionary.getValidTags(javax.baja.tag.Entity) -->
<method name="getValidTags"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get the tags from this dictionary that are valid for the specified entity.
</description>
<parameter name="entity">
<type class="javax.baja.tag.Entity"/>
<description>
entity to evaluate for valid tags
</description>
</parameter>
<return>
<parameterizedType class="java.util.Collection">
<args>
<type class="javax.baja.tag.TagInfo"/>
</args>
</parameterizedType>
<description>
a collection of the valid tag groups from this&#xa;   dictionary for the entity.
</description>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionary.getValidTagGroups(javax.baja.tag.Entity) -->
<method name="getValidTagGroups"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get the tag groups from this dictionary that are valid for the specified entity.
</description>
<parameter name="entity">
<type class="javax.baja.tag.Entity"/>
<description>
entity to evaluate for valid tag groups
</description>
</parameter>
<return>
<parameterizedType class="java.util.Collection">
<args>
<type class="javax.baja.tag.TagGroupInfo"/>
</args>
</parameterizedType>
<description>
a collection of the valid tag groups from this&#xa;   dictionary for the entity.
</description>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionary.isDisabled() -->
<method name="isDisabled"  public="true" final="true">
<description>
Returns whether the dictionary is disabled based on the&#xa; &lt;code&gt;<see ref="javax.baja.tagdictionary.BTagDictionary#enabled">#enabled</see>&lt;/code&gt; property.
</description>
<return>
<type class="boolean"/>
<description>
&lt;code&gt;true&lt;/code&gt; if the dictionary is disabled; &lt;code&gt;false&lt;/code&gt; otherwise
</description>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionary.isFault() -->
<method name="isFault"  public="true" final="true">
<description>
Returns whether the dictionary is faulted based on whether a fatal or&#xa; namespace fault has occurred.&#xa;&#xa; &lt;p&gt;See &lt;code&gt;<see ref="javax.baja.tagdictionary.BTagDictionary#changed(javax.baja.sys.Property, javax.baja.sys.Context)">#changed(Property, Context)</see>&lt;/code&gt; for more information&#xa; on a namespace fault. Refer to the &lt;code&gt;<see ref="javax.baja.tagdictionary.BTagDictionary#faultCause">#faultCause</see>&lt;/code&gt;&#xa; property for the fault reason.&lt;/p&gt;
</description>
<return>
<type class="boolean"/>
<description>
&lt;code&gt;true&lt;/code&gt; if the dictionary is faulted; &lt;code&gt;false&lt;/code&gt; otherwise
</description>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionary.isOperational() -->
<method name="isOperational"  public="true" final="true">
<description>
Test whether the dictionary is not disabled (see &lt;code&gt;<see ref="javax.baja.tagdictionary.BTagDictionary#isDisabled()">#isDisabled()</see>&lt;/code&gt;) and not faulted (see&#xa; &lt;code&gt;<see ref="javax.baja.tagdictionary.BTagDictionary#isFault()">#isFault()</see>&lt;/code&gt;).
</description>
<return>
<type class="boolean"/>
<description>
&lt;code&gt;true&lt;/code&gt; if not disabled and not faulted; &lt;code&gt;false&lt;/code&gt; otherwise.
</description>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionary.updateStatus() -->
<method name="updateStatus"  public="true" final="true">
<description>
Recompute the status property based on the current enable and fault states.&#xa; See &lt;code&gt;<see ref="javax.baja.tagdictionary.BTagDictionary#isDisabled()">#isDisabled()</see>&lt;/code&gt; and &lt;code&gt;<see ref="javax.baja.tagdictionary.BTagDictionary#isFault()">#isFault()</see>&lt;/code&gt;.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionary.isImportable() -->
<method name="isImportable"  public="true">
<description>
Always returns true for &lt;code&gt;BTagDictionary&lt;/code&gt; but may be customized&#xa; by subclasses.
</description>
<return>
<type class="boolean"/>
<description>
&lt;code&gt;true&lt;/code&gt; if the dictionary can be imported; &lt;code&gt;false&lt;/code&gt; otherwise
</description>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionary.doImportDictionary(javax.baja.naming.BOrd) -->
<method name="doImportDictionary"  public="true">
<annotation><type class="java.lang.SuppressWarnings"/>
<elementValue name="value">
<annotationValue kind="array">
<elementArray>
<annotationValue kind="expr">
<expression>&#x22;unused&#x22;</expression>
</annotationValue>
</elementArray>
</annotationValue>
</elementValue>
</annotation>
<description>
Import this tag dictionary from an external source.&#xa;&#xa; &lt;p&gt;Sets the &lt;code&gt;<see ref="javax.baja.tagdictionary.BTagDictionary#importDictionaryOrd">#importDictionaryOrd</see>&lt;/code&gt; property to the&#xa; specified file and calls &lt;code&gt;<see ref="com.tridium.tagdictionary.util.ImportUtil#ImportTagDictionary(javax.baja.tagdictionary.BTagDictionary, javax.baja.naming.BOrd)">ImportUtil#ImportTagDictionary(BTagDictionary, BOrd)</see>&lt;/code&gt;.&lt;/p&gt;
</description>
<parameter name="file">
<type class="javax.baja.naming.BOrd"/>
<description>
external source
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionary.getActionParameterDefault(javax.baja.sys.Action) -->
<method name="getActionParameterDefault"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
For the &lt;code&gt;<see ref="javax.baja.tagdictionary.BTagDictionary#importDictionary">#importDictionary</see>&lt;/code&gt; action slot, return the&#xa; value of the &lt;code&gt;<see ref="javax.baja.tagdictionary.BTagDictionary#importDictionaryOrd">#importDictionaryOrd</see>&lt;/code&gt; slot.
</description>
<parameter name="action">
<type class="javax.baja.sys.Action"/>
<description>
action for which a default value is required
</description>
</parameter>
<return>
<type class="javax.baja.sys.BValue"/>
<description>
a &lt;code&gt;<see ref="javax.baja.naming.BOrd">BOrd</see>&lt;/code&gt; if for the &lt;code&gt;importDictionary&lt;/code&gt; action slot;&#xa; otherwise, see &lt;code&gt;<see ref="javax.baja.sys.BComponent#getActionParameterDefault(javax.baja.sys.Action)">BComponent#getActionParameterDefault(Action)</see>&lt;/code&gt;.
</description>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionary.getIcon() -->
<method name="getIcon"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.BIcon"/>
</return>
</method>

<!-- javax.baja.tagdictionary.BTagDictionary.status -->
<field name="status"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;status&lt;/code&gt; property.&#xa; The status of the dictionary.
</description>
<tag name="@see">#getStatus</tag>
<tag name="@see">#setStatus</tag>
</field>

<!-- javax.baja.tagdictionary.BTagDictionary.faultCause -->
<field name="faultCause"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;faultCause&lt;/code&gt; property.&#xa; The fault cause of the dictionary, if it is in fault
</description>
<tag name="@see">#getFaultCause</tag>
<tag name="@see">#setFaultCause</tag>
</field>

<!-- javax.baja.tagdictionary.BTagDictionary.namespace -->
<field name="namespace"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;namespace&lt;/code&gt; property.&#xa; The namespace for all tags in the dictionary.
</description>
<tag name="@see">#getNamespace</tag>
<tag name="@see">#setNamespace</tag>
</field>

<!-- javax.baja.tagdictionary.BTagDictionary.version -->
<field name="version"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;version&lt;/code&gt; property.&#xa; This value should be updated whenever tags, tag groups, or tag rules are added, removed, or&#xa; changed. The format of this field is not defined and its value is not automatically changed.
</description>
<tag name="@since">Niagara 4.12</tag>
<tag name="@see">#getVersion</tag>
<tag name="@see">#setVersion</tag>
</field>

<!-- javax.baja.tagdictionary.BTagDictionary.neqlizeExcludedTags -->
<field name="neqlizeExcludedTags"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;neqlizeExcludedTags&lt;/code&gt; property.&#xa; The list of default tags to exclude when converting bindings to NEQL.&#xa; Items in the value string are pattern filters separated by &#x27;,&#x27;, &#x27;;&#x27;, &#x27;\n&#x27;, &#x27;\t&#x27;, or &#x27; &#x27;&#xa; Items that follow the pattern must be fully qualified (include a namespace).&#xa; They will not inherit the namespace of the dictionary or the default namespace of the tag&#xa; dictionary service.&#xa; Example tag patterns:&#xa; &lt;ul&gt;&#xa; &lt;li&gt;&lt;code&gt;&amp;#x22;hs:*&amp;#x22;&lt;/code&gt;: exclude all tags in the dictionary with the &#x22;hs&#x22; namespace (Haystack).&lt;/li&gt;&#xa; &lt;li&gt;&lt;code&gt;&amp;#x22;*&amp;#x22;&lt;/code&gt;: exclude all tags in all dictionaries (not very helpful).&lt;/li&gt;&#xa; &lt;li&gt;&lt;code&gt;&amp;#x22;*temp*&amp;#x22;&lt;/code&gt;: exclude any tags in any dictionary that contains &#x22;temp&#x22;.&lt;/li&gt;&#xa; &lt;li&gt;&lt;code&gt;&amp;#x22;*:device&amp;#x22;&lt;/code&gt;: exclude any tag named &#x22;device&#x22; from any dictionary.&lt;/li&gt;&#xa; &lt;/ul&gt;
</description>
<tag name="@since">Niagara 4.9</tag>
<tag name="@see">#getNeqlizeExcludedTags</tag>
<tag name="@see">#setNeqlizeExcludedTags</tag>
</field>

<!-- javax.baja.tagdictionary.BTagDictionary.neqlizeExcludedRelations -->
<field name="neqlizeExcludedRelations"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;neqlizeExcludedRelations&lt;/code&gt; property.&#xa; The list of default relations to exclude when converting bindings to NEQL.&#xa; Items in the value string are pattern filters separated by &#x27;,&#x27;, &#x27;;&#x27;, &#x27;\n&#x27;, &#x27;\t&#x27;, or &#x27; &#x27;&#xa; Items that follow the pattern must be fully qualified (include a namespace).&#xa; They will not inherit the namespace of the dictionary or the default namespace of the tag&#xa; dictionary service.&#xa; Relations also have a direction and that can be incorporated into the filter.&#xa; Example relation patterns:&#xa; &lt;ul&gt;&#xa; &lt;li&gt;&lt;code&gt;&amp;#x22;n:parent&amp;#x22;&lt;/code&gt;: exclude both inbound and outbound relations with that id.&lt;/li&gt;&#xa; &lt;li&gt;&lt;code&gt;&amp;#x22;n:parent*&amp;#x22;&lt;/code&gt;: exclude any relations (inbound or outbound) that starts with &#x22;n:parent&#x22;, such as &#x22;n:parentDevice&#x22;.&lt;/li&gt;&#xa; &lt;li&gt;&lt;code&gt;&amp;#x22;n:parent-&amp;gt;&amp;#x22;&lt;/code&gt;: exclude outbound relations with the id &#x22;n:parent&#x22;.&lt;/li&gt;&#xa; &lt;li&gt;&lt;code&gt;&amp;#x22;n:parent&amp;lt;-&amp;#x22;&lt;/code&gt;: exclude inbound relations with the id &#x22;n:parent&#x22;.&lt;/li&gt;&#xa; &lt;li&gt;&lt;code&gt;&amp;#x22;n:parent*-&amp;gt;&amp;#x22;&lt;/code&gt;: exclude outbound relations with an id that starts with &#x22;n:parent&#x22;.&lt;/li&gt;&#xa; &lt;li&gt;&lt;code&gt;&amp;#x22;n:parent-&amp;gt;*&amp;#x22;&lt;/code&gt;: is not a valid filter; a &lt;code&gt;&amp;#x22;-&amp;gt;&amp;#x22;&lt;/code&gt; or &lt;code&gt;&amp;#x22;&amp;lt;-&amp;#x22;&lt;/code&gt; can only appear at the end.&lt;/li&gt;&#xa; &lt;/ul&gt;
</description>
<tag name="@since">Niagara 4.9</tag>
<tag name="@see">#getNeqlizeExcludedRelations</tag>
<tag name="@see">#setNeqlizeExcludedRelations</tag>
</field>

<!-- javax.baja.tagdictionary.BTagDictionary.enabled -->
<field name="enabled"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;enabled&lt;/code&gt; property.&#xa; The enabled state of the dictionary.
</description>
<tag name="@see">#getEnabled</tag>
<tag name="@see">#setEnabled</tag>
</field>

<!-- javax.baja.tagdictionary.BTagDictionary.frozen -->
<field name="frozen"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;frozen&lt;/code&gt; property.&#xa; Defines this dictionary as a &#x22;frozen&#x22; dictionary. If frozen, the dictionary can only be&#xa; imported; otherwise, manual changes will be allowed.
</description>
<tag name="@see">#getFrozen</tag>
<tag name="@see">#setFrozen</tag>
</field>

<!-- javax.baja.tagdictionary.BTagDictionary.tagDefinitions -->
<field name="tagDefinitions"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;tagDefinitions&lt;/code&gt; property.&#xa; The definitions of all tags in the dictionary.
</description>
<tag name="@see">#getTagDefinitions</tag>
<tag name="@see">#setTagDefinitions</tag>
</field>

<!-- javax.baja.tagdictionary.BTagDictionary.tagGroupDefinitions -->
<field name="tagGroupDefinitions"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;tagGroupDefinitions&lt;/code&gt; property.&#xa; The definitions of all tag groups in the dictionary.
</description>
<tag name="@see">#getTagGroupDefinitions</tag>
<tag name="@see">#setTagGroupDefinitions</tag>
</field>

<!-- javax.baja.tagdictionary.BTagDictionary.relationDefinitions -->
<field name="relationDefinitions"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;relationDefinitions&lt;/code&gt; property.&#xa; The definitions of all relations in the dictionary.
</description>
<tag name="@see">#getRelationDefinitions</tag>
<tag name="@see">#setRelationDefinitions</tag>
</field>

<!-- javax.baja.tagdictionary.BTagDictionary.importDictionaryOrd -->
<field name="importDictionaryOrd"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;importDictionaryOrd&lt;/code&gt; property.&#xa; The default &lt;code&gt;<see ref="javax.baja.tagdictionary.BTagDictionary#importDictionary">#importDictionary</see>&lt;/code&gt; action argument.
</description>
<tag name="@see">#getImportDictionaryOrd</tag>
<tag name="@see">#setImportDictionaryOrd</tag>
</field>

<!-- javax.baja.tagdictionary.BTagDictionary.importDictionary -->
<field name="importDictionary"  public="true" static="true" final="true">
<type class="javax.baja.sys.Action"/>
<description>
Slot for the &lt;code&gt;importDictionary&lt;/code&gt; action.&#xa; Reimport the dictionary from the standard configuration file.
</description>
<tag name="@see">#importDictionary(BOrd parameter)</tag>
</field>

<!-- javax.baja.tagdictionary.BTagDictionary.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

<!-- javax.baja.tagdictionary.BTagDictionary.importContext -->
<field name="importContext"  public="true" static="true">
<type class="javax.baja.sys.Context"/>
<description>
Context used during import actions.
</description>
</field>

<!-- javax.baja.tagdictionary.BTagDictionary.logger -->
<field name="logger"  public="true" static="true">
<type class="java.util.logging.Logger"/>
<description>
This logger is named &#x22;tagdictionary&#x22;.
</description>
</field>

<!-- javax.baja.tagdictionary.BTagDictionary.lex -->
<field name="lex"  public="true" static="true" final="true">
<type class="javax.baja.util.Lexicon"/>
<description>
The lexicon for the tagdictionary module.
</description>
</field>

</class>
</bajadoc>
