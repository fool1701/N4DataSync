<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="devDriver" runtimeProfile="wb" qualifiedName="com.tridium.ddf.ui.DdfMgrUtil" name="DdfMgrUtil" packageName="com.tridium.ddf.ui" public="true">
<description>
This class holds the common functionality that exists between the&#xa; point manager ui classes and the device manager ui classes.
</description>
<tag name="@author">lperkins</tag>
<extends>
<type class="java.lang.Object"/>
</extends>
<implements>
<type class="com.tridium.ddf.IDdfFacetConst"/>
</implements>
<!-- com.tridium.ddf.ui.DdfMgrUtil() -->
<constructor name="DdfMgrUtil" protected="true">
<description>
Cannot instantiate! Access static methods only.
</description>
</constructor>

<!-- com.tridium.ddf.ui.DdfMgrUtil.getDiscoveryLeafType(javax.baja.workbench.mgr.BAbstractManager) -->
<method name="getDiscoveryLeafType"  public="true" static="true">
<description>
Gets the discovery leaf type for a BIDdfDiscoveryManager. This is&#xa; determined by finding the BIDdfDiscoveryHost (usually the driver&#x27;s&#xa; point device extension or the driver&#x27;s network) for the givne mgr,&#xa; calling getDiscoveryPreferences() on the discovery host, and then&#xa; calling getDiscoveryLeafType() on the discovery host&#x27;s discovery&#xa; preferences structure.
</description>
<parameter name="mgr">
<type class="javax.baja.workbench.mgr.BAbstractManager"/>
</parameter>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- com.tridium.ddf.ui.DdfMgrUtil.getDiscoveryLeafInstance(javax.baja.workbench.mgr.BAbstractManager) -->
<method name="getDiscoveryLeafInstance"  public="true" static="true">
<description>
Gets a prototype instance of the discovery leaf type for a BAbstractManager.
</description>
<parameter name="mgr">
<type class="javax.baja.workbench.mgr.BAbstractManager"/>
</parameter>
<return>
<type class="com.tridium.ddf.discover.BIDdfDiscoveryLeaf"/>
</return>
</method>

<!-- com.tridium.ddf.ui.DdfMgrUtil.getDatabaseType(javax.baja.workbench.mgr.BAbstractManager) -->
<method name="getDatabaseType"  public="true" static="true">
<description>
Returns the driver&#x27;s device type if mgr is a BDdfDeviceManager.&#xa; &#xa; Returns the driver&#x27;s proxy ext type if the mgr is a BDdfPointManager.&#xa; &#xa; Returns null otherwise (this shouldn&#x27;t happen unless somebody extends ddf driver)
</description>
<parameter name="mgr">
<type class="javax.baja.workbench.mgr.BAbstractManager"/>
</parameter>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- com.tridium.ddf.ui.DdfMgrUtil.getDatabaseInstanceDefault(javax.baja.workbench.mgr.BAbstractManager) -->
<method name="getDatabaseInstanceDefault"  public="true" static="true">
<description>
Returns a default instance of the given manager&#x27;s database type.
</description>
<parameter name="mgr">
<type class="javax.baja.workbench.mgr.BAbstractManager"/>
</parameter>
<return>
<type class="javax.baja.sys.BComponent"/>
</return>
</method>

<!-- com.tridium.ddf.ui.DdfMgrUtil.findDiscoveryHost(javax.baja.workbench.mgr.BAbstractManager) -->
<method name="findDiscoveryHost"  public="true" static="true">
<description>
Gets the discovery host for a BAbstractManager.
</description>
<parameter name="mgr">
<type class="javax.baja.workbench.mgr.BAbstractManager"/>
</parameter>
<return>
<type class="com.tridium.ddf.discover.BIDdfDiscoveryHost"/>
</return>
</method>

<!-- com.tridium.ddf.ui.DdfMgrUtil.findDiscoveryHost(javax.baja.sys.BComplex) -->
<method name="findDiscoveryHost"  protected="true" static="true">
<description>
Finds the most immediate ancestor in the Niagara AX navigation tree above&#xa; the given obj that is an instance of BIDdfDiscoveryHost. This should&#xa; typically be the network in the case of a device manager or the point&#xa; device extension in the case of a point manager.
</description>
<parameter name="obj">
<type class="javax.baja.sys.BComplex"/>
</parameter>
<return>
<type class="com.tridium.ddf.discover.BIDdfDiscoveryHost"/>
</return>
</method>

<!-- com.tridium.ddf.ui.DdfMgrUtil.findDdfNetwork(javax.baja.workbench.mgr.BAbstractManager) -->
<method name="findDdfNetwork"  public="true" static="true">
<description>
Finds the network that is above or that is the component on&#xa; which the abstract manager is an agent.
</description>
<parameter name="mgr">
<type class="javax.baja.workbench.mgr.BAbstractManager"/>
</parameter>
<return>
<type class="com.tridium.ddf.BDdfNetwork"/>
</return>
</method>

<!-- com.tridium.ddf.ui.DdfMgrUtil.findDdfDevice(javax.baja.workbench.mgr.BAbstractManager) -->
<method name="findDdfDevice"  public="true" static="true">
<description>
Finds the ddf device that is above or that is the component on&#xa; which the abstract manager is an agent. Obviously the given mgr must&#xa; be the point manager (this could not possibly work for the device mgr)
</description>
<parameter name="mgr">
<type class="javax.baja.workbench.mgr.BAbstractManager"/>
</parameter>
<return>
<type class="com.tridium.ddf.BDdfDevice"/>
</return>
</method>

<!-- com.tridium.ddf.ui.DdfMgrUtil.findDdfPointDeviceExt(javax.baja.workbench.mgr.BAbstractManager) -->
<method name="findDdfPointDeviceExt"  public="true" static="true">
<description>
Finds the ddf-point-device-ext that is above or that is the component on&#xa; which the abstract manager is an agent. Obviously the given mgr must&#xa; be the point manager (this could not possibly work for the device mgr)
</description>
<parameter name="mgr">
<type class="javax.baja.workbench.mgr.BAbstractManager"/>
</parameter>
<return>
<type class="com.tridium.ddf.BDdfPointDeviceExt"/>
</return>
</method>

<!-- com.tridium.ddf.ui.DdfMgrUtil.findDdfNetwork(javax.baja.sys.BComplex) -->
<method name="findDdfNetwork"  protected="true" static="true">
<description>
This method is called by the findDdfNetwork method that takes&#xa; an abstract manager.
</description>
<parameter name="obj">
<type class="javax.baja.sys.BComplex"/>
<description/>
</parameter>
<return>
<type class="com.tridium.ddf.BDdfNetwork"/>
<description/>
</return>
</method>

<!-- com.tridium.ddf.ui.DdfMgrUtil.findDdfDevice(javax.baja.sys.BComplex) -->
<method name="findDdfDevice"  protected="true" static="true">
<description>
This method is called by the findDdfDevice method that takes&#xa; an abstract manager.
</description>
<parameter name="obj">
<type class="javax.baja.sys.BComplex"/>
<description/>
</parameter>
<return>
<type class="com.tridium.ddf.BDdfDevice"/>
<description>
the ddf device that is above or that is the component on&#xa; which the abstract manager is an agent.
</description>
</return>
</method>

<!-- com.tridium.ddf.ui.DdfMgrUtil.findDdfPointDeviceExt(javax.baja.sys.BComplex) -->
<method name="findDdfPointDeviceExt"  protected="true" static="true">
<description>
This method is called by the findDdfPointDeviceExt method that takes&#xa; an abstract manager.
</description>
<parameter name="obj">
<type class="javax.baja.sys.BComplex"/>
<description/>
</parameter>
<return>
<type class="com.tridium.ddf.BDdfPointDeviceExt"/>
<description>
the ddf point-device-ext that is above or that is the component on&#xa; which the abstract manager is an agent.
</description>
</return>
</method>

<!-- com.tridium.ddf.ui.DdfMgrUtil.doLoadManager(javax.baja.workbench.mgr.BAbstractManager) -->
<method name="doLoadManager"  public="true" static="true">
<description>
This is called by the ddf device manager and ddf point manager&#x27;s&#xa; doLoadValue method, when the manager is first loaded. This sets&#xa; the initial set of discovery object from the discovery host&#x27;s&#xa; discovery folder, if any are cached or defined in there.
</description>
<parameter name="mgr">
<type class="javax.baja.workbench.mgr.BAbstractManager"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

</class>
</bajadoc>
