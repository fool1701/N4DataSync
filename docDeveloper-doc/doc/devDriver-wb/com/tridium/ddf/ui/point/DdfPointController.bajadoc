<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="devDriver" runtimeProfile="wb" qualifiedName="com.tridium.ddf.ui.point.DdfPointController" name="DdfPointController" packageName="com.tridium.ddf.ui.point" public="true">
<description>
This is the MgrController for the BDdfPointManager.&#xa;&#xa; I had to customize the MgrEdit in various ways to allow this to&#xa; update the control point and proxy extension fields without&#xa; using MgrColumns.
</description>
<tag name="@author">lperkins</tag>
<extends>
<type class="javax.baja.driver.ui.point.PointController"/>
</extends>
<implements>
<type class="com.tridium.ddf.IDdfFacetConst"/>
</implements>
<!-- com.tridium.ddf.ui.point.DdfPointController(com.tridium.ddf.ui.point.BDdfPointManager) -->
<constructor name="DdfPointController" public="true">
<parameter name="manager">
<type class="com.tridium.ddf.ui.point.BDdfPointManager"/>
</parameter>
<description/>
</constructor>

<!-- com.tridium.ddf.ui.point.DdfPointController.makeEdit(java.lang.String) -->
<method name="makeEdit"  public="true">
<description>
Uses a DdfMgrPointEdit (that extends MgrEdit) instead of simply an&#xa; MgrEdit. The return object processes the dialog box that appears&#xa; when adding points to the database.
</description>
<parameter name="label">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.workbench.mgr.MgrEdit"/>
</return>
</method>

<!-- com.tridium.ddf.ui.point.DdfPointController.doDiscover(javax.baja.sys.Context) -->
<method name="doDiscover"  public="true">
<description>
Called when the user clicks the &#x22;Discover&#x22; button. This calls&#xa; DdfMgrControllerUtil.doDiscover.
</description>
<tag name="@see">DdfMgrControllerUtil.doDiscover</tag>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="javax.baja.ui.CommandArtifact"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- com.tridium.ddf.ui.point.DdfPointController.makeCommands() -->
<method name="makeCommands"  protected="true">
<description>
Adds IMgrCommands for each BIDdfPointMgrAgent that&#xa; is declared on the device or point-device-ext.
</description>
<return>
<type class="javax.baja.workbench.mgr.MgrController$IMgrCommand" dimension="1"/>
</return>
</method>

<!-- com.tridium.ddf.ui.point.DdfPointController.updateCommands() -->
<method name="updateCommands"  public="true">
<description>
Enables/Disables the IMgrCommands for each BIDdfPointMgrAgent that&#xa; is declared on the device or point-device-ext.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddf.ui.point.DdfPointController.makeActionBar() -->
<method name="makeActionBar"  public="true">
<description>
Overrides the default action bar to add a second row of buttons&#xa; to contain the developer&#x27;s button agents (provided that the developer&#xa; adds two or more of them). If the developer only adds one button&#xa; to the manager, then this will still just use a single row of&#xa; buttons.
</description>
<return>
<type class="javax.baja.ui.BWidget"/>
</return>
</method>

<!-- com.tridium.ddf.ui.point.DdfPointController.initializeControlPoint(java.lang.Object, javax.baja.control.BControlPoint) -->
<method name="initializeControlPoint"  public="true" static="true">
<description>
Initializes the standard properties on the given control point&#xa; and its proxy extension. These properties include the point facets,&#xa; deviceFacets, conversion, and tuningPolicyName.
</description>
<parameter name="discovery">
<type class="java.lang.Object"/>
<description/>
</parameter>
<parameter name="newCtPt">
<type class="javax.baja.control.BControlPoint"/>
<description/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

</class>
</bajadoc>
