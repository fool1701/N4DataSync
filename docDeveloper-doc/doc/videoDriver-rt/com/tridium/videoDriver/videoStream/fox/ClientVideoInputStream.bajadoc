<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="videoDriver" runtimeProfile="rt" qualifiedName="com.tridium.videoDriver.videoStream.fox.ClientVideoInputStream" name="ClientVideoInputStream" packageName="com.tridium.videoDriver.videoStream.fox" public="true">
<description>
This is a custom java.io.InputStream that is fed with video stream&#xa; data for a particular fox video stream.
</description>
<tag name="@author">lperkins</tag>
<tag name="@creation">Oct 14, 2008</tag>
<extends>
<type class="java.io.InputStream"/>
</extends>
<!-- com.tridium.videoDriver.videoStream.fox.ClientVideoInputStream(com.tridium.videoDriver.videoStream.fox.ClientSideVideoReceiver, int, com.tridium.videoDriver.videoStream.IVideoDestination, com.tridium.videoDriver.videoStream.fox.FoxVideoStream) -->
<constructor name="ClientVideoInputStream" protected="true">
<parameter name="videoReceiver">
<type class="com.tridium.videoDriver.videoStream.fox.ClientSideVideoReceiver"/>
<description>
a reference to the ClientSideVideoReceiver&#xa; that calls this method.
</description>
</parameter>
<parameter name="videoStreamId">
<type class="int"/>
<description>
the int that uniquely identifies the video&#xa; stream to which this ClientVideoInputStream provides access.
</description>
</parameter>
<parameter name="videoDestination">
<type class="com.tridium.videoDriver.videoStream.IVideoDestination"/>
</parameter>
<parameter name="foxVideoStream">
<type class="com.tridium.videoDriver.videoStream.fox.FoxVideoStream"/>
</parameter>
<description>
This constructor is called by the ClientSideVideoReceiver. Do not&#xa; call this constructor directly. To obtain an instance of this class,&#xa; obtain a reference to the client&#x27;s BFoxVideoChannel and call the&#xa; client-side &#x27;openVideoStream&#x27; method on it. The InputStream that is&#xa; returned will be an instance of this class.
</description>
</constructor>

<!-- com.tridium.videoDriver.videoStream.fox.ClientVideoInputStream() -->
<constructor name="ClientVideoInputStream" protected="true">
<description>
This constructor exists for the purpose of making this class future proof.
</description>
</constructor>

<!-- com.tridium.videoDriver.videoStream.fox.ClientVideoInputStream.close() -->
<method name="close"  public="true">
<description>
Closes the ClientVideoInputStream, both on the local Workbench client&#xa; and on the remote station server.
</description>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- com.tridium.videoDriver.videoStream.fox.ClientVideoInputStream.read() -->
<method name="read"  public="true">
<description>
Reads the next byte from the Fox Video Stream.
</description>
<return>
<type class="int"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- com.tridium.videoDriver.videoStream.fox.ClientVideoInputStream.read(byte[]) -->
<method name="read"  public="true">
<description>
Calls &lt;code&gt;<see ref="com.tridium.videoDriver.videoStream.fox.ClientVideoInputStream#read(byte[], int, int)">#read(byte[], int, int)</see>&lt;/code&gt; and passes in the given&#xa; byte array, zero, and the length of the given byte array.
</description>
<parameter name="b">
<type class="byte" dimension="1"/>
</parameter>
<return>
<type class="int"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- com.tridium.videoDriver.videoStream.fox.ClientVideoInputStream.read(byte[], int, int) -->
<method name="read"  public="true">
<description>
Reads an array of bytes from the video input stream.
</description>
<parameter name="b">
<type class="byte" dimension="1"/>
<description>
array of bytes into which the next available&#xa; bytes from the input stream will be copied.
</description>
</parameter>
<parameter name="off">
<type class="int"/>
<description>
offset into the given byte array at which to&#xa; start copying bytes.
</description>
</parameter>
<parameter name="len">
<type class="int"/>
<description>
the maximum number of bytes to copy into the given&#xa; byte array.
</description>
</parameter>
<return>
<type class="int"/>
<description>
the number of bytes that were copied into the given&#xa; byte array. Ideally this will equal the given &#x27;len&#x27;. However,&#xa; if less bytes are all that are available, then those bytes&#xa; will be copied into the given byte array and this return value&#xa; will indicate how many bytes were actually copied into the given&#xa; byte array.
</description>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- com.tridium.videoDriver.videoStream.fox.ClientVideoInputStream.receiveFromStation(byte[], com.tridium.videoDriver.videoStream.BPlaybackParams) -->
<method name="receiveFromStation"  protected="true">
<description>
The ClientSideVideoReceiver calls this method as its thread receives&#xa; chunks of video through the fox video channel&#x27;s circuit.
</description>
<parameter name="videoFromStation">
<type class="byte" dimension="1"/>
<description>
a direct reference to a byte array inside of&#xa; a FoxBlob that that ClientSideVideoReceiver thread received from the&#xa; station.
</description>
</parameter>
<parameter name="pbp">
<type class="com.tridium.videoDriver.videoStream.BPlaybackParams"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.videoDriver.videoStream.fox.ClientVideoInputStream.updatePacketSizeAvg(int) -->
<method name="updatePacketSizeAvg"  protected="true">
<description/>
<parameter name="newestPacketSize">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.videoDriver.videoStream.fox.ClientVideoInputStream.computeAverageRecentPacketSize() -->
<method name="computeAverageRecentPacketSize"  protected="true">
<description/>
<return>
<type class="long"/>
</return>
<throws>
<type class="com.tridium.videoDriver.videoStream.fox.ClientVideoInputStream$TooEarlyException"/>
</throws>
</method>

<!-- com.tridium.videoDriver.videoStream.fox.ClientVideoInputStream.available() -->
<method name="available"  public="true">
<description/>
<return>
<type class="int"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- com.tridium.videoDriver.videoStream.fox.ClientVideoInputStream.isBackingUp() -->
<method name="isBackingUp"  public="true">
<description/>
<return>
<type class="boolean"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- com.tridium.videoDriver.videoStream.fox.ClientVideoInputStream.getVideoStreamId() -->
<method name="getVideoStreamId"  public="true">
<description>
Gets an int that uniquely identifies this video stream within the&#xa; client Workbench.
</description>
<return>
<type class="int"/>
<description>
an int that uniquely identifies this video stream within the&#xa; client Workbench.
</description>
</return>
</method>

<!-- com.tridium.videoDriver.videoStream.fox.ClientVideoInputStream.streamPaused() -->
<method name="streamPaused"  public="true">
<description/>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.videoDriver.videoStream.fox.ClientVideoInputStream.isPaused() -->
<method name="isPaused"  public="true">
<description/>
<return>
<type class="boolean"/>
</return>
</method>

<!-- com.tridium.videoDriver.videoStream.fox.ClientVideoInputStream.getUpdatedPlaybackParams() -->
<method name="getUpdatedPlaybackParams"  public="true">
<description/>
<return>
<type class="com.tridium.videoDriver.videoStream.BPlaybackParams"/>
</return>
</method>

<!-- com.tridium.videoDriver.videoStream.fox.ClientVideoInputStream.setUpdatedPlaybackParams(com.tridium.videoDriver.videoStream.BPlaybackParams) -->
<method name="setUpdatedPlaybackParams"  public="true">
<description/>
<parameter name="updatedPlaybackParams">
<type class="com.tridium.videoDriver.videoStream.BPlaybackParams"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.videoDriver.videoStream.fox.ClientVideoInputStream._32K -->
<field name="_32K"  protected="true" static="true" final="true">
<type class="int"/>
<description/>
</field>

<!-- com.tridium.videoDriver.videoStream.fox.ClientVideoInputStream._512K -->
<field name="_512K"  protected="true" static="true" final="true">
<type class="int"/>
<description/>
</field>

<!-- com.tridium.videoDriver.videoStream.fox.ClientVideoInputStream.NUM_MOST_RECENT_PACKET_SIZES -->
<field name="NUM_MOST_RECENT_PACKET_SIZES"  protected="true" static="true" final="true">
<type class="int"/>
<description/>
</field>

<!-- com.tridium.videoDriver.videoStream.fox.ClientVideoInputStream.mostRecentPacketSizes -->
<field name="mostRecentPacketSizes"  protected="true">
<type class="int" dimension="1"/>
<description/>
</field>

<!-- com.tridium.videoDriver.videoStream.fox.ClientVideoInputStream.mostRecentPacketId -->
<field name="mostRecentPacketId"  protected="true">
<type class="int"/>
<description/>
</field>

<!-- com.tridium.videoDriver.videoStream.fox.ClientVideoInputStream.mostRecentPacketAlgorithmWarmedUp -->
<field name="mostRecentPacketAlgorithmWarmedUp"  protected="true">
<type class="boolean"/>
<description/>
</field>

<!-- com.tridium.videoDriver.videoStream.fox.ClientVideoInputStream.byteArrayQueue -->
<field name="byteArrayQueue"  protected="true">
<type class="javax.baja.util.Queue"/>
<description>
This is the internally queue of video chunks. They are enqueued in&#xa; the order in which they are received. The &#x27;read&#x27; methods efficiently&#xa; extract bytes from this queue of byte arrays to return bytes for the&#xa; video stream as they are requested by the application.
</description>
</field>

<!-- com.tridium.videoDriver.videoStream.fox.ClientVideoInputStream.buffer -->
<field name="buffer"  protected="true">
<type class="byte" dimension="1"/>
<description>
This is the most recent array of bytes to be dequeued off of the&#xa; byteArrayQueue as part of the efficient logic for the &#x27;read&#x27; methods.
</description>
</field>

<!-- com.tridium.videoDriver.videoStream.fox.ClientVideoInputStream.bufferPos -->
<field name="bufferPos"  protected="true">
<type class="int"/>
<description>
This is the index of the next available byte in the current &lt;code&gt;<see ref="com.tridium.videoDriver.videoStream.fox.ClientVideoInputStream#buffer">#buffer</see>&lt;/code&gt;
</description>
</field>

<!-- com.tridium.videoDriver.videoStream.fox.ClientVideoInputStream.available -->
<field name="available"  protected="true">
<type class="int"/>
<description>
This is the totatl number of bytes that are available to be read&#xa; from this ClientVideoInputStream without blocking. Public access&#xa; should be gained via the &lt;code&gt;<see ref="com.tridium.videoDriver.videoStream.fox.ClientVideoInputStream#available()">#available()</see>&lt;/code&gt; method.
</description>
</field>

<!-- com.tridium.videoDriver.videoStream.fox.ClientVideoInputStream.log -->
<field name="log"  protected="true">
<type class="java.util.logging.Logger"/>
<description/>
</field>

<!-- com.tridium.videoDriver.videoStream.fox.ClientVideoInputStream.readLog -->
<field name="readLog"  protected="true">
<type class="java.util.logging.Logger"/>
<description/>
</field>

<!-- com.tridium.videoDriver.videoStream.fox.ClientVideoInputStream.foxVideoStream -->
<field name="foxVideoStream"  protected="true">
<type class="com.tridium.videoDriver.videoStream.fox.FoxVideoStream"/>
<description/>
</field>

<!-- com.tridium.videoDriver.videoStream.fox.ClientVideoInputStream.updatedPlaybackParams -->
<field name="updatedPlaybackParams"  protected="true">
<type class="com.tridium.videoDriver.videoStream.BPlaybackParams"/>
<description/>
</field>

<!-- com.tridium.videoDriver.videoStream.fox.ClientVideoInputStream.hasReceivedAnyBytes -->
<field name="hasReceivedAnyBytes"  protected="true">
<type class="boolean"/>
<description/>
</field>

<!-- com.tridium.videoDriver.videoStream.fox.ClientVideoInputStream.videoReceiver -->
<field name="videoReceiver"  protected="true">
<type class="com.tridium.videoDriver.videoStream.fox.ClientSideVideoReceiver"/>
<description>
This is a reference to the ClientSideVideoReceiver that constructs&#xa; this object.
</description>
</field>

<!-- com.tridium.videoDriver.videoStream.fox.ClientVideoInputStream.closed -->
<field name="closed"  protected="true">
<type class="boolean"/>
<description>
Indicates whether the &lt;code&gt;<see ref="com.tridium.videoDriver.videoStream.fox.ClientVideoInputStream#close()">#close()</see>&lt;/code&gt; method has been called already.&#xa; Note that this object has some internal logic that can &lt;code&gt;<see ref="com.tridium.videoDriver.videoStream.fox.ClientVideoInputStream#reopen()">#reopen()</see>&lt;/code&gt;&#xa; the video stream. The &lt;code&gt;<see ref="com.tridium.videoDriver.videoStream.fox.ClientVideoInputStream#reopen()">#reopen()</see>&lt;/code&gt; method exists for future&#xa; compatibility.
</description>
</field>

<!-- com.tridium.videoDriver.videoStream.fox.ClientVideoInputStream.videoStreamId -->
<field name="videoStreamId"  protected="true">
<type class="int"/>
<description>
This is an int that uniquely identifies this particular video stream &#xa; from the perspective of the client Workbench.
</description>
</field>

<!-- com.tridium.videoDriver.videoStream.fox.ClientVideoInputStream.threadInReadMethod1 -->
<field name="threadInReadMethod1"  protected="true" volatile="true">
<type class="java.lang.Thread"/>
<description>
This is the thread that that is blocked in the read method that&#xa; takes no arguments. Note that there might not be a thread blocked&#xa; in there, in which case, this reference will be null.
</description>
</field>

<!-- com.tridium.videoDriver.videoStream.fox.ClientVideoInputStream.threadInReadMethod3 -->
<field name="threadInReadMethod3"  protected="true" volatile="true">
<type class="java.lang.Thread"/>
<description>
This is the thread that that is blocked in the read method that&#xa; takes a byte array and two integers. Note that there might not&#xa; be a thread blocked in there, in which case, this reference will&#xa; be null.
</description>
</field>

<!-- com.tridium.videoDriver.videoStream.fox.ClientVideoInputStream.streamPaused -->
<field name="streamPaused"  protected="true">
<type class="boolean"/>
<description/>
</field>

<!-- com.tridium.videoDriver.videoStream.fox.ClientVideoInputStream.streamPausedMonitor -->
<field name="streamPausedMonitor"  protected="true">
<type class="java.lang.Object"/>
<description/>
</field>

<!-- com.tridium.videoDriver.videoStream.fox.ClientVideoInputStream.videoDestination -->
<field name="videoDestination"  protected="true">
<type class="com.tridium.videoDriver.videoStream.IVideoDestination"/>
<description/>
</field>

</class>
</bajadoc>
