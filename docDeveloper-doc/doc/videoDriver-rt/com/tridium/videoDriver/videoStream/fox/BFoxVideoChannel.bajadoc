<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="videoDriver" runtimeProfile="rt" qualifiedName="com.tridium.videoDriver.videoStream.fox.BFoxVideoChannel" name="BFoxVideoChannel" packageName="com.tridium.videoDriver.videoStream.fox" public="true">
<description>
This is the Fox channel that streams video to the Workbench&#xa; from the station. The video on the station derives from one&#xa; or more video drivers that are built on the videoDriver and&#xa; possibly the devVideoDriver framework.&#xa; &lt;p&gt;&#xa; BFoxVideoChannel provides both client and server side functionality.&#xa; Commands originating in the client are implement on server side process.&#xa; Multiple simultaneous streams can be opened and managed.
</description>
<tag name="@author">lperkins</tag>
<tag name="@creation">Oct 14, 2008</tag>
<extends>
<type class="com.tridium.fox.sys.BFoxChannel"/>
</extends>
<!-- com.tridium.videoDriver.videoStream.fox.BFoxVideoChannel() -->
<constructor name="BFoxVideoChannel" public="true">
<description/>
</constructor>

<!-- com.tridium.videoDriver.videoStream.fox.BFoxVideoChannel.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- com.tridium.videoDriver.videoStream.fox.BFoxVideoChannel.sessionOpened() -->
<method name="sessionOpened"  public="true">
<description/>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- com.tridium.videoDriver.videoStream.fox.BFoxVideoChannel.sessionClosed(java.lang.Throwable) -->
<method name="sessionClosed"  public="true">
<description/>
<parameter name="cause">
<type class="java.lang.Throwable"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.videoDriver.videoStream.fox.BFoxVideoChannel.getPlaybackParamsForStream(java.lang.String, int) -->
<method name="getPlaybackParamsForStream"  public="true">
<description>
Client: getPlaybackParamsForStream
</description>
<parameter name="videoClientId">
<type class="java.lang.String"/>
<description/>
</parameter>
<parameter name="videoStreamId">
<type class="int"/>
<description/>
</parameter>
<return>
<type class="com.tridium.videoDriver.videoStream.BPlaybackParams"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- com.tridium.videoDriver.videoStream.fox.BFoxVideoChannel.pauseVideoStream(java.lang.String, int) -->
<method name="pauseVideoStream"  public="true">
<description>
Client: pauseVideoStream
</description>
<parameter name="videoClientId">
<type class="java.lang.String"/>
<description/>
</parameter>
<parameter name="videoStreamId">
<type class="int"/>
<description/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- com.tridium.videoDriver.videoStream.fox.BFoxVideoChannel.resumeVideoStream(java.lang.String, int) -->
<method name="resumeVideoStream"  public="true">
<description>
Client: resumeVideoStream
</description>
<parameter name="videoClientId">
<type class="java.lang.String"/>
<description/>
</parameter>
<parameter name="videoStreamId">
<type class="int"/>
<description/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- com.tridium.videoDriver.videoStream.fox.BFoxVideoChannel.resumeVideoStream(com.tridium.fox.session.FoxRequest) -->
<method name="resumeVideoStream"  protected="true">
<description>
resumeVideoStream: station&#xa;&#xa; This method is called by the &lt;code&gt;<see ref="com.tridium.videoDriver.videoStream.fox.BFoxVideoChannel#process(com.tridium.fox.session.FoxRequest)">#process(FoxRequest)</see>&lt;/code&gt; method to process&#xa; a FoxRequest to resume a video stream that was previously paused by a&#xa; different FoxRequest that was passed to the &lt;code&gt;<see ref="com.tridium.videoDriver.videoStream.fox.BFoxVideoChannel#openVideoStream(com.tridium.fox.session.FoxRequest)">#openVideoStream(FoxRequest)</see>&lt;/code&gt;&#xa; method.
</description>
<parameter name="request">
<type class="com.tridium.fox.session.FoxRequest"/>
<description>
the FoxRequest from the client Workbench requesting that a&#xa; particular paused video stream be resumed.
</description>
</parameter>
<return>
<type class="com.tridium.fox.session.FoxResponse"/>
</return>
<throws>
<type class="java.lang.Exception"/>
<description>
if any kind of exception occurs while performing the&#xa; necessary fox communication.
</description>
</throws>
</method>

<!-- com.tridium.videoDriver.videoStream.fox.BFoxVideoChannel.openVideoStream(javax.baja.sys.BObject, java.lang.String, com.tridium.videoDriver.videoStream.BPlaybackParams, int, com.tridium.videoDriver.videoStream.IVideoDestination, com.tridium.videoDriver.videoStream.fox.FoxVideoStream) -->
<method name="openVideoStream"  public="true">
<description>
Client: openVideoStream&#xa;&#xa; Logic that is executing on the Workbench client will call this method to establish a Fox Video&#xa; Stream from the station.
</description>
<parameter name="proxyObject">
<type class="javax.baja.sys.BObject"/>
<description>
is any proxy object that references a client-side representation of an object that is&#xa;          mounted in the station. This is important as this method will use this proxy object&#xa;          against which to resolve ords.
</description>
</parameter>
<parameter name="videoClient">
<type class="java.lang.String"/>
</parameter>
<parameter name="playbackParams">
<type class="com.tridium.videoDriver.videoStream.BPlaybackParams"/>
<description>
is a BPlaybackParams object, probably from a user interface widget or view, that&#xa;          describes the video stream that is being requested.
</description>
</parameter>
<parameter name="videoStreamId">
<type class="int"/>
<description>
is a unique integer to identify the requested stream. This integer is unique within&#xa;          the Workbench client.
</description>
</parameter>
<parameter name="videoDestination">
<type class="com.tridium.videoDriver.videoStream.IVideoDestination"/>
</parameter>
<parameter name="foxVideoStream">
<type class="com.tridium.videoDriver.videoStream.fox.FoxVideoStream"/>
</parameter>
<return>
<type class="java.io.InputStream"/>
<description>
InputStream from which the video stream data can be read. This data will be fed from&#xa;         the station. The station will resolve the ord in the given playbackParams object and&#xa;         ask the corresponding driver for the corresponding video stream. It will then fill this&#xa;         InputStream with bytes from the requested video stream.
</description>
</return>
<throws>
<type class="java.lang.Exception"/>
<description>
if any kind of exception occurs while performing the necessary fox communication.
</description>
</throws>
</method>

<!-- com.tridium.videoDriver.videoStream.fox.BFoxVideoChannel.closeVideoStream(java.lang.String, int) -->
<method name="closeVideoStream"  protected="true">
<description>
closeVideoStream: client&#xa;&#xa; This method is called on the client side Workbench VM to close a video&#xa; stream that was previously established by calling the openVideoStream()}&#xa; method.
</description>
<parameter name="videoClientId">
<type class="java.lang.String"/>
<description>
the String that uniquely identifies the particular client&#xa; from the perspective of the station.
</description>
</parameter>
<parameter name="videoStreamId">
<type class="int"/>
<description>
the integer that uniquely identifies the particular video&#xa; stream from the perspective of the client Workbench. This must be the same&#xa; integer that was passed to the openVideoStream()&#xa; method.
</description>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
<description>
if any kind of exception occurs while performing the&#xa; necessary fox communication.
</description>
</throws>
</method>

<!-- com.tridium.videoDriver.videoStream.fox.BFoxVideoChannel.circuitOpened(com.tridium.fox.session.FoxCircuit) -->
<method name="circuitOpened"  public="true">
<description>
circuitOpened : station&#xa;&#xa; This is a fox callback  made when a circuit is to be opened. The circuit&#xa; is closed when this method returns. The call to StationSideVideoCordinator.coordinateVideoForClient() &#xa; will block until all streams are closed
</description>
<parameter name="circuit">
<type class="com.tridium.fox.session.FoxCircuit"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Throwable"/>
</throws>
</method>

<!-- com.tridium.videoDriver.videoStream.fox.BFoxVideoChannel.process(com.tridium.fox.session.FoxRequest) -->
<method name="process"  public="true">
<description>
process : station&#xa;&#xa; This is a fundamental callback that is part of any class that&#xa; extends BFoxChannel. This method is called on the station whenever&#xa; the station needs to process a FoxRequest that is sent to the&#xa; custom FoxChannel.
</description>
<parameter name="request">
<type class="com.tridium.fox.session.FoxRequest"/>
</parameter>
<return>
<type class="com.tridium.fox.session.FoxResponse"/>
</return>
<throws>
<type class="java.lang.Throwable"/>
</throws>
</method>

<!-- com.tridium.videoDriver.videoStream.fox.BFoxVideoChannel.trace(java.util.logging.Logger, com.tridium.fox.session.FoxRequest, java.lang.String) -->
<method name="trace"  protected="true">
<description/>
<parameter name="log">
<type class="java.util.logging.Logger"/>
</parameter>
<parameter name="request">
<type class="com.tridium.fox.session.FoxRequest"/>
</parameter>
<parameter name="traceStr">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.videoDriver.videoStream.fox.BFoxVideoChannel.trace(java.util.logging.Logger, java.lang.String, int, java.lang.String) -->
<method name="trace"  protected="true">
<description/>
<parameter name="log">
<type class="java.util.logging.Logger"/>
</parameter>
<parameter name="vcl">
<type class="java.lang.String"/>
</parameter>
<parameter name="sId">
<type class="int"/>
</parameter>
<parameter name="traceStr">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.videoDriver.videoStream.fox.BFoxVideoChannel.trace(java.util.logging.Logger, java.lang.String, int, java.lang.String, java.lang.Exception) -->
<method name="trace"  protected="true">
<description/>
<parameter name="log">
<type class="java.util.logging.Logger"/>
</parameter>
<parameter name="vcl">
<type class="java.lang.String"/>
</parameter>
<parameter name="sId">
<type class="int"/>
</parameter>
<parameter name="traceStr">
<type class="java.lang.String"/>
</parameter>
<parameter name="e">
<type class="java.lang.Exception"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.videoDriver.videoStream.fox.BFoxVideoChannel.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

<!-- com.tridium.videoDriver.videoStream.fox.BFoxVideoChannel.videoCoordinator -->
<field name="videoCoordinator"  protected="true">
<type class="com.tridium.videoDriver.videoStream.fox.StationSideVideoCoordinator"/>
<description>
Used on the station side.
</description>
</field>

<!-- com.tridium.videoDriver.videoStream.fox.BFoxVideoChannel.bWbProxyId -->
<field name="bWbProxyId"  protected="true">
<type class="javax.baja.sys.BInteger"/>
<description>
This applies on the client-side when this BFoxVideoChannel is being used&#xa; for Wb-Station communications.
</description>
</field>

<!-- com.tridium.videoDriver.videoStream.fox.BFoxVideoChannel.videoReceiver -->
<field name="videoReceiver"  protected="true">
<type class="com.tridium.videoDriver.videoStream.fox.ClientSideVideoReceiver"/>
<description>
Used on the client side.
</description>
</field>

<!-- com.tridium.videoDriver.videoStream.fox.BFoxVideoChannel.clientLog -->
<field name="clientLog"  protected="true" static="true">
<type class="java.util.logging.Logger"/>
<description/>
</field>

<!-- com.tridium.videoDriver.videoStream.fox.BFoxVideoChannel.serverLog -->
<field name="serverLog"  protected="true" static="true">
<type class="java.util.logging.Logger"/>
<description/>
</field>

<!-- com.tridium.videoDriver.videoStream.fox.BFoxVideoChannel.CHANNEL_NAME -->
<field name="CHANNEL_NAME"  public="true" static="true" final="true">
<type class="java.lang.String"/>
<description>
The CHANNEL_NAME uniquely identifies the BFoxVideoChannel in the&#xa; BFoxChannelRegistry. This is passed to the super constructor. The&#xa; value of this field is &#x22;FoxVideoChannel&#x22;.
</description>
</field>

</class>
</bajadoc>
