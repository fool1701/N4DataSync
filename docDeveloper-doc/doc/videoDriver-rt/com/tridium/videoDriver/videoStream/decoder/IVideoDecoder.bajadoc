<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="videoDriver" runtimeProfile="rt" qualifiedName="com.tridium.videoDriver.videoStream.decoder.IVideoDecoder" name="IVideoDecoder" packageName="com.tridium.videoDriver.videoStream.decoder" public="true" interface="true" abstract="true" category="interface">
<description>
Defines the Niagara AX video decoder interface. Video driver developers&#xa; should not need to implement this interface directly. Instead, it is the&#xa; intent that video driver developers extend VideoDecoder or one of the &#xa; core codec decoder subclasses.
</description>
<tag name="@author">lperkins</tag>
<implements>
<type class="com.tridium.videoDriver.videoStream.IVideoDestination"/>
</implements>
<!-- com.tridium.videoDriver.videoStream.decoder.IVideoDecoder.getMultistreamDecoder() -->
<method name="getMultistreamDecoder"  public="true" abstract="true">
<description>
Gets the IVideoMultistreamDecoder that this decoder is working for&#xa; or null if this decoder is not part of a multistream decoding scheme.&#xa; &#xa; This method should return whatever was most recently passed&#xa; to the &lt;code&gt;<see ref="com.tridium.videoDriver.videoStream.decoder.IVideoDecoder#setMultistreamDecoder(com.tridium.videoDriver.videoStream.decoder.IVideoMultistreamDecoder)">#setMultistreamDecoder(IVideoMultistreamDecoder)</see>&lt;/code&gt; method or&#xa; null if the &lt;code&gt;<see ref="com.tridium.videoDriver.videoStream.decoder.IVideoDecoder#setMultistreamDecoder(com.tridium.videoDriver.videoStream.decoder.IVideoMultistreamDecoder)">#setMultistreamDecoder(IVideoMultistreamDecoder)</see>&lt;/code&gt; has never&#xa; been called.
</description>
<return>
<type class="com.tridium.videoDriver.videoStream.decoder.IVideoMultistreamDecoder"/>
</return>
</method>

<!-- com.tridium.videoDriver.videoStream.decoder.IVideoDecoder.setMultistreamDecoder(com.tridium.videoDriver.videoStream.decoder.IVideoMultistreamDecoder) -->
<method name="setMultistreamDecoder"  public="true" abstract="true">
<description>
Assigns a Multistream Decoder to this decoder. A Multistream decoder allows for&#xa; multiple video players to be updated from the same video stream.&#xa; &#xa; If the driver supports multiplexing different camera feeds into&#xa; the same stream then that is taken care of using the Multistream Decoder.
</description>
<parameter name="multistreamDecoder">
<type class="com.tridium.videoDriver.videoStream.decoder.IVideoMultistreamDecoder"/>
<description/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.videoDriver.videoStream.decoder.IVideoDecoder.init(com.tridium.videoDriver.videoStream.BIVideoSource, com.tridium.videoDriver.BIVideoPlayer, javax.baja.sys.BRelTime, com.tridium.videoDriver.videoStream.IVideoSession) -->
<method name="init"  public="true" abstract="true">
<description>
Initialize the decoder and start receiving and decoding video frames.
</description>
<parameter name="videoSource">
<type class="com.tridium.videoDriver.videoStream.BIVideoSource"/>
<description>
-
</description>
</parameter>
<parameter name="videoPlayer">
<type class="com.tridium.videoDriver.BIVideoPlayer"/>
<description>
- player to receive decode images from video stream. &#xa;                      If null main thread is not started.
</description>
</parameter>
<parameter name="stopDecodingTimeout">
<type class="javax.baja.sys.BRelTime"/>
<description>
- not currently used
</description>
</parameter>
<parameter name="videoSession">
<type class="com.tridium.videoDriver.videoStream.IVideoSession"/>
<description>
- sessions which manages this decoder
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.videoDriver.videoStream.decoder.IVideoDecoder.getVideoPlayer() -->
<method name="getVideoPlayer"  public="true" abstract="true">
<description>
Gets the video player that was passed to the init&#xa; method.
</description>
<return>
<type class="com.tridium.videoDriver.BIVideoPlayer"/>
<description>
the video player that was passed to the&#xa; init method.
</description>
</return>
</method>

<!-- com.tridium.videoDriver.videoStream.decoder.IVideoDecoder.getVideoSource() -->
<method name="getVideoSource"  public="true" abstract="true">
<description>
Gets the video source that was passed to the init&#xa; method.
</description>
<return>
<type class="com.tridium.videoDriver.videoStream.BIVideoSource"/>
<description>
the video source that was passed to the&#xa; init method.
</description>
</return>
</method>

<!-- com.tridium.videoDriver.videoStream.decoder.IVideoDecoder.getVideoSession() -->
<method name="getVideoSession"  public="true" abstract="true">
<description>
Gets the video session that was passed to the init&#xa; method.
</description>
<return>
<type class="com.tridium.videoDriver.videoStream.IVideoSession"/>
<description>
the video session that was passed to the&#xa; init method
</description>
</return>
</method>

<!-- com.tridium.videoDriver.videoStream.decoder.IVideoDecoder.stopDecoding(com.tridium.videoDriver.videoStream.WaitForStopDecoding) -->
<method name="stopDecoding"  public="true" abstract="true">
<description>
This method is called when the video player is finished viewing the video.&#xa; &#xa; This method should return immediately. However, it should store the given&#xa; object and notify it when the decoder does finally stop.
</description>
<parameter name="monitor">
<type class="com.tridium.videoDriver.videoStream.WaitForStopDecoding"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.videoDriver.videoStream.decoder.IVideoDecoder.readFrameData(com.tridium.videoDriver.videoStream.decoder.VidFrame) -->
<method name="readFrameData"  public="true" abstract="true">
<description>
This method is called to extract raw video from from the video stream.  It should&#xa;  read the frame into a ByteBuffer and set vidFrame.rawData. If a time stamp is a&#xa;  available for the frame this should be extracted to vidFrame.timeIndex.
</description>
<parameter name="vidFrame">
<type class="com.tridium.videoDriver.videoStream.decoder.VidFrame"/>
<description>
- container class to receive raw video data and time index.
</description>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
<description/>
</throws>
</method>

<!-- com.tridium.videoDriver.videoStream.decoder.IVideoDecoder.decodeFrame(com.tridium.videoDriver.videoStream.decoder.VidFrame) -->
<method name="decodeFrame"  public="true" abstract="true">
<description>
This method is called to convert raw video data to a BImage.
</description>
<parameter name="vidFrame">
<type class="com.tridium.videoDriver.videoStream.decoder.VidFrame"/>
<description>
- container class to pass raw video data and receive decoded image
</description>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
<description/>
</throws>
</method>

<!-- com.tridium.videoDriver.videoStream.decoder.IVideoDecoder.isFinished() -->
<method name="isFinished"  public="true" abstract="true">
<description>
Indicates whether the decoder has finished decoding.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- com.tridium.videoDriver.videoStream.decoder.IVideoDecoder.keepAlive() -->
<method name="keepAlive"  public="true" abstract="true">
<description>
The BIVideoPlayer widget should call this method from its Baja UI animate&#xa; callback. This is used as a precautionary measure to allow the decoder to shut&#xa; itself down in the event that it does not receive a keep-alive within a&#xa; reasonable amount of time.
</description>
<return>
<type class="void"/>
</return>
</method>

</class>
</bajadoc>
