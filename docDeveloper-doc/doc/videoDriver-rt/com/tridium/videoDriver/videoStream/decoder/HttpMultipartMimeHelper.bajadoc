<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="videoDriver" runtimeProfile="rt" qualifiedName="com.tridium.videoDriver.videoStream.decoder.HttpMultipartMimeHelper" name="HttpMultipartMimeHelper" packageName="com.tridium.videoDriver.videoStream.decoder" public="true">
<description>
This class helps decode a stream of Http response data. This&#xa; is not meant to be used a replacement for nor even a duplication&#xa; of javax.baja.net.HttpConnection. Instead, this is intended to&#xa; digest an input stream from the HttpConnection.&#xa; &#xa; To use this class, pass the HttpConnection&#x27;s input stream (which&#xa; must already be connected to the Http response) into the constructor&#xa; for this class. This will consume an Http response header from the&#xa; given input stream.&#xa; &#xa; After construction the getStatusLine() and getResponseHeaderFields()&#xa; methods provide access to the information from the Http response&#xa; header.&#xa; &#xa; A new HttpStreamHelper will be needed for each HttpResponse continuation&#xa; in the stream.&#xa; &#xa; I created this class because I needed to digest the Http response&#xa; data for multi-part / MIME Http responses. However, the standard&#xa; Niagara AX utilities hide the necessary methods as private or&#xa; default access only members. This class copies the code from the &#xa; Niagara AX utilities to provide the necessary access.
</description>
<tag name="@author">lperkins</tag>
<extends>
<type class="java.lang.Object"/>
</extends>
<!-- com.tridium.videoDriver.videoStream.decoder.HttpMultipartMimeHelper(java.io.InputStream, java.lang.String) -->
<constructor name="HttpMultipartMimeHelper" public="true">
<parameter name="in">
<type class="java.io.InputStream"/>
</parameter>
<parameter name="videoPushBoundary">
<type class="java.lang.String"/>
</parameter>
<throws>
<type class="java.io.IOException"/>
</throws>
<description/>
</constructor>

<!-- com.tridium.videoDriver.videoStream.decoder.HttpMultipartMimeHelper.readVideoBoundary(java.io.InputStream, java.lang.String) -->
<method name="readVideoBoundary"  protected="true">
<description/>
<parameter name="in">
<type class="java.io.InputStream"/>
</parameter>
<parameter name="videoPushBoundary">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- com.tridium.videoDriver.videoStream.decoder.HttpMultipartMimeHelper.readResponse(java.io.InputStream, java.lang.String) -->
<method name="readResponse"  protected="true">
<description>
Read the response from the input.
</description>
<parameter name="in">
<type class="java.io.InputStream"/>
</parameter>
<parameter name="videoPushBoundary">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- com.tridium.videoDriver.videoStream.decoder.HttpMultipartMimeHelper.getStatusLine() -->
<method name="getStatusLine"  public="true">
<description/>
<return>
<type class="com.tridium.videoDriver.videoStream.decoder.HttpStatusLineHelper"/>
</return>
</method>

<!-- com.tridium.videoDriver.videoStream.decoder.HttpMultipartMimeHelper.getResponseHeaderFields() -->
<method name="getResponseHeaderFields"  public="true">
<description/>
<return>
<parameterizedType class="java.util.Hashtable">
<args>
<type class="java.lang.String"/>
<type class="java.lang.String"/>
</args>
</parameterizedType>
</return>
</method>

<!-- com.tridium.videoDriver.videoStream.decoder.HttpMultipartMimeHelper.statusLine -->
<field name="statusLine"  protected="true">
<type class="com.tridium.videoDriver.videoStream.decoder.HttpStatusLineHelper"/>
<description/>
</field>

<!-- com.tridium.videoDriver.videoStream.decoder.HttpMultipartMimeHelper.responseHeaderFields -->
<field name="responseHeaderFields"  protected="true">
<parameterizedType class="java.util.Hashtable">
<args>
<type class="java.lang.String"/>
<type class="java.lang.String"/>
</args>
</parameterizedType>
<description/>
</field>

</class>
</bajadoc>
