<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="videoDriver" runtimeProfile="rt" qualifiedName="com.tridium.videoDriver.videoStream.WaitForStopDecoding" name="WaitForStopDecoding" packageName="com.tridium.videoDriver.videoStream" public="true">
<description>
An instance of this class is passes to IVideoDecoder.stopDecoding&#xa; method. Since the IVideoDecoder.stopDecoding method is an&#xa; asynchronous function call, the WaitForStopDecoding instance&#xa; can be used to determine when the video decoder actually stops.&#xa; &#xa;  Note that the monitor will not be notified if the driver&#x27;s &#xa;  decoder fails to actually stop (which would be a bug). Therefore,&#xa;  any code that creates a WaitForStopDecoding object and waits on&#xa;  it should wait with a timeout as a safegaurd.
</description>
<tag name="@author">lperkins</tag>
<extends>
<type class="java.lang.Object"/>
</extends>
<!-- com.tridium.videoDriver.videoStream.WaitForStopDecoding() -->
<constructor name="WaitForStopDecoding" public="true">
<description/>
</constructor>

<!-- com.tridium.videoDriver.videoStream.WaitForStopDecoding.isStopped() -->
<method name="isStopped"  public="true" synchronized="true">
<description/>
<return>
<type class="boolean"/>
</return>
</method>

<!-- com.tridium.videoDriver.videoStream.WaitForStopDecoding.setStopped() -->
<method name="setStopped"  public="true" synchronized="true">
<description/>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.videoDriver.videoStream.WaitForStopDecoding.stopped -->
<field name="stopped"  protected="true">
<type class="boolean"/>
<description/>
</field>

</class>
</bajadoc>
