<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="history" runtimeProfile="rt" qualifiedName="javax.baja.history.BIPollableHistorySource" name="BIPollableHistorySource" packageName="javax.baja.history" public="true" interface="true" abstract="true" category="interface">
<description>
BIPollableHistorySource is necessary due to how component subscription works.&#xa; For the purpose of on-demand history support, we need to be able to subscribe &#xa; to a history, which in turn subscribes to the source component(s) of the &#xa; history.  In some cases, a subscription causes the history source component to &#xa; start &#x22;polling&#x22; in order to provide &#x22;real time&#x22; updates to the view of the history, hence on-demand.&#xa; The problem occurs when that same history source component is viewed some other way (such as&#xa; a property sheet view of the component).  In such cases, the component will also&#xa; become subscribed, but in that case, we don&#x27;t want to start &#x22;polling&#x22; for updates&#xa; since no one may be looking at the history itself.  An example of this is history import &#xa; descriptors.  We only want them to &#x22;poll&#x22; when they have been subscribed due to&#xa; someone looking at the history chart/history table view, but we don&#x27;t want them&#xa; to poll if someone is just looking at them in the history import manager or &#xa; property sheet view (which also causes them to be subscribed). &#xa;&#xa; That&#x27;s a lot of explanation, but the basic idea of this class is that we need some way&#xa; to put a history subscription counter on &#x22;pollable&#x22; history source components, so that we can increment/decrement&#xa; a history subscription counter for the &#x22;pollable&#x22; history source component as it is subscribed/unsubscribed by&#xa; a history view (such as the history chart/history table view).  The &#x22;pollable&#x22; history source&#xa; component can then check this counter to determine whether it needs to &#x22;poll&#x22; or&#xa; not whenever it is in a subscribed state.  Not all history sources will need to use this interface, as some history sources&#xa; (such as history extensions) don&#x27;t need to do anything in a subscribed state, so we&#xa; don&#x27;t care in such cases.  However, this interface should be implemented by any history source&#xa; components (ie. history import descriptors) that DO need to do work (ie. poll) when &#xa; subscribed in order to update the history.  The behavior contract is that the implementing&#xa; class should only poll for updates to the history when the history subscription counter&#xa; is greater than zero.  Also, when the source component is unsubscribed(), it should force the&#xa; history subscription counter to zero.
</description>
<tag name="@author">Scott Hoye</tag>
<tag name="@creation">1 May 2008</tag>
<tag name="@version">$Revision: 2$ $Date: 9/3/08 11:51:37 PM EDT$</tag>
<tag name="@since">Niagara 3.4</tag>
<implements>
<type class="javax.baja.sys.BInterface"/>
</implements>
<!-- javax.baja.history.BIPollableHistorySource.historyPollingEnabled() -->
<method name="historyPollingEnabled"  public="true" abstract="true">
<description>
Returns true if this object supports history polling (subscription), &#xa; or false if it does not (does not support subscription).
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.history.BIPollableHistorySource.updateHistorySubscriptionCount(int) -->
<method name="updateHistorySubscriptionCount"  public="true" abstract="true">
<description>
This callback is made to cause the history subscription counter to&#xa; be incremented (positive change value) or decremented (negative change value).&#xa; The returning value is the current history subscription counter value&#xa; after the increment/decrement has been processed.&#xa;&#xa; NOTE: This method should be synchronized in some way (either the method&#xa; itself, or it&#x27;s implementation), as concurrent threads may attempt to call this&#xa; method simultaneously.
</description>
<parameter name="change">
<type class="int"/>
</parameter>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.history.BIPollableHistorySource.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
