<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="history" runtimeProfile="rt" qualifiedName="javax.baja.history.db.BArchiveHistoryProvider" name="BArchiveHistoryProvider" packageName="javax.baja.history.db" public="true" abstract="true">
<description>
When installed on a station as a dynamic child on the HistoryService&#x27;s&#xa; &lt;code&gt;<see ref="javax.baja.history.db.BArchiveHistoryProviders">BArchiveHistoryProviders</see>&lt;/code&gt; container, this component&#xa; provides a hybrid mode of operation for the history database, in that&#xa; it will store and use history data locally, but queries to the database will&#xa; be supplemented by history data retrieved from an archive specified by this&#xa; class. An example implementation of this class would be to read archive&#xa; history data previously archived to the cloud (via a separate mechanism).&#xa; Please note that archive data will only be accessed at query time (reads).&#xa; The archive provider will not be used for writing new history data&#xa; (create/update/writes will only apply to the local history data). Also note&#xa; that the archive history provider is only tapped for history data when a query&#xa; is made that exceeds the earliest data available locally (thus the archive&#xa; data is assumed to be older/archived history data). It is also assumed that&#xa; all histories accessed must be available locally, even if the local data is&#xa; minimal in capacity. Therefore the archive history provider will not be queried&#xa; for histories that don&#x27;t exist locally.&#xa;&#xa; There are some scenarios where accessing archive data is not desired at query&#xa; time. In order to accomodate those special cases, a special Context facet can&#xa; be applied to the &lt;code&gt;<see ref="javax.baja.sys.Context">Context</see>&lt;/code&gt; instance used when resolving a history ORD&#xa; against a hybrid history database or making a connection to the database.&#xa; This boolean facet is named &#x22;excludeArchiveHistoryData&#x22; and when present and&#xa; set to true, it will signify that archive history data should be excluded from&#xa; queries using the Context containing it. Refer to&#xa; &lt;code&gt;<see ref="javax.baja.history.HistoryQuery#makeExcludeArchiveDataContext(javax.baja.sys.Context)">HistoryQuery#makeExcludeArchiveDataContext(Context)</see>&lt;/code&gt; for a convenient&#xa; way to create such a Context. Alternatively, when making a direct connection&#xa; to the database, you can use the&#xa; &lt;code&gt;<see ref="javax.baja.history.db.BHistoryDatabase#getDbConnection(boolean, javax.baja.sys.Context)">BHistoryDatabase#getDbConnection(boolean, Context)</see>&lt;/code&gt; method and pass&#xa; in true for the excludeArchiveData argument, and that will ensure that any&#xa; queries made to the database using that connection will disregard archive&#xa; history data and only use local data.&#xa;&#xa; Multiple instances of BArchiveHistoryProvider implementations are allowed&#xa; to be installed in a station, but they must be added as direct children of&#xa; the HistoryService&#x27;s &lt;code&gt;<see ref="javax.baja.history.db.BArchiveHistoryProviders">BArchiveHistoryProviders</see>&lt;/code&gt; container. At history&#xa; query time, installed BArchiveHistoryProviders will be accessed in slot order&#xa; until the first match is found (a match is a provider that contains archived&#xa; history data for the requested history). History queries cannot span across&#xa; multiple BArchiveHistoryProviders; only the first matching provider for a&#xa; given history query will be used.
</description>
<tag name="@author">Scott Hoye on 04/17/2019</tag>
<tag name="@since">Niagara 4.11</tag>
<extends>
<type class="javax.baja.sys.BComponent"/>
</extends>
<implements>
<type class="javax.baja.util.BIRestrictedComponent"/>
</implements>
<property name="status" flags="drts">
<type class="javax.baja.status.BStatus"/>
<description>
Slot for the &lt;code&gt;status&lt;/code&gt; property.&#xa; The current status of this provider.  This property should never be set&#xa; directly since it is computed by the framework.
</description>
<tag name="@see">#getStatus</tag>
<tag name="@see">#setStatus</tag>
</property>

<property name="enabled" flags="">
<type class="boolean"/>
<description>
Slot for the &lt;code&gt;enabled&lt;/code&gt; property.&#xa; The enabled state of this archive history provider.  If false, this archive&#xa; history provider won&#x27;t be used to supplement local history data.  If true,&#xa; this archive history provider will be tapped (as needed) to supplement&#xa; local history data.
</description>
<tag name="@see">#getEnabled</tag>
<tag name="@see">#setEnabled</tag>
</property>

<property name="faultCause" flags="drt">
<type class="java.lang.String"/>
<description>
Slot for the &lt;code&gt;faultCause&lt;/code&gt; property.&#xa; When the status is in fault, this property displays a short message&#xa; describing why the provider is in fault.
</description>
<tag name="@see">#getFaultCause</tag>
<tag name="@see">#setFaultCause</tag>
</property>

<property name="maxArchiveResultsPerQuery" flags="">
<type class="int"/>
<description>
Slot for the &lt;code&gt;maxArchiveResultsPerQuery&lt;/code&gt; property.&#xa; For each time query requested, this limit determines the maximum number of&#xa; history records that will be read from the archive history provider and&#xa; returned in the results.
</description>
<tag name="@see">#getMaxArchiveResultsPerQuery</tag>
<tag name="@see">#setMaxArchiveResultsPerQuery</tag>
</property>

<property name="archiveLimitNotifications" flags="">
<type class="javax.baja.history.db.BArchiveLimitNotificationBehavior"/>
<description>
Slot for the &lt;code&gt;archiveLimitNotifications&lt;/code&gt; property.&#xa; Specifies the Workbench notification behavior when the&#xa; maxArchiveResultsPerQuery limit is exceeded for a history query made from a&#xa; remote Workbench user.
</description>
<tag name="@see">#getArchiveLimitNotifications</tag>
<tag name="@see">#setArchiveLimitNotifications</tag>
</property>

<!-- javax.baja.history.db.BArchiveHistoryProvider() -->
<constructor name="BArchiveHistoryProvider" public="true">
<description/>
</constructor>

<!-- javax.baja.history.db.BArchiveHistoryProvider.getStatus() -->
<method name="getStatus"  public="true">
<description>
Get the &lt;code&gt;status&lt;/code&gt; property.&#xa; The current status of this provider.  This property should never be set&#xa; directly since it is computed by the framework.
</description>
<tag name="@see">#status</tag>
<return>
<type class="javax.baja.status.BStatus"/>
</return>
</method>

<!-- javax.baja.history.db.BArchiveHistoryProvider.setStatus(javax.baja.status.BStatus) -->
<method name="setStatus"  public="true">
<description>
Set the &lt;code&gt;status&lt;/code&gt; property.&#xa; The current status of this provider.  This property should never be set&#xa; directly since it is computed by the framework.
</description>
<tag name="@see">#status</tag>
<parameter name="v">
<type class="javax.baja.status.BStatus"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.history.db.BArchiveHistoryProvider.getEnabled() -->
<method name="getEnabled"  public="true">
<description>
Get the &lt;code&gt;enabled&lt;/code&gt; property.&#xa; The enabled state of this archive history provider.  If false, this archive&#xa; history provider won&#x27;t be used to supplement local history data.  If true,&#xa; this archive history provider will be tapped (as needed) to supplement&#xa; local history data.
</description>
<tag name="@see">#enabled</tag>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.history.db.BArchiveHistoryProvider.setEnabled(boolean) -->
<method name="setEnabled"  public="true">
<description>
Set the &lt;code&gt;enabled&lt;/code&gt; property.&#xa; The enabled state of this archive history provider.  If false, this archive&#xa; history provider won&#x27;t be used to supplement local history data.  If true,&#xa; this archive history provider will be tapped (as needed) to supplement&#xa; local history data.
</description>
<tag name="@see">#enabled</tag>
<parameter name="v">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.history.db.BArchiveHistoryProvider.getFaultCause() -->
<method name="getFaultCause"  public="true">
<description>
Get the &lt;code&gt;faultCause&lt;/code&gt; property.&#xa; When the status is in fault, this property displays a short message&#xa; describing why the provider is in fault.
</description>
<tag name="@see">#faultCause</tag>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.history.db.BArchiveHistoryProvider.setFaultCause(java.lang.String) -->
<method name="setFaultCause"  public="true">
<description>
Set the &lt;code&gt;faultCause&lt;/code&gt; property.&#xa; When the status is in fault, this property displays a short message&#xa; describing why the provider is in fault.
</description>
<tag name="@see">#faultCause</tag>
<parameter name="v">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.history.db.BArchiveHistoryProvider.getMaxArchiveResultsPerQuery() -->
<method name="getMaxArchiveResultsPerQuery"  public="true">
<description>
Get the &lt;code&gt;maxArchiveResultsPerQuery&lt;/code&gt; property.&#xa; For each time query requested, this limit determines the maximum number of&#xa; history records that will be read from the archive history provider and&#xa; returned in the results.
</description>
<tag name="@see">#maxArchiveResultsPerQuery</tag>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.history.db.BArchiveHistoryProvider.setMaxArchiveResultsPerQuery(int) -->
<method name="setMaxArchiveResultsPerQuery"  public="true">
<description>
Set the &lt;code&gt;maxArchiveResultsPerQuery&lt;/code&gt; property.&#xa; For each time query requested, this limit determines the maximum number of&#xa; history records that will be read from the archive history provider and&#xa; returned in the results.
</description>
<tag name="@see">#maxArchiveResultsPerQuery</tag>
<parameter name="v">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.history.db.BArchiveHistoryProvider.getArchiveLimitNotifications() -->
<method name="getArchiveLimitNotifications"  public="true">
<description>
Get the &lt;code&gt;archiveLimitNotifications&lt;/code&gt; property.&#xa; Specifies the Workbench notification behavior when the&#xa; maxArchiveResultsPerQuery limit is exceeded for a history query made from a&#xa; remote Workbench user.
</description>
<tag name="@see">#archiveLimitNotifications</tag>
<return>
<type class="javax.baja.history.db.BArchiveLimitNotificationBehavior"/>
</return>
</method>

<!-- javax.baja.history.db.BArchiveHistoryProvider.setArchiveLimitNotifications(javax.baja.history.db.BArchiveLimitNotificationBehavior) -->
<method name="setArchiveLimitNotifications"  public="true">
<description>
Set the &lt;code&gt;archiveLimitNotifications&lt;/code&gt; property.&#xa; Specifies the Workbench notification behavior when the&#xa; maxArchiveResultsPerQuery limit is exceeded for a history query made from a&#xa; remote Workbench user.
</description>
<tag name="@see">#archiveLimitNotifications</tag>
<parameter name="v">
<type class="javax.baja.history.db.BArchiveLimitNotificationBehavior"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.history.db.BArchiveHistoryProvider.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.history.db.BArchiveHistoryProvider.isLikelyToContainArchivedHistory(javax.baja.history.BHistoryConfig, javax.baja.sys.Context) -->
<method name="isLikelyToContainArchivedHistory"  public="true" abstract="true">
<description>
Since multiple BArchiveHistoryProvider instances can be installed in the&#xa; HistoryService&#x27;s &lt;code&gt;<see ref="javax.baja.history.db.BArchiveHistoryProviders">BArchiveHistoryProviders</see>&lt;/code&gt; container, at query time&#xa; a specific BArchiveHistoryProvider instance which contains the archived&#xa; data for a given history must be found. Determining the existence of&#xa; archived history data could be expensive (e.g. a network call to a remote&#xa; historian). So prior to calling&#xa; &lt;code&gt;<see ref="javax.baja.history.db.BArchiveHistoryProvider#timeQuery(javax.baja.history.BHistoryConfig, javax.baja.sys.BAbsTime, javax.baja.sys.BAbsTime, boolean, javax.baja.sys.Context)">#timeQuery(BHistoryConfig, BAbsTime, BAbsTime, boolean, Context)</see>&lt;/code&gt;,&#xa; this method will be called which is intended to be a quick, unreliable&#xa; existence check (e.g. no network calls) that indicates whether this&#xa; BArchiveHistoryProvider instance is likely to contain archived data for&#xa; the given history. Subclasses should implement this method to perform a&#xa; quick check if possible (if not possible, subclasses should just return&#xa; false). For example, a quick check could involve looking for a matching&#xa; history export descriptor in the local Niagara station that might be a good&#xa; indication of where the history&#x27;s archive data is located. Installed&#xa; BArchiveHistoryProvider instances will have this method called (in slot&#xa; order), and any instances that return true will be given precedence in calling&#xa; &lt;code&gt;<see ref="javax.baja.history.db.BArchiveHistoryProvider#timeQuery(javax.baja.history.BHistoryConfig, javax.baja.sys.BAbsTime, javax.baja.sys.BAbsTime, boolean, javax.baja.sys.Context)">#timeQuery(BHistoryConfig, BAbsTime, BAbsTime, boolean, Context)</see>&lt;/code&gt;.&#xa; If &lt;code&gt;<see ref="javax.baja.history.db.BArchiveHistoryProvider#timeQuery(javax.baja.history.BHistoryConfig, javax.baja.sys.BAbsTime, javax.baja.sys.BAbsTime, boolean, javax.baja.sys.Context)">#timeQuery(BHistoryConfig, BAbsTime, BAbsTime, boolean, Context)</see>&lt;/code&gt;&#xa; then returns something other than &lt;code&gt;<see ref="java.util.Optional#empty()">Optional#empty()</see>&lt;/code&gt; (an empty&#xa; Optional result is the conclusive indicator that the history is not&#xa; archived to a given BArchiveHistoryProvider), then the search for archived&#xa; data can stop. This method is designed to be a helpful indicator for where&#xa; archived history data is likely to exist in order to speed up query&#xa; performance (by reducing unnecessary network calls). Even if this method&#xa; returns false for a given BArchiveHistoryProvider, it can still be later&#xa; queried for archive history data if no other check on another installed&#xa; BArchiveHistoryProvider instance locates the history&#x27;s archive data first.
</description>
<parameter name="historyConfig">
<type class="javax.baja.history.BHistoryConfig"/>
<description>
The history for which a query is about to be made, so&#xa;                      the quick check should look for the probable existence&#xa;                      of archived data for the history it specifies.
</description>
</parameter>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
<description>
The Context associated with this request
</description>
</parameter>
<return>
<type class="boolean"/>
<description>
true if archived history data is likely (but not guaranteed) to be&#xa; contained in this BArchiveHistoryProvider for the given history. Returns&#xa; false if archived history data is unlikely for the given history or if it&#xa; can&#x27;t be determined through a quick check.
</description>
</return>
</method>

<!-- javax.baja.history.db.BArchiveHistoryProvider.timeQuery(javax.baja.history.BHistoryConfig, javax.baja.sys.BAbsTime, javax.baja.sys.BAbsTime, boolean, javax.baja.sys.Context) -->
<method name="timeQuery"  public="true" final="true">
<description>
Perform a query for archive history data and return the results as a&#xa; &lt;code&gt;<see ref="javax.baja.sys.Cursor">Cursor</see>&lt;/code&gt; of history records (&lt;code&gt;<see ref="javax.baja.history.BHistoryRecord">BHistoryRecord</see>&lt;/code&gt;). The returned&#xa; Cursor will be limited by the max size specified in the&#xa; &lt;code&gt;<see ref="javax.baja.history.db.BArchiveHistoryProvider#getMaxArchiveResultsPerQuery()">#getMaxArchiveResultsPerQuery()</see>&lt;/code&gt; property with most recent history&#xa; data favored over older data when the limit is reached.  The returned&#xa; Cursor will also include a Context (see &lt;code&gt;<see ref="javax.baja.sys.Cursor#getContext()">Cursor#getContext()</see>&lt;/code&gt;) that&#xa; includes special facet information described below. If the history does&#xa; not exist in the archive provider, &lt;code&gt;<see ref="java.util.Optional#empty()">Optional#empty()</see>&lt;/code&gt; is returned.
</description>
<parameter name="historyConfig">
<type class="javax.baja.history.BHistoryConfig"/>
<description>
The local history configuration instance for which to&#xa;                      retrieve data from the archive.
</description>
</parameter>
<parameter name="startTime">
<type class="javax.baja.sys.BAbsTime"/>
<description>
The start time for the archive data query (inclusive). If&#xa;                  the start time is BAbsTime.NULL, then the query will start&#xa;                  from the beginning record available.
</description>
</parameter>
<parameter name="endTime">
<type class="javax.baja.sys.BAbsTime"/>
<description>
The end time for the archive data query (inclusive). If the&#xa;                end time is BAbsTime.NULL, then the query will end at the&#xa;                last record available.
</description>
</parameter>
<parameter name="descending">
<type class="boolean"/>
<description>
When true, the results will be returned in timestamp&#xa;                   descending order.  When false, the results will be&#xa;                   returned in timestamp ascending order.
</description>
</parameter>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
<description>
The context associated with this archive time query request,&#xa;                not to be confused with the context in the Cursor returned&#xa;                by this method. This context is for future use (can be null)&#xa;                and could contain additional facets to provide more&#xa;                qualifiers for the computed result.
</description>
</parameter>
<return>
<parameterizedType class="java.util.Optional">
<args>
<parameterizedType class="javax.baja.sys.Cursor">
<args>
<type class="javax.baja.history.BHistoryRecord"/>
</args>
</parameterizedType>
</args>
</parameterizedType>
<description>
A cursor of history records that results from the given time query&#xa; against the archive history provider. If the history does not exist in&#xa; the archive provider, &lt;code&gt;<see ref="java.util.Optional#empty()">Optional#empty()</see>&lt;/code&gt; is returned giving control&#xa; back to the framework to proceed with using local history data only. Also&#xa; when called by the framework, any runtime exceptions thrown by this method&#xa; will get logged as a warning before proceeding to use local history data&#xa; only. Another vital part of the returned Cursor is its Context (see&#xa; &lt;code&gt;<see ref="javax.baja.sys.Cursor#getContext()">Cursor#getContext()</see>&lt;/code&gt;. The returned Cursor&#x27;s Context is expected to&#xa; be immediately available (not requiring the Cursor to be drained first) and&#xa; it is expected to include some special Context facets in order to inform&#xa; the caller about the following conditions:&#xa;  (1) If the &lt;code&gt;<see ref="javax.baja.history.db.BArchiveHistoryProvider#getMaxArchiveResultsPerQuery()">#getMaxArchiveResultsPerQuery()</see>&lt;/code&gt; limit is exceeded while&#xa;      computing the matching history records from the archive, an&#xa;      &#x22;archiveHistoryLimitExceeded&#x22; boolean facet will be set to true in the&#xa;      Context of the returned cursor. You can use the&#xa;      &lt;code&gt;<see ref="javax.baja.history.HistoryCursor#archiveLimitExceeded(javax.baja.sys.Context)">javax.baja.history.HistoryCursor#archiveLimitExceeded(Context)</see>&lt;/code&gt;&#xa;      method to check the Cursor&#x27;s Context to see if this boolean facet is&#xa;      set to true. This Context facet allows callers to be informed that&#xa;      the limit was exceeded and the Cursor result contains partial matching&#xa;      records up to the limit (favoring recent records over old ones).&#xa;  (2) The pre and post history records (the archive history records just&#xa;      outside the boundaries of the requested time range or just outside of&#xa;      the limited results, whichever applies first) will be included&#xa;      as facets in the Context of the returned cursor.  The&#xa;      &lt;code&gt;<see ref="javax.baja.history.HistoryCursor#extractPreRecord(javax.baja.sys.BFacets)">javax.baja.history.HistoryCursor#extractPreRecord(BFacets)</see>&lt;/code&gt; or&#xa;      &lt;code&gt;<see ref="javax.baja.history.HistoryCursor#extractPostRecord(javax.baja.sys.BFacets)">javax.baja.history.HistoryCursor#extractPostRecord(BFacets)</see>&lt;/code&gt;&#xa;      methods can be used to check the returned Cursor&#x27;s Context&#x27;s facets&#xa;      for the presence of these boundary archive history records. If&#xa;      descending order is requested, the pre history record will be a more&#xa;      recent history record that is just after the requested end time (or&#xa;      null if no records exist that are more recent than the requested time&#xa;      range), and the post history record will be an older history record&#xa;      that is just before the requested start time (or null if no records&#xa;      exist that are older than the requested time range) or, if the&#xa;      &lt;code&gt;<see ref="javax.baja.history.db.BArchiveHistoryProvider#getMaxArchiveResultsPerQuery()">#getMaxArchiveResultsPerQuery()</see>&lt;/code&gt; limit is exceeded, the record&#xa;      just before the oldest recent record fitting into the limit. If&#xa;      ascending order is requested, the pre history record will be an older&#xa;      history record that is just before the requested start time (or null&#xa;      if no records exist that are older than the requested time range) or,&#xa;      if the &lt;code&gt;<see ref="javax.baja.history.db.BArchiveHistoryProvider#getMaxArchiveResultsPerQuery()">#getMaxArchiveResultsPerQuery()</see>&lt;/code&gt; limit is exceeded, the&#xa;      record just before the oldest recent record fitting into the limit,&#xa;      and the post history record will be a more recent history record that&#xa;      is just after the requested end time (or null if no records exist that&#xa;      are more recent than the requested time range).
</description>
</return>
</method>

<!-- javax.baja.history.db.BArchiveHistoryProvider.doTimeQuery(javax.baja.history.BHistoryConfig, javax.baja.sys.BAbsTime, javax.baja.sys.BAbsTime, boolean, int, javax.baja.sys.Context) -->
<method name="doTimeQuery"  protected="true" abstract="true">
<description>
Callback for subclasses to perform a query for archive history data and&#xa; return the results as a &lt;code&gt;<see ref="javax.baja.sys.Cursor">Cursor</see>&lt;/code&gt; of history records&#xa; (&lt;code&gt;<see ref="javax.baja.history.BHistoryRecord">BHistoryRecord</see>&lt;/code&gt;). The returned Cursor should include a Context&#xa; (see &lt;code&gt;<see ref="javax.baja.sys.Cursor#getContext()">Cursor#getContext()</see>&lt;/code&gt;) that includes special facet information&#xa; described below. If the history does not exist in the archive provider,&#xa; &lt;code&gt;<see ref="java.util.Optional#empty()">Optional#empty()</see>&lt;/code&gt; should be returned.
</description>
<parameter name="historyConfig">
<type class="javax.baja.history.BHistoryConfig"/>
<description>
The local history configuration instance for which to&#xa;                      retrieve data from the archive.
</description>
</parameter>
<parameter name="startTime">
<type class="javax.baja.sys.BAbsTime"/>
<description>
The start time for the archive data query (inclusive). If&#xa;                  the start time is BAbsTime.NULL, then query from the&#xa;                  beginning record available.
</description>
</parameter>
<parameter name="endTime">
<type class="javax.baja.sys.BAbsTime"/>
<description>
The end time for the archive data query (inclusive). If the&#xa;                end time is BAbsTime.NULL, then query to the last record&#xa;                available.
</description>
</parameter>
<parameter name="descending">
<type class="boolean"/>
<description>
When true, return the results in timestamp descending&#xa;                   order.  When false, return the results in timestamp&#xa;                   ascending order.
</description>
</parameter>
<parameter name="limit">
<type class="int"/>
<description>
A limit on the total number of history records that should be&#xa;              returned, even if more matches exist for the specified time&#xa;              range in the archive. If descending order is requested and the&#xa;              limit is reached, the most recent matching history records&#xa;              should be returned (in descending order) and the limit should&#xa;              be enforced to exclude the oldest matching history records. If&#xa;              ascending order is requested and the limit is reached, the&#xa;              most recent matching history records should be returned (in&#xa;              ascending order) and the limit should be enforced to exclude&#xa;              the oldest matching history records. In either case, if the&#xa;              number of matching history records exceeds the limit, the&#xa;              &#x22;archiveHistoryLimitExceeded&#x22; boolean facet should be set to&#xa;              true in the Context of the returned cursor (see below) so that&#xa;              consumers can be notified that the limit was exceeded and the&#xa;              result contains partial matching records up to the limit.
</description>
</parameter>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
<description>
The context associated with this archive time query request,&#xa;                not to be confused with the context in the Cursor returned&#xa;                by this method. This context is for future use (can be null)&#xa;                and could contain additional facets to provide more&#xa;                qualifiers for the computed result.
</description>
</parameter>
<return>
<parameterizedType class="java.util.Optional">
<args>
<parameterizedType class="javax.baja.sys.Cursor">
<args>
<type class="javax.baja.history.BHistoryRecord"/>
</args>
</parameterizedType>
</args>
</parameterizedType>
<description>
A cursor of history records that results from the given time query&#xa; against the archive history provider. If the history does not exist in&#xa; the archive provider, &lt;code&gt;<see ref="java.util.Optional#empty()">Optional#empty()</see>&lt;/code&gt; should be returned so that&#xa; the framework can proceed with using local history data only. If the&#xa; history exists but no matching history records are found for the time&#xa; query, an &lt;code&gt;<see ref="com.tridium.util.EmptyCursor">com.tridium.util.EmptyCursor</see>&lt;/code&gt; should be returned in the&#xa; Optional result, with the appropriate Context facets described below. Any&#xa; runtime exceptions thrown by this callback will get logged by the framework&#xa; as a warning before proceeding to use local data only. Another vital part&#xa; of the returned Cursor is its Context (see &lt;code&gt;<see ref="javax.baja.sys.Cursor#getContext()">Cursor#getContext()</see>&lt;/code&gt;. The&#xa; returned Cursor&#x27;s Context is expected to be immediately available (not&#xa; requiring the Cursor to be drained first) and it is expected to include&#xa; some special Context facets in order to inform the caller about the&#xa; following conditions:&#xa;  (1) If the limit is exceeded while computing the matching history records&#xa;      from the archive, an &#x22;archiveHistoryLimitExceeded&#x22; boolean facet must&#xa;      be set to true in the Context of the returned cursor. Use the&#xa;      &lt;code&gt;<see ref="javax.baja.history.HistoryCursor#makeArchiveLimitExceededContext(javax.baja.sys.Context)">javax.baja.history.HistoryCursor#makeArchiveLimitExceededContext(Context)</see>&lt;/code&gt;&#xa;      method to create a Context with this boolean facet set to true (or to&#xa;      enhance an existing Context instance).  This Context facet allows&#xa;      consumers to be informed that the limit was exceeded and the cursor&#xa;      result contains partial matching records up to the limit.&#xa;  (2) The pre and post history records (the archive history records just&#xa;      outside the boundaries of the requested time range or just outside of&#xa;      the limited results, whichever applies first) must be included&#xa;      as facets in the Context of the returned cursor.  The&#xa;      &lt;code&gt;<see ref="javax.baja.history.HistoryCursor#makeBoundaryRecordFacets(javax.baja.history.BHistoryRecord, javax.baja.history.BHistoryRecord)">javax.baja.history.HistoryCursor#makeBoundaryRecordFacets(BHistoryRecord, BHistoryRecord)</see>&lt;/code&gt;&#xa;      method should be used to generate these facets, and then they must&#xa;      be applied to the returned cursor&#x27;s Context. If descending order is&#xa;      requested, the pre history record should be a more recent history&#xa;      record that is just after the requested end time (or null if no&#xa;      records exist that are more recent than the requested time range), and&#xa;      the post history record should be an older history record that is just&#xa;      before the requested start time (or null if no records exist that are&#xa;      older than the requested time range) or, if the limit is exceeded, the&#xa;      record just before the oldest recent record fitting into the limit. If&#xa;      ascending order is requested, the pre history record should be an&#xa;      older history record that is just before the requested start time&#xa;      (or null if no records exist that are older than the requested time&#xa;      range) or, if the limit is exceeded, the record just before the oldest&#xa;      recent record fitting into the limit, and the post history record&#xa;      should be a more recent history record that is just after the&#xa;      requested end time (or null if no records exist that are more recent&#xa;      than the requested time range).
</description>
</return>
</method>

<!-- javax.baja.history.db.BArchiveHistoryProvider.checkProviderLicense() -->
<method name="checkProviderLicense"  protected="true">
<description>
This method can be overridden by sub classes to enforce the existence of a license feature.  If implemented,&#xa; this method should throw a &lt;code&gt;<see ref="javax.baja.license.FeatureNotLicensedException">FeatureNotLicensedException</see>&lt;/code&gt; with an appropriate message to be displayed&#xa; as the &lt;code&gt;<see ref="javax.baja.history.db.BArchiveHistoryProvider#faultCause">BArchiveHistoryProvider#faultCause</see>&lt;/code&gt; of the sub class.
</description>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.license.FeatureNotLicensedException"/>
<description>
if a license feature is required for a sub class and it&#xa; cannot be found in the license file.
</description>
</throws>
</method>

<!-- javax.baja.history.db.BArchiveHistoryProvider.isOperational() -->
<method name="isOperational"  public="true" final="true">
<description>
Return true if this ArchiveHistoryProvider is operational. A provider is&#xa; operational if it is mounted in a running station, the &lt;code&gt;<see ref="javax.baja.history.db.BArchiveHistoryProvider#enabled">#enabled</see>&lt;/code&gt;&#xa; property is set to true, and the status is not in fault.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.history.db.BArchiveHistoryProvider.updateStatus() -->
<method name="updateStatus"  protected="true" final="true">
<description>
Recompute this ArchiveHistoryProvider&#x27;s status.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.history.db.BArchiveHistoryProvider.configOk() -->
<method name="configOk"  protected="true" final="true">
<description>
Clear the configuration fault status.  This ArchiveHistoryProvider may&#xa; remain in fault if it has fatal faults.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.history.db.BArchiveHistoryProvider.configFail(java.lang.String) -->
<method name="configFail"  protected="true" final="true">
<description>
Set this ArchiveHistoryProvider into configuration fault.  If it&#xa; was previously not in fault, then this sets the fault status and fault&#xa; cause.
</description>
<parameter name="cause">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.history.db.BArchiveHistoryProvider.configFatal(java.lang.String) -->
<method name="configFatal"  protected="true" final="true">
<description>
Set this ArchiveHistoryProvider into the fatal fault condition.  Unlike&#xa; configFail(), the fatal fault condition cannot be cleared until restart.&#xa; Fatal faults trump config faults. Fatal faults usually indicate licensing&#xa; failures.
</description>
<parameter name="cause">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.history.db.BArchiveHistoryProvider.computeArchiveQueryLimit(javax.baja.sys.Context) -->
<method name="computeArchiveQueryLimit"  public="true" final="true">
<description>
Convenience method to compute the limit on the maximum number of history&#xa; records that should be read from this archive history provider at query&#xa; time. It checks the given Context argument for the presence of a special&#xa; &#x22;archiveHistoryQueryLimit&#x22; facet, and if found, returns its integer value&#xa; ONLY IF it is lower than the&#xa; &lt;code&gt;<see ref="javax.baja.history.db.BArchiveHistoryProvider#getMaxArchiveResultsPerQuery()">BArchiveHistoryProvider#getMaxArchiveResultsPerQuery()</see>&lt;/code&gt; property&#xa; value. Therefore any limit specified in the given Context will be upper&#xa; bounded by the configured limit on this archive history provider instance&#xa; itself. If no limit is specified in the given Context, then the&#xa; &lt;code&gt;<see ref="javax.baja.history.db.BArchiveHistoryProvider#getMaxArchiveResultsPerQuery()">BArchiveHistoryProvider#getMaxArchiveResultsPerQuery()</see>&lt;/code&gt; property&#xa; value will be returned.
</description>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
<description>
The Context instance to check for a special&#xa;                &#x22;archiveHistoryQueryLimit&#x22; facet.
</description>
</parameter>
<return>
<type class="int"/>
<description>
the limit on the maximum number of history records that should be&#xa; read from this archive history provider at query time.
</description>
</return>
</method>

<!-- javax.baja.history.db.BArchiveHistoryProvider.checkParentForRestrictedComponent(javax.baja.sys.BComponent, javax.baja.sys.Context) -->
<method name="checkParentForRestrictedComponent"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Ensures that BArchiveHistoryProvider instances are only allowed to live&#xa; under the &lt;code&gt;<see ref="javax.baja.history.db.BArchiveHistoryProviders">BArchiveHistoryProviders</see>&lt;/code&gt; container in a station.
</description>
<parameter name="parent">
<type class="javax.baja.sys.BComponent"/>
</parameter>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.history.db.BArchiveHistoryProvider.fw(int, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object) -->
<method name="fw"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="x">
<type class="int"/>
</parameter>
<parameter name="a">
<type class="java.lang.Object"/>
</parameter>
<parameter name="b">
<type class="java.lang.Object"/>
</parameter>
<parameter name="c">
<type class="java.lang.Object"/>
</parameter>
<parameter name="d">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="java.lang.Object"/>
</return>
</method>

<!-- javax.baja.history.db.BArchiveHistoryProvider.getIcon() -->
<method name="getIcon"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.BIcon"/>
</return>
</method>

<!-- javax.baja.history.db.BArchiveHistoryProvider.status -->
<field name="status"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;status&lt;/code&gt; property.&#xa; The current status of this provider.  This property should never be set&#xa; directly since it is computed by the framework.
</description>
<tag name="@see">#getStatus</tag>
<tag name="@see">#setStatus</tag>
</field>

<!-- javax.baja.history.db.BArchiveHistoryProvider.enabled -->
<field name="enabled"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;enabled&lt;/code&gt; property.&#xa; The enabled state of this archive history provider.  If false, this archive&#xa; history provider won&#x27;t be used to supplement local history data.  If true,&#xa; this archive history provider will be tapped (as needed) to supplement&#xa; local history data.
</description>
<tag name="@see">#getEnabled</tag>
<tag name="@see">#setEnabled</tag>
</field>

<!-- javax.baja.history.db.BArchiveHistoryProvider.faultCause -->
<field name="faultCause"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;faultCause&lt;/code&gt; property.&#xa; When the status is in fault, this property displays a short message&#xa; describing why the provider is in fault.
</description>
<tag name="@see">#getFaultCause</tag>
<tag name="@see">#setFaultCause</tag>
</field>

<!-- javax.baja.history.db.BArchiveHistoryProvider.maxArchiveResultsPerQuery -->
<field name="maxArchiveResultsPerQuery"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;maxArchiveResultsPerQuery&lt;/code&gt; property.&#xa; For each time query requested, this limit determines the maximum number of&#xa; history records that will be read from the archive history provider and&#xa; returned in the results.
</description>
<tag name="@see">#getMaxArchiveResultsPerQuery</tag>
<tag name="@see">#setMaxArchiveResultsPerQuery</tag>
</field>

<!-- javax.baja.history.db.BArchiveHistoryProvider.archiveLimitNotifications -->
<field name="archiveLimitNotifications"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;archiveLimitNotifications&lt;/code&gt; property.&#xa; Specifies the Workbench notification behavior when the&#xa; maxArchiveResultsPerQuery limit is exceeded for a history query made from a&#xa; remote Workbench user.
</description>
<tag name="@see">#getArchiveLimitNotifications</tag>
<tag name="@see">#setArchiveLimitNotifications</tag>
</field>

<!-- javax.baja.history.db.BArchiveHistoryProvider.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
