<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="schedule" runtimeProfile="rt" qualifiedName="javax.baja.schedule.BAbstractSchedule" name="BAbstractSchedule" packageName="javax.baja.schedule" public="true" abstract="true">
<description>
Skeletal schedule implementation.&#xa; &lt;p&gt;&#xa; &lt;b&gt;Always Effective Property&lt;/b&gt;&lt;br&gt;&#xa; Use this to &#x22;wild card&#x22; a schedule.  When true, no matter what, the&#xa; schedule in question will be effective.&#xa; &lt;p&gt;&#xa; &lt;b&gt;Effective Value Property&lt;/b&gt;&lt;br&gt;&#xa; The way to assign output to a schedule is to create the dynamic&#xa; property &#x22;effectiveValue.&#x22;  When the root schedule is effective, the&#xa; effectiveValue of highest precedent effective descent becomes the&#xa; output of the entire schedule.&#xa; &lt;p&gt;&#xa; &lt;b&gt;Subclasses&lt;/b&gt;&lt;br&gt;&#xa; &lt;ul&gt;&#xa; &lt;li&gt;Subclass must implement isEffective(BAbsTime) and nextEvent(BAbsTime)&lt;/li&gt;&#xa; &lt;li&gt;All non-BAbstractSchedule (or subclass) properties that&#xa; would require a master slave synchronization must have the&#xa; user_defined_1 flag set.&lt;/li&gt;&#xa; &lt;/ul&gt;
</description>
<tag name="@creation">Sept 2001</tag>
<tag name="@version">$Revision: 69$ $Date: 6/23/10 11:59:35 AM EDT$</tag>
<extends>
<type class="javax.baja.sys.BComponent"/>
</extends>
<property name="alwaysEffective" flags="1">
<type class="boolean"/>
<description>
Slot for the &lt;code&gt;alwaysEffective&lt;/code&gt; property.
</description>
<tag name="@see">#getAlwaysEffective</tag>
<tag name="@see">#setAlwaysEffective</tag>
</property>

<!-- javax.baja.schedule.BAbstractSchedule() -->
<constructor name="BAbstractSchedule" public="true">
<description/>
</constructor>

<!-- javax.baja.schedule.BAbstractSchedule.getAlwaysEffective() -->
<method name="getAlwaysEffective"  public="true">
<description>
Get the &lt;code&gt;alwaysEffective&lt;/code&gt; property.
</description>
<tag name="@see">#alwaysEffective</tag>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.schedule.BAbstractSchedule.setAlwaysEffective(boolean) -->
<method name="setAlwaysEffective"  public="true">
<description>
Set the &lt;code&gt;alwaysEffective&lt;/code&gt; property.
</description>
<tag name="@see">#alwaysEffective</tag>
<parameter name="v">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.schedule.BAbstractSchedule.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.schedule.BAbstractSchedule.added(javax.baja.sys.Property, javax.baja.sys.Context) -->
<method name="added"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="p">
<type class="javax.baja.sys.Property"/>
</parameter>
<parameter name="c">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.schedule.BAbstractSchedule.changed(javax.baja.sys.Property, javax.baja.sys.Context) -->
<method name="changed"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="p">
<type class="javax.baja.sys.Property"/>
</parameter>
<parameter name="c">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.schedule.BAbstractSchedule.copyFrom(javax.baja.schedule.BAbstractSchedule, javax.baja.sys.Context) -->
<method name="copyFrom"  public="true">
<description>
Use this to copy schedules.  Override to preserve certain&#xa; fields that shouldn&#x27;t be copied over.  This makes new copies of all&#xa; objects being copied into this schedule.
</description>
<parameter name="schedule">
<type class="javax.baja.schedule.BAbstractSchedule"/>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.schedule.BAbstractSchedule.getIcon() -->
<method name="getIcon"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.BIcon"/>
</return>
</method>

<!-- javax.baja.schedule.BAbstractSchedule.getEffectiveValue() -->
<method name="getEffectiveValue"  public="true">
<description>
If the dynamic property effectiveValue exists, its value is returned.
</description>
<return>
<type class="javax.baja.status.BStatusValue"/>
</return>
</method>

<!-- javax.baja.schedule.BAbstractSchedule.getOutput(javax.baja.sys.BAbsTime) -->
<method name="getOutput"  public="true">
<description>
Convenience method which returns the effectiveValue property of the&#xa; component returned from the getOutputSource method.
</description>
<parameter name="at">
<type class="javax.baja.sys.BAbsTime"/>
</parameter>
<return>
<type class="javax.baja.status.BStatusValue"/>
</return>
</method>

<!-- javax.baja.schedule.BAbstractSchedule.getOutputSource(javax.baja.sys.BAbsTime) -->
<method name="getOutputSource"  public="true">
<description>
Returns the schedule whose effectiveValue property should be used,&#xa; otherwise null.  The default implementation returns &#x27;this&#x27; if effective&#xa; and has a property named &#x22;effectiveValue&#x22;.
</description>
<parameter name="at">
<type class="javax.baja.sys.BAbsTime"/>
</parameter>
<return>
<type class="javax.baja.schedule.BAbstractSchedule"/>
</return>
</method>

<!-- javax.baja.schedule.BAbstractSchedule.getRootSchedule() -->
<method name="getRootSchedule"  public="true">
<description>
Ascends parents until the topmost schedule is reached.
</description>
<return>
<type class="javax.baja.schedule.BAbstractSchedule"/>
</return>
</method>

<!-- javax.baja.schedule.BAbstractSchedule.initAlwaysEffective(boolean) -->
<method name="initAlwaysEffective"  public="true">
<description>
Configuration convenience which returns this.
</description>
<parameter name="value">
<type class="boolean"/>
</parameter>
<return>
<type class="javax.baja.schedule.BAbstractSchedule"/>
<description>
this
</description>
</return>
</method>

<!-- javax.baja.schedule.BAbstractSchedule.initEffectiveValue(javax.baja.status.BStatusValue) -->
<method name="initEffectiveValue"  public="true">
<description>
Configuration convenience which returns this.
</description>
<parameter name="o">
<type class="javax.baja.status.BStatusValue"/>
</parameter>
<return>
<type class="javax.baja.schedule.BAbstractSchedule"/>
<description>
this
</description>
</return>
</method>

<!-- javax.baja.schedule.BAbstractSchedule.isEffective(javax.baja.sys.BAbsTime) -->
<method name="isEffective"  public="true" abstract="true">
<description>
Whether or not the fields represented by the given date-time are&#xa; effective in this schedule.  Must return true if the&#xa; alwaysEffective property is true.
</description>
<parameter name="at">
<type class="javax.baja.sys.BAbsTime"/>
<description>
A date-timestamp who represents some field (such as minute&#xa;             or hour) that the schedule measures to determine effectiveness.
</description>
</parameter>
<return>
<type class="boolean"/>
<description>
True if effective.
</description>
</return>
</method>

<!-- javax.baja.schedule.BAbstractSchedule.next(boolean, javax.baja.sys.BAbsTime, javax.baja.sys.BAbsTime) -->
<method name="next"  public="true">
<description>
The next time the schedule TRANSITIONS into the given effective state.  If&#xa; the schedule is in the desired state at the from time, the returned&#xa; time will be after the schedule transitions out of and back into the&#xa; desired state. &lt;p&gt;&#xa; The query starts after the &lt;code&gt;after&lt;/code&gt; time and ends at the&#xa; &lt;code&gt;to&lt;/code&gt; time.  The &lt;code&gt;to&lt;/code&gt; endpoint is to prevent&#xa; infinite queries for states that will never be reached, however the&#xa; &lt;code&gt;to&lt;/code&gt; time is optional.
</description>
<parameter name="effective">
<type class="boolean"/>
<description>
The desired state, true is effective.
</description>
</parameter>
<parameter name="after">
<type class="javax.baja.sys.BAbsTime"/>
<description>
Exclusive and required.
</description>
</parameter>
<parameter name="to">
<type class="javax.baja.sys.BAbsTime"/>
<description>
First excluded endpoint, optional.
</description>
</parameter>
<return>
<type class="javax.baja.sys.BAbsTime"/>
<description>
The next time the schedule transitions into the desired state.
</description>
</return>
</method>

<!-- javax.baja.schedule.BAbstractSchedule.nextOutputSource(javax.baja.sys.BAbsTime, javax.baja.sys.BAbsTime) -->
<method name="nextOutputSource"  public="true">
<description>
The next time the source of the output value changes after&#xa; the given time. &lt;p&gt;&#xa; The query starts after the &lt;code&gt;after&lt;/code&gt; time and ends at the&#xa; &lt;code&gt;to&lt;/code&gt; time.  The &lt;code&gt;to&lt;/code&gt; endpoint is to prevent&#xa; infinite queries for states that will never be reached, however the&#xa; &lt;code&gt;to&lt;/code&gt; time is optional.
</description>
<parameter name="after">
<type class="javax.baja.sys.BAbsTime"/>
<description>
Exclusive and required.
</description>
</parameter>
<parameter name="to">
<type class="javax.baja.sys.BAbsTime"/>
<description>
Inclusive and optional endpoint.
</description>
</parameter>
<return>
<type class="javax.baja.sys.BAbsTime"/>
<description>
Next schedule to provide output.
</description>
</return>
</method>

<!-- javax.baja.schedule.BAbstractSchedule.nextEvent(javax.baja.sys.BAbsTime) -->
<method name="nextEvent"  public="true" abstract="true">
<description>
The next time after the given that the schedule MAY change state.  If&#xa; alwaysEffective, this must return null;
</description>
<parameter name="after">
<type class="javax.baja.sys.BAbsTime"/>
<description>
Exclusive.
</description>
</parameter>
<return>
<type class="javax.baja.sys.BAbsTime"/>
<description>
Null, or the next time the schedule may change state.
</description>
</return>
</method>

<!-- javax.baja.schedule.BAbstractSchedule.removed(javax.baja.sys.Property, javax.baja.sys.BValue, javax.baja.sys.Context) -->
<method name="removed"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="p">
<type class="javax.baja.sys.Property"/>
</parameter>
<parameter name="v">
<type class="javax.baja.sys.BValue"/>
</parameter>
<parameter name="c">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.schedule.BAbstractSchedule.removed(javax.baja.sys.Property, javax.baja.sys.Context) -->
<method name="removed"  public="true">
<description/>
<parameter name="p">
<type class="javax.baja.sys.Property"/>
</parameter>
<parameter name="c">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.schedule.BAbstractSchedule.reorded(javax.baja.sys.Property, javax.baja.sys.Context) -->
<method name="reorded"  public="true">
<description/>
<parameter name="p">
<type class="javax.baja.sys.Property"/>
</parameter>
<parameter name="c">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.schedule.BAbstractSchedule.setEffectiveValue(javax.baja.status.BStatusValue) -->
<method name="setEffectiveValue"  public="true">
<description>
Creates the effectiveValue dynamic property.
</description>
<parameter name="o">
<type class="javax.baja.status.BStatusValue"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.schedule.BAbstractSchedule.addReference(javax.baja.schedule.BScheduleReference) -->
<method name="addReference"  protected="true" synchronized="true">
<description/>
<parameter name="ref">
<type class="javax.baja.schedule.BScheduleReference"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.schedule.BAbstractSchedule.modified() -->
<method name="modified"  protected="true">
<description>
Called when a change occurs that would require a remote synchronization.&#xa; At the component where the change occurs - this will be called if&#xa; the property is a schedule or it&#x27;s slot flags include USER_DEFINED_1.&#xa; This method calls the same method on a parent schedule and&#xa; also calls modified() on any BScheduleReferences pointing to this.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.schedule.BAbstractSchedule.removeReference(javax.baja.schedule.BScheduleReference) -->
<method name="removeReference"  protected="true" synchronized="true">
<description/>
<parameter name="ref">
<type class="javax.baja.schedule.BScheduleReference"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.schedule.BAbstractSchedule.auditableCopyFrom(java.lang.Object, javax.baja.sys.Context) -->
<method name="auditableCopyFrom"  public="true">
<annotation><type class="javax.baja.rpc.NiagaraRpc"/>
<elementValue name="transports">
<annotationValue kind="array">
<elementArray>
<annotationValue kind="annotation">
<annotation><type class="javax.baja.rpc.Transport"/>
<elementValue name="type">
<annotationValue kind="enum">
<enumField name="fox"/>
<type class="javax.baja.rpc.TransportType"/>
</annotationValue>
</elementValue>
</annotation>
</annotationValue>
</elementArray>
</annotationValue>
</elementValue>
<elementValue name="permissions">
<annotationValue kind="expr">
<expression>&#x22;w&#x22;</expression>
</annotationValue>
</elementValue>
</annotation>
<description>
Audit schedule changes after its been edited by a Scheduler
</description>
<parameter name="scheduleCopy">
<type class="java.lang.Object"/>
<description>
Schedule edits from Workbench Scheduler
</description>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
<description>
User used for audit
</description>
</parameter>
<return>
<type class="boolean"/>
<description>
always return true so we know the remote audit worked correctly.
</description>
</return>
</method>

<!-- javax.baja.schedule.BAbstractSchedule.getFirstDayOfWeek(java.lang.Object, javax.baja.sys.Context) -->
<method name="getFirstDayOfWeek"  public="true">
<annotation><type class="javax.baja.rpc.NiagaraRpc"/>
<elementValue name="transports">
<annotationValue kind="array">
<elementArray>
<annotationValue kind="annotation">
<annotation><type class="javax.baja.rpc.Transport"/>
<elementValue name="type">
<annotationValue kind="enum">
<enumField name="fox"/>
<type class="javax.baja.rpc.TransportType"/>
</annotationValue>
</elementValue>
</annotation>
</annotationValue>
</elementArray>
</annotationValue>
</elementValue>
<elementValue name="permissions">
<annotationValue kind="expr">
<expression>&#x22;r&#x22;</expression>
</annotationValue>
</elementValue>
</annotation>
<description>
Used by BWeekOfMonth Schedule as a RPC to get the firstDayOfWeek of the station.
</description>
<parameter name="obj">
<type class="java.lang.Object"/>
<description>
not used, needed for RPC
</description>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
<description>
not used, needed for RPC
</description>
</parameter>
<return>
<type class="javax.baja.sys.BWeekday"/>
<description/>
</return>
</method>

<!-- javax.baja.schedule.BAbstractSchedule.alwaysEffective -->
<field name="alwaysEffective"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;alwaysEffective&lt;/code&gt; property.
</description>
<tag name="@see">#getAlwaysEffective</tag>
<tag name="@see">#setAlwaysEffective</tag>
</field>

<!-- javax.baja.schedule.BAbstractSchedule.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

<!-- javax.baja.schedule.BAbstractSchedule.EFFECTIVE_VALUE -->
<field name="EFFECTIVE_VALUE"  protected="true" static="true" final="true">
<type class="java.lang.String"/>
<description>
Name of the slot used to store the output value of a&#xa; schedule.
</description>
</field>

</class>
</bajadoc>
