<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="hx" runtimeProfile="wb" qualifiedName="javax.baja.hx.BHxView" name="BHxView" packageName="javax.baja.hx" public="true" abstract="true">
<description>
BHxView is a component HTML view used to view and edit&#xa; BObjects in a browser.
</description>
<tag name="@author">Andy Frank</tag>
<tag name="@version">$Revision: 43$ $Date: 10/6/10 5:10:43 PM EDT$</tag>
<tag name="@creation">4 Jan 05</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="javax.baja.web.BServletView"/>
</extends>
<!-- javax.baja.hx.BHxView() -->
<constructor name="BHxView" public="true">
<description>
Subclasses must call super() in their constructor if they&#xa; wish to use menu and dialog based action invocation
</description>
</constructor>

<!-- javax.baja.hx.BHxView.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.hx.BHxView.doGet(javax.baja.web.WebOp) -->
<method name="doGet"  public="true">
<description>
GET is used to return the HTML that renders this view.&#xa; Sub-classes should not override this method, instead&#xa; using the write,save,update,process methods.
</description>
<parameter name="c">
<type class="javax.baja.web.WebOp"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.hx.BHxView.doPost(javax.baja.web.WebOp) -->
<method name="doPost"  public="true">
<description>
POST is used for communicating between station and&#xa; client. Sub-classes should not override this method,&#xa; instead using the write,save,update,process methods.
</description>
<parameter name="c">
<type class="javax.baja.web.WebOp"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.hx.BHxView.getPageTitle(javax.baja.hx.HxOp) -->
<method name="getPageTitle"  public="true">
<description>
Get the preferred page title. Generally, the top level&#xa; view gets precendence for the page title, though the&#xa; HxProfile gets the final say.
</description>
<parameter name="op">
<type class="javax.baja.hx.HxOp"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.hx.BHxView.write(javax.baja.hx.HxOp) -->
<method name="write"  public="true">
<description>
Write out the view to the content stream.
</description>
<parameter name="op">
<type class="javax.baja.hx.HxOp"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.hx.BHxView.update(javax.baja.hx.HxOp) -->
<method name="update"  public="true">
<description>
Update the view. The content stream is expected to&#xa; be executable JavaScript.
</description>
<parameter name="op">
<type class="javax.baja.hx.HxOp"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.hx.BHxView.process(javax.baja.hx.HxOp) -->
<method name="process"  public="true">
<description>
Process a non-update post request.  Return true if&#xa; this view or a child view handled the message - if&#xa; not return false. The default implementation routes&#xa; event requests to the registered event handler if&#xa; one can be found, otherwise return false.
</description>
<parameter name="op">
<type class="javax.baja.hx.HxOp"/>
</parameter>
<return>
<type class="boolean"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.hx.BHxView.save(javax.baja.hx.HxOp) -->
<method name="save"  public="true">
<description>
Save the view.  BSimples should return a new instance.&#xa; BComponents should modify the existing instance and&#xa; return themselves.
</description>
<parameter name="op">
<type class="javax.baja.hx.HxOp"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.hx.BHxView.registerEvent(javax.baja.hx.Event) -->
<method name="registerEvent"  public="true">
<description>
Register this event.  Events are registered by&#xa; the event id - which is used to route requests&#xa; from the browser to the correct event handler.
</description>
<parameter name="event">
<type class="javax.baja.hx.Event"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.hx.BHxView.isEventRegistered(javax.baja.hx.Event) -->
<method name="isEventRegistered"  public="true">
<description/>
<parameter name="event">
<type class="javax.baja.hx.Event"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.hx.BHxView.registerEvent(javax.baja.hx.Event, java.lang.String) -->
<method name="registerEvent"  public="true">
<description/>
<parameter name="event">
<type class="javax.baja.hx.Event"/>
</parameter>
<parameter name="id">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.hx.BHxView.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

<!-- javax.baja.hx.BHxView.events -->
<field name="events"  protected="true">
<parameterizedType class="java.util.HashMap">
<args>
<type class="java.lang.String"/>
<type class="javax.baja.hx.Event"/>
</args>
</parameterizedType>
<description/>
</field>

<!-- javax.baja.hx.BHxView.log -->
<field name="log"  public="true" static="true" final="true">
<type class="java.util.logging.Logger"/>
<description/>
</field>

</class>
</bajadoc>
