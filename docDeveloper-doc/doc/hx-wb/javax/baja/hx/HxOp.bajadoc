<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="hx" runtimeProfile="wb" qualifiedName="javax.baja.hx.HxOp" name="HxOp" packageName="javax.baja.hx" public="true">
<description>
HxOp wraps a WebOp or another HxOp with additional&#xa; contextual information for Hx pages.
</description>
<tag name="@author">Andy Frank</tag>
<tag name="@creation">4 Jan 05</tag>
<tag name="@version">$Revision: 47$ $Date: 11/2/10 3:34:58 PM EDT$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="javax.baja.web.WebOp"/>
</extends>
<!-- javax.baja.hx.HxOp(java.lang.String, javax.baja.naming.OrdTarget, javax.baja.hx.HxOp) -->
<constructor name="HxOp" protected="true">
<parameter name="name">
<type class="java.lang.String"/>
</parameter>
<parameter name="base">
<type class="javax.baja.naming.OrdTarget"/>
</parameter>
<parameter name="op">
<type class="javax.baja.hx.HxOp"/>
</parameter>
<description>
Wrap an existing HxOp with a new base and given name. The&#xa; name must be unique to all peer instances of this op. The&#xa; name is used for building paths in order to resolve form&#xa; elements back to the appropriate servlet after a submit.
</description>
</constructor>

<!-- javax.baja.hx.HxOp(javax.baja.web.WebOp) -->
<constructor name="HxOp" public="true">
<parameter name="op">
<type class="javax.baja.web.WebOp"/>
</parameter>
<throws>
<type class="java.lang.Exception"/>
</throws>
<description/>
</constructor>

<!-- javax.baja.hx.HxOp.make(javax.baja.naming.OrdTarget) -->
<method name="make"  public="true">
<description>
Wrap an existing HxOp with a new base using an&#xa; auto created unique name.
</description>
<parameter name="base">
<type class="javax.baja.naming.OrdTarget"/>
</parameter>
<return>
<type class="javax.baja.hx.HxOp"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.make(java.lang.String, javax.baja.naming.OrdTarget) -->
<method name="make"  public="true">
<description>
Wrap an existing HxOp with a new base and given name. The&#xa; name must be unique to all peer instances of this op. The&#xa; name is used for building paths in order to resolve form&#xa; elements back to the appropriate servlet after a submit.
</description>
<parameter name="name">
<type class="java.lang.String"/>
</parameter>
<parameter name="base">
<type class="javax.baja.naming.OrdTarget"/>
</parameter>
<return>
<type class="javax.baja.hx.HxOp"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.make(java.lang.String, javax.baja.sys.BObject, javax.baja.sys.BFacets) -->
<method name="make"  public="true">
<description>
&lt;p&gt;&#xa; Wrap an existing HxOp with a new base and given name. The&#xa; name must be unique to all peer instances of this op. The&#xa; name is used for building paths in order to resolve form&#xa; elements back to the appropriate servlet after a submit.&#xa; &lt;/p&gt;&#xa; &lt;p&gt;&#xa; Typical use case is to reference an object that is not&#xa; mounted.  In this case, the write permissions for the op&#xa; are specified by &lt;code&gt;setReadonly()&lt;/code&gt;.&#xa; &lt;/p&gt;
</description>
<parameter name="name">
<type class="java.lang.String"/>
</parameter>
<parameter name="def">
<type class="javax.baja.sys.BObject"/>
</parameter>
<parameter name="facets">
<type class="javax.baja.sys.BFacets"/>
</parameter>
<return>
<type class="javax.baja.hx.HxOp"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.getProfileConfig(javax.baja.sys.Context) -->
<method name="getProfileConfig"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get the BWebProfileConfig to use for this request.&#xa; BHxIProfile.PREFER_FX_FACETS will be merged with the Context facets.
</description>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="javax.baja.web.BWebProfileConfig"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.getProfileConfig() -->
<method name="getProfileConfig"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get the BWebProfileConfig to use for this request.&#xa; BHxIProfile.PREFER_FX_FACETS will be used.
</description>
<return>
<type class="javax.baja.web.BWebProfileConfig"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.getProfile() -->
<method name="getProfile"  public="true">
<description>
Get the profile.
</description>
<return>
<type class="javax.baja.hx.BHxProfile"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.getWebOp() -->
<method name="getWebOp"  public="true">
<description>
Get the base WebOp.
</description>
<return>
<type class="javax.baja.web.WebOp"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.getPath() -->
<method name="getPath"  public="true">
<description>
Get the current path.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.mergeFacets(javax.baja.sys.BFacets) -->
<method name="mergeFacets"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Mutate the existing HxOp by merging additional facets and return the existing HxOp.
</description>
<parameter name="newFacets">
<type class="javax.baja.sys.BFacets"/>
</parameter>
<return>
<type class="javax.baja.hx.HxOp"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.setReadonly(boolean) -->
<method name="setReadonly"  public="true">
<description>
Override this OrdTarget as readonly. If the underlying&#xa; OrdTarget does not already have write access, this method&#xa; has no effect. This flag is &lt;b&gt;not&lt;/b&gt; inherited.
</description>
<parameter name="readonly">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.isMultiPartForm() -->
<method name="isMultiPartForm"  public="true">
<description>
Return true if op is configured to use &lt;code&gt;multipart/form-data&lt;/code &gt;&#xa; encoding for form elements. Defaults to false.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.setMultiPartForm() -->
<method name="setMultiPartForm"  public="true">
<description>
Configure op to use &lt;code&gt;multipart/form-data&lt;/code&gt;&#xa; encoding for form elements.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.getLexicon(java.lang.String) -->
<method name="getLexicon"  public="true">
<description>
Get the lexicon for the specified module and the&#xa; current language.
</description>
<parameter name="module">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.util.Lexicon"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.addCookie(java.lang.String, java.lang.String) -->
<method name="addCookie"  public="true">
<description>
Convenience method to add a cookie.
</description>
<parameter name="name">
<type class="java.lang.String"/>
</parameter>
<parameter name="value">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.getCookie(java.lang.String) -->
<method name="getCookie"  public="true">
<description>
Convenience method to get a cookie value.  If this&#xa; cookie does not exist, return null.
</description>
<parameter name="name">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.removeCookie(java.lang.String) -->
<method name="removeCookie"  public="true">
<description>
Convience method to remove a cookie
</description>
<parameter name="name">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.getAttribute(java.lang.String) -->
<method name="getAttribute"  public="true">
<description>
Convenience for &lt;code&gt;getRequest().getAttribute(name)&lt;/code&gt;.
</description>
<parameter name="name">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="java.lang.Object"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.getAttributeNames() -->
<method name="getAttributeNames"  public="true">
<description>
Convenience for &lt;code&gt;getRequest().getAttributeNames()&lt;/code&gt;,&#xa; return a String[] array instead of an Enumeration.
</description>
<return>
<type class="java.lang.String" dimension="1"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.setAttribute(java.lang.String, java.lang.Object) -->
<method name="setAttribute"  public="true">
<description>
Convenience for &lt;code&gt;getRequest().setAttribute(name, value)&lt;/code&gt;.
</description>
<parameter name="name">
<type class="java.lang.String"/>
</parameter>
<parameter name="value">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.getConfig(java.lang.String, javax.baja.sys.BValue) -->
<method name="getConfig"  public="true">
<description>
Get the configuration property by this name. If no&#xa; property by that name has been set, return the default&#xa; value. Each HxOp instance maintains its own configuration&#xa; properties. So sub ops do not inherit their parents&#xa; configuration.
</description>
<parameter name="name">
<type class="java.lang.String"/>
</parameter>
<parameter name="def">
<type class="javax.baja.sys.BValue"/>
</parameter>
<return>
<type class="javax.baja.sys.BValue"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.setConfig(java.lang.String, javax.baja.sys.BValue) -->
<method name="setConfig"  public="true">
<description>
Set the configuration property by this name to the&#xa; given value, overriding any previous set value.
</description>
<parameter name="name">
<type class="java.lang.String"/>
</parameter>
<parameter name="value">
<type class="javax.baja.sys.BValue"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.setConfig(javax.baja.sys.BComplex) -->
<method name="setConfig"  public="true">
<description>
Use the given BComplex to map configuration properties.
</description>
<parameter name="complex">
<type class="javax.baja.sys.BComplex"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.getContent() -->
<method name="getContent"  public="true">
<description>
Return the content buffer.
</description>
<return>
<type class="java.lang.StringBuffer"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.getWriter() -->
<method name="getWriter"  public="true">
<description>
This method overrides WebOp to route to our buffered&#xa; content - getHtmlWriter() will also route to the buffer.&#xa; Use getResponse().getWriter() to get the original&#xa; PrintWriter.
</description>
<return>
<type class="java.io.PrintWriter"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.hx.HxOp.setWriter(java.io.PrintWriter) -->
<method name="setWriter"  public="true">
<description>
Set the override writer such that calls to getWriter will return the override.&#xa; Up to two levels of override are available. An IllegalStateException will occur if a third&#xa; level of override is attempted.
</description>
<parameter name="writer">
<type class="java.io.PrintWriter"/>
</parameter>
<return>
<type class="java.io.PrintWriter"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.hx.HxOp.resetWriter() -->
<method name="resetWriter"  public="true">
<description>
Reset the Writer to its original state before the last call to &#x27;HxOp.setWriter&#x27;.
</description>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.hx.HxOp.isDynamic() -->
<method name="isDynamic"  public="true">
<description>
Return true if one or more views marked op as dynamic.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.setDynamic() -->
<method name="setDynamic"  public="true">
<description>
Mark the view as dynamic.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.isRaw() -->
<method name="isRaw"  public="true">
<description>
Return true if this resposne was marked as raw.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.setRaw() -->
<method name="setRaw"  public="true">
<description>
Mark this response as raw.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.scope(java.lang.String) -->
<method name="scope"  public="true">
<description>
Scope the local name with the current path.
</description>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.getUniqueName() -->
<method name="getUniqueName"  public="true">
<description>
Return a unique identifier for the scope&#xa; of this context.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.getUniqueName(javax.baja.naming.OrdTarget) -->
<method name="getUniqueName"  public="true">
<description>
Return a unique identifier for the scope&#xa; of this context.
</description>
<parameter name="target">
<type class="javax.baja.naming.OrdTarget"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.addHeadTag(java.lang.String) -->
<method name="addHeadTag"  public="true">
<description>
Include an arbitrary tag for the head block. This tag should&#xa; be a complete and well formed xml tag.
</description>
<parameter name="tag">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.getHeadTags() -->
<method name="getHeadTags"  public="true">
<description>
Get misc tags for head block.
</description>
<return>
<type class="java.lang.String" dimension="1"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.addStyleSheet(java.lang.String) -->
<method name="addStyleSheet"  public="true">
<annotation><type class="java.lang.Deprecated"/>
</annotation>
<description>
Include a stylesheet if has not already been included.
</description>
<tag name="@deprecated">since Niagara 4.13 - will be removed in Niagara 5.0. Use &lt;code&gt;<see ref="javax.baja.hx.HxOp#addStyleSheet(javax.baja.naming.BOrd)">#addStyleSheet(BOrd)</see>&lt;/code&gt; instead.</tag>
<parameter name="url">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.addStyleSheet(javax.baja.naming.BOrd) -->
<method name="addStyleSheet"  public="true">
<description>
Include a stylesheet if has not already been included.
</description>
<tag name="@since">Niagara 3.5</tag>
<parameter name="ord">
<type class="javax.baja.naming.BOrd"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.getStyleSheets() -->
<method name="getStyleSheets"  public="true">
<annotation><type class="java.lang.Deprecated"/>
</annotation>
<description>
Get the style sheets that were included in this op.
</description>
<tag name="@deprecated">since Niagara 4.13 - will be removed in Niagara 5.0. Use &lt;code&gt;<see ref="javax.baja.hx.HxOp#getStyleSheetOrds()">#getStyleSheetOrds()</see>&lt;/code&gt; instead.</tag>
<return>
<type class="java.lang.String" dimension="1"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.getStyleSheetOrds() -->
<method name="getStyleSheetOrds"  public="true">
<description>
Get the style sheets that were included in this op.
</description>
<tag name="@since">Niagara 3.5</tag>
<return>
<type class="javax.baja.naming.BOrd" dimension="1"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.addJavaScript(java.lang.String) -->
<method name="addJavaScript"  public="true">
<annotation><type class="java.lang.Deprecated"/>
</annotation>
<description>
Include an external javascript file if has not already been included.
</description>
<tag name="@deprecated">since Niagara 3.5 - will be removed in Niagara 5.0. Use &lt;code&gt;<see ref="javax.baja.hx.HxOp#addJavaScript(javax.baja.naming.BOrd)">#addJavaScript(BOrd)</see>&lt;/code&gt; instead.</tag>
<parameter name="url">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.addJavaScript(javax.baja.naming.BOrd) -->
<method name="addJavaScript"  public="true">
<description>
Include an external javascript file ord if has not already been included.&#xa;&#xa; Starting in Niagara 4.4, addJavascript does not immediately call &#x27;hx.addJavascript&#x27; during a POST, instead this&#xa; call waits for HxUtil.addJavascriptOnload to be called at a point when both the javascript resources and the&#xa; desired HxOp.addOnload code has been added so that they execute in the appropriate order. When launching a&#xa; javax.baja.hx.Dialog, this function is already called at the appropriate time.
</description>
<tag name="@since">Niagara 3.5</tag>
<parameter name="ord">
<type class="javax.baja.naming.BOrd"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.getJavaScript() -->
<method name="getJavaScript"  public="true">
<annotation><type class="java.lang.Deprecated"/>
</annotation>
<description>
Get the external javascript files that were included in this op.
</description>
<tag name="@deprecated">since Niagara 3.5 - will be removed in Niagara 5.0</tag>
<return>
<type class="java.lang.String" dimension="1"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.getJavaScriptOrds() -->
<method name="getJavaScriptOrds"  public="true">
<description>
Get the external javascript files that were included in this op.
</description>
<tag name="@since">Niagara 3.5</tag>
<return>
<type class="javax.baja.naming.BOrd" dimension="1"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.addOnload(java.lang.String) -->
<method name="addOnload"  public="true">
<description>
Add JavaScript code to invoke in body.onload.  The &lt;code&gt;code&lt;/code&gt;&#xa; value is appended directly to the end of the existing string, so it&#xa; is the developer&#x27;s responsibility to properly terminate expressions&#xa; with the appropriate semi-colon.&#xa;&#xa; Note that Starting in Niagara 4.4, onload is written within a script tag during GET, so a single quote &#x27; is now&#xa; allowed in an addOnload for both GET and POST quoting semantics. For backwards compatibility, &amp;quot; will now be&#xa; unescaped to \&#x22; so it is best to avoid &amp;quot; inside some quoted text.&#xa; For example, dom.innerHTML=&#x22;He said &amp;quot; hello &amp;quot;&#x22;; will be escaped to dom.innerHtml=&#x22; He said &#x22;hello&#x22;&#x22; which&#xa; will not properly parse. To avoid this problem its best to use &#x27;HxUtil.escapeJsStringLiteral&#x27;  or HtmlWriter.safe()&#xa; for placing text within quotes.
</description>
<parameter name="code">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.addOnunload(java.lang.String) -->
<method name="addOnunload"  public="true">
<description>
Add JavaScript code to invoke in body.onunload.  The &lt;code&gt;code&lt;/code&gt;&#xa; value is appended directly to the end of the existing string, so it&#xa; is the developer&#x27;s responsibility to properly terminate expressions&#xa; with the appropriate semi-colon.
</description>
<tag name="@see">HxOp#addOnload(String)</tag>
<parameter name="code">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.addOnresize(java.lang.String) -->
<method name="addOnresize"  public="true">
<description>
Add JavaScript code to invoke in body.resize.  The &lt;code&gt;code&lt;/code&gt;&#xa; value is appended directly to the end of the existing string, so it&#xa; is the developer&#x27;s responsibility to properly terminate expressions&#xa; with the appropriate semi-colon.
</description>
<tag name="@see">HxOp#addOnload(String)</tag>
<parameter name="code">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.getOnload() -->
<method name="getOnload"  public="true">
<description>
Get the onload javascript code.
</description>
<return>
<type class="java.lang.String" dimension="1"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.getOnunload() -->
<method name="getOnunload"  public="true">
<description>
Get the onunload javascript code.
</description>
<return>
<type class="java.lang.String" dimension="1"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.getOnresize() -->
<method name="getOnresize"  public="true">
<description>
Get the resize javascript code.
</description>
<return>
<type class="java.lang.String" dimension="1"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.addGlobal(java.lang.String) -->
<method name="addGlobal"  public="true">
<description>
Add JavaScript code to the global script block. When Globals are run as part of a Post, they cannot run with&#xa; the global scope because this code needs to wait for asynchronous javascript sources to load, make sure to assign&#xa; global functions to the &#x27;window&#x27; if they need to be used later.
</description>
<parameter name="code">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.getGlobal() -->
<method name="getGlobal"  public="true">
<description>
Get the global javascript code. When Globals are run as part of a Post, they cannot run with global scope because it&#xa; needs to wait for asynchronous javascript sources to load, so make sure to assign global functions to the &#x27;window&#x27;&#xa; if they need to be used later.
</description>
<return>
<type class="java.lang.String" dimension="1"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.isJQuery() -->
<method name="isJQuery"  public="true">
<description>
Return true if Hx is using jQuery.
</description>
<tag name="@since">Niagara 3.7</tag>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.isBindResources() -->
<method name="isBindResources"  public="true">
<description>
Query whether resources are going to be bound.
</description>
<return>
<type class="boolean"/>
<description>
Returns true if resources are bundled together when Hx loads.
</description>
</return>
</method>

<!-- javax.baja.hx.HxOp.getUnsafePostBody() -->
<method name="getUnsafePostBody"  public="true">
<description>
Get the POST body contents or null if there is no body.&#xa; &lt;p&gt;&#xa; Please note, the post body is raw and hasn&#x27;t been processed for possible&#xa; XSS attacks. If you want to use a POST body that&#x27;s escaped from XSS attacks&#xa; please use &lt;code&gt;<see ref="javax.baja.hx.HxOp#getPostBody()">HxOp#getPostBody()</see>&lt;/code&gt;.&#xa; &lt;/p&gt;
</description>
<tag name="@see">Encode#forHtml(String)</tag>
<return>
<type class="java.lang.String"/>
<description>
The post body or null if none is available.
</description>
</return>
</method>

<!-- javax.baja.hx.HxOp.getPostBody() -->
<method name="getPostBody"  public="true">
<description>
Return the POST body contents or null if there is no body.&#xa; Any Strings returned will be escaped to prevent XSS attacks.
</description>
<return>
<type class="java.lang.String"/>
<description>
The post body or null if none is available.
</description>
</return>
</method>

<!-- javax.baja.hx.HxOp.decodeFormValues() -->
<method name="decodeFormValues"  public="true">
<description>
Decode the POST body into name/value pairs.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.isFormPost() -->
<method name="isFormPost"  public="true">
<description>
Return true if this HxOp wraps a form submit post.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.isUpdate() -->
<method name="isUpdate"  public="true">
<description>
Return true if this HxOp wraps an update request.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.getFormValue(java.lang.String) -->
<method name="getFormValue"  public="true">
<description>
Get the value for this key. Return null if the key does not exist.&#xa; &lt;p&gt;&#xa; Any returned string will be escaped to avoid possible XSS attacks.&#xa; &lt;/p&gt;
</description>
<tag name="@see">Encode#forHtml(String)</tag>
<parameter name="key">
<type class="java.lang.String"/>
<description>
The form value to decode.
</description>
</parameter>
<return>
<type class="java.lang.String"/>
<description>
If the key exists, return an escaped form value otherwise&#xa;         return null.
</description>
</return>
</method>

<!-- javax.baja.hx.HxOp.getUnsafeFormValue(java.lang.String) -->
<method name="getUnsafeFormValue"  public="true">
<annotation><type class="java.lang.SuppressWarnings"/>
<elementValue name="value">
<annotationValue kind="array">
<elementArray>
<annotationValue kind="expr">
<expression>&#x22;unused&#x22;</expression>
</annotationValue>
</elementArray>
</annotationValue>
</elementValue>
</annotation>
<description>
Returns an unsafe form value that&#x27;s not escaped from possible XSS attacks.&#xa; Null is returned if the key can&#x27;t be found.&#xa; &lt;p&gt;&#xa; The value returned will not be escaped against XSS attacks. It&#x27;s advised to&#xa; use &lt;code&gt;<see ref="javax.baja.hx.HxOp#getFormValue(java.lang.String)">HxOp#getFormValue(String)</see>&lt;/code&gt; instead.&#xa; &lt;/p&gt;
</description>
<tag name="@see">HxOp#getFormValue(String)</tag>
<tag name="@see">Encode#forHtml(String)</tag>
<parameter name="key">
<type class="java.lang.String"/>
<description/>
</parameter>
<return>
<type class="java.lang.String"/>
<description>
The form value or null if it can&#x27;t be found.
</description>
</return>
</method>

<!-- javax.baja.hx.HxOp.getFormKeys() -->
<method name="getFormKeys"  public="true">
<description>
Return an array containing all key values.
</description>
<return>
<type class="java.lang.String" dimension="1"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.getFile(java.lang.String) -->
<method name="getFile"  public="true">
<description>
Get the file uploaded by the form control with&#xa; this name, or null if no file by this name.
</description>
<parameter name="key">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.file.BIFile"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.getRedirect() -->
<method name="getRedirect"  public="true">
<description>
Get the redirect url to use following a save. Return null&#xa; no url has been set.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.setRedirect(java.lang.String) -->
<method name="setRedirect"  public="true">
<description>
Set the redirect url used following a save.
</description>
<parameter name="url">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.isErrorSent() -->
<method name="isErrorSent"  public="true">
<description>
Return true if an error was sent using &lt;code&gt;sendError()&lt;/code&gt;.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.sendError(java.lang.Exception) -->
<method name="sendError"  public="true">
<description>
Convienence for &lt;code&gt;sendError(&#xa; HttpServletResponse.SC_BAD_REQUEST, ex)&lt;/code&gt;.
</description>
<parameter name="ex">
<type class="java.lang.Exception"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.sendError(int, java.lang.Exception) -->
<method name="sendError"  public="true">
<description>
Send an error response to the client with the given HTTP&#xa; status code and Exception details. This method will use&#xa; the raw OutputStream, bypassing the buffered Hx version.&#xa; This method should only be used on GET requests.
</description>
<parameter name="sc">
<type class="int"/>
</parameter>
<parameter name="ex">
<type class="java.lang.Exception"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.setProfile(javax.baja.hx.BHxProfile) -->
<method name="setProfile"  public="true">
<description>
Cache current profile.
</description>
<parameter name="profile">
<type class="javax.baja.hx.BHxProfile"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.canWrite() -->
<method name="canWrite"  public="true">
<description>
Return true if op has write access.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.jQuery() -->
<method name="jQuery"  public="true">
<description>
Use jQuery in Hx.&#xa; &lt;p&gt;&#xa; Please note that Hx has its own global &#x27;$&#x27; function (although this is now being deprecated&#xa; in favor of &#x27;hx.$&#x27;). To workaround this, one should use &#x27;jQuery&#x27; instead of &#x27;$&#x27; or use the&#xa; following design pattern for code that uses jQuery. Please note, since variables are function&#xa; and not block scoped, this is best practice for JavaScript because it avoids the &#xa; unnecessary creation of global variables...&#xa; &#xa; &lt;pre&gt;&#xa; // Anything that runs in this self-executing function will use the jQuery &#x27;$&#x27; function.&#xa; (function($) {&#xa;   // your jQuery code goes here (jQuery === $)...&#xa;   $(&#x22;#foo&#x22;).click(function() { alert(&#x22;hi&#x22;); });&#xa; }(jQuery));&#xa; &lt;/pre&gt;
</description>
<tag name="@since">Niagara 3.7</tag>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.hx.HxOp.mounted -->
<field name="mounted"  protected="true">
<type class="boolean"/>
<description/>
</field>

</class>
</bajadoc>
