<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="hx" runtimeProfile="wb" qualifiedName="javax.baja.hx.HxUtil" name="HxUtil" packageName="javax.baja.hx" public="true">
<description>
HxUtil.
</description>
<tag name="@author">Andy Frank 4 Jan 05</tag>
<tag name="@version">$Revision: 40$ $Date: 7/19/10 4:36:53 PM EDT$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="java.lang.Object"/>
</extends>
<!-- javax.baja.hx.HxUtil() -->
<constructor name="HxUtil" public="true">
<description/>
</constructor>

<!-- javax.baja.hx.HxUtil.getDefaultView(javax.baja.hx.HxOp) -->
<method name="getDefaultView"  public="true" static="true">
<description>
Get the default view for this context.
</description>
<parameter name="op">
<type class="javax.baja.hx.HxOp"/>
</parameter>
<return>
<type class="javax.baja.agent.AgentInfo"/>
</return>
</method>

<!-- javax.baja.hx.HxUtil.getViews(javax.baja.hx.HxOp) -->
<method name="getViews"  public="true" static="true">
<description>
Get the list of views available for this context.
</description>
<parameter name="op">
<type class="javax.baja.hx.HxOp"/>
</parameter>
<return>
<type class="javax.baja.agent.AgentList"/>
</return>
</method>

<!-- javax.baja.hx.HxUtil.getViewsForViewSelector(javax.baja.hx.HxOp) -->
<method name="getViewsForViewSelector"  public="true" static="true">
<description>
Get the list of views available for use with a View Selector. This call&#xa; removes any entries that would be duplicates.
</description>
<tag name="@since">Niagara 4.4</tag>
<parameter name="op">
<type class="javax.baja.hx.HxOp"/>
</parameter>
<return>
<type class="javax.baja.agent.AgentList"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.hx.HxUtil.makeFont(javax.baja.gx.BFont) -->
<method name="makeFont"  public="true" static="true">
<description>
Encode to an HTML-friendly font that can be used for the value of the font style attribute:&#xa; For example the return String for a bold italic 14 px Source Sans Pro Font: &#x22;bold italic 14px Source Sans Pro&#x22;
</description>
<parameter name="font">
<type class="javax.baja.gx.BFont"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.hx.HxUtil.getCSSFontName(javax.baja.gx.BFont) -->
<method name="getCSSFontName"  public="true" static="true">
<description/>
<tag name="@since">Niagara 4.8</tag>
<parameter name="font">
<type class="javax.baja.gx.BFont"/>
<description>
a font to be used in an Hx graphic
</description>
</parameter>
<return>
<type class="java.lang.String"/>
<description>
a CSS-safe font name that can be applied as a font-family attribute
</description>
</return>
</method>

<!-- javax.baja.hx.HxUtil.makeColor(javax.baja.gx.BBrush, javax.baja.gx.BColor) -->
<method name="makeColor"  public="true" static="true">
<description>
Get the color from a brush, provide a BColor default value when Brush is null
</description>
<parameter name="brush">
<type class="javax.baja.gx.BBrush"/>
</parameter>
<parameter name="def">
<type class="javax.baja.gx.BColor"/>
</parameter>
<return>
<type class="javax.baja.gx.BColor"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.hx.HxUtil.makeColor(javax.baja.gx.BBrush, java.lang.String) -->
<method name="makeColor"  public="true" static="true">
<description>
Get the color from a brush, provide a String default value when Brush is null
</description>
<parameter name="brush">
<type class="javax.baja.gx.BBrush"/>
</parameter>
<parameter name="def">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.hx.HxUtil.makeInsets(javax.baja.gx.BInsets) -->
<method name="makeInsets"  public="true" static="true">
<description>
Encode a BInsets to CSS-style (margin/padding).
</description>
<parameter name="insets">
<type class="javax.baja.gx.BInsets"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.hx.HxUtil.makeBorder(javax.baja.ui.BBorder) -->
<method name="makeBorder"  public="true" static="true">
<description>
Encode a BBorder to CSS-style.
</description>
<parameter name="border">
<type class="javax.baja.ui.BBorder"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.hx.HxUtil.makeAlignment(javax.baja.ui.enums.BHalign, javax.baja.ui.enums.BValign, javax.baja.hx.PropertiesCollection) -->
<method name="makeAlignment"  public="true" static="true">
<description>
makeAlignment() support for separate BHalign and BValign
</description>
<parameter name="ha">
<type class="javax.baja.ui.enums.BHalign"/>
<description/>
</parameter>
<parameter name="va">
<type class="javax.baja.ui.enums.BValign"/>
<description/>
</parameter>
<parameter name="style">
<type class="javax.baja.hx.PropertiesCollection"/>
<description>
Style for Dom Element
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.hx.HxUtil.makeAlignment(javax.baja.ui.enums.BAlign, javax.baja.hx.PropertiesCollection) -->
<method name="makeAlignment"  public="true" static="true">
<description>
makeAlignment() support for a BAlign
</description>
<parameter name="align">
<type class="javax.baja.ui.enums.BAlign"/>
<description/>
</parameter>
<parameter name="style">
<type class="javax.baja.hx.PropertiesCollection"/>
<description/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.hx.HxUtil.makeFont(javax.baja.gx.BBrush, javax.baja.gx.BFont, javax.baja.hx.PropertiesCollection, javax.baja.hx.PropertiesCollection, boolean, javax.baja.hx.HxOp) -->
<method name="makeFont"  public="true" static="true">
<description>
Make a font for an Html Element&#x27;s style and properties PropertiesCollections.&#xa; The additional properties parameter is required because if the font is null, then the style is only used for the wrap and color. The properties PropertiesCollection is then used to apply a css className of&#xa;              &#x22;defaultNssFont&#x22; so that the default font can be taken from the theme. This allows Niagara 4 to better supports hx themes by not always using the dom style element. If deprecated makeFont calls are&#xa;              used or properties is null, the, the previous AX behavior will be used and fontStyle will  be &#x27;&#x27;none&#x27;.
</description>
<tag name="@since">Niagara 4.2</tag>
<parameter name="foreground">
<type class="javax.baja.gx.BBrush"/>
<description>
The color for the font
</description>
</parameter>
<parameter name="font">
<type class="javax.baja.gx.BFont"/>
<description>
The font we want to use. If font.isNull() then defaultNssFont className will be given to the element so that theme.css can provide the font
</description>
</parameter>
<parameter name="style">
<type class="javax.baja.hx.PropertiesCollection"/>
<description>
The PropertiesCollection for the style of a given html element.
</description>
</parameter>
<parameter name="properties">
<type class="javax.baja.hx.PropertiesCollection"/>
<description>
The PropertiesCollection for the properties of the same html element.
</description>
</parameter>
<parameter name="wrap">
<type class="boolean"/>
<description>
determines if the text for the styled html element wrap or not
</description>
</parameter>
<parameter name="op">
<type class="javax.baja.hx.HxOp"/>
<description>
The HxOp is required because the behavior for foreground fonts is based on which browser is being used
</description>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
<description/>
</throws>
</method>

<!-- javax.baja.hx.HxUtil.makeBackground(javax.baja.gx.BBrush, javax.baja.gx.BBrush, javax.baja.hx.PropertiesCollection, javax.baja.hx.HxOp) -->
<method name="makeBackground"  public="true" static="true">
<description>
make a background based on the brush and apply to the DOM element&#x27;s style PropertyCollection
</description>
<parameter name="bg">
<type class="javax.baja.gx.BBrush"/>
<description/>
</parameter>
<parameter name="def">
<type class="javax.baja.gx.BBrush"/>
<description>
- used when bg isNull()
</description>
</parameter>
<parameter name="style">
<type class="javax.baja.hx.PropertiesCollection"/>
<description/>
</parameter>
<parameter name="op">
<type class="javax.baja.hx.HxOp"/>
<description/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
<description/>
</throws>
</method>

<!-- javax.baja.hx.HxUtil.makeGradientString(javax.baja.gx.BBrush.Gradient) -->
<method name="makeGradientString"  public="true" static="true">
<description>
Return the String to use for a Html5 based background gradient.
</description>
<parameter name="gradient">
<type class="javax.baja.gx.BBrush$Gradient"/>
<description/>
</parameter>
<return>
<type class="java.lang.String"/>
<description/>
</return>
</method>

<!-- javax.baja.hx.HxUtil.isWidgetEffectivelyVisible(javax.baja.ui.BWidget) -->
<method name="isWidgetEffectivelyVisible"  public="true" static="true">
<description>
A Widget is effectively visible if getVisible is true, or if its a child of a ScrollPane. If height and width are known,&#xa; see isWidgetEffectivelyVisible(BWidget widget, int , int) for a more comprehensive answer.
</description>
<parameter name="widget">
<type class="javax.baja.ui.BWidget"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.hx.HxUtil.isWidgetEffectivelyVisible(javax.baja.ui.BWidget, int, int) -->
<method name="isWidgetEffectivelyVisible"  public="true" static="true">
<description>
A Widget is effectively visible if the height and width are not zero and either getVisible is true, or if its a child of a ScrollPane.
</description>
<tag name="@since">Niagara 4.7</tag>
<parameter name="widget">
<type class="javax.baja.ui.BWidget"/>
</parameter>
<parameter name="width">
<type class="int"/>
</parameter>
<parameter name="height">
<type class="int"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.hx.HxUtil.makeBorder(javax.baja.ui.BBorder, javax.baja.hx.PropertiesCollection) -->
<method name="makeBorder"  public="true" static="true">
<description>
Apply a BBorder to DOM Elements style&#x27;s PropertiesCollection.
</description>
<tag name="@since">Niagara 4.2 allow user to pass on the width and height of the dom in case a radial gradient needs them</tag>
<parameter name="b">
<type class="javax.baja.ui.BBorder"/>
</parameter>
<parameter name="style">
<type class="javax.baja.hx.PropertiesCollection"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.hx.HxUtil.makePadding(javax.baja.gx.BInsets, javax.baja.hx.PropertiesCollection) -->
<method name="makePadding"  public="true" static="true">
<description>
Apply a padding to DOM Elements style&#x27;s PropertiesCollection.
</description>
<parameter name="padding">
<type class="javax.baja.gx.BInsets"/>
</parameter>
<parameter name="style">
<type class="javax.baja.hx.PropertiesCollection"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.hx.HxUtil.makeMargin(javax.baja.gx.BInsets, javax.baja.hx.PropertiesCollection) -->
<method name="makeMargin"  public="true" static="true">
<description>
Apply a Margin to DOM Elements style&#x27;s PropertiesCollection.
</description>
<parameter name="padding">
<type class="javax.baja.gx.BInsets"/>
</parameter>
<parameter name="style">
<type class="javax.baja.hx.PropertiesCollection"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.hx.HxUtil.writeFormValue(java.lang.String, java.lang.String, javax.baja.hx.HxOp) -->
<method name="writeFormValue"  public="true" static="true">
<description>
write a form value that is not visible to the user
</description>
<parameter name="name">
<type class="java.lang.String"/>
</parameter>
<parameter name="value">
<type class="java.lang.String"/>
</parameter>
<parameter name="op">
<type class="javax.baja.hx.HxOp"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.hx.HxUtil.persistFormValue(java.lang.String, javax.baja.hx.HxOp) -->
<method name="persistFormValue"  public="true" static="true">
<description>
persistFormValue will rewrite the form value if its not null (useful for dialogs)
</description>
<parameter name="name">
<type class="java.lang.String"/>
</parameter>
<parameter name="op">
<type class="javax.baja.hx.HxOp"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.hx.HxUtil.decode(java.lang.String) -->
<method name="decode"  public="true" static="true">
<description>
Decode form value.
</description>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.hx.HxUtil.addTouchScroll(java.lang.String, javax.baja.hx.HxOp) -->
<method name="addTouchScroll"  public="true" static="true">
<annotation><type class="java.lang.Deprecated"/>
</annotation>
<description>
This method previously ensured that touch scrolling was provided to a particular DOM elements, but these browser are&#xa; no longer supported, so this method does nothing and is deprecated.
</description>
<tag name="@deprecated">since Niagara 4.10U2</tag>
<parameter name="elemID">
<type class="java.lang.String"/>
</parameter>
<parameter name="op">
<type class="javax.baja.hx.HxOp"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.hx.HxUtil.isPost(javax.baja.hx.HxOp) -->
<method name="isPost"  public="true" static="true">
<description>
Is the request a POST or GET. Get cooresponds to HxView.write and POST applies to HxView&#x27;s update, process,&#xa; and save methods.
</description>
<parameter name="op">
<type class="javax.baja.hx.HxOp"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.hx.HxUtil.getOuterQuote(javax.baja.hx.HxOp) -->
<method name="getOuterQuote"  public="true" static="true">
<description>
Preferred Outer Quote so that it doesn&#x27;t interfere with GET/Post hx quote semantics
</description>
<parameter name="op">
<type class="javax.baja.hx.HxOp"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.hx.HxUtil.getInnerQuote(javax.baja.hx.HxOp) -->
<method name="getInnerQuote"  public="true" static="true">
<description>
Preferred Inner Quote so that it doesn&#x27;t interfere with GET/Post hx quote semantics
</description>
<parameter name="op">
<type class="javax.baja.hx.HxOp"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.hx.HxUtil.makeImage(javax.baja.gx.BImage, javax.baja.hx.HxOp) -->
<method name="makeImage"  public="true" static="true">
<annotation><type class="java.lang.Deprecated"/>
</annotation>
<description>
makeImage
</description>
<tag name="@deprecated">use &lt;code&gt;<see ref="javax.baja.hx.HxUtil#makeImageJS(javax.baja.gx.BImage, javax.baja.hx.HxOp)">#makeImageJS(BImage, HxOp)</see>&lt;/code&gt;. Will be removed in Niagara 5.0</tag>
<parameter name="image">
<type class="javax.baja.gx.BImage"/>
</parameter>
<parameter name="op">
<type class="javax.baja.hx.HxOp"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.hx.HxUtil.makeImage(javax.baja.gx.BImage, java.lang.String, javax.baja.hx.HxOp) -->
<method name="makeImage"  public="true" static="true">
<annotation><type class="java.lang.Deprecated"/>
</annotation>
<description>
makeImage
</description>
<tag name="@deprecated">use &lt;code&gt;<see ref="javax.baja.hx.HxUtil#makeImageJS(javax.baja.gx.BImage, java.lang.String, javax.baja.hx.HxOp)">#makeImageJS(BImage, String, HxOp)</see>&lt;/code&gt;. Will be removed in Niagara 5.0</tag>
<parameter name="image">
<type class="javax.baja.gx.BImage"/>
</parameter>
<parameter name="attrs">
<type class="java.lang.String"/>
</parameter>
<parameter name="op">
<type class="javax.baja.hx.HxOp"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.hx.HxUtil.makeImage(javax.baja.gx.BImage, java.lang.String, java.lang.String, javax.baja.hx.HxOp) -->
<method name="makeImage"  public="true" static="true">
<annotation><type class="java.lang.Deprecated"/>
</annotation>
<description>
makeImage
</description>
<tag name="@deprecated">use &lt;code&gt;<see ref="javax.baja.hx.HxUtil#makeImageJS(javax.baja.gx.BImage, java.lang.String, java.lang.String, javax.baja.hx.HxOp)">#makeImageJS(BImage, String, String, HxOp)</see>&lt;/code&gt;. Will be removed in Niagara 5.0</tag>
<parameter name="image">
<type class="javax.baja.gx.BImage"/>
</parameter>
<parameter name="attrs">
<type class="java.lang.String"/>
</parameter>
<parameter name="alt">
<type class="java.lang.String"/>
</parameter>
<parameter name="op">
<type class="javax.baja.hx.HxOp"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.hx.HxUtil.makeImage(javax.baja.gx.BImage, java.lang.String, java.lang.String, java.lang.String, javax.baja.hx.HxOp) -->
<method name="makeImage"  public="true" static="true">
<annotation><type class="java.lang.Deprecated"/>
</annotation>
<description>
makeImage, allows user to pass in quote character in case it needs to&#xa; be custom for a POST. Defaults to a single quote if none is provide or&#xa; original makeImage method is called.
</description>
<tag name="@deprecated">use &lt;code&gt;<see ref="javax.baja.hx.HxUtil#makeImageJS(javax.baja.gx.BImage, java.lang.String, java.lang.String, java.lang.String, javax.baja.hx.HxOp)">#makeImageJS(BImage, String, String, String, HxOp)</see>&lt;/code&gt;. Will be removed in Niagara 5.0</tag>
<tag name="@see">Encode#forHtml(String)</tag>
<tag name="@since">Niagara 4.2</tag>
<parameter name="image">
<type class="javax.baja.gx.BImage"/>
<description>
The image to render
</description>
</parameter>
<parameter name="attrs">
<type class="java.lang.String"/>
<description>
If provided, any additional attributes for the img. Use the alt&#xa;              parameter for adding alt and title text. Please note, this&#xa;              parameter won&#x27;t be processed for possible XSS attacks.
</description>
</parameter>
<parameter name="alt">
<type class="java.lang.String"/>
<description>
The standard alt identifier, also used as the title attribute
</description>
</parameter>
<parameter name="quote">
<type class="java.lang.String"/>
<description>
If provided, the quote style to use, defaults to a single quote
</description>
</parameter>
<parameter name="op">
<type class="javax.baja.hx.HxOp"/>
<description>
The HxOp for generating the Html
</description>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.hx.HxUtil.makeImageJS(javax.baja.gx.BImage, javax.baja.hx.HxOp) -->
<method name="makeImageJS"  public="true" static="true">
<description>
makeImageJS
</description>
<tag name="@since">Niagara 4.4</tag>
<parameter name="image">
<type class="javax.baja.gx.BImage"/>
</parameter>
<parameter name="op">
<type class="javax.baja.hx.HxOp"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.hx.HxUtil.makeImageJS(javax.baja.gx.BImage, java.lang.String, javax.baja.hx.HxOp) -->
<method name="makeImageJS"  public="true" static="true">
<description>
makeImageJS
</description>
<tag name="@since">Niagara 4.4</tag>
<parameter name="image">
<type class="javax.baja.gx.BImage"/>
</parameter>
<parameter name="attrs">
<type class="java.lang.String"/>
</parameter>
<parameter name="op">
<type class="javax.baja.hx.HxOp"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.hx.HxUtil.makeImageJS(javax.baja.gx.BImage, java.lang.String, java.lang.String, javax.baja.hx.HxOp) -->
<method name="makeImageJS"  public="true" static="true">
<description>
makeImageJS
</description>
<tag name="@since">Niagara 4.4</tag>
<parameter name="image">
<type class="javax.baja.gx.BImage"/>
</parameter>
<parameter name="attrs">
<type class="java.lang.String"/>
</parameter>
<parameter name="alt">
<type class="java.lang.String"/>
</parameter>
<parameter name="op">
<type class="javax.baja.hx.HxOp"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.hx.HxUtil.makeImageJS(javax.baja.gx.BImage, java.lang.String, java.lang.String, java.lang.String, javax.baja.hx.HxOp) -->
<method name="makeImageJS"  public="true" static="true">
<description>
Render an image. A sprite sheet will be used if the requested image is&#xa; found in a sprite sheet. See javax/baja/hx/hx.js#makeImage. Setting the&#xa; &#x22;hx.spritesheets.disabled&#x22; system property to true will revert to the&#xa; original makeImage() behavior (no use of sprite sheets).&#xa;&#xa; Allows the user to pass in a quote character in case it needs to&#xa; be custom for a POST. Defaults to a single quote if none is provide or&#xa; original makeImageJS method is called.&#xa;&#xa; &lt;code&gt;<see ref="javax.baja.hx.HxUtil#addJavascriptOnload(javax.baja.hx.HxOp)">#addJavascriptOnload(HxOp)</see>&lt;/code&gt; may need to be called if you&#xa; are appending the image to your own DOM.innerHTML in a POST.
</description>
<tag name="@see">Encode#forHtml(String)</tag>
<tag name="@since">Niagara 4.4</tag>
<parameter name="image">
<type class="javax.baja.gx.BImage"/>
<description>
The image to render
</description>
</parameter>
<parameter name="attrs">
<type class="java.lang.String"/>
<description>
If provided, any additional attributes for the img (excluding id).&#xa;              Use the alt parameter for adding alt and title text. Please note,&#xa;              this parameter won&#x27;t be processed for possible XSS attacks.
</description>
</parameter>
<parameter name="alt">
<type class="java.lang.String"/>
<description>
The standard alt identifier, also used as the title attribute
</description>
</parameter>
<parameter name="quote">
<type class="java.lang.String"/>
<description>
If provided, the quote style to use, defaults to a single quote
</description>
</parameter>
<parameter name="op">
<type class="javax.baja.hx.HxOp"/>
<description>
The HxOp for generating the HTML
</description>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
<description/>
</throws>
</method>

<!-- javax.baja.hx.HxUtil.changeImageJS(java.lang.String, javax.baja.gx.BImage, java.lang.String, javax.baja.hx.HxOp) -->
<method name="changeImageJS"  public="true" static="true">
<description>
Change an image created by&#xa; &lt;code&gt;<see ref="javax.baja.hx.HxUtil#makeImageJS(javax.baja.gx.BImage, java.lang.String, java.lang.String, java.lang.String, javax.baja.hx.HxOp)">#makeImageJS(BImage, String, String, String, HxOp)</see>&lt;/code&gt;&#xa; to another image.
</description>
<tag name="@since">Niagara 4.4</tag>
<parameter name="parent">
<type class="java.lang.String"/>
<description>
The id of the parent element containing the generated image HTML
</description>
</parameter>
<parameter name="image">
<type class="javax.baja.gx.BImage"/>
<description>
The image to render
</description>
</parameter>
<parameter name="attrs">
<type class="java.lang.String"/>
<description>
If provided, any additional attributes for the img (excluding id)
</description>
</parameter>
<parameter name="op">
<type class="javax.baja.hx.HxOp"/>
<description>
The HxOp for generating the HTML
</description>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
<description/>
</throws>
</method>

<!-- javax.baja.hx.HxUtil.changeImageJSInvokeCode(java.lang.String, javax.baja.gx.BImage, java.lang.String, javax.baja.hx.HxOp) -->
<method name="changeImageJSInvokeCode"  public="true" static="true">
<description>
Get the invoke code to change an image created by&#xa; &lt;code&gt;<see ref="javax.baja.hx.HxUtil#makeImageJS(javax.baja.gx.BImage, java.lang.String, java.lang.String, java.lang.String, javax.baja.hx.HxOp)">#makeImageJS(BImage, String, String, String, HxOp)</see>&lt;/code&gt;&#xa; to another image.
</description>
<tag name="@since">Niagara 4.4</tag>
<parameter name="parent">
<type class="java.lang.String"/>
<description>
The id of the parent element containing the generated image HTML
</description>
</parameter>
<parameter name="image">
<type class="javax.baja.gx.BImage"/>
<description>
The image to render
</description>
</parameter>
<parameter name="attrs">
<type class="java.lang.String"/>
<description>
If provided, any additional attributes for the img (excluding id)
</description>
</parameter>
<parameter name="op">
<type class="javax.baja.hx.HxOp"/>
<description>
The HxOp for generating the HTML
</description>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.hx.HxUtil.attr(java.lang.String, java.lang.String, java.lang.String, javax.baja.io.HtmlWriter) -->
<method name="attr"  public="true" static="true" final="true">
<description>
Same as HtmlWriter.attr, but allows user to pass in a custom quote. Defaults to a single quote if quote is null.
</description>
<parameter name="name">
<type class="java.lang.String"/>
</parameter>
<parameter name="value">
<type class="java.lang.String"/>
</parameter>
<parameter name="quote">
<type class="java.lang.String"/>
</parameter>
<parameter name="out">
<type class="javax.baja.io.HtmlWriter"/>
</parameter>
<return>
<type class="javax.baja.io.HtmlWriter"/>
</return>
</method>

<!-- javax.baja.hx.HxUtil.startOnloadWriter(javax.baja.hx.HxOp) -->
<method name="startOnloadWriter"  public="true" static="true">
<description>
Start having the HxOp.getHtmlWriter() write to a buffer for when you want to obtain the contents of the buffer&#xa; for use with the addOnload. When you have the content you need, call &#x27;finishOnloadWriter(Writer, op) in a&#xa; finally statement to ensure the op always gets reset.
</description>
<tag name="@since">Niagara 4.4</tag>
<parameter name="op">
<type class="javax.baja.hx.HxOp"/>
</parameter>
<return>
<type class="java.io.Writer"/>
<description>
The writer that you need to pass into &#x27;finishOnloadWriter&#x27;.
</description>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.hx.HxUtil.finishOnloadWriter(java.io.Writer, javax.baja.hx.HxOp) -->
<method name="finishOnloadWriter"  public="true" static="true">
<description>
finishOnloadWriter will return the HxOp writer to the original writer and append the&#xa; current writer contents to HxOp.addOnload().
</description>
<tag name="@since">Niagara 4.4</tag>
<parameter name="writer">
<type class="java.io.Writer"/>
</parameter>
<parameter name="op">
<type class="javax.baja.hx.HxOp"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.hx.HxUtil.isUserAgentWithoutInnerDivTouchScroll(javax.baja.hx.HxOp) -->
<method name="isUserAgentWithoutInnerDivTouchScroll"  public="true" static="true">
<annotation><type class="java.lang.Deprecated"/>
</annotation>
<description>
This method previously detected old mobile version like Android 2.3 and IO4 but this method always returns false&#xa; since all supported browsers have touch scrolling now.
</description>
<tag name="@deprecated">since Niagara 4.10U2 - will be removed in Niagara 5.0</tag>
<parameter name="op">
<type class="javax.baja.hx.HxOp"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.hx.HxUtil.getPollFreq() -->
<method name="getPollFreq"  public="true" static="true">
<description>
Return the Hx poll frequency.
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.hx.HxUtil.encodeSingleQuotes(java.lang.String) -->
<method name="encodeSingleQuotes"  public="true" static="true">
<description>
Utility for encoding a single Quote in some text
</description>
<tag name="@since">Niagara 4.3</tag>
<parameter name="text">
<type class="java.lang.String"/>
<description/>
</parameter>
<return>
<type class="java.lang.String"/>
<description/>
</return>
</method>

<!-- javax.baja.hx.HxUtil.encodeDoubleQuotes(java.lang.String) -->
<method name="encodeDoubleQuotes"  public="true" static="true">
<description>
Utility for encoding a double Quote in some text
</description>
<tag name="@since">Niagara 4.3</tag>
<parameter name="text">
<type class="java.lang.String"/>
<description/>
</parameter>
<return>
<type class="java.lang.String"/>
<description/>
</return>
</method>

<!-- javax.baja.hx.HxUtil.unescapeJsForInvocation(java.lang.String) -->
<method name="unescapeJsForInvocation"  public="true" static="true">
<description>
This method just replaces &amp;quot; with \&#x22;.&#xa; Prior to 4.4, the HxOp.addOnload was added inline within single quotes and required escaping quotes,&#xa; this is no longer the case and this method helps with backward compatibility.
</description>
<tag name="@since">Niagara 4.4</tag>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.hx.HxUtil.writeSafeAnchor(javax.baja.naming.BOrd, java.lang.String, javax.baja.hx.HxOp) -->
<method name="writeSafeAnchor"  public="true" static="true">
<description>
This method writes an anchor that won&#x27;t get snooped in case the hyperlink&#xa; contains HTML characters like &lt;code&gt;&amp;#x27;&amp;lt;&amp;#x27;&lt;/code&gt; or &lt;code&gt;&amp;#x27;&amp;gt;&amp;#x27;&lt;/code&gt;. the displayText will be HTML escaped.
</description>
<tag name="@since">Niagara 4.10</tag>
<parameter name="ord">
<type class="javax.baja.naming.BOrd"/>
</parameter>
<parameter name="displayText">
<type class="java.lang.String"/>
</parameter>
<parameter name="op">
<type class="javax.baja.hx.HxOp"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.hx.HxUtil.writeSafeAnchorStart(javax.baja.naming.BOrd, javax.baja.hx.HxOp) -->
<method name="writeSafeAnchorStart"  public="true" static="true">
<description>
This method starts an anchor that won&#x27;t get snooped in case the hyperlink&#xa; contains HTML characters like &lt;code&gt;&amp;#x27;&amp;lt;&amp;#x27;&lt;/code&gt; or &lt;code&gt;&amp;#x27;&amp;gt;&amp;#x27;&lt;/code&gt;.&#xa;&#xa; Make sure to close the tag after writing any other necessary HTML attributes to the anchor.
</description>
<tag name="@since">Niagara 4.10</tag>
<parameter name="ord">
<type class="javax.baja.naming.BOrd"/>
</parameter>
<parameter name="op">
<type class="javax.baja.hx.HxOp"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.hx.HxUtil.encodeOrdForHref(javax.baja.naming.BOrd, javax.baja.hx.HxOp) -->
<method name="encodeOrdForHref"  public="true" static="true">
<description>
This method encodes problematic characters that could be in a BOrd and also protects against XSS by URL encoding other characters like&#xa; single and double quotes.
</description>
<tag name="@since">Niagara 4.10</tag>
<parameter name="ord">
<type class="javax.baja.naming.BOrd"/>
</parameter>
<parameter name="op">
<type class="javax.baja.hx.HxOp"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.hx.HxUtil.encodeURLForHref(java.lang.String) -->
<method name="encodeURLForHref"  public="true" static="true">
<description>
When setting an href on an HtmlElement, url encode if the text contains a single or double quote.&#xa; This uses URLEncoder.encode to protect against XSS. If you have an BOrd, its better to call&#xa; encodeOrdForHref so certain characters like `|` are not double escaped if you have previously&#xa; called WebOp.toUri() to obtain the string.
</description>
<tag name="@since">Niagara 4.3U1</tag>
<parameter name="link">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.hx.HxUtil.escapeJsStringLiteral(java.lang.String) -->
<method name="escapeJsStringLiteral"  public="true" static="true">
<description>
Escapes all characters that are not valid in a JavaScript string literal,&#xa; and returns a string that is safe to wrap in either single or double quotes&#xa; and embed in JavaScript code.
</description>
<tag name="@since">Niagara 4.3</tag>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.hx.HxUtil.marshal(com.tridium.nre.ConsumerWithException&lt;? super javax.baja.hx.HxOp, java.lang.Exception&gt;, javax.baja.hx.HxOp) -->
<method name="marshal"  public="true" static="true">
<description>
Override the HxOp writer such that anything written to the op in the CheckedConsumer is returned as a string.
</description>
<tag name="@since">Niagara 4.8</tag>
<parameter name="r">
<parameterizedType class="com.tridium.nre.ConsumerWithException">
<args>
<wildcardType class="?">
<bounds kind="super">
<type class="javax.baja.hx.HxOp"/>
</bounds>
</wildcardType>
<type class="java.lang.Exception"/>
</args>
</parameterizedType>
</parameter>
<parameter name="op">
<type class="javax.baja.hx.HxOp"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.hx.HxUtil.encodeText(java.lang.String) -->
<method name="encodeText"  public="true" static="true">
<description>
encode label text, maintaining line breaks
</description>
<parameter name="text">
<type class="java.lang.String"/>
<description/>
</parameter>
<return>
<type class="java.lang.String"/>
<description/>
</return>
<throws>
<type class="java.lang.Exception"/>
<description/>
</throws>
</method>

<!-- javax.baja.hx.HxUtil.getUpdateValueInvokeCode(java.lang.String, java.lang.String, java.lang.String, javax.baja.hx.HxOp) -->
<method name="getUpdateValueInvokeCode"  public="true" static="true">
<description>
Get the invoke code for safely updating form values with quotations, newlines and carriage returns.&#xa; This function makes a few substitutions to work in an hx.update, then hx.updateValue converts the&#xa; substitutions back.&#xa; (HxUtil.encodeText is not good for form values because it converts &lt;code&gt;\n&lt;/code&gt; to &lt;code&gt;&amp;lt;br/&amp;gt;&lt;/code&gt;)
</description>
<parameter name="formName">
<type class="java.lang.String"/>
</parameter>
<parameter name="stringValue">
<type class="java.lang.String"/>
</parameter>
<parameter name="quote">
<type class="java.lang.String"/>
</parameter>
<parameter name="op">
<type class="javax.baja.hx.HxOp"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.hx.HxUtil.writeContextMenuListItem(javax.baja.nav.BINavNode, javax.baja.hx.HxOp) -->
<method name="writeContextMenuListItem"  public="true" static="true">
<description>
Utility for writing the right click entry for a navNode
</description>
<parameter name="navNode">
<type class="javax.baja.nav.BINavNode"/>
<description/>
</parameter>
<parameter name="op">
<type class="javax.baja.hx.HxOp"/>
<description/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
<description/>
</throws>
</method>

<!-- javax.baja.hx.HxUtil.writeContextMenuListItem(java.lang.String, java.lang.String, javax.baja.naming.BOrd, javax.baja.hx.HxOp) -->
<method name="writeContextMenuListItem"  public="true" static="true">
<description>
Utility for writing the right click entry for a navNode
</description>
<parameter name="onclick">
<type class="java.lang.String"/>
</parameter>
<parameter name="displayName">
<type class="java.lang.String"/>
<description/>
</parameter>
<parameter name="imageOrd">
<type class="javax.baja.naming.BOrd"/>
<description/>
</parameter>
<parameter name="op">
<type class="javax.baja.hx.HxOp"/>
<description/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
<description/>
</throws>
</method>

<!-- javax.baja.hx.HxUtil.safe(java.lang.String) -->
<method name="safe"  public="true" static="true">
<description>
Write a &#x22;safe&#x22; character.  This method will escape unsafe&#xa; characters common in XML and HTML markup.
</description>
<parameter name="s">
<type class="java.lang.String"/>
<description/>
</parameter>
<return>
<type class="java.lang.String"/>
<description>
safe string
</description>
</return>
</method>

<!-- javax.baja.hx.HxUtil.getCsrfTokenQueryString() -->
<method name="getCsrfTokenQueryString"  public="true" static="true">
<description>
Get the CSRF token valid for this session and return as a query string of the form&#xa; &lt;code&gt;?csrfToken=token&lt;/code&gt;&#xa; E.g. http://localhost/logout?csrfToken=49yCPqUtUZV4pgu%2B6nzKZr9yX75%2BWqG7
</description>
<return>
<type class="java.lang.String"/>
<description>
String - A query string with csrf parameter
</description>
</return>
</method>

<!-- javax.baja.hx.HxUtil.addJavascriptOnload(javax.baja.hx.HxOp) -->
<method name="addJavascriptOnload"  public="true" static="true">
<description>
After the initial HxView.write has complete, usually for a POST, add Javascript, Global, and addOnload code in the appropriate order to allow time for the javascript&#xa; to be retrieved before executing global and addOnload code.
</description>
<tag name="@since">Niagara 4.4</tag>
<parameter name="op">
<type class="javax.baja.hx.HxOp"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
<description/>
</throws>
</method>

<!-- javax.baja.hx.HxUtil.getMinimalOrdTarget(javax.baja.naming.OrdTarget) -->
<method name="getMinimalOrdTarget"  public="true" static="true">
<description>
Provide this function an OrdTarget like an HxOp and it will generate a separate&#xa; OrdTarget that is not based on an HxOp, this OrdTarget has a much smaller&#xa; memory footprint that can be used for temporary caches.
</description>
<tag name="@since">Niagara 4.2U2</tag>
<parameter name="target">
<type class="javax.baja.naming.OrdTarget"/>
<description>
The Original OrdTarget (could be an HxOp)
</description>
</parameter>
<return>
<type class="javax.baja.naming.OrdTarget"/>
<description>
an OrdTarget that is not an HxOp
</description>
</return>
</method>

</class>
</bajadoc>
