<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="net" runtimeProfile="rt" qualifiedName="javax.baja.net.BInternetAddress" name="BInternetAddress" packageName="javax.baja.net" public="true" final="true">
<description>
BInternetAddress models an Internet address which is a&#xa; composite of a hostname (or raw IP address) and a port&#xa; number.
</description>
<tag name="@author">Brian Frank</tag>
<tag name="@creation">12 Jan 01</tag>
<tag name="@version">$Revision: 4$ $Date: 4/29/08 10:29:23 AM EDT$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="javax.baja.sys.BSimple"/>
</extends>
<annotation><type class="javax.baja.nre.annotations.NoSlotomatic"/>
</annotation>
<!-- javax.baja.net.BInternetAddress(java.lang.String, int) -->
<constructor name="BInternetAddress" public="true">
<parameter name="host">
<type class="java.lang.String"/>
</parameter>
<parameter name="port">
<type class="int"/>
</parameter>
<description>
Constructor with host and port.  A port number&#xa; of -1 indicates to use the default port.
</description>
</constructor>

<!-- javax.baja.net.BInternetAddress(java.lang.String) -->
<constructor name="BInternetAddress" public="true">
<parameter name="authority">
<type class="java.lang.String"/>
</parameter>
<description>
Construct an internet address from the specified&#xa; address which may be &#x22;host&#x22; or &#x22;host:port&#x22;.&#xa; If there is no port, then the port will be set&#xa; to -1. Also, this method needs to be aware of numeric IPv6 addressing schemes.&#xa; Therefore, the input could be [host]:port OR host:port
</description>
</constructor>

<!-- javax.baja.net.BInternetAddress.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.net.BInternetAddress.getAuthority() -->
<method name="getAuthority"  public="true">
<description>
Get the authority string which is the host if port &#xa; is -1 or the &#x22;host:port&#x22; if the port is not -1.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.net.BInternetAddress.getHost() -->
<method name="getHost"  public="true">
<description>
Get the host for this internet address &#xa; of null if the address is null.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.net.BInternetAddress.getPort() -->
<method name="getPort"  public="true">
<description>
Get the port number for this internet address&#xa; of -1 if the default port should be used based&#xa; on the address&#x27;s context.
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.net.BInternetAddress.getAddress() -->
<method name="getAddress"  public="true">
<description>
Get the java.net.InetAddress for the host if&#xa; it can be resolved.  This method always attempts&#xa; to resolve the host into an InetAddress (as&#xa; opposed to caching the result).
</description>
<return>
<type class="java.net.InetAddress"/>
</return>
<throws>
<type class="java.net.UnknownHostException"/>
<description>
if the host cannot&#xa;    be mapped into a valid IP address in this VM.
</description>
</throws>
</method>

<!-- javax.baja.net.BInternetAddress.getURL(java.lang.String, java.lang.String) -->
<method name="getURL"  public="true">
<description>
Get this internet address as a URL.
</description>
<parameter name="protocol">
<type class="java.lang.String"/>
</parameter>
<parameter name="path">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="java.net.URL"/>
</return>
</method>

<!-- javax.baja.net.BInternetAddress.equivalent(java.net.InetAddress, int) -->
<method name="equivalent"  public="true">
<description>
The equivalent method is a form of equals which&#xa; compares actual IP addresses by resolving the &#xa; hostname to its InetAddress.
</description>
<parameter name="host">
<type class="java.net.InetAddress"/>
</parameter>
<parameter name="port">
<type class="int"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.net.BInternetAddress.equivalent(javax.baja.net.BInternetAddress) -->
<method name="equivalent"  public="true">
<description>
The equivalent method is a form of equals which&#xa; compares actual IP addresses by resolving the &#xa; hostname to its InetAddress.
</description>
<parameter name="addr">
<type class="javax.baja.net.BInternetAddress"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.net.BInternetAddress.isNull() -->
<method name="isNull"  public="true">
<description>
Return true if this address is null.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.net.BInternetAddress.hashCode() -->
<method name="hashCode"  public="true">
<description>
Default implementation of hashCode is based&#xa; on the authority string.
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.net.BInternetAddress.equals(java.lang.Object) -->
<method name="equals"  public="true">
<description>
Equality of BInternetAddresses is based on &#xa; identical ports and case insensitive equal&#xa; host Strings.  Since a given host may have&#xa; multiple aliases, this equals method does not&#xa; return whether two BInternetAddresses point&#xa; to the same IP address.
</description>
<parameter name="obj">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.net.BInternetAddress.encode(java.io.DataOutput) -->
<method name="encode"  public="true">
<description>
Default implementation is serialized using &#xa; writeUTF() of encodeToString().
</description>
<parameter name="out">
<type class="java.io.DataOutput"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.net.BInternetAddress.decode(java.io.DataInput) -->
<method name="decode"  public="true">
<description>
Default implementation is unserialized &#xa; using readUTF() and decodeFromString().
</description>
<parameter name="in">
<type class="java.io.DataInput"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.net.BInternetAddress.encodeToString() -->
<method name="encodeToString"  public="true">
<description>
The string encoding is &#x22;hostname[:port]&#x22;.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.net.BInternetAddress.decodeFromString(java.lang.String) -->
<method name="decodeFromString"  public="true">
<description>
The string encoding is &#x22;hostname[:port]&#x22;.
</description>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.net.BInternetAddress.NULL -->
<field name="NULL"  public="true" static="true" final="true">
<type class="javax.baja.net.BInternetAddress"/>
<description>
The null address.
</description>
</field>

<!-- javax.baja.net.BInternetAddress.DEFAULT -->
<field name="DEFAULT"  public="true" static="true" final="true">
<type class="javax.baja.net.BInternetAddress"/>
<description>
The default address is the null address.
</description>
</field>

<!-- javax.baja.net.BInternetAddress.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
