<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="neql" runtimeProfile="rt" qualifiedName="javax.baja.neql.Traverse" name="Traverse" packageName="javax.baja.neql" public="true">
<description>
A Traverse statement is a NEQL statement for selecting a collection of Entities by&#xa; traversing a relation from either end of the relation.
</description>
<tag name="@author">John Sublett</tag>
<tag name="@creation">11/3/2014</tag>
<tag name="@since">Niagara 4.0</tag>
<extends>
<type class="javax.baja.neql.AstNode"/>
</extends>
<!-- javax.baja.neql.Traverse(javax.baja.tag.Id, boolean, javax.baja.neql.Expression) -->
<constructor name="Traverse" public="true">
<parameter name="relationId">
<type class="javax.baja.tag.Id"/>
</parameter>
<parameter name="outbound">
<type class="boolean"/>
</parameter>
<parameter name="predicate">
<type class="javax.baja.neql.Expression"/>
</parameter>
<description/>
</constructor>

<!-- javax.baja.neql.Traverse.getNodeType() -->
<method name="getNodeType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get the AST node type constant for this node type as defined&#xa; in AstNode.
</description>
<return>
<type class="int"/>
<description>
Returns the integer node type code.
</description>
</return>
</method>

<!-- javax.baja.neql.Traverse.getRelationId() -->
<method name="getRelationId"  public="true">
<description>
Get the id for the relation to be traversed.
</description>
<return>
<type class="javax.baja.tag.Id"/>
<description>
Returns the Id of a relation to traverse.
</description>
</return>
</method>

<!-- javax.baja.neql.Traverse.isOutbound() -->
<method name="isOutbound"  public="true">
<description>
Determine whether the traversal is for an outbound relation.
</description>
<return>
<type class="boolean"/>
<description>
Returns true for an outbound traversal.  False for inbound.
</description>
</return>
</method>

<!-- javax.baja.neql.Traverse.isInbound() -->
<method name="isInbound"  public="true">
<description>
Determine whether the traversal is for an inbound relation.
</description>
<return>
<type class="boolean"/>
<description>
Returns true for an inbound traversal.  False for outbound.
</description>
</return>
</method>

<!-- javax.baja.neql.Traverse.getPredicate() -->
<method name="getPredicate"  public="true">
<description>
Get the predicate expression used to filter related objects.
</description>
<return>
<type class="javax.baja.neql.Expression"/>
<description>
Returns a boolean Expression to be used as the filter.
</description>
</return>
</method>

<!-- javax.baja.neql.Traverse.getNodeDisplay() -->
<method name="getNodeDisplay"  protected="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="java.lang.String"/>
</return>
</method>

</class>
</bajadoc>
