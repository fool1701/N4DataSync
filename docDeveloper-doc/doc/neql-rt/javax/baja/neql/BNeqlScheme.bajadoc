<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="neql" runtimeProfile="rt" qualifiedName="javax.baja.neql.BNeqlScheme" name="BNeqlScheme" packageName="javax.baja.neql" public="true">
<description>
The &#x22;neql&#x22; ord scheme is a QueryScheme for the Niagara Entity Query Language.&#xa; Like BQL, NEQL is an SQL-like query language for querying Niagara systems&#xa; for Niagara entities.  It is much simpler than BQL in that it only operates&#xa; on the Entity API and can only inspect tags and entity relationships.
</description>
<tag name="@author">John Sublett</tag>
<tag name="@creation">01/15/2014</tag>
<tag name="@since">Niagara 4.0</tag>
<extends>
<type class="javax.baja.query.BQueryScheme"/>
</extends>
<annotation><type class="javax.baja.nre.annotations.NiagaraSingleton"/>
</annotation>
<!-- javax.baja.neql.BNeqlScheme.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.neql.BNeqlScheme.parse(java.lang.String) -->
<method name="parse"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="queryBody">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.naming.OrdQuery"/>
</return>
</method>

<!-- javax.baja.neql.BNeqlScheme.INSTANCE -->
<field name="INSTANCE"  public="true" static="true" final="true">
<type class="javax.baja.neql.BNeqlScheme"/>
<description/>
</field>

<!-- javax.baja.neql.BNeqlScheme.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
