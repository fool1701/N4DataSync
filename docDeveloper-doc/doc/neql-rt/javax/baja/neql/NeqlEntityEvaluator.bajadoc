<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="neql" runtimeProfile="rt" qualifiedName="javax.baja.neql.NeqlEntityEvaluator" name="NeqlEntityEvaluator" packageName="javax.baja.neql" public="true">
<description>
NeqlEntityEvaluator a simple evaluator that evaluates a neql expression&#xa; against an Entity.
</description>
<tag name="@author">John Sublett</tag>
<tag name="@creation">6/4/14</tag>
<tag name="@since">Niagara 4.0</tag>
<extends>
<type class="java.lang.Object"/>
</extends>
<!-- javax.baja.neql.NeqlEntityEvaluator() -->
<constructor name="NeqlEntityEvaluator" public="true">
<description/>
</constructor>

<!-- javax.baja.neql.NeqlEntityEvaluator.makePredicate(java.lang.String) -->
<method name="makePredicate"  public="true" static="true">
<description>
Make a predicate from the specified neql expression.
</description>
<parameter name="expression">
<type class="java.lang.String"/>
<description>
A neql boolean expression.
</description>
</parameter>
<return>
<parameterizedType class="java.util.function.Predicate">
<args>
<type class="javax.baja.tag.Entity"/>
</args>
</parameterizedType>
<description>
Returns a predicate for testing entities.
</description>
</return>
</method>

<!-- javax.baja.neql.NeqlEntityEvaluator.makePredicate(java.lang.String, javax.baja.sys.Context) -->
<method name="makePredicate"  public="true" static="true">
<description/>
<parameter name="expression">
<type class="java.lang.String"/>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<parameterizedType class="java.util.function.Predicate">
<args>
<type class="javax.baja.tag.Entity"/>
</args>
</parameterizedType>
</return>
</method>

<!-- javax.baja.neql.NeqlEntityEvaluator.booleanEval(javax.baja.sys.Context, javax.baja.tag.Entity, javax.baja.tag.Entity, javax.baja.neql.Expression) -->
<method name="booleanEval"  public="true">
<annotation><type class="java.lang.Deprecated"/>
</annotation>
<description>
Evaluate a boolean expression.
</description>
<tag name="@deprecated">since Niagara 4.4. Will be removed in a future release. Use&#xa;   &lt;code&gt;<see ref="javax.baja.neql.NeqlEntityEvaluator#booleanEvalAll(javax.baja.sys.Context, javax.baja.tag.Entity, javax.baja.neql.Expression)">NeqlEntityEvaluator#booleanEvalAll(Context, Entity, Expression)</see>&lt;/code&gt; instead.</tag>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
<description>
A context with the collection of parameters&#xa;                          used to evaluate the expression.
</description>
</parameter>
<parameter name="contextEntity">
<type class="javax.baja.tag.Entity"/>
<description>
The context entity against which context expressions are&#xa;                          evaluated.
</description>
</parameter>
<parameter name="entity">
<type class="javax.baja.tag.Entity"/>
<description>
The entity to evaluate the expression against.
</description>
</parameter>
<parameter name="booleanExpression">
<type class="javax.baja.neql.Expression"/>
<description>
The expression to evaluate.
</description>
</parameter>
<return>
<type class="boolean"/>
<description>
The primitive boolean value for the given entity and boolean expression
</description>
</return>
</method>

<!-- javax.baja.neql.NeqlEntityEvaluator.booleanEvalAll(javax.baja.sys.Context, javax.baja.tag.Entity, javax.baja.neql.Expression) -->
<method name="booleanEvalAll"  public="true">
<annotation><type class="java.lang.Deprecated"/>
</annotation>
<description>
Evaluate a boolean expression.
</description>
<tag name="@since">Niagara 4.4</tag>
<tag name="@deprecated">&lt;code&gt;<see ref="javax.baja.neql.NeqlEntityEvaluator#evalBoolean(javax.baja.neql.Expression, javax.baja.tag.Entity, javax.baja.sys.Context)">NeqlEntityEvaluator#evalBoolean(Expression, Entity, Context)</see>&lt;/code&gt; should be used&#xa;   instead to determine whether a boolean expression is true for a given entity and context.&#xa;   evalBoolean will return as soon as a result is determined instead of evaluating the entire&#xa;   expression</tag>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
<description>
The context to consider when evaluating this expression for this&#xa;   entity
</description>
</parameter>
<parameter name="entity">
<type class="javax.baja.tag.Entity"/>
<description>
The entity to evaluate the expression against.
</description>
</parameter>
<parameter name="booleanExpression">
<type class="javax.baja.neql.Expression"/>
<description>
The expression to evaluate.
</description>
</parameter>
<return>
<parameterizedType class="java.util.Collection">
<args>
<type class="javax.baja.sys.BBoolean"/>
</args>
</parameterizedType>
<description>
A collection of booleans for the given entity and boolean expression
</description>
</return>
</method>

<!-- javax.baja.neql.NeqlEntityEvaluator.eval(javax.baja.sys.Context, javax.baja.tag.Entity, javax.baja.tag.Entity, javax.baja.neql.Expression) -->
<method name="eval"  public="true">
<annotation><type class="java.lang.Deprecated"/>
</annotation>
<description>
Evaluate an expression against an entity. This method will only return 1 value as a result. If&#xa; the given entity has multiple relations to traverse, it will return the first matching relation&#xa; and ignore all others. When multiple relations of the same type are expected, use&#xa; &lt;code&gt;<see ref="javax.baja.neql.NeqlEntityEvaluator#evalAll(javax.baja.sys.Context, javax.baja.tag.Entity, javax.baja.neql.Expression)">NeqlEntityEvaluator#evalAll(Context, Entity, Expression)</see>&lt;/code&gt;
</description>
<tag name="@deprecated">since Niagara 4.4. Will be removed in a future release.&#xa;   Use @link{NeqlEntityEvaluator#evalAll(Context, Entity, Expression)} instead.</tag>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
<description>
A context with the collection of parameters used to&#xa;                      evaluate the expression.
</description>
</parameter>
<parameter name="contextEntity">
<type class="javax.baja.tag.Entity"/>
<description>
The context entity against which context expressions&#xa;                      are evaluated.
</description>
</parameter>
<parameter name="entity">
<type class="javax.baja.tag.Entity"/>
<description>
The entity to evaluate the expression against.
</description>
</parameter>
<parameter name="expression">
<type class="javax.baja.neql.Expression"/>
<description>
The expression to evaluate.
</description>
</parameter>
<return>
<type class="java.lang.Object"/>
<description>
1 of Entity, Relation, or BIDataValue (depending on the query)
</description>
</return>
</method>

<!-- javax.baja.neql.NeqlEntityEvaluator.evalAll(javax.baja.sys.Context, javax.baja.tag.Entity, javax.baja.neql.Expression) -->
<method name="evalAll"  public="true">
<description>
Evaluate an expression against an entity.
</description>
<tag name="@since">Niagara 4.4</tag>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
<description>
The context to consider when evaluating this expression for this entity
</description>
</parameter>
<parameter name="entity">
<type class="javax.baja.tag.Entity"/>
<description>
The entity to evaluate the expression against.
</description>
</parameter>
<parameter name="expression">
<type class="javax.baja.neql.Expression"/>
<description>
The expression to evaluate.
</description>
</parameter>
<return>
<parameterizedType class="java.util.Collection">
<args>
<wildcardType class="?">
</wildcardType>
</args>
</parameterizedType>
<description>
A collection of Entities, BIDataValues, Relations, Booleans, or an empty collection&#xa;   (depending on the NEQL query).
</description>
</return>
</method>

<!-- javax.baja.neql.NeqlEntityEvaluator.evalBoolean(javax.baja.neql.Expression, javax.baja.tag.Entity, javax.baja.sys.Context) -->
<method name="evalBoolean"  public="true">
<description>
Returns a result for the specified boolean expression as soon one can be determined.
</description>
<tag name="@since">Niagara 4.9</tag>
<parameter name="expression">
<type class="javax.baja.neql.Expression"/>
<description>
boolean expression to be evaluated
</description>
</parameter>
<parameter name="entity">
<type class="javax.baja.tag.Entity"/>
<description>
entity on which to evaluate the expression
</description>
</parameter>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
<description>
context to use while evaluating the expression
</description>
</parameter>
<return>
<type class="boolean"/>
<description>
false if the entity is null or true or false as soon as a result can be determined
</description>
</return>
</method>

<!-- javax.baja.neql.NeqlEntityEvaluator.likeEval(javax.baja.data.BIDataValue, javax.baja.data.BIDataValue) -->
<method name="likeEval"  public="true">
<description>
like: implementation uses pattern caching.
</description>
<parameter name="left">
<type class="javax.baja.data.BIDataValue"/>
</parameter>
<parameter name="right">
<type class="javax.baja.data.BIDataValue"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

</class>
</bajadoc>
