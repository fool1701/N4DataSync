<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<module name="neql" runtimeProfile="rt" bajaVersion="0" vendor="Tridium" vendorVersion="4.13.3.48">
<description>Niagara Entity Query Language</description>
<package name="javax.baja.neql"/>
<class packageName="javax.baja.neql" name="AndExpression"><description>AndExpression is a boolean expression with two operands.</description></class>
<class packageName="javax.baja.neql" name="AstNode"><description>AstNode is the base class for all nodes in the NEQL abstract syntax tree.</description></class>
<class packageName="javax.baja.neql" name="BINeqlQueryHandler" category="interface"><description>BINeqlQueryHandler is the interface required to support processing of NEQL queries.</description></class>
<class packageName="javax.baja.neql" name="BNamespaceScheme"><description>The &#x22;namespace&#x22; ord scheme is a scheme that sets the &#x22;namespace&#x22; facet&#xa; in the resulting OrdTarget but otherwise leaves the base OrdTarget&#xa; unchanged.</description></class>
<class packageName="javax.baja.neql" name="BNeqlEntityQueryHandler"><description>BNeqlEntityQueryHandler is an abstract query handler for querying a collection of Entities&#xa; provided by a cursor.</description></class>
<class packageName="javax.baja.neql" name="BNeqlScheme"><description>The &#x22;neql&#x22; ord scheme is a QueryScheme for the Niagara Entity Query Language.</description></class>
<class packageName="javax.baja.neql" name="BinaryExpression"><description>An Expression is a class of expressions that operates upon two expressions.</description></class>
<class packageName="javax.baja.neql" name="ComparisonExpression"><description>ComparisonExpression is a class of expressions that compare two quantities for&#xa; equality, greater than, or less than.</description></class>
<class packageName="javax.baja.neql" name="ContextExpression"><description>A ContextExpression is an expression that is evaluated against the&#xa; query context.</description></class>
<class packageName="javax.baja.neql" name="EqualExpression"><description>EqualExpression is a boolean expression with two operands.</description></class>
<class packageName="javax.baja.neql" name="EvalOnExpression"><description>AndExpression is a boolean expression with two operands.</description></class>
<class packageName="javax.baja.neql" name="Expression"><description>An Expression is an AstNode that can be evaluated to a value.</description></class>
<class packageName="javax.baja.neql" name="GetRelationExpression"><description>A GetRelationExpression gets a relation on the evaluated entity.</description></class>
<class packageName="javax.baja.neql" name="GetTagExpression"><description>GetTagExpression gets a tag from the evaluated entity.</description></class>
<class packageName="javax.baja.neql" name="GreaterExpression"><description>GreaterExpression is a boolean expression with two operands.</description></class>
<class packageName="javax.baja.neql" name="GreaterOrEqualExpression"><description>GreaterOrEqualExpression is a boolean expression with two operands.</description></class>
<class packageName="javax.baja.neql" name="LessExpression"><description>LessExpression is a boolean expression with two operands.</description></class>
<class packageName="javax.baja.neql" name="LessOrEqualExpression"><description>LessOrEqualExpression is a boolean expression with two operands.</description></class>
<class packageName="javax.baja.neql" name="LikeExpression"><description>A LikeExpression is an expression that is evaluated by returning&#xa; boolean based on pattern caching.</description></class>
<class packageName="javax.baja.neql" name="LiteralExpression"><description>LiteralExpression is an expression for a literal value of any of the supported</description></class>
<class packageName="javax.baja.neql" name="LogicalExpression"><description>LogicalExpression is a class of expressions that represents a logical connection between&#xa; two subexpressions, such as intersection (AND) or union (OR).</description></class>
<class packageName="javax.baja.neql" name="NeqlEntityEvaluator"><description>NeqlEntityEvaluator a simple evaluator that evaluates a neql expression&#xa; against an Entity.</description></class>
<class packageName="javax.baja.neql" name="NeqlQuery"><description>A NeqlQuery is an OrdQuery for the neql scheme which is the Niagara Entity Query Language.</description></class>
<class packageName="javax.baja.neql" name="NotEqualExpression"><description>NotEqualExpression is a boolean expression with two operands.</description></class>
<class packageName="javax.baja.neql" name="NotExpression"><description>A NotExpression is an expression that is evaluated by returning&#xa; the logical not of the subexpression.</description></class>
<class packageName="javax.baja.neql" name="OrExpression"><description>OrExpression is a boolean expression with two operands.</description></class>
<class packageName="javax.baja.neql" name="Projection"><description>A Projection is a node that narrows the tags on the resulting entities.</description></class>
<class packageName="javax.baja.neql" name="Select"><description>A Select statement is a NEQL statement for selecting a collection of Entities</description></class>
<class packageName="javax.baja.neql" name="Traverse"><description>A Traverse statement is a NEQL statement for selecting a collection of Entities by&#xa; traversing a relation from either end of the relation.</description></class>
<class packageName="javax.baja.neql" name="TraverseInExpression"><description>A TraverseInExpression traverses an inbound relation on an Entity&#xa; and returns the source entity.</description></class>
<class packageName="javax.baja.neql" name="TraverseOutExpression"><description>A TraverseOutExpression traverses an outbound relation on an Entity&#xa; and returns the target entity.</description></class>
</module>
</bajadoc>
