<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<module name="devDriver" runtimeProfile="rt" bajaVersion="0" vendor="Tridium" vendorVersion="4.13.3.48">
<description>Developer Driver Framework</description>
<package name="com.tridium.ddf.clock"/>
<package name="com.tridium.ddf"/>
<package name="com.tridium.ddf.poll"/>
<package name="com.tridium.ddf.comm"/>
<package name="com.tridium.ddf.comm.multipleTransaction"/>
<package name="com.tridium.ddf.comm.defaultComm"/>
<package name="com.tridium.ddf.comm.rsp"/>
<package name="com.tridium.ddf.comm.req"/>
<package name="com.tridium.ddf.comm.req.util"/>
<package name="com.tridium.ddf.comm.singleTransaction"/>
<package name="com.tridium.ddf.identify"/>
<package name="com.tridium.ddf.point"/>
<package name="com.tridium.ddf.discover"/>
<package name="com.tridium.ddf.discover.auto"/>
<class packageName="com.tridium.ddf.discover.auto" name="BDdfAutoDiscoveryJob"><description>This is a &#x22;one-size-fits-all&#x22; discovery job that takes full&#xa; advantage of the structure of developer driver to automatically&#xa; discover the devices under a network or the points under a&#xa; device.</description></class>
<class packageName="com.tridium.ddf.discover.auto" name="BDdfAutoDiscoveryPreferences"><description>This class is used to customize the &#x22;Discover&#x22; dialog that the user sees when he or she&#xa; clicks the &#x22;Discover&#x22; button on the Ddf Device Manager and/or the Ddf Point Manager.</description></class>
<class packageName="com.tridium.ddf" name="BDdfCommDevice"><description>BDdfCommDevice is the ancestor for Niagara AX Ddf Devices that will&#xa; have their own real ddf communicator.</description></class>
<class packageName="com.tridium.ddf" name="BDdfCommNetwork"><description>BDdfCommNetwork is the ancestor for Niagara AX Ddf Networks that will&#xa; have their own real ddf communicator.</description></class>
<class packageName="com.tridium.ddf.comm.defaultComm" name="BDdfCommunicator"><description>BDdfCommunicator - Handles transmitting and receiving messages on behalf of a component&#xa; that implements BIDdfCommunicating such as BDdfCommDevice or BDdfCommNetwork.</description></class>
<class packageName="com.tridium.ddf.comm.defaultComm" name="BDdfCommunicator.Communication"><description>Communication - Whenever a request is passed to the communicate method,&#xa; in instance of this is really placed on the communicator&#x27;s queue wrapping&#xa; the given request (since the queue has to take a runnable).</description></class>
<class packageName="com.tridium.ddf" name="BDdfDevice"><description>BDdfDevice&#xa;&#xa; If this device has its own dedicated BDdfCommunicator then you should simply indicate this by&#xa; making it implement the interface BIDdfCommunicating.</description></class>
<class packageName="com.tridium.ddf.discover" name="BDdfDeviceDiscoveryLeaf"><description>This is the default implementation of BIDdfDeviceDiscoveryLeaf.</description></class>
<class packageName="com.tridium.ddf" name="BDdfDeviceFolder"></class>
<class packageName="com.tridium.ddf.identify" name="BDdfDeviceId"><description>This is the recommended override point for descendants&#xa; when defining the device id class.</description></class>
<class packageName="com.tridium.ddf.identify" name="BDdfDiscoverParams"><description>The BDdfAutoDiscoveryJob makes use of this class to allow&#xa; it to automatically, yet generically loop through all possible&#xa; combinations of a driver&#x27;s discovery request in order to&#xa; retrieve all discovery objects for a driver&#x27;s Ddf Device&#xa; Manager or Ddf Point Manager&#xa;&#xa; This class extends BDdfIdParams and implements&#xa; BIDdfDiscoverParams for convenience.</description></class>
<class packageName="com.tridium.ddf.discover" name="BDdfDiscoveryGroup"><description>This is the default implementation of BIDdfDiscoveryGroup</description></class>
<class packageName="com.tridium.ddf.discover" name="BDdfDiscoveryJob"><description>Discovery objects by default are placed as Niagara AX children directly&#xa; under this.</description></class>
<class packageName="com.tridium.ddf.discover" name="BDdfDiscoveryLeaf"><description>Discovery leaves appear in the discovery list on the&#xa; Ddf Device Manager or Ddf PointManager.</description></class>
<class packageName="com.tridium.ddf.discover" name="BDdfDiscoveryPreferences"><description>Niagara AX Manager Views can prompt the user for a customized&#xa; instance of this class to prompt the end user for discovery&#xa; preferences.</description></class>
<class packageName="com.tridium.ddf.comm.req" name="BDdfDiscoveryRequest"><description>This is a default, base class that implements BIDdfDiscoverRequest.</description></class>
<class packageName="com.tridium.ddf.identify" name="BDdfIdParams"><description>This interface acts as the fundamental glue between&#xa; Niagara AX components and developer driver framework components.</description></class>
<class packageName="com.tridium.ddf.comm.multipleTransaction" name="BDdfMultipleTransactionCommunicator"><description>This is a default override class for BDdfCommunicator&#x27;s that require support for&#xa; multiple, simultaneously outstanding transactions on the field-bus.</description></class>
<class packageName="com.tridium.ddf.comm.multipleTransaction" name="BDdfMultipleTransactionMgr"><description>BDdfMultipleTransactionMgr goes under BDdfMultipleTransactionCommunicator in the Niagara AX&#xa; Nav tree.</description></class>
<class packageName="com.tridium.ddf" name="BDdfNetwork"><description>Subclassing this class makes it easy for drivers add a network to the Niagara AX framework.</description></class>
<class packageName="com.tridium.ddf.comm.defaultComm" name="BDdfNullCommunicator"><description>BDdfNullCommunicator is a place holder for components, such as DdfDevices on behalf of&#xa; which Niagara AX must communicate through another component (such as an DdfNetwork).</description></class>
<class packageName="com.tridium.ddf.comm.defaultComm" name="BDdfNullReceiver"><description>BDdfNullReceiver - This is an empty receiver used to fill frozen&#xa; slots on BDdfCommunicator.</description></class>
<class packageName="com.tridium.ddf.comm.defaultComm" name="BDdfNullTransactionMgr"><description>BDdfNullTransactionMgr - This is an empty transaction manager used to fill frozen&#xa; slots on BDdfCommunicator.</description></class>
<class packageName="com.tridium.ddf.comm.defaultComm" name="BDdfNullTransmitter"><description>BDdfNullTransmitter - This is an empty transmitter to fill&#xa; the transmitter slot of the BDdfCommunicator.</description></class>
<class packageName="com.tridium.ddf.comm.defaultComm" name="BDdfNullUnsolicitedMgr"><description>This is an empty unsolicited mgr used to fill an empty slot&#xa; on the BDdfCommunicator.</description></class>
<class packageName="com.tridium.ddf.identify" name="BDdfPingParams"><description>This class is a convenience for developers who wish&#xa; to define a set of ping parameters.</description></class>
<class packageName="com.tridium.ddf.comm.req" name="BDdfPingRequest"><description>This is a default, base class that implements BIDdfPingRequest.</description></class>
<class packageName="com.tridium.ddf" name="BDdfPointDeviceExt"><description>The Ddf Point Device Ext makes use of the ddf driver&#xa; framework to automatically provide a fully-functional&#xa; default behavior.</description></class>
<class packageName="com.tridium.ddf.discover" name="BDdfPointDiscoveryLeaf"><description>Driver developers should extend this class and redefine the&#xa; default values of the pointId, readParameters, and writeParameters&#xa; and make them return instances that are the same type as those on&#xa; their driver&#x27;s proxy ext.</description></class>
<class packageName="com.tridium.ddf" name="BDdfPointFolder"></class>
<class packageName="com.tridium.ddf.poll" name="BDdfPollGroup"><description>The BDdfPollGroup objects poll on behalf of a group of related BIDdfPollable objects that can&#xa; be retrieved in the response to a single, ddf poll request.</description></class>
<class packageName="com.tridium.ddf.poll" name="BDdfPollScheduler"><description>This is the default poll scheduler for the developer driver&#xa; framework.</description></class>
<class packageName="com.tridium.ddf.poll" name="BDdfPollableWrapper"><description>The BDdfPollScheduler uses this class to wrap a BIDdfPollable&#xa; before passing it to the BDdfPollScheduler&#x27;s super.subscribe&#xa; method.</description></class>
<class packageName="com.tridium.ddf.point" name="BDdfProxyExt"><description>Drivers that build off of the ddf should&#xa; provide at least one proxy extension class that extends this&#xa; class.</description></class>
<class packageName="com.tridium.ddf.comm.req" name="BDdfRawTransmitRequest"><description>This request is used to directly transmit an array of bytes&#xa; onto the driver&#x27;s field-bus.</description></class>
<class packageName="com.tridium.ddf.identify" name="BDdfReadParams"><description>This class is a convenience for developers who wish&#xa; to define a set of read parameters.</description></class>
<class packageName="com.tridium.ddf.comm.req" name="BDdfReadRequest"><description>This is a default, base class that implements BIDdfReadRequest.</description></class>
<class packageName="com.tridium.ddf.comm.defaultComm" name="BDdfReceiver"><description>BDdfReceiver - Provides a default implementation.</description></class>
<class packageName="com.tridium.ddf.comm.defaultComm" name="BDdfReceiver.DdfReceiveFrame"><description>DdfReceiveFrame is the class of the IDdfDataFrame object that is returned by&#xa; the default implementation of the safeDdfReceiveFrame method on the outer&#xa; instance.</description></class>
<class packageName="com.tridium.ddf.comm.req" name="BDdfRequest"><description>This is a default, base class that implements BIDdfRequest.</description></class>
<class packageName="com.tridium.ddf.comm.rsp" name="BDdfResponse"><description>Each request that driver developers define need to return a response&#xa; from the request&#x27;s processReceive method.</description></class>
<class packageName="com.tridium.ddf.clock" name="BDdfScheduler"><description>This class is a BSingleton whose INSTANCE provides a subset&#xa; of the functionality of that standard Niagara AX Clock.schedule.</description></class>
<class packageName="com.tridium.ddf.clock" name="BDdfScheduler.DdfSchedulerThread"><description>This class implements the BDdfScheduler&#x27;s own thread of execution.</description></class>
<class packageName="com.tridium.ddf.comm.singleTransaction" name="BDdfSingleTransactionCommunicator"><description>BDdfSingleTransactionCommunicator - This is the override point for&#xa; communicators that use a master-slave style protocol.</description></class>
<class packageName="com.tridium.ddf.comm.singleTransaction" name="BDdfSingleTransactionMgr"><description>/**&#xa; BDdfSingleTransactionMgr - This is an override point for&#xa; transaction managers on communicators that use a master-slave style protocol.</description></class>
<class packageName="com.tridium.ddf.comm.defaultComm" name="BDdfTransactionMgr"><description>BDdfTransactionMgr - Goes with BDdfCommunicator, BDdfTransmitter, and BDdfReceiver&#xa;&#xa; Instead of extending this class directly, there are two reasonable subclasses that might&#xa; be a better choice: BDdfMultipleTransactionMgr and BDdfSingleTransactionMgr</description></class>
<class packageName="com.tridium.ddf.comm.defaultComm" name="BDdfTransmitter"><description>This is the main override point for a custom&#xa; transmitter that is not a serial, Tcp/Ip, nor&#xa; Udp/Ip transmitter.</description></class>
<class packageName="com.tridium.ddf.comm.defaultComm" name="BDdfUnsolicitedMgr"><description>This is the base override point for a custom unsolicited&#xa; message processor.</description></class>
<class packageName="com.tridium.ddf" name="BDdfWorker"><description>This is a default implementation of BWorker that uses&#xa; and infinite length queue, bound only by available memory&#xa; in the station, to process items.</description></class>
<class packageName="com.tridium.ddf.comm.req" name="BDdfWriteRequest"><description>This is the default base class that implements BIDdfWriteRequest.</description></class>
<class packageName="com.tridium.ddf.identify" name="BIDdfAutoParams" category="interface"><description>This is fundamental to developer driver framework&#x27;s automatic implementation of&#xa; the point-auto features (this is when an end-use right-clicks a&#xa; driver&#x27;s control point with proxy ext and chooses auto or emergency&#xa; auto, when the point does not have a fall-back value or any other logic&#xa; linked to its priority input properties.</description></class>
<class packageName="com.tridium.ddf.comm" name="BIDdfCommunicating" category="interface"><description>Components such as subclasses of BDdfDevice or BDdfNetwork implement this if they require&#xa; their own personal BDdfCommunicator for communication to their corresponding foreign&#xa; hardware.</description></class>
<class packageName="com.tridium.ddf.comm" name="BIDdfCommunicator" category="interface"><description>The BIDdfCommunicator is fundamtental to the developer driver framework.</description></class>
<class packageName="com.tridium.ddf.comm.req" name="BIDdfCustomRequest" category="interface"><description>The driver developer should make request message&#xa; types implement this method if the driver developer&#xa; wishes to perform his or her own special processing&#xa; on the response.</description></class>
<class packageName="com.tridium.ddf.discover" name="BIDdfDeviceDiscoveryLeaf" category="interface"><description>BIDdfDeviceDiscoveryLeaf objects define both, the deviceId and pingParameters&#xa; of a device.</description></class>
<class packageName="com.tridium.ddf.identify" name="BIDdfDiscoverParams" category="interface"><description>The BDdfAutoDiscoveryJob makes use of this class to allow&#xa; it to automatically, yet generically loop through all possible&#xa; combinations of a driver&#x27;s discovery request in order to&#xa; retrieve all discovery objects for a driver&#x27;s Ddf Device&#xa; Manager or Ddf Point Manager</description></class>
<class packageName="com.tridium.ddf.comm.req" name="BIDdfDiscoverRequest" category="interface"><description>Requests such as ping requests and read requests should consider&#xa; implementing this interface as well.</description></class>
<class packageName="com.tridium.ddf.comm.rsp" name="BIDdfDiscoverResponse" category="interface"><description>Responses such as ping responses and read responses should consider&#xa; implementing this interface as well.</description></class>
<class packageName="com.tridium.ddf.discover" name="BIDdfDiscoveryGroup" category="interface"><description>Ddf discovery groups appear in the discovery list of&#xa; the Ddf Device Manager or Ddf Point Manager.</description></class>
<class packageName="com.tridium.ddf.discover" name="BIDdfDiscoveryHost" category="interface"><description>Parent components built on the ddf that&#xa; have a user interface manager associated with them (the&#xa; Ddf Device Manager and Ddf Point Manager are examples&#xa; of user interface managers) and whose user interface&#xa; managers providessupport for a discovery (in other words,&#xa; a &#x22;Discover&#x22; button) should implement this interface.</description></class>
<class packageName="com.tridium.ddf.discover" name="BIDdfDiscoveryLeaf" category="interface"><description>Discovery leaves appear in the discovery list on the&#xa; Ddf Device Manager or Ddf Point Manager.</description></class>
<class packageName="com.tridium.ddf.discover" name="BIDdfDiscoveryObject" category="interface"><description>This is the common ancestor of the Niagara AX types that appear&#xa; in the discovery list of the Ddf Device Manager and Ddf Point&#xa; Manager.</description></class>
<class packageName="com.tridium.ddf.comm.rsp" name="BIDdfMultiFrameResponse" category="interface"></class>
<class packageName="com.tridium.ddf.comm.multipleTransaction" name="BIDdfMultipleTransactionMgr" category="interface"><description>BIDdfMultipleTransactionMgr classes that would implement BIDdfTransactionMgr&#xa; and handle multiple outstanding messages on the fieldbus should implement this&#xa; interface instead.</description></class>
<class packageName="com.tridium.ddf.identify" name="BIDdfPingParams" category="interface"><description>This is fundamental to developer driver framework&#x27;s auto-ping and auto-discovery&#xa; features.</description></class>
<class packageName="com.tridium.ddf.comm.req" name="BIDdfPingRequest" category="interface"><description>Driver developers who want ddf driver support&#xa; for ping requests but do not wish to extend&#xa; BDdfPingRequest may implement this interface&#xa; instead.</description></class>
<class packageName="com.tridium.ddf.discover" name="BIDdfPointDiscoveryLeaf" category="interface"><description>Discovery leaves that appear in the Ddf Point Manager should&#xa; implement this interface.</description></class>
<class packageName="com.tridium.ddf.poll" name="BIDdfPollScheduler" category="interface"><description>The BDdfPollScheduler implements this interface.</description></class>
<class packageName="com.tridium.ddf.poll" name="BIDdfPollable" category="interface"><description>If you are designing a driver that extends the ddf and you would like&#xa; to introduce some data to the Niagara AX framework, then you should define some classes&#xa; that implement the BIDdfPollable interface.</description></class>
<class packageName="com.tridium.ddf.identify" name="BIDdfReadParams" category="interface"><description>This is fundamental to developer driver framework&#x27;s auto-poll and auto-discovery&#xa; features.</description></class>
<class packageName="com.tridium.ddf.comm.req" name="BIDdfReadRequest" category="interface"><description>Driver developers who wish to declare a request that will&#xa; retrieve one or more data point values should implement this&#xa; method or extend BDdfReadRequest.</description></class>
<class packageName="com.tridium.ddf.comm.rsp" name="BIDdfReadResponse" category="interface"><description>Each **read** request that driver developers define need to return&#xa; a response from the request&#x27;s processReceive method.</description></class>
<class packageName="com.tridium.ddf.comm" name="BIDdfReceiver" category="interface"><description>The BIDdfReceiver receives frames for the BIDdfCommunicator.</description></class>
<class packageName="com.tridium.ddf.comm.req" name="BIDdfRequest" category="interface"><description>BIDdfRequest represents serializable data to be transmitted out of a BDdfCommunicator&#xa; in a station.</description></class>
<class packageName="com.tridium.ddf.comm.rsp" name="BIDdfResponse" category="interface"><description>Each request that driver developers define need to return a response&#xa; from the request&#x27;s processReceive method.</description></class>
<class packageName="com.tridium.ddf.comm.singleTransaction" name="BIDdfSingleTransactionMgr" category="interface"><description>BIDdfSingleTransactionMgr classes that would implement BIDdfTransactionMgr&#xa; but only allow single outstanding messages on the fieldbus at a time should implement this&#xa; interface instead.</description></class>
<class packageName="com.tridium.ddf.comm" name="BIDdfTransactionMgr" category="interface"><description>The BIDdfTransactionMgr matches up received data frames to transmitted&#xa; requests or to the BIDdfUnsolicitedMgr.</description></class>
<class packageName="com.tridium.ddf.comm.rsp" name="BIDdfTransmitAckResponse" category="interface"><description>Ddf responses that need to have data transmitted as a&#xa; result of the driver receiving the response should implement&#xa; this interface.</description></class>
<class packageName="com.tridium.ddf.comm" name="BIDdfTransmitter" category="interface"><description>The BDdfCommunicator uses an instance of this to transmit a BIDdfRequest.</description></class>
<class packageName="com.tridium.ddf.comm" name="BIDdfUnsolicitedMgr" category="interface"><description>BIDdfUnsolicitedMgr -Niagara AX objects that process unsolicited&#xa; received frames should implement this interface and be added as a&#xa; property to the driver&#x27;s communicator.</description></class>
<class packageName="com.tridium.ddf.point" name="BIDdfWritable" category="interface"><description>Driver components that are writable should implement this interface.</description></class>
<class packageName="com.tridium.ddf.identify" name="BIDdfWriteParams" category="interface"><description>This is fundamental to the developer driver framework&#x27;s auto-write features.</description></class>
<class packageName="com.tridium.ddf.comm.req" name="BIDdfWriteRequest" category="interface"><description>Drivers should create a class that implements this interface for each&#xa; message in their driver&#x27;s protocol that is capable of updating a value&#xa; or setting a data value in some field equipment.</description></class>
<class packageName="com.tridium.ddf" name="DdfAgentInfo"><description>This is used to rename the Ddf Device Manager and the Ddf Point Manager based on the name&#xa; of the driver that is built off of this framework.</description></class>
<class packageName="com.tridium.ddf.discover.auto" name="DdfAutoDiscoveryLexicon"><description>This class contains methods and attributes that help clean up other areas&#xa; of the source code that are used to display localized text.</description></class>
<class packageName="com.tridium.ddf.comm.defaultComm" name="DdfDefaultCommLexicon"><description>This class contains methods and attributes that help clean up other areas&#xa; of the source code that are used to display localized text.</description></class>
<class packageName="com.tridium.ddf.comm.req.util" name="DdfDiscoveryRequestUtil"><description>Processes discovery requests on behalf of the transaction&#xa; manager.</description></class>
<class packageName="com.tridium.ddf" name="DdfFacets"><description>This class provides utility methods to check if a particular property&#xa; is defined with special slotfacets that allow this framework to automatically&#xa; provide the user interface for the driver&#x27;s device manager and point manager.</description></class>
<class packageName="com.tridium.ddf" name="DdfLexicon"><description>The attributes and methods of this class help clean up the source code&#xa; in other locations that is required to localize text.</description></class>
<class packageName="com.tridium.ddf.comm.req.util" name="DdfPingRequestUtil"><description>Processes ping transactions on behalf of the transaction&#xa; manager.</description></class>
<class packageName="com.tridium.ddf.point" name="DdfPointLexicon"><description>This class contains methods and attributes that help clean up other areas&#xa; of the source code that are used to display localized text.</description></class>
<class packageName="com.tridium.ddf.comm.req.util" name="DdfReadRequestUtil"><description>Processes read requests on behalf of the transaction manager.</description></class>
<class packageName="com.tridium.ddf.comm.req.util" name="DdfRequestLexicon"><description>This class defines various attributes and methods that allows the source&#xa; code in other locations to remain relatively clean while providing&#xa; localized text.</description></class>
<class packageName="com.tridium.ddf.comm.req.util" name="DdfRequestUtil"><description>This class contains methods that allow the communicator to process&#xa; communication errors, responses, and timeouts in an orderly fashion.</description></class>
<class packageName="com.tridium.ddf.comm.rsp" name="DdfResponseException" category="exception"><description>Each request that driver developers define need to return a response&#xa; from the request&#x27;s processReceive method.</description></class>
<class packageName="com.tridium.ddf.clock" name="DdfSchedulerTicket"><description>The BDdfScheduler uses this class to help it schedule actions&#xa; on behalf of this framework.</description></class>
<class packageName="com.tridium.ddf.comm.req.util" name="DdfWriteRequestUtil"></class>
<class packageName="com.tridium.ddf.comm" name="IDdfDataFrame" category="interface"><description>A BIDdfReceiver returns an object that implements the IDdfDataFrame&#xa; interface from the BIDdfReceiver&#x27;s receiveFrame method.</description></class>
<class packageName="com.tridium.ddf.discover" name="IDdfDiscoverer" category="interface"><description>The &#x27;ddf auto discovery job&#x27; passes an instance of this class&#xa; to each discovery request just after instantiating each&#xa; discovery request.</description></class>
<class packageName="com.tridium.ddf" name="IDdfFacetConst" category="interface"><description>These constants help driver developers when declaring&#xa; properties in slotomatic statements to customize the&#xa; developer device manager and developer point manager.</description></class>
<class packageName="com.tridium.ddf.comm.req" name="IDdfPingable" category="interface"><description>IDdfPingable is the interface that ddf values implement if they are&#xa; pingable (such as some devices and networks that extend BDdfNetwork and BDdfDevice)</description></class>
<class packageName="com.tridium.ddf.comm.req" name="IDdfReadable" category="interface"><description>IDdfReadable is the interface that ddf BValue&#x27;s implement if they are&#xa; readable(such as some proxy ext&#x27;s) that extend from the Niagara Ax ddf.</description></class>
<class packageName="com.tridium.ddf.comm.rsp" name="IDdfTransmitAckResponse" category="interface"><description>A DdfResponseException may implement this method.</description></class>
<class packageName="com.tridium.ddf.comm.req" name="IDdfWritable" category="interface"><description>IDdfWritable is the interface that developer driver BValue&#x27;s implement if they are&#xa; writable (such as some proxy ext&#x27;s) that extend from the Niagara Ax Developer Driver Framework.</description></class>
</module>
</bajadoc>
