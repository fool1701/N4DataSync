<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="devDriver" runtimeProfile="rt" qualifiedName="com.tridium.ddf.point.BIDdfWritable" name="BIDdfWritable" packageName="com.tridium.ddf.point" public="true" interface="true" abstract="true" category="interface">
<description>
Driver components that are writable should implement this interface.&#xa;&#xa; If your driver provides a proxy extension that extends BDdfProxyExt then&#xa; you probably do not need to implement this directly.
</description>
<tag name="@author">lperkins</tag>
<implements>
<type class="javax.baja.sys.BInterface"/>
</implements>
<implements>
<type class="com.tridium.ddf.comm.req.IDdfWritable"/>
</implements>
<!-- com.tridium.ddf.point.BIDdfWritable.getWriteRequestType() -->
<method name="getWriteRequestType"  public="true" abstract="true">
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- com.tridium.ddf.point.BIDdfWritable.getDdfCommunicator() -->
<method name="getDdfCommunicator"  public="true" abstract="true">
<description>
Indicates the BDdfCommunicator that will send and/or receive field-bus messages for this object. This&#xa; could vary widely based on the communication medium. For serial drivers, the ddf communicator object is&#xa; usually placed on the ddf network. For tcp driver, the ddf communicator object is typically placed on&#xa; the ddf network if the network acts as a gateway, or on the ddf device if the field device has its own&#xa; i.p. address.
</description>
<return>
<type class="com.tridium.ddf.comm.BIDdfCommunicator"/>
</return>
</method>

<!-- com.tridium.ddf.point.BIDdfWritable.makeWriteRequest() -->
<method name="makeWriteRequest"  public="true" abstract="true">
<description>
Instances need to construct an instance of BIDdfWriteRequest to be placed on the ddf&#xa; communicator. The ddf communicator will make &#x27;transmit&#x27; the serialized data from this&#xa; BIDdfWriteRequest onto the field-bus and make call-backs to this BIDdfWriteRequest object&#xa; when the response is receive or timed out.
</description>
<return>
<type class="com.tridium.ddf.comm.req.BIDdfWriteRequest"/>
</return>
</method>

<!-- com.tridium.ddf.point.BIDdfWritable.makeAutoRequest() -->
<method name="makeAutoRequest"  public="true" abstract="true">
<description>
Instances need to construct an instance of BIDdfWriteRequest to be placed on the ddf&#xa; communicator, if they wish to have a special version of the write request transmitted whenever&#xa; the point is &#x22;auto&#x27;ed&#x22; from within Niagara. The ddf communicator will  &#x27;transmit&#x27; the serialized&#xa; data from this BIDdfWriteRequest onto the field-bus and make call-backs to this BIDdfWriteRequest object&#xa; when the response is receive or timed out.&#xa;&#xa; If not special handling is desired when points are &#x22;auto&#x27;ed&#x22; then this method can return null or&#xa; empty array.
</description>
<return>
<type class="com.tridium.ddf.comm.req.BIDdfWriteRequest"/>
</return>
</method>

<!-- com.tridium.ddf.point.BIDdfWritable.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
