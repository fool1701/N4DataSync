<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="devDriver" runtimeProfile="rt" qualifiedName="com.tridium.ddf.clock.BDdfScheduler" name="BDdfScheduler" packageName="com.tridium.ddf.clock" public="true">
<description>
This class is a BSingleton whose INSTANCE provides a subset&#xa; of the functionality of that standard Niagara AX Clock.schedule.&#xa; &#xa; The benefit of using this INSTANCE instead of Clock.schedule&#xa; is that this INSTANCE uses its own thread and reduces the&#xa; possibility of applications or appliances scheduling any actions&#xa; on the same thread that the Ddf transaction manager relies&#xa; heavily upon.
</description>
<tag name="@author">lperkins</tag>
<extends>
<type class="javax.baja.sys.BSingleton"/>
</extends>
<annotation><type class="javax.baja.nre.annotations.NiagaraSingleton"/>
</annotation>
<!-- com.tridium.ddf.clock.BDdfScheduler.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- com.tridium.ddf.clock.BDdfScheduler.schedule(javax.baja.sys.BComponent, javax.baja.sys.BRelTime, javax.baja.sys.Action, javax.baja.sys.BValue) -->
<method name="schedule"  public="true" synchronized="true">
<description>
This is convenience method that calls the other &#x27;schedule&#x27; method that takes a long, relMillis&#xa; as an argument
</description>
<parameter name="host">
<type class="javax.baja.sys.BComponent"/>
<description>
a component on which to invoke an action in some amount of time
</description>
</parameter>
<parameter name="relTime">
<type class="javax.baja.sys.BRelTime"/>
<description>
the BRelTime amount of time in which to invoke the action
</description>
</parameter>
<parameter name="action">
<type class="javax.baja.sys.Action"/>
<description>
the action to invoke on the component
</description>
</parameter>
<parameter name="arg">
<type class="javax.baja.sys.BValue"/>
<description>
the argument to pass to action that will be invoked on the component (null is acceptable&#xa; if the action takes no arguments)
</description>
</parameter>
<return>
<type class="javax.baja.sys.Clock$Ticket"/>
<description>
the Ticket for the scheduled item
</description>
</return>
</method>

<!-- com.tridium.ddf.clock.BDdfScheduler.schedule(javax.baja.sys.BComponent, long, javax.baja.sys.Action, javax.baja.sys.BValue) -->
<method name="schedule"  public="true" synchronized="true">
<description>
This schedules an action to be invoked on a given host after a relative amount of time has passed.&#xa; &#xa; The action is invoked on the INSTANCE&#x27;s own scheduler thread and is therefore, safe from other&#xa; developers that might otherwise call the standard Niagara AX Clock.schedule method.&#xa; &#xa; The caller needs to ensure that the action is implemented to return quickly. Any of the action&#x27;s&#xa; work needs to be performed on another thread. For example, the BDdfTransactionMgr does this by placing a&#xa; work item onto its own transaction processing thread. Its own transaction processing thread&#xa; performs the real work.
</description>
<parameter name="host">
<type class="javax.baja.sys.BComponent"/>
<description>
a component on which to invoke an action in some amount of time
</description>
</parameter>
<parameter name="relMillis">
<type class="long"/>
</parameter>
<parameter name="action">
<type class="javax.baja.sys.Action"/>
<description>
the action to invoke on the component
</description>
</parameter>
<parameter name="arg">
<type class="javax.baja.sys.BValue"/>
<description>
the argument to pass to action that will be invoked on the component (null is acceptable&#xa; if the action takes no arguments)
</description>
</parameter>
<return>
<type class="javax.baja.sys.Clock$Ticket"/>
<description>
the Ticket for the scheduled item
</description>
</return>
</method>

<!-- com.tridium.ddf.clock.BDdfScheduler.cancelTicket(com.tridium.ddf.clock.DdfSchedulerTicket) -->
<method name="cancelTicket"  protected="true" synchronized="true">
<description>
This method is called by the DdfSchedulerTicket.cancel method. This method&#xa; removes the ticket from the outstanding tickets.&#xa; &#xa; Access is restricted to &#x27;protected&#x27; access. To cancel a ticket call&#xa; the &#x27;cancel&#x27; method on the ticket itself. The ticket&#x27;s &#x27;cancel&#x27; method calls&#xa; this method to release the ticket&#x27;s resources to the garbage collector.
</description>
<parameter name="ticketToCancel">
<type class="com.tridium.ddf.clock.DdfSchedulerTicket"/>
<description/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddf.clock.BDdfScheduler.check() -->
<method name="check"  protected="true" synchronized="true">
<description>
Invokes the action on all tickets whose time has come, or passed, to be processed. All such&#xa; tickets are removed from the internal &#x27;outstandingTickets&#x27; list.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddf.clock.BDdfScheduler.outerRun() -->
<method name="outerRun"  protected="true">
<description>
This method is called from the &#x27;run&#x27; method of the BDdfScheduler&#x27;s&#xa; own thread.
</description>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.InterruptedException"/>
<description/>
</throws>
</method>

<!-- com.tridium.ddf.clock.BDdfScheduler.INSTANCE -->
<field name="INSTANCE"  public="true" static="true" final="true">
<type class="com.tridium.ddf.clock.BDdfScheduler"/>
<description/>
</field>

<!-- com.tridium.ddf.clock.BDdfScheduler.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
