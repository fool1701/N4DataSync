<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="devDriver" runtimeProfile="rt" qualifiedName="com.tridium.ddf.identify.BDdfIdParams" name="BDdfIdParams" packageName="com.tridium.ddf.identify" public="true">
<description>
This interface acts as the fundamental glue between&#xa; Niagara AX components and developer driver framework components.&#xa;&#xa; For example, a device or proxy is associated with a ddf driver&#xa; request through a special subclass of this that&#xa; we refer to as the &#x22;deviceId&#x22;.&#xa;&#xa; A device is associated with a ddf driver ping request through&#xa; two special subclasses of this that we refer to as the &#x22;deviceId&#x22; and&#xa; the &#x22;pingParameters&#x22;.&#xa;&#xa; For example, a proxy extension is associated with a&#xa; ddf read request and write request through three&#xa; special sub-classes of this that we refer to as the&#xa; &#x22;deviceId&#x22;, &#x22;readParameters&#x22;, and the &#x22;writeParameters&#x22;.&#xa;&#xa; The toString method of this class returns the value of the first&#xa; property that the driver developer adds to his or her subclass.
</description>
<tag name="@author">lperkins</tag>
<extends>
<type class="javax.baja.sys.BStruct"/>
</extends>
<implements>
<type class="com.tridium.ddf.IDdfFacetConst"/>
</implements>
<!-- com.tridium.ddf.identify.BDdfIdParams() -->
<constructor name="BDdfIdParams" public="true">
<description/>
</constructor>

<!-- com.tridium.ddf.identify.BDdfIdParams.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- com.tridium.ddf.identify.BDdfIdParams.toString(javax.baja.sys.Context) -->
<method name="toString"  public="true">
<description/>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- com.tridium.ddf.identify.BDdfIdParams.isExisting(com.tridium.ddf.identify.BDdfIdParams, javax.baja.sys.Context) -->
<method name="isExisting"  public="true">
<description>
Determines if this instance of BDdfIdParams is an existing representation&#xa; of the given instance of BDdfIdParams. This is presently used by the Ddf&#xa; Device and Ddf Point Managers to determine whether or not to gray out a&#xa; discovery object&#x27;s icon.
</description>
<parameter name="other">
<type class="com.tridium.ddf.identify.BDdfIdParams"/>
<description>
another instance of the class as this object
</description>
</parameter>
<parameter name="c">
<type class="javax.baja.sys.Context"/>
<description>
a context to allow for future flexibility in the use&#xa; of this method.
</description>
</parameter>
<return>
<type class="boolean"/>
<description>
true if the given instance is a representation of the current&#xa; instance. This is almost an &#x27;equivalent&#x27; check. In fact, the default&#xa; implementation calls the baja &#x27;equivalent&#x27; method from BComplex. However,&#xa; driver developers may override this and return true or false based on&#xa; the driver&#x27;s own criteria. This is apparent in the device/point manager&#xa; where the icon for a discovery object is grayed out if a corresponding&#xa; database object exists.
</description>
</return>
</method>

<!-- com.tridium.ddf.identify.BDdfIdParams.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
