<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="devDriver" runtimeProfile="rt" qualifiedName="com.tridium.ddf.identify.BIDdfWriteParams" name="BIDdfWriteParams" packageName="com.tridium.ddf.identify" public="true" interface="true" abstract="true" category="interface">
<description>
This is fundamental to the developer driver framework&#x27;s auto-write features.&#xa;&#xa; The driver developer should:&#xa;&#xa; 1.) Define a class that extends BDdfIdParams and implements this interface.&#xa;&#xa; 2.) Define a proxy ext class that extends BDdfProxyExt, if a suitable&#xa; one is not already defined. It is certainly valid to re-use a proxy ext&#xa; class created to take advantage of the corresponding BIDdfReadParams.&#xa;&#xa; 3.) Define a request class that extends BDdfRequest and implements&#xa; BIDdfWriteRequest (or that extends BDdfWriteRequest for convenience).&#xa;&#xa; 4.) Re-define the writeParameters property on the request created in step&#xa; three and make the default value be an instance of the class that&#xa; implements this interface.&#xa;&#xa; 5.) Re-define the writeParameters property on the proxy ext created in step&#xa; two and make the default value be an instance of the class that&#xa; implements this interface.&#xa;&#xa; =========================================================&#xa; To write the value of a control point in a device in a&#xa; driver that is built on the ddf, the&#xa; ddf:&#xa;&#xa; 1.)Calls getWriteParameters on the proxy extension.&#xa; (getWriteParameters returns an instance of this interface)&#xa;&#xa; 2.)Calls getWriteRequestType on the instance of this&#xa; interface that it received in step 1.&#xa;&#xa; 3.)Instantiates an instance of the write request class&#xa; that corresponds to the write request type that the&#xa; ddf received in step 2.&#xa;&#xa; 4.)Calls setWriteParameters on the write request and passes&#xa; in a copy of what it received back in step 1.&#xa;&#xa; 5.)Calls setPointId on the write request and passes in a&#xa; copy of the BDdfIdParams object that the proxy&#x27;s&#xa; getPointId method returns.&#xa;&#xa; 6.)Calls setDeviceId on the write request and passes in a&#xa; copy of the BDdfIdParams object that the proxy&#x27;s&#xa; device&#x27;s getDeviceId method returns.
</description>
<tag name="@author">lperkins</tag>
<tag name="@see">com.tridium.ddf.comm.req.BDdfWriteRequest</tag>
<tag name="@see">com.tridium.ddf.comm.req.BIDdfWriteRequest</tag>
<tag name="@see">com.tridium.ddf.point.BDdfProxyExt</tag>
<implements>
<type class="javax.baja.sys.BInterface"/>
</implements>
<implements>
<type class="com.tridium.ddf.IDdfFacetConst"/>
</implements>
<!-- com.tridium.ddf.identify.BIDdfWriteParams.getWriteRequestType() -->
<method name="getWriteRequestType"  public="true" abstract="true">
<description>
The implementing class needs to return the Type that&#xa; represents the BIDdfWriteRequest from the driver whose&#xa; writeParameters can be an instance of the implementing&#xa; class.&#xa;&#xa; This method must not return null!&#xa;&#xa; This is fundamental to the developer driver framwork&#x27;s auto-write feature that is&#xa; built into BDdfProxyExt
</description>
<return>
<type class="javax.baja.sys.Type"/>
<description>
review method description.
</description>
</return>
</method>

<!-- com.tridium.ddf.identify.BIDdfWriteParams.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
