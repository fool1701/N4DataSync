<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="devDriver" runtimeProfile="rt" qualifiedName="com.tridium.ddf.identify.BDdfDiscoverParams" name="BDdfDiscoverParams" packageName="com.tridium.ddf.identify" public="true" abstract="true">
<description>
The BDdfAutoDiscoveryJob makes use of this class to allow&#xa; it to automatically, yet generically loop through all possible&#xa; combinations of a driver&#x27;s discovery request in order to&#xa; retrieve all discovery objects for a driver&#x27;s Ddf Device&#xa; Manager or Ddf Point Manager&#xa;&#xa; This class extends BDdfIdParams and implements&#xa; BIDdfDiscoverParams for convenience. You can make it so that a&#xa; different subclass of BDdfIdParams can be used in&#xa; the discovery process by making it implement&#xa; BIDdfDiscoverParams instead of extending this class.
</description>
<tag name="@author">lperkins</tag>
<extends>
<type class="com.tridium.ddf.identify.BDdfIdParams"/>
</extends>
<implements>
<type class="com.tridium.ddf.identify.BIDdfDiscoverParams"/>
</implements>
<!-- com.tridium.ddf.identify.BDdfDiscoverParams() -->
<constructor name="BDdfDiscoverParams" public="true">
<description/>
</constructor>

<!-- com.tridium.ddf.identify.BDdfDiscoverParams.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- com.tridium.ddf.identify.BDdfDiscoverParams.getDiscoverRequestTypes() -->
<method name="getDiscoverRequestTypes"  public="true">
<description>
This method is included for future extensibility. We recommend&#xa; that the developer return an array of size one, with the one item&#xa; being the same Type that is returned by the getDdfDiscoverRequestType&#xa; method.&#xa;&#xa; This method is used in the driver&#x27;s auto-discovery feature. It allows&#xa; the auto-discovery mechanism to transmit multiple different discover messsages&#xa; for the same hypothetical discovery i.d. We envision that the&#xa; multiple flavors of discover messages might be used for different sub-device&#xa; types.
</description>
<return>
<type class="javax.baja.sys.Type" dimension="1"/>
<description>
review method description.
</description>
</return>
</method>

<!-- com.tridium.ddf.identify.BDdfDiscoverParams.countTo(com.tridium.ddf.identify.BIDdfDiscoverParams) -->
<method name="countTo"  public="true">
<description>
Generically implements this method by &#x27;for&#x27; looping from this&#xa; instance to the given value, counting the number of loop iterations,&#xa; and returning that value. This is used to allow the ddf automatic&#xa; discovery mechanism to display progress.
</description>
<tag name="@see">BIDdfDiscoverParams</tag>
<parameter name="toDiscoverId">
<type class="com.tridium.ddf.identify.BIDdfDiscoverParams"/>
</parameter>
<return>
<type class="int"/>
</return>
</method>

<!-- com.tridium.ddf.identify.BDdfDiscoverParams.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
