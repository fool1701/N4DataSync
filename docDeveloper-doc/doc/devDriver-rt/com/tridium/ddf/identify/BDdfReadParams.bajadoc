<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="devDriver" runtimeProfile="rt" qualifiedName="com.tridium.ddf.identify.BDdfReadParams" name="BDdfReadParams" packageName="com.tridium.ddf.identify" public="true" abstract="true">
<description>
This class is a convenience for developers who wish&#xa; to define a set of read parameters. To read the value&#xa; of a control point in a device in a driver that is&#xa; built on the ddf:&#xa;&#xa; 1.)Calls getReadParameters on the proxy extension.&#xa; (getReadParameters returns an instance of this class)&#xa;&#xa; 2.)Calls getReadRequestType on the instance of this&#xa; class that it received in step 1.&#xa;&#xa; 3.)Instantiates an instance of the read request class&#xa; that corresponds to the read request type that the&#xa; ddf received in step 2.&#xa;&#xa; 4.)Calls setReadParameters on the read request and passes&#xa; in a copy of what it received back in step 1.&#xa;&#xa; 5.)Calls setPointId on the read request and passes in a&#xa; copy of the BDdfIdParams object that the proxy&#x27;s&#xa; getPointId method returns.&#xa;&#xa; 6.)Calls setDeviceId on the read request and passes in a&#xa; copy of the BDdfIdParams object that the proxy&#x27;s&#xa; device&#x27;s getDeviceId method returns.
</description>
<tag name="@see">BIDdfPingParams</tag>
<tag name="@author">lperkins</tag>
<extends>
<type class="com.tridium.ddf.identify.BDdfIdParams"/>
</extends>
<implements>
<type class="com.tridium.ddf.identify.BIDdfReadParams"/>
</implements>
<!-- com.tridium.ddf.identify.BDdfReadParams() -->
<constructor name="BDdfReadParams" public="true">
<description/>
</constructor>

<!-- com.tridium.ddf.identify.BDdfReadParams.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- com.tridium.ddf.identify.BDdfReadParams.getReadRequestTypes() -->
<method name="getReadRequestTypes"  public="true">
<description/>
<return>
<type class="javax.baja.sys.Type" dimension="1"/>
</return>
</method>

<!-- com.tridium.ddf.identify.BDdfReadParams.groupWith(com.tridium.ddf.identify.BIDdfReadParams) -->
<method name="groupWith"  public="true">
<description>
The developer needs to implement this method and return true if&#xa; the given instance of BIDdfReadParams would read the same exact&#xa; item or items as the current instance of BIDdfReadParams. This&#xa; allows the ddf to &#x27;poll&#x27; multiple points from the same driver&#xa; protocol request in one communication transaction.
</description>
<parameter name="anotherProxyReadParams">
<type class="com.tridium.ddf.identify.BIDdfReadParams"/>
<description/>
</parameter>
<return>
<type class="boolean"/>
<description>
this default implementation returns true if the other&#xa; read parameters object is &#x27;equivalent&#x27; to this read parameters&#xa; objects. The Niagara AX &#x27;equivalent&#x27; method returns true if&#xa; both are the same type and all corresponding Niagara AX&#xa; property values are equal.
</description>
</return>
</method>

<!-- com.tridium.ddf.identify.BDdfReadParams.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
