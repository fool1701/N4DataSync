<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="devDriver" runtimeProfile="rt" qualifiedName="com.tridium.ddf.discover.BIDdfDiscoveryLeaf" name="BIDdfDiscoveryLeaf" packageName="com.tridium.ddf.discover" public="true" interface="true" abstract="true" category="interface">
<description>
Discovery leaves appear in the discovery list on the&#xa; Ddf Device Manager or Ddf Point Manager. Ddf discovery&#xa; leaves are not expandable in the discovery list. They&#xa; do not have any child entries under themselves.
</description>
<tag name="@author">lperkins</tag>
<implements>
<type class="com.tridium.ddf.discover.BIDdfDiscoveryObject"/>
</implements>
<!-- com.tridium.ddf.discover.BIDdfDiscoveryLeaf.getDiscoveryName() -->
<method name="getDiscoveryName"  public="true" abstract="true">
<description>
When a control point is added to the station from the Ddf&#xa; Point Manager, it is given this name by default (possibly&#xa; with a suffix to make it unique).
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- com.tridium.ddf.discover.BIDdfDiscoveryLeaf.getValidDatabaseTypes() -->
<method name="getValidDatabaseTypes"  public="true" abstract="true">
<description>
Descendants need to return an array of TypeInfo objects corresponding&#xa; to all valid Niagara Ax types for this discovery object. This is&#xa; important when the end-user clicks &#x27;Add&#x27; from the user interface for&#xa; the manager.&#xa;&#xa; For this discovery object, please  return a list of the types&#xa; which may be used to model it as a BComponent in the station&#xa; database. If the discovery object represents a device in your&#xa; driver then this method should return an array with size of&#xa; at least one, filled with TypeInfo&#x27;s that wrap the Niagara AX&#xa; TYPE&#x27;s for your driver&#x27;s device components.&#xa;&#xa; The type at index 0 in the array should be the type which&#xa; provides the best mapping.  Please return an empty array if the&#xa; discovery cannot be mapped.
</description>
<return>
<type class="javax.baja.registry.TypeInfo" dimension="1"/>
</return>
</method>

<!-- com.tridium.ddf.discover.BIDdfDiscoveryLeaf.getParent() -->
<method name="getParent"  public="true" abstract="true">
<description>
The discovery leaf should extend BComplex or at least behave as if&#xa; it does. For discoveries that are only one-level deep, the parent&#xa; of the discovery leaf will be the discovery folder that is under&#xa; the BIDdfDiscoveryHost or under the BDdfDiscoveryJob.&#xa;&#xa; If extending BComplex (and implementing BIDdfDiscoveryLeaf) or a&#xa; subclass of BComplex, the class will inherit this method automatically.
</description>
<return>
<type class="javax.baja.sys.BComplex"/>
</return>
</method>

<!-- com.tridium.ddf.discover.BIDdfDiscoveryLeaf.getPropertiesArray() -->
<method name="getPropertiesArray"  public="true" abstract="true">
<description>
The discovery leaf should extend BComplex or at least behave as if&#xa; it does. The properties on the discovery leaf are matched to the&#xa; properties on corresponding database components by means of&#xa; property introspection.&#xa;&#xa; If extending BComplex (and implementing BIDdfDiscoveryLeaf) or a&#xa; subclass of BComplex, the class will inherit this method automatically.
</description>
<return>
<type class="javax.baja.sys.Property" dimension="1"/>
</return>
</method>

<!-- com.tridium.ddf.discover.BIDdfDiscoveryLeaf.get(javax.baja.sys.Property) -->
<method name="get"  public="true" abstract="true">
<description>
The discovery leaf should extend BComplex or at least behave as if&#xa; it does.&#xa;&#xa; If extending BComplex (and implementing BIDdfDiscoveryLeaf) or a&#xa; subclass of BComplex, the class will inherit this method automatically.
</description>
<parameter name="p">
<type class="javax.baja.sys.Property"/>
</parameter>
<return>
<type class="javax.baja.sys.BValue"/>
</return>
</method>

<!-- com.tridium.ddf.discover.BIDdfDiscoveryLeaf.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
