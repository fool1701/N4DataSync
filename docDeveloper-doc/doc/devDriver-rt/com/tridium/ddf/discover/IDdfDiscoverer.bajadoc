<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="devDriver" runtimeProfile="rt" qualifiedName="com.tridium.ddf.discover.IDdfDiscoverer" name="IDdfDiscoverer" packageName="com.tridium.ddf.discover" public="true" interface="true" abstract="true" category="interface">
<description>
The &#x27;ddf auto discovery job&#x27; passes an instance of this class&#xa; to each discovery request just after instantiating each&#xa; discovery request.&#xa;&#xa; Components that perform the actual field-bus communication&#xa; for a discovery process should implement this interface or&#xa; have a nested class that implements this interface.&#xa;&#xa; When a component performs the actual field-bus communication,&#xa; it should do the following:&#xa;&#xa; 1.) Create an instance BIDdfDiscoveryRequest.&#xa;&#xa; 2.) Call setDiscovery on the BIDdfDiscoveryRequest and pass&#xa; in itself or an instance of a nested class that implements this&#xa; interface.&#xa;&#xa; 3.) Call communicate on its communicator and pass in the&#xa; BIDdfDiscoveryRequest&#xa;&#xa; 4.) The ddf will transmit the necessary bytes&#xa; onto the field-bus.&#xa;&#xa; 5A.) If the ddf receives back a discovery&#xa; response, then the developer driver frame work will call the&#xa; discoverOk on this object (the BIDdfDiscoveryRequest&#x27;s&#xa; discoverer) and pass in the discoveryObjects from the discovery&#xa; response.&#xa;&#xa; 5B.) If the ddf does not receive back a&#xa; discovery resposne, then the ddf will call&#xa; the discoveryFail method on this object (BIDdfDiscoveryRequest&#x27;s&#xa; discover).&#xa; BDdfAutoDiscoveryJob implements this interface.
</description>
<tag name="@author">lperkins</tag>
<implements>
<type class="com.tridium.ddf.IDdfFacetConst"/>
</implements>
<!-- com.tridium.ddf.discover.IDdfDiscoverer.discoverOk(com.tridium.ddf.discover.BIDdfDiscoveryObject[]) -->
<method name="discoverOk"  public="true" abstract="true">
<description>
The discovery job or a nested instance of the discovery job&#xa; will automatically receive the discovery objects from the&#xa; discovery request here. The &#x27;ddf&#x27; calls this method automatically&#xa; after it matches up the developer&#x27;s discovery request with&#xa; the disocvery response. Just prior to calling this method, the&#xa; ddf calls &#x27;parseDiscoveryObjects&#x27; on the discovery response. Those&#xa; discovery objects are passed here, giving the &#x27;ddf&#x27; a hook back&#xa; into the job and thereby passing the discovered objects back to&#xa; the job.
</description>
<parameter name="discoveryObjects">
<type class="com.tridium.ddf.discover.BIDdfDiscoveryObject" dimension="1"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddf.discover.IDdfDiscoverer.discoverFail(java.lang.String) -->
<method name="discoverFail"  public="true" abstract="true">
<description>
The discovery job or a nested instance of the discovery job&#xa; will automatically receive notification of failure to obtain&#xa; a discovery response here.&#xa;&#xa; The &#x27;ddf&#x27; calls this method if it detects a timeout after&#xa; transmitting the discovery request. The &#x27;reason&#x27; in that case&#xa; indicates that a timeout occured.
</description>
<parameter name="reason">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddf.discover.IDdfDiscoverer.getDiscoverContext() -->
<method name="getDiscoverContext"  public="true" abstract="true">
<description>
The ddf passes this context to the discover response&#x27;s &#x27;parseDiscoveryObjects&#x27;&#xa; method. This tells the developer whether the job is discovering devices or&#xa; points. This Context is only important if the developer is using the same request&#xa; type for both a device learn and a point learn. Such a scenario is probably&#xa; unlikely.
</description>
<return>
<type class="javax.baja.sys.Context"/>
</return>
</method>

<!-- com.tridium.ddf.discover.IDdfDiscoverer.getJob() -->
<method name="getJob"  public="true" abstract="true">
<description>
As mentioned, the discovery request is passed an instance of an IDdfDiscoverer.&#xa;&#xa; The developer may then call this method to get a direct reference to the&#xa; BJob that is performing the automatic discovery. With that reference,&#xa; the developer may, for example, call &#x27;progress&#x27; to update the percent-complete&#xa; that is displayed in the JobBar. The developer can also call &#x27;getJob().getLog().message(...)&#xa; to place a message onto the job bar.&#xa;&#xa; Please note, that progress is automatically reported provided that the developer&#x27;s&#xa; &#x27;discovery preferences&#x27; has a &#x27;min&#x27; and &#x27;max&#x27; discovery parameters that actually&#xa; &#x27;loop&#x27; (by the term &#x27;loop&#x27;, we mean that the discovery parameters returns a new&#xa; instance of itself each time the getNext() method is called.&#xa;&#xa; Otherwise, the discovery process will probably only submit a single discovery request&#xa; whose discovery response returns all of the discovery objects. If that is the case, then&#xa; the developer could be using the BIDdfMultiFrameResponse and/or BIDdfTransmitAckResp to&#xa; perform his or her own complicated discovery scheme. In that case, the developer&#xa; may call &#x27;getJob&#x27; on the discovery requests&#x27; &#x22;discoverer&#x22; and call &#x27;progress&#x27;,&#xa; &#x27;getLog().message(...)&#x27;, etc.
</description>
<return>
<type class="javax.baja.job.BJob"/>
</return>
</method>

</class>
</bajadoc>
