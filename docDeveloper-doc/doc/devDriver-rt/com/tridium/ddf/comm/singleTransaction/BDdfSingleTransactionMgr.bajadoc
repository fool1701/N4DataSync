<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="devDriver" runtimeProfile="rt" qualifiedName="com.tridium.ddf.comm.singleTransaction.BDdfSingleTransactionMgr" name="BDdfSingleTransactionMgr" packageName="com.tridium.ddf.comm.singleTransaction" public="true">
<description>
/**&#xa; BDdfSingleTransactionMgr - This is an override point for&#xa; transaction managers on communicators that use a master-slave style protocol.&#xa;&#xa; The serial, single transaction communicator in the devSerialDriver&#xa; module provides a resonable implementation that already uses this class.&#xa; So you can probably save a ton of time by extending that communicator&#xa; and then you won&#x27;t have to worry about the transaction manager becuase&#xa; it will handle it for you.
</description>
<tag name="@author">lperkins</tag>
<tag name="@creation">Oct 17, 2006</tag>
<tag name="@version">$Revision$ $Date$</tag>
<tag name="@since">Niagara 3.0</tag>
<extends>
<type class="com.tridium.ddf.comm.defaultComm.BDdfTransactionMgr"/>
</extends>
<implements>
<type class="com.tridium.ddf.comm.singleTransaction.BIDdfSingleTransactionMgr"/>
</implements>
<!-- com.tridium.ddf.comm.singleTransaction.BDdfSingleTransactionMgr() -->
<constructor name="BDdfSingleTransactionMgr" public="true">
<description/>
</constructor>

<!-- com.tridium.ddf.comm.singleTransaction.BDdfSingleTransactionMgr.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- com.tridium.ddf.comm.singleTransaction.BDdfSingleTransactionMgr.stopTransactionMgr() -->
<method name="stopTransactionMgr"  public="true">
<description/>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddf.comm.singleTransaction.BDdfSingleTransactionMgr.beginTransaction(com.tridium.ddf.comm.req.BIDdfRequest) -->
<method name="beginTransaction"  protected="true">
<description>
The default implementation is suitable for a master-slave protocol.&#xa; This method will block until it is safe to transmit the given req.
</description>
<parameter name="req">
<type class="com.tridium.ddf.comm.req.BIDdfRequest"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- com.tridium.ddf.comm.singleTransaction.BDdfSingleTransactionMgr.doCheckOutstandingTimeout(com.tridium.ddf.comm.req.BIDdfRequest) -->
<method name="doCheckOutstandingTimeout"  public="true">
<description/>
<parameter name="ddfRequest">
<type class="com.tridium.ddf.comm.req.BIDdfRequest"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddf.comm.singleTransaction.BDdfSingleTransactionMgr.frameReceived(com.tridium.ddf.comm.IDdfDataFrame) -->
<method name="frameReceived"  protected="true">
<description/>
<parameter name="ddfReceiveFrame">
<type class="com.tridium.ddf.comm.IDdfDataFrame"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddf.comm.singleTransaction.BDdfSingleTransactionMgr.getOutstandingRequest() -->
<method name="getOutstandingRequest"  public="true">
<description>
Descendant implementations of the BDdfReceiver typically call this if&#xa; they need to know the request that was recently transmitted and is awaiting&#xa; response.
</description>
<return>
<type class="com.tridium.ddf.comm.req.BIDdfRequest"/>
<description>
the BIDdfRequest that was last transmitted but no yet timed out, or null&#xa; if no message was last transmitted or if the last message that was transmitted&#xa; has already timed out.
</description>
</return>
</method>

<!-- com.tridium.ddf.comm.singleTransaction.BDdfSingleTransactionMgr.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
