<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="devDriver" runtimeProfile="rt" qualifiedName="com.tridium.ddf.comm.rsp.BIDdfReadResponse" name="BIDdfReadResponse" packageName="com.tridium.ddf.comm.rsp" public="true" interface="true" abstract="true" category="interface">
<description>
Each **read** request that driver developers define need to return&#xa; a response from the request&#x27;s processReceive method. The response&#xa; needs to implement BIDdfReadResponse. This can be most easily&#xa; accomplished by extending BDdfResponse and implementing this&#xa; interface. However, this interface extends BIDdfResponse to allow&#xa; you to use your own class, instead, if you need more flexibility.&#xa; You don&#x27;t have to you your own class though, if you extend BDdfRequest,&#xa; because BDdfRequest conveniently implements BIDdfRequest. If you&#xa; do not extend BDdfRequest then you will have to implement&#xa; BIDdfResponse as well.
</description>
<tag name="@author">lperkins</tag>
<implements>
<type class="com.tridium.ddf.comm.rsp.BIDdfResponse"/>
</implements>
<!-- com.tridium.ddf.comm.rsp.BIDdfReadResponse.parseReadValue(com.tridium.ddf.comm.req.IDdfReadable) -->
<method name="parseReadValue"  public="true" abstract="true">
<description>
Implementing this method is fundamental to the ddf&#x27;s&#xa; auto-poll feature for driver points. When one or more driver points&#xa; under a device need polled that share the equivalent read parameters,&#xa; the ddf will instantiate the read request type that&#xa; is identified by the read parameters, assign the read parameters to the&#xa; read request, assign all points that share the read parameters to the&#xa; request, and transmit the read request. Upon receiving a successful&#xa; read response (an instance that implements this interface), the ddf&#xa; driver framework will loop through all of the points under the device&#xa; that shared the same read parameters, cast each point to IDdfReadable,&#xa; and pass each point successively to this method. The developer driver&#xa; framework will take the return value from this method and pass it&#xa; to the readOk method on the point, thereby updating its value in Niagara.&#xa;&#xa; When implenting this interface, driver devlopers must implement this&#xa; method and parse a BStatusValue from the response data for the given&#xa; readableSource. If necessary, we suggest that the driver developer can&#xa; check if the readableSource object is an instance of their driver&#x27;s proxy&#xa; extension class. If so, the driver developer can cast the readableSource&#xa; object to their driver&#x27;s proxy extension class and then access the point&#x27;s&#xa; pointId property. The driver developer should design the pointId property&#xa; in such a way that it provides the information necessary to parse the&#xa; particular point&#x27;s value from the read response.
</description>
<parameter name="readableSource">
<type class="com.tridium.ddf.comm.req.IDdfReadable"/>
<description/>
</parameter>
<return>
<type class="javax.baja.status.BStatusValue"/>
<description>
a BStatusValue to pass to the readOk method of the readableSource
</description>
</return>
</method>

<!-- com.tridium.ddf.comm.rsp.BIDdfReadResponse.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
