<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="devDriver" runtimeProfile="rt" qualifiedName="com.tridium.ddf.comm.defaultComm.BDdfCommunicator" name="BDdfCommunicator" packageName="com.tridium.ddf.comm.defaultComm" public="true">
<description>
BDdfCommunicator - Handles transmitting and receiving messages on behalf of a component&#xa; that implements BIDdfCommunicating such as BDdfCommDevice or BDdfCommNetwork.&#xa;&#xa; This is a raw implementation of BDdfCommunicator. It immediately places BIDdfRequests on&#xa; a worker queue and pulls them off, one-by-one (on a dedicated thread), and passes them to&#xa; the transaction manager (for timeout/retry scheduling and response matching) and then to&#xa; the transmitter for the first transmission attempt.&#xa;&#xa; The &#x27;devSerialDriver&#x27; and &#x27;devIpDriver&#x27; modules provide nearly fully-functional default&#xa; implementations of BDdfCommunicator for use in drivers.
</description>
<tag name="@see">com.tridium.ddf.comm.multipleTransaction.BDdfMultipleTransactionCommunicator</tag>
<tag name="@see">com.tridium.ddf.comm.singleTransaction.BDdfSingleTransactionCommunicator</tag>
<tag name="@author">lperkins</tag>
<tag name="@creation">Oct 9, 2006</tag>
<tag name="@version">$Revision$ $Date$</tag>
<tag name="@since">Niagara 3.0</tag>
<extends>
<type class="javax.baja.util.BWorker"/>
</extends>
<implements>
<type class="com.tridium.ddf.comm.BIDdfCommunicator"/>
</implements>
<property name="transmitter" flags="">
<type class="com.tridium.ddf.comm.defaultComm.BDdfTransmitter"/>
<description>
Slot for the &lt;code&gt;transmitter&lt;/code&gt; property.&#xa; This item transmits messages for the communicator.
</description>
<tag name="@see">#getTransmitter</tag>
<tag name="@see">#setTransmitter</tag>
</property>

<property name="receiver" flags="">
<type class="com.tridium.ddf.comm.defaultComm.BDdfReceiver"/>
<description>
Slot for the &lt;code&gt;receiver&lt;/code&gt; property.&#xa; This is a place-holder for the receiver.
</description>
<tag name="@see">#getReceiver</tag>
<tag name="@see">#setReceiver</tag>
</property>

<property name="transactionManager" flags="">
<type class="com.tridium.ddf.comm.defaultComm.BDdfTransactionMgr"/>
<description>
Slot for the &lt;code&gt;transactionManager&lt;/code&gt; property.&#xa; This is the mechanism that processes outstanding transactions
</description>
<tag name="@see">#getTransactionManager</tag>
<tag name="@see">#setTransactionManager</tag>
</property>

<property name="pollScheduler" flags="">
<type class="com.tridium.ddf.poll.BDdfPollScheduler"/>
<description>
Slot for the &lt;code&gt;pollScheduler&lt;/code&gt; property.&#xa; Most of the time communicators will require a poll scheduler.
</description>
<tag name="@see">#getPollScheduler</tag>
<tag name="@see">#setPollScheduler</tag>
</property>

<property name="unsolicitedMgr" flags="">
<type class="com.tridium.ddf.comm.defaultComm.BDdfUnsolicitedMgr"/>
<description>
Slot for the &lt;code&gt;unsolicitedMgr&lt;/code&gt; property.&#xa; The simplest of drivers will not need unsolicited support
</description>
<tag name="@see">#getUnsolicitedMgr</tag>
<tag name="@see">#setUnsolicitedMgr</tag>
</property>

<action name="resetStatistics" flags="c">
<return>
<type class="void"/>
</return>
<description>
Slot for the &lt;code&gt;resetStatistics&lt;/code&gt; action.&#xa; Resets the various statistics that are on the transmitter&#xa; and the receiver
</description>
<tag name="@see">#resetStatistics()</tag>
</action>

<action name="requeue" flags="h">
<return>
<type class="void"/>
</return>
<description>
Slot for the &lt;code&gt;requeue&lt;/code&gt; action.
</description>
<tag name="@see">#requeue()</tag>
</action>

<!-- com.tridium.ddf.comm.defaultComm.BDdfCommunicator() -->
<constructor name="BDdfCommunicator" public="true">
<description/>
</constructor>

<!-- com.tridium.ddf.comm.defaultComm.BDdfCommunicator.getTransmitter() -->
<method name="getTransmitter"  public="true">
<description>
Get the &lt;code&gt;transmitter&lt;/code&gt; property.&#xa; This item transmits messages for the communicator.
</description>
<tag name="@see">#transmitter</tag>
<return>
<type class="com.tridium.ddf.comm.defaultComm.BDdfTransmitter"/>
</return>
</method>

<!-- com.tridium.ddf.comm.defaultComm.BDdfCommunicator.setTransmitter(com.tridium.ddf.comm.defaultComm.BDdfTransmitter) -->
<method name="setTransmitter"  public="true">
<description>
Set the &lt;code&gt;transmitter&lt;/code&gt; property.&#xa; This item transmits messages for the communicator.
</description>
<tag name="@see">#transmitter</tag>
<parameter name="v">
<type class="com.tridium.ddf.comm.defaultComm.BDdfTransmitter"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddf.comm.defaultComm.BDdfCommunicator.getReceiver() -->
<method name="getReceiver"  public="true">
<description>
Get the &lt;code&gt;receiver&lt;/code&gt; property.&#xa; This is a place-holder for the receiver.
</description>
<tag name="@see">#receiver</tag>
<return>
<type class="com.tridium.ddf.comm.defaultComm.BDdfReceiver"/>
</return>
</method>

<!-- com.tridium.ddf.comm.defaultComm.BDdfCommunicator.setReceiver(com.tridium.ddf.comm.defaultComm.BDdfReceiver) -->
<method name="setReceiver"  public="true">
<description>
Set the &lt;code&gt;receiver&lt;/code&gt; property.&#xa; This is a place-holder for the receiver.
</description>
<tag name="@see">#receiver</tag>
<parameter name="v">
<type class="com.tridium.ddf.comm.defaultComm.BDdfReceiver"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddf.comm.defaultComm.BDdfCommunicator.getTransactionManager() -->
<method name="getTransactionManager"  public="true">
<description>
Get the &lt;code&gt;transactionManager&lt;/code&gt; property.&#xa; This is the mechanism that processes outstanding transactions
</description>
<tag name="@see">#transactionManager</tag>
<return>
<type class="com.tridium.ddf.comm.defaultComm.BDdfTransactionMgr"/>
</return>
</method>

<!-- com.tridium.ddf.comm.defaultComm.BDdfCommunicator.setTransactionManager(com.tridium.ddf.comm.defaultComm.BDdfTransactionMgr) -->
<method name="setTransactionManager"  public="true">
<description>
Set the &lt;code&gt;transactionManager&lt;/code&gt; property.&#xa; This is the mechanism that processes outstanding transactions
</description>
<tag name="@see">#transactionManager</tag>
<parameter name="v">
<type class="com.tridium.ddf.comm.defaultComm.BDdfTransactionMgr"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddf.comm.defaultComm.BDdfCommunicator.getPollScheduler() -->
<method name="getPollScheduler"  public="true">
<description>
Get the &lt;code&gt;pollScheduler&lt;/code&gt; property.&#xa; Most of the time communicators will require a poll scheduler.
</description>
<tag name="@see">#pollScheduler</tag>
<return>
<type class="com.tridium.ddf.poll.BDdfPollScheduler"/>
</return>
</method>

<!-- com.tridium.ddf.comm.defaultComm.BDdfCommunicator.setPollScheduler(com.tridium.ddf.poll.BDdfPollScheduler) -->
<method name="setPollScheduler"  public="true">
<description>
Set the &lt;code&gt;pollScheduler&lt;/code&gt; property.&#xa; Most of the time communicators will require a poll scheduler.
</description>
<tag name="@see">#pollScheduler</tag>
<parameter name="v">
<type class="com.tridium.ddf.poll.BDdfPollScheduler"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddf.comm.defaultComm.BDdfCommunicator.getUnsolicitedMgr() -->
<method name="getUnsolicitedMgr"  public="true">
<description>
Get the &lt;code&gt;unsolicitedMgr&lt;/code&gt; property.&#xa; The simplest of drivers will not need unsolicited support
</description>
<tag name="@see">#unsolicitedMgr</tag>
<return>
<type class="com.tridium.ddf.comm.defaultComm.BDdfUnsolicitedMgr"/>
</return>
</method>

<!-- com.tridium.ddf.comm.defaultComm.BDdfCommunicator.setUnsolicitedMgr(com.tridium.ddf.comm.defaultComm.BDdfUnsolicitedMgr) -->
<method name="setUnsolicitedMgr"  public="true">
<description>
Set the &lt;code&gt;unsolicitedMgr&lt;/code&gt; property.&#xa; The simplest of drivers will not need unsolicited support
</description>
<tag name="@see">#unsolicitedMgr</tag>
<parameter name="v">
<type class="com.tridium.ddf.comm.defaultComm.BDdfUnsolicitedMgr"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddf.comm.defaultComm.BDdfCommunicator.resetStatistics() -->
<method name="resetStatistics"  public="true">
<description>
Invoke the &lt;code&gt;resetStatistics&lt;/code&gt; action.&#xa; Resets the various statistics that are on the transmitter&#xa; and the receiver
</description>
<tag name="@see">#resetStatistics</tag>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddf.comm.defaultComm.BDdfCommunicator.requeue() -->
<method name="requeue"  public="true">
<description>
Invoke the &lt;code&gt;requeue&lt;/code&gt; action.
</description>
<tag name="@see">#requeue</tag>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddf.comm.defaultComm.BDdfCommunicator.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- com.tridium.ddf.comm.defaultComm.BDdfCommunicator.isParentLegal(javax.baja.sys.BComponent) -->
<method name="isParentLegal"  public="true">
<description>
This must be under a BIDdfCommunicating in the navigation tree of the Niagara AX station.
</description>
<parameter name="parent">
<type class="javax.baja.sys.BComponent"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- com.tridium.ddf.comm.defaultComm.BDdfCommunicator.started() -->
<method name="started"  public="true" final="true">
<description>
This prevents drivers that extend the ddf from accidentally overridding&#xa; the started method and forgetting to call super.started().
</description>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- com.tridium.ddf.comm.defaultComm.BDdfCommunicator.descendantsStarted() -->
<method name="descendantsStarted"  public="true">
<description>
Any descendants that override this method should call super.descendantsStarted&#xa; since this calls the &#x27;startCommunicating&#x27; method.
</description>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- com.tridium.ddf.comm.defaultComm.BDdfCommunicator.stopped() -->
<method name="stopped"  public="true" final="true">
<description/>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- com.tridium.ddf.comm.defaultComm.BDdfCommunicator.isNavChild() -->
<method name="isNavChild"  public="true">
<description>
Keeps the communicator from showing up in the Niagara AX navigation tree (usually on the left side of Workbench)
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- com.tridium.ddf.comm.defaultComm.BDdfCommunicator.startWorker() -->
<method name="startWorker"  protected="true">
<description>
Starts the communicator&#x27;s worker thread, provided that the closest Nav ancestor network&#xa; or device is neither in fatalFault nor disabled.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddf.comm.defaultComm.BDdfCommunicator.getWorkerThreadName() -->
<method name="getWorkerThreadName"  protected="true">
<description>
Get the thread name used to start the worker.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- com.tridium.ddf.comm.defaultComm.BDdfCommunicator.stopWorker() -->
<method name="stopWorker"  protected="true" final="true">
<description>
This prevents drivers that extend the ddf from accidentally overriding&#xa; the stopWorker method and forgetting to call super.stopWorker().
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddf.comm.defaultComm.BDdfCommunicator.getWorker() -->
<method name="getWorker"  public="true">
<description>
This satisfies BWorker&#x27;s abstract &#x27;getWorker&#x27; requirement.
</description>
<return>
<type class="javax.baja.util.Worker"/>
<description>
a reference to the internal &#x27;communicationWorker&#x27;
</description>
</return>
</method>

<!-- com.tridium.ddf.comm.defaultComm.BDdfCommunicator.spy(javax.baja.spy.SpyWriter) -->
<method name="spy"  public="true">
<description/>
<parameter name="out">
<type class="javax.baja.spy.SpyWriter"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- com.tridium.ddf.comm.defaultComm.BDdfCommunicator.getDdfTransmitter() -->
<method name="getDdfTransmitter"  public="true">
<description>
Returns the current value of the &#x27;transmitter&#x27; property cast as a BIDdfTransmitter.
</description>
<return>
<type class="com.tridium.ddf.comm.BIDdfTransmitter"/>
</return>
</method>

<!-- com.tridium.ddf.comm.defaultComm.BDdfCommunicator.getDdfReceiver() -->
<method name="getDdfReceiver"  public="true">
<description>
Returns the current value of the &#x27;receiver&#x27; property cast as a BIDdfReceiver.
</description>
<return>
<type class="com.tridium.ddf.comm.BIDdfReceiver"/>
</return>
</method>

<!-- com.tridium.ddf.comm.defaultComm.BDdfCommunicator.getDdfTransactionMgr() -->
<method name="getDdfTransactionMgr"  public="true">
<description>
Returns the current value of the &#x27;transactionManager&#x27; property cast as a BIDdfTransactionMgr.
</description>
<return>
<type class="com.tridium.ddf.comm.BIDdfTransactionMgr"/>
</return>
</method>

<!-- com.tridium.ddf.comm.defaultComm.BDdfCommunicator.getLog() -->
<method name="getLog"  public="true">
<description>
Returns a log with the log name of &#x22;module.typeName.comm&#x22;.
</description>
<return>
<type class="javax.baja.log.Log"/>
</return>
</method>

<!-- com.tridium.ddf.comm.defaultComm.BDdfCommunicator.getDdfPollScheduler() -->
<method name="getDdfPollScheduler"  public="true">
<description>
Returns the current value of the &#x27;pollScheduler&#x27; property cast as a BIDdfPollScheduler.
</description>
<return>
<type class="com.tridium.ddf.poll.BIDdfPollScheduler"/>
</return>
</method>

<!-- com.tridium.ddf.comm.defaultComm.BDdfCommunicator.getDdfUnsolicitedMgr() -->
<method name="getDdfUnsolicitedMgr"  public="true">
<description>
Returns the current value of the &#x27;unsolicitedMgr&#x27; property cast as a BIDdfUnsolicitedMgr.
</description>
<return>
<type class="com.tridium.ddf.comm.BIDdfUnsolicitedMgr"/>
</return>
</method>

<!-- com.tridium.ddf.comm.defaultComm.BDdfCommunicator.communicate(com.tridium.ddf.comm.req.BIDdfRequest) -->
<method name="communicate"  public="true">
<description>
This is the primary means of initiating i/o for the driver. The given request is placed onto the communicator&#x27;s&#xa; queue where it will be processed in the order that it was placed on the queue.&#xa;&#xa; Note that if the the driver&#x27;s subclass of BDdfCommDevice or BDdfCommNetwork is disabled or in fault&#xa; then this method does nothing (other than return false).&#xa;&#xa; Note that if the given request is an instance of BIDdfWriteRequest and another BIDdfWriteRequest, with an equivalent&#xa; writeParameters structure as the given request, already exists in the communicator queue, then the two requests are&#xa; combined into one. In which case, this method returns false but adds any unique writable source objects from the&#xa; given request to the writable source array of the equivalent request that is already in the communicator&#x27;s queue.&#xa;&#xa; The previous paragraph handles the case where a single request from the driver&#x27;s protocol is used to set the values&#xa; for more than one data point in the field-device.&#xa;&#xa; If none of the previously mentioned notes apply, then this places the given ddfRequest on the communicator&#x27;s queue&#xa; and returns true.&#xa;&#xa; NOTE: This is a non-blocking call. If a driver developer needs to process the response or timeout condition, then he&#xa; or she should declare that the class of the given request implements com.tridium.ddf.comm.req.BIDdfCustomRequest. By doing so,&#xa; the request itself will receive a callback when either the response is received or a timeout occurs. The callback&#xa; will be made from the transaction manager thread. @see com.tridium.ddf.comm.req.BIDdfCustomRequest for more details about&#xa; the callback mechanism.
</description>
<tag name="@throw">BajaRuntimException if the &#x27;isCommEnabled&#x27; method returns false (typically indicating that it is either&#xa; disabled or in fault)</tag>
<parameter name="ddfRequest">
<type class="com.tridium.ddf.comm.req.BIDdfRequest"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddf.comm.defaultComm.BDdfCommunicator.stopCommunicating() -->
<method name="stopCommunicating"  public="true">
<description>
The general rule is that this method is called to partially stop the communicator.&#xa; More specifically, this method is called to stop the portions of the communicator&#xa; that actually write to ,read from, or otherwise manage the field-bus.&#xa;&#xa; The communicating parent (BDdfCommDevice or BDdfCommNetwork -- whichever is&#xa; the case) calls this when the communicating parent&#x27;s status changes&#xa; to fault or disabled.&#xa;&#xa; The communicator&#x27;s stopped method also calls this method.&#xa;&#xa; In addition, the serial version of the communicator calls this&#xa; method after the user changes the serial portName in order&#xa; to shut down any i/o that was for the previous serial port.&#xa;&#xa; This stops the communicator&#x27;s own thread that processes the communictor&#x27;s queue. Next,&#xa; this clears the communicator&#x27;s queue and notifies any requests that were waiting in&#xa; the communicator&#x27;s queue. Next, this stops the unsolicited manager thread. Next, this&#xa; stops the transaction manager thread. Finally, this stops the receive thread.&#xa;&#xa; Note that this does not stop the poll scheduler&#x27;s thread. The poll scheduler&#x27;s thread&#xa; starts when the station starts and stops when the station stops. Any poll attempts&#xa; that are made while the communicator is disabled will short-circuit.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddf.comm.defaultComm.BDdfCommunicator.startCommunicating() -->
<method name="startCommunicating"  public="true">
<description>
This method is called to start any threads that the communicator or any&#xa; of its Niagara AX Nav-descendants requires in order to perform input and&#xa; output processing for the driver. In other words, this method is called to start the&#xa; portions of the communicator that actually write to ,read from, or otherwise&#xa; manage the field-bus.&#xa;&#xa; The communicating parent (BDdfCommDevice or BDdfCommNetwork -- whichever is&#xa; the case) calls this when the communicating parent&#x27;s status changes&#xa; such that it is no longer fault or disabled.&#xa;&#xa; Also, the communicator&#x27;s Niagara AX started callback calls this method&#xa;&#xa; In addition, in the serial version of the communicator if&#xa; the serial port is changed to a valid serial port, then this method&#xa; is called (after first calling the &#x27;stopCommunicating&#x27; method to stop&#xa; i/o on the previous serial port).&#xa;&#xa; NOTE: If the communicating Nav parent is disabled or in fault then this&#xa; method does not do anything.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddf.comm.defaultComm.BDdfCommunicator.communicatorStarted() -->
<method name="communicatorStarted"  public="true">
<description>
This method is called from the Niagara AX &#x27;started&#x27; callback&#xa; which is called by the Niagara AX core framework when the&#xa; component is initialized in a running station. Components&#xa; are initialized in a running station when the station is&#xa; started or if they are added to the station database while&#xa; the station is running.
</description>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- com.tridium.ddf.comm.defaultComm.BDdfCommunicator.communicatorStopped() -->
<method name="communicatorStopped"  public="true">
<description>
This method is called from the Niagara AX &#x27;stopped&#x27; callback&#xa; which is called by the Niagara AX core framework when the&#xa; component completely shuts down. Components shut down if the&#xa; station is stopped or if they are removed from the station&#xa; database.
</description>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- com.tridium.ddf.comm.defaultComm.BDdfCommunicator.getDdfCommunicatingParent() -->
<method name="getDdfCommunicatingParent"  public="true">
<description>
Returns the most immediate Niagara AX Nav ancestor that implements&#xa; BIDdfCommunicating.
</description>
<return>
<type class="com.tridium.ddf.comm.BIDdfCommunicating"/>
<description>
the most immediate Niagara AX Nav ancestor that implements&#xa; BIDdfCommunicating.
</description>
</return>
</method>

<!-- com.tridium.ddf.comm.defaultComm.BDdfCommunicator.doCommunicate(com.tridium.ddf.comm.req.BIDdfRequest) -->
<method name="doCommunicate"  public="true">
<description>
This is an override point for descendants to easily implement their driver&#x27;s communication requirements.&#xa;&#xa; NOTE: The override point is called from a safe worker-communicator thread.
</description>
<parameter name="ddfRequest">
<type class="com.tridium.ddf.comm.req.BIDdfRequest"/>
<description>
the request to transmit
</description>
</parameter>
<return>
<type class="void"/>
<description>
Returns immediately after the request is transmitted. The request object will receive a callback&#xa; when the response is received or when the response times out.
</description>
</return>
</method>

<!-- com.tridium.ddf.comm.defaultComm.BDdfCommunicator.doRequeue() -->
<method name="doRequeue"  public="true">
<description>
Implements the &#x27;requeue&#x27; action. The &#x27;requeue&#x27; action is scheduled&#xa; from the doCommunicate method if the request passed into the doCommunicate&#xa; method is not granted access (in other words, the grantAccess method returned&#xa; false for that particular request).&#xa;&#xa; This method re-enqueues all requests that are in the requeueList.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddf.comm.defaultComm.BDdfCommunicator.doResetStatistics() -->
<method name="doResetStatistics"  public="true">
<description>
Calls the &#x27;resetStatistics&#x27; method on the transmitter,&#xa; receiver, poll scheduler, transaction manager, and&#xa; unsolicited manager.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddf.comm.defaultComm.BDdfCommunicator.requeue(com.tridium.ddf.comm.req.BIDdfRequest) -->
<method name="requeue"  protected="true">
<description>
The &#x27;doCommunicate&#x27; method calls this method in the event that the &#x27;grantAccess&#x27;&#xa; method returns false for the given request. This method arranges for the&#xa; given ddfRequest to be passed back to the &#x27;doCommunicate&#x27; method in ten seconds.&#xa; This is done without blocking the calling thread.&#xa;&#xa; This is part of the mechanism that allows driver developers to temporarily grant&#xa; exclusive access to certain requests over other request. This method handles the&#xa; case were a particular request does not currently have exclusive access to the&#xa; driver&#x27;s field-bus.
</description>
<parameter name="ddfRequest">
<type class="com.tridium.ddf.comm.req.BIDdfRequest"/>
<description>
see the description for this method for more details.
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddf.comm.defaultComm.BDdfCommunicator.coalesceWrite(com.tridium.ddf.comm.req.BIDdfWriteRequest) -->
<method name="coalesceWrite"  protected="true">
<description>
The &#x27;communicate&#x27; method calls this method if its passed a &#x27;BIDdfWriteRequests&#x27;.&#xa; This method reviews the contents of the communicator&#x27;s queue and if there&#xa; is already a request in the queue for the equivalent &#x27;writeParams&#x27; then the&#xa; given request&#x27;s unique writableSource is simply added to the writableSource&#xa; for the request that already exists.
</description>
<parameter name="ddfWriteRequest">
<type class="com.tridium.ddf.comm.req.BIDdfWriteRequest"/>
<description>
a BIDdfWriteRequest to possibly coalesce with another&#xa; BIDdfWriteReqeust that is already in the communicator&#x27;s queue with an equivalent&#xa; writeParams structure.
</description>
</parameter>
<return>
<type class="boolean"/>
<description>
true if the given request was coalesced (combined) into another request&#xa; that already exists in the communicator queue and that happens to write the&#xa; same data point(s) in the field-device. The returns false if the given request&#xa; does not become coalesced (combined) with another write-request that is already&#xa; in the queue. In the case where false is returned, the &#x27;communicate&#x27; method&#xa; will place the write request on the queue. In the case where true is returned,&#xa; the &#x27;communicate&#x27; method will not place the write request on the queue (since&#xa; an equivalent request already exists in the queue and since the two equivalent&#xa; requests were coalesced (combined) during the logic of this method)
</description>
</return>
</method>

<!-- com.tridium.ddf.comm.defaultComm.BDdfCommunicator.ensureInWritableSource(com.tridium.ddf.comm.req.BIDdfWriteRequest, com.tridium.ddf.comm.req.IDdfWritable[]) -->
<method name="ensureInWritableSource"  protected="true">
<description>
The &#x27;coalesceWrite&#x27; method calls this method to combine the unique writeable source&#xa; from a new request in with the writable source for another, equivalen request that&#xa; is already in the communicator&#x27;s queue.
</description>
<parameter name="writeReqInQueue">
<type class="com.tridium.ddf.comm.req.BIDdfWriteRequest"/>
<description>
a reference to a BIDdfWriteRequest that is already in the&#xa; communicator&#x27;s queue. Any unique objects among the given &#x27;writableSourceToCoalesce&#x27;&#xa; will be added to this request&#x27;s &#x27;writableSource&#x27; array.
</description>
</parameter>
<parameter name="writableSourceToCoalesce">
<type class="com.tridium.ddf.comm.req.IDdfWritable" dimension="1"/>
<description>
the &#x27;writableSource&#x27; objects from the new request,&#xa; which will not be placed in the communicator&#x27;s queue, but instead will be combined&#xa; with the given &#x27;writeReqInQueue&#x27;.
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddf.comm.defaultComm.BDdfCommunicator.coalesceWrites(com.tridium.ddf.comm.req.BIDdfWriteRequest) -->
<method name="coalesceWrites"  protected="true">
<description>
The &#x27;communicate&#x27; method calls this method before attempting any coalescing logic&#xa; for write requests.&#xa;&#xa; Descendant classes can override this and return false to disable write coalescing for&#xa; a particular message or for all messages.
</description>
<parameter name="ddfRequest">
<type class="com.tridium.ddf.comm.req.BIDdfWriteRequest"/>
</parameter>
<return>
<type class="boolean"/>
<description>
true to have the &#x27;communicate&#x27; method consider coalescing&#xa; the given write-request with any write request for the equivalent&#xa; field-point that is already in the communicator&#x27;s queue. If there&#xa; is no such equivalent request then the write request will be placed on&#xa; the communicator queue. Or return false to have the given&#xa; write request placed onto the communicator&#x27;s queue regardless&#xa; of whether there is  already another request to write the equivalent&#xa; field-point in the communicator queue.
</description>
</return>
</method>

<!-- com.tridium.ddf.comm.defaultComm.BDdfCommunicator.grantAccess(com.tridium.ddf.comm.req.BIDdfRequest) -->
<method name="grantAccess"  protected="true">
<description>
This method is called on the communicator&#x27;s worker thread for each&#xa; request that is dequeued.&#xa;&#xa; Developers may override this method to grant exclusive access&#xa; to certain requests by temporarily denying access to some requests&#xa; while at the same time, granting access to other requests.&#xa;&#xa; If the developer returns true then the request will be processed&#xa; immediately (transmitted and scheduled for response checking). If&#xa; the developer returns false then the request will be placed back&#xa; in the back of the communicator queue.
</description>
<parameter name="ddfRequest">
<type class="com.tridium.ddf.comm.req.BIDdfRequest"/>
<description>
this is a request that was just pulled off of the&#xa; communicator queue. However, this request has not yet been processed.&#xa; This request will be processed immediately if this method returns&#xa; true. This request will be processed later if this method returns&#xa; false.
</description>
</parameter>
<return>
<type class="boolean"/>
<description>
this default version of the checkAccess method returns true&#xa; all of the time. Developers may customize this, as described.
</description>
</return>
</method>

<!-- com.tridium.ddf.comm.defaultComm.BDdfCommunicator.transmitter -->
<field name="transmitter"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;transmitter&lt;/code&gt; property.&#xa; This item transmits messages for the communicator.
</description>
<tag name="@see">#getTransmitter</tag>
<tag name="@see">#setTransmitter</tag>
</field>

<!-- com.tridium.ddf.comm.defaultComm.BDdfCommunicator.receiver -->
<field name="receiver"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;receiver&lt;/code&gt; property.&#xa; This is a place-holder for the receiver.
</description>
<tag name="@see">#getReceiver</tag>
<tag name="@see">#setReceiver</tag>
</field>

<!-- com.tridium.ddf.comm.defaultComm.BDdfCommunicator.transactionManager -->
<field name="transactionManager"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;transactionManager&lt;/code&gt; property.&#xa; This is the mechanism that processes outstanding transactions
</description>
<tag name="@see">#getTransactionManager</tag>
<tag name="@see">#setTransactionManager</tag>
</field>

<!-- com.tridium.ddf.comm.defaultComm.BDdfCommunicator.pollScheduler -->
<field name="pollScheduler"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;pollScheduler&lt;/code&gt; property.&#xa; Most of the time communicators will require a poll scheduler.
</description>
<tag name="@see">#getPollScheduler</tag>
<tag name="@see">#setPollScheduler</tag>
</field>

<!-- com.tridium.ddf.comm.defaultComm.BDdfCommunicator.unsolicitedMgr -->
<field name="unsolicitedMgr"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;unsolicitedMgr&lt;/code&gt; property.&#xa; The simplest of drivers will not need unsolicited support
</description>
<tag name="@see">#getUnsolicitedMgr</tag>
<tag name="@see">#setUnsolicitedMgr</tag>
</field>

<!-- com.tridium.ddf.comm.defaultComm.BDdfCommunicator.resetStatistics -->
<field name="resetStatistics"  public="true" static="true" final="true">
<type class="javax.baja.sys.Action"/>
<description>
Slot for the &lt;code&gt;resetStatistics&lt;/code&gt; action.&#xa; Resets the various statistics that are on the transmitter&#xa; and the receiver
</description>
<tag name="@see">#resetStatistics()</tag>
</field>

<!-- com.tridium.ddf.comm.defaultComm.BDdfCommunicator.requeue -->
<field name="requeue"  public="true" static="true" final="true">
<type class="javax.baja.sys.Action"/>
<description>
Slot for the &lt;code&gt;requeue&lt;/code&gt; action.
</description>
<tag name="@see">#requeue()</tag>
</field>

<!-- com.tridium.ddf.comm.defaultComm.BDdfCommunicator.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

<!-- com.tridium.ddf.comm.defaultComm.BDdfCommunicator.requeueList -->
<field name="requeueList"  protected="true">
<parameterizedType class="java.util.Vector">
<args>
<type class="com.tridium.ddf.comm.req.BIDdfRequest"/>
</args>
</parameterizedType>
<description>
This is used in conjunction with the &#x27;requeue&#x27; action.
</description>
</field>

<!-- com.tridium.ddf.comm.defaultComm.BDdfCommunicator.requeueTicket -->
<field name="requeueTicket"  protected="true">
<type class="javax.baja.sys.Clock$Ticket"/>
<description>
This is used in conjunction with the &#x27;requeue&#x27; action.
</description>
</field>

<!-- com.tridium.ddf.comm.defaultComm.BDdfCommunicator.infiniteQueue -->
<field name="infiniteQueue"  protected="true">
<type class="javax.baja.util.Queue"/>
<description>
This is a direct reference to the communicator&#x27;s internal queue.
</description>
</field>

<!-- com.tridium.ddf.comm.defaultComm.BDdfCommunicator.communicationWorker -->
<field name="communicationWorker"  protected="true">
<type class="javax.baja.util.Worker"/>
<description>
This is a direct reference to the communicator&#x27;s internal worker.&#xa;&#xa; This wraps the communicator&#x27;s own thread.
</description>
</field>

</class>
</bajadoc>
