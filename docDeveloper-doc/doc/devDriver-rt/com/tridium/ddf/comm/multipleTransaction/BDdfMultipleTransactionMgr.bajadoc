<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="devDriver" runtimeProfile="rt" qualifiedName="com.tridium.ddf.comm.multipleTransaction.BDdfMultipleTransactionMgr" name="BDdfMultipleTransactionMgr" packageName="com.tridium.ddf.comm.multipleTransaction" public="true">
<description>
BDdfMultipleTransactionMgr goes under BDdfMultipleTransactionCommunicator in the Niagara AX&#xa; Nav tree. This allows more than one outstanding request on the field-bus at a time. This&#xa; uses tags (if defined on the requests and responses) to match requests to received frames. If&#xa; no tags are defined then requests receive all incoming data frames while the requests are&#xa; outstanding. The requests themselves can filter through the incoming data frames if they&#xa; do not define a tag.&#xa;&#xa; Rather than extending this directly, the devSerialDriver module provides a very reasonable&#xa; implementation of this. If your driver is serial then you can save time by using the &#xa; transaction mgr from the following communicator:&#xa; &lt;ul&gt;&#xa; com.tridium.ddfSerial.comm.multipleTransaction.BDdfSerialMutCommunicator&#xa; &lt;/ul&gt;&#xa; &#xa; The devIpDriver module provides a very reasonable implementation of this. If your&#xa; driver communicates over IP then you can save time by using the multiple&#xa; transaction manager from either of the following communicators:&#xa; &lt;ol&gt;&#xa; &lt;li&gt;com.tridium.ddfIp.tcp.comm.multipleTransaction.BDdfTcpMutCommunicator &lt;b&gt;OR&lt;/b&gt;&#xa; &lt;li&gt;com.tridium.ddfIp.udp.comm.multipleTransaction.BDdfUdpMutCommunicator&#xa; &lt;/ol&gt;
</description>
<tag name="@author">lperkins</tag>
<tag name="@creation">Oct 10, 2006</tag>
<tag name="@version">$Revision$ $Date$</tag>
<tag name="@since">Niagara 3.0</tag>
<extends>
<type class="com.tridium.ddf.comm.defaultComm.BDdfTransactionMgr"/>
</extends>
<implements>
<type class="com.tridium.ddf.comm.multipleTransaction.BIDdfMultipleTransactionMgr"/>
</implements>
<property name="outstandingCount" flags="">
<type class="int"/>
<description>
Slot for the &lt;code&gt;outstandingCount&lt;/code&gt; property.&#xa; This is the number of request messages that have been transmitted but the driver is still awaiting&#xa; a response for.
</description>
<tag name="@see">#getOutstandingCount</tag>
<tag name="@see">#setOutstandingCount</tag>
</property>

<property name="expiredCount" flags="">
<type class="int"/>
<description>
Slot for the &lt;code&gt;expiredCount&lt;/code&gt; property.&#xa; This is the number of request messages that were transmitted and timed out. The driver may still&#xa; be waiting for a response for these.
</description>
<tag name="@see">#getExpiredCount</tag>
<tag name="@see">#setExpiredCount</tag>
</property>

<property name="maxExpired" flags="">
<type class="int"/>
<description>
Slot for the &lt;code&gt;maxExpired&lt;/code&gt; property.&#xa; This is the maximum number of expired messages for which the ddf transaction manager&#xa; Will listen for late replies. Expired requests will be stored in a FIFO queue of this&#xa; Length. When a new outstanding reply fails to receive a response, and if the expired&#xa; count equals this value, then the oldest item in the expired queue will be purged to&#xa; Make room for the new outstanding response. If this value is decreased while the station&#xa; Is running, then the expired queue size might not take effect until the next outstanding&#xa; Request times out. Therefore, do not be alarmed if after reducing this number, the&#xa; Corresponding expiredCount stays higher. It will take until the next outstanding request&#xa; Times out before the queue size will be shortened. After that time, the expiredCount will&#xa; Be reduced to a number equal to or less than the new maxExpired value.
</description>
<tag name="@see">#getMaxExpired</tag>
<tag name="@see">#setMaxExpired</tag>
</property>

<!-- com.tridium.ddf.comm.multipleTransaction.BDdfMultipleTransactionMgr() -->
<constructor name="BDdfMultipleTransactionMgr" public="true">
<description/>
</constructor>

<!-- com.tridium.ddf.comm.multipleTransaction.BDdfMultipleTransactionMgr.getOutstandingCount() -->
<method name="getOutstandingCount"  public="true">
<description>
Get the &lt;code&gt;outstandingCount&lt;/code&gt; property.&#xa; This is the number of request messages that have been transmitted but the driver is still awaiting&#xa; a response for.
</description>
<tag name="@see">#outstandingCount</tag>
<return>
<type class="int"/>
</return>
</method>

<!-- com.tridium.ddf.comm.multipleTransaction.BDdfMultipleTransactionMgr.setOutstandingCount(int) -->
<method name="setOutstandingCount"  public="true">
<description>
Set the &lt;code&gt;outstandingCount&lt;/code&gt; property.&#xa; This is the number of request messages that have been transmitted but the driver is still awaiting&#xa; a response for.
</description>
<tag name="@see">#outstandingCount</tag>
<parameter name="v">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddf.comm.multipleTransaction.BDdfMultipleTransactionMgr.getExpiredCount() -->
<method name="getExpiredCount"  public="true">
<description>
Get the &lt;code&gt;expiredCount&lt;/code&gt; property.&#xa; This is the number of request messages that were transmitted and timed out. The driver may still&#xa; be waiting for a response for these.
</description>
<tag name="@see">#expiredCount</tag>
<return>
<type class="int"/>
</return>
</method>

<!-- com.tridium.ddf.comm.multipleTransaction.BDdfMultipleTransactionMgr.setExpiredCount(int) -->
<method name="setExpiredCount"  public="true">
<description>
Set the &lt;code&gt;expiredCount&lt;/code&gt; property.&#xa; This is the number of request messages that were transmitted and timed out. The driver may still&#xa; be waiting for a response for these.
</description>
<tag name="@see">#expiredCount</tag>
<parameter name="v">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddf.comm.multipleTransaction.BDdfMultipleTransactionMgr.getMaxExpired() -->
<method name="getMaxExpired"  public="true">
<description>
Get the &lt;code&gt;maxExpired&lt;/code&gt; property.&#xa; This is the maximum number of expired messages for which the ddf transaction manager&#xa; Will listen for late replies. Expired requests will be stored in a FIFO queue of this&#xa; Length. When a new outstanding reply fails to receive a response, and if the expired&#xa; count equals this value, then the oldest item in the expired queue will be purged to&#xa; Make room for the new outstanding response. If this value is decreased while the station&#xa; Is running, then the expired queue size might not take effect until the next outstanding&#xa; Request times out. Therefore, do not be alarmed if after reducing this number, the&#xa; Corresponding expiredCount stays higher. It will take until the next outstanding request&#xa; Times out before the queue size will be shortened. After that time, the expiredCount will&#xa; Be reduced to a number equal to or less than the new maxExpired value.
</description>
<tag name="@see">#maxExpired</tag>
<return>
<type class="int"/>
</return>
</method>

<!-- com.tridium.ddf.comm.multipleTransaction.BDdfMultipleTransactionMgr.setMaxExpired(int) -->
<method name="setMaxExpired"  public="true">
<description>
Set the &lt;code&gt;maxExpired&lt;/code&gt; property.&#xa; This is the maximum number of expired messages for which the ddf transaction manager&#xa; Will listen for late replies. Expired requests will be stored in a FIFO queue of this&#xa; Length. When a new outstanding reply fails to receive a response, and if the expired&#xa; count equals this value, then the oldest item in the expired queue will be purged to&#xa; Make room for the new outstanding response. If this value is decreased while the station&#xa; Is running, then the expired queue size might not take effect until the next outstanding&#xa; Request times out. Therefore, do not be alarmed if after reducing this number, the&#xa; Corresponding expiredCount stays higher. It will take until the next outstanding request&#xa; Times out before the queue size will be shortened. After that time, the expiredCount will&#xa; Be reduced to a number equal to or less than the new maxExpired value.
</description>
<tag name="@see">#maxExpired</tag>
<parameter name="v">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddf.comm.multipleTransaction.BDdfMultipleTransactionMgr.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- com.tridium.ddf.comm.multipleTransaction.BDdfMultipleTransactionMgr.isParentLegal(javax.baja.sys.BComponent) -->
<method name="isParentLegal"  public="true">
<description/>
<parameter name="parent">
<type class="javax.baja.sys.BComponent"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- com.tridium.ddf.comm.multipleTransaction.BDdfMultipleTransactionMgr.stopTransactionMgr() -->
<method name="stopTransactionMgr"  public="true">
<description/>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddf.comm.multipleTransaction.BDdfMultipleTransactionMgr.frameReceived(com.tridium.ddf.comm.IDdfDataFrame) -->
<method name="frameReceived"  protected="true">
<description>
This method is called by the receiver for every raw frame of data that it receives.
</description>
<parameter name="ddfReceiveFrame">
<type class="com.tridium.ddf.comm.IDdfDataFrame"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddf.comm.multipleTransaction.BDdfMultipleTransactionMgr.beginTransaction(com.tridium.ddf.comm.req.BIDdfRequest) -->
<method name="beginTransaction"  protected="true">
<description>
This method is called by the BDdfTransactionMgr at the start of a&#xa; request/response transaction.
</description>
<parameter name="req">
<type class="com.tridium.ddf.comm.req.BIDdfRequest"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddf.comm.multipleTransaction.BDdfMultipleTransactionMgr.doCheckOutstandingTimeout(com.tridium.ddf.comm.req.BIDdfRequest) -->
<method name="doCheckOutstandingTimeout"  protected="true">
<description>
This method is called on the transaction manager thread, just moments&#xa; after the checkOutstandingTimeout action is invoked by means of a&#xa; BDdfScheduler.INSTANCE.schedule that occurred when the request was last transmitted.
</description>
<parameter name="ddfRequest">
<type class="com.tridium.ddf.comm.req.BIDdfRequest"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddf.comm.multipleTransaction.BDdfMultipleTransactionMgr.expiredFrameReceived(com.tridium.ddf.comm.IDdfDataFrame, com.tridium.ddf.comm.req.BIDdfRequest) -->
<method name="expiredFrameReceived"  protected="true">
<description>
This method is called on every outstanding ddfReceiveFrame for each raw data frame that is&#xa; received and has a matching tag.
</description>
<parameter name="ddfReceiveFrame">
<type class="com.tridium.ddf.comm.IDdfDataFrame"/>
</parameter>
<parameter name="expiredRequest">
<type class="com.tridium.ddf.comm.req.BIDdfRequest"/>
</parameter>
<return>
<type class="com.tridium.ddf.comm.rsp.BIDdfResponse"/>
</return>
</method>

<!-- com.tridium.ddf.comm.multipleTransaction.BDdfMultipleTransactionMgr.frameReceived(com.tridium.ddf.comm.IDdfDataFrame, com.tridium.ddf.comm.req.BIDdfRequest) -->
<method name="frameReceived"  protected="true">
<description>
This method is called on every outstanding ddfReceiveFrame for each raw data frame that is&#xa; received and has a matching tag.
</description>
<parameter name="ddfReceiveFrame">
<type class="com.tridium.ddf.comm.IDdfDataFrame"/>
</parameter>
<parameter name="outstandingRequest">
<type class="com.tridium.ddf.comm.req.BIDdfRequest"/>
</parameter>
<return>
<type class="com.tridium.ddf.comm.rsp.BIDdfResponse"/>
<description>
the BIDdfResponse from the outstanding request, if the outstanding request&#xa; processes the frame and returns a BIDdfResponse. Returns null otherwise.
</description>
</return>
</method>

<!-- com.tridium.ddf.comm.multipleTransaction.BDdfMultipleTransactionMgr.frameReceived(com.tridium.ddf.comm.req.BIDdfRequest, com.tridium.ddf.comm.rsp.BIDdfResponse) -->
<method name="frameReceived"  protected="true">
<description>
This method is called when an outstanding data frame matches up as the response to a BIDdfRequest.
</description>
<parameter name="outstandingRequest">
<type class="com.tridium.ddf.comm.req.BIDdfRequest"/>
<description/>
</parameter>
<parameter name="ddfResponse">
<type class="com.tridium.ddf.comm.rsp.BIDdfResponse"/>
<description/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddf.comm.multipleTransaction.BDdfMultipleTransactionMgr.outstandingResponseError(com.tridium.ddf.comm.req.BIDdfRequest, com.tridium.ddf.comm.rsp.DdfResponseException) -->
<method name="outstandingResponseError"  protected="true">
<description/>
<parameter name="outstandingRequest">
<type class="com.tridium.ddf.comm.req.BIDdfRequest"/>
</parameter>
<parameter name="errorResponse">
<type class="com.tridium.ddf.comm.rsp.DdfResponseException"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddf.comm.multipleTransaction.BDdfMultipleTransactionMgr.expiredResponseError(com.tridium.ddf.comm.req.BIDdfRequest, com.tridium.ddf.comm.rsp.DdfResponseException) -->
<method name="expiredResponseError"  protected="true">
<description/>
<parameter name="expiredRequest">
<type class="com.tridium.ddf.comm.req.BIDdfRequest"/>
</parameter>
<parameter name="errorResponse">
<type class="com.tridium.ddf.comm.rsp.DdfResponseException"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddf.comm.multipleTransaction.BDdfMultipleTransactionMgr.expiredFrameReceived(com.tridium.ddf.comm.req.BIDdfRequest, com.tridium.ddf.comm.rsp.BIDdfResponse) -->
<method name="expiredFrameReceived"  protected="true">
<description>
This method is called when an outstanding data frame matches up as the response to a previously timed-out BIDdfRequest.
</description>
<parameter name="expiredRequest">
<type class="com.tridium.ddf.comm.req.BIDdfRequest"/>
</parameter>
<parameter name="ddfResponse">
<type class="com.tridium.ddf.comm.rsp.BIDdfResponse"/>
<description/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddf.comm.multipleTransaction.BDdfMultipleTransactionMgr.outstandingCount -->
<field name="outstandingCount"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;outstandingCount&lt;/code&gt; property.&#xa; This is the number of request messages that have been transmitted but the driver is still awaiting&#xa; a response for.
</description>
<tag name="@see">#getOutstandingCount</tag>
<tag name="@see">#setOutstandingCount</tag>
</field>

<!-- com.tridium.ddf.comm.multipleTransaction.BDdfMultipleTransactionMgr.expiredCount -->
<field name="expiredCount"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;expiredCount&lt;/code&gt; property.&#xa; This is the number of request messages that were transmitted and timed out. The driver may still&#xa; be waiting for a response for these.
</description>
<tag name="@see">#getExpiredCount</tag>
<tag name="@see">#setExpiredCount</tag>
</field>

<!-- com.tridium.ddf.comm.multipleTransaction.BDdfMultipleTransactionMgr.maxExpired -->
<field name="maxExpired"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;maxExpired&lt;/code&gt; property.&#xa; This is the maximum number of expired messages for which the ddf transaction manager&#xa; Will listen for late replies. Expired requests will be stored in a FIFO queue of this&#xa; Length. When a new outstanding reply fails to receive a response, and if the expired&#xa; count equals this value, then the oldest item in the expired queue will be purged to&#xa; Make room for the new outstanding response. If this value is decreased while the station&#xa; Is running, then the expired queue size might not take effect until the next outstanding&#xa; Request times out. Therefore, do not be alarmed if after reducing this number, the&#xa; Corresponding expiredCount stays higher. It will take until the next outstanding request&#xa; Times out before the queue size will be shortened. After that time, the expiredCount will&#xa; Be reduced to a number equal to or less than the new maxExpired value.
</description>
<tag name="@see">#getMaxExpired</tag>
<tag name="@see">#setMaxExpired</tag>
</field>

<!-- com.tridium.ddf.comm.multipleTransaction.BDdfMultipleTransactionMgr.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
