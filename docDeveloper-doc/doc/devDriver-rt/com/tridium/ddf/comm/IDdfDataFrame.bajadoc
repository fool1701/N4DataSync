<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="devDriver" runtimeProfile="rt" qualifiedName="com.tridium.ddf.comm.IDdfDataFrame" name="IDdfDataFrame" packageName="com.tridium.ddf.comm" public="true" interface="true" abstract="true" category="interface">
<description>
A BIDdfReceiver returns an object that implements the IDdfDataFrame&#xa; interface from the BIDdfReceiver&#x27;s receiveFrame method. An&#xa; object that implements this interface essentially represents a frame&#xa; of raw data received from a field-bus.
</description>
<tag name="@author">lperkins</tag>
<tag name="@creation">Oct 10, 2006</tag>
<tag name="@version">$Revision$ $Date$</tag>
<tag name="@since">Niagara 3.0</tag>
<implements>
<type class="com.tridium.ddf.IDdfFacetConst"/>
</implements>
<!-- com.tridium.ddf.comm.IDdfDataFrame.getFrameBytes() -->
<method name="getFrameBytes"  public="true" abstract="true">
<description>
This method returns the byte array representation of the data within this IDdfDataFrame
</description>
<return>
<type class="byte" dimension="1"/>
<description/>
</return>
</method>

<!-- com.tridium.ddf.comm.IDdfDataFrame.getFrameSize() -->
<method name="getFrameSize"  public="true" abstract="true">
<description>
This method returns an integer to indicate the number of valid bytes in the array returned by&#xa; the getDdfFrameBytes method.
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- com.tridium.ddf.comm.IDdfDataFrame.getFrameTag() -->
<method name="getFrameTag"  public="true" abstract="true">
<description>
The developer driver framework uses the return value from this method&#xa; to match up requests to responses. Implementing this method to return&#xa; a value other than null is especially important for drivers that use&#xa; the ddf multiple-transaction-manager to match requests to responses.&#xa;&#xa; For the simplest master-slave, serial protocols, this&#xa; can return null. These types of drivers should just use the&#xa; single-transaction-manager anyway, which always matches the most&#xa; recently received frame with the most recently transmitted request.&#xa;&#xa; For more complicated drivers that support multiple outstanding transactions,&#xa; a BString that encodes the hex string that the request expects in the response&#xa; will be adequate.
</description>
<return>
<type class="javax.baja.sys.BSimple"/>
<description>
a BSimple with the same hashCode as the&#xa; corresponding BSimple in the BIDdfResponse.
</description>
</return>
</method>

<!-- com.tridium.ddf.comm.IDdfDataFrame.getFrameCopy() -->
<method name="getFrameCopy"  public="true" abstract="true">
<description>
The implementing class needs to define this method and&#xa; return a copy of itself. This is basically a clone.
</description>
<return>
<type class="com.tridium.ddf.comm.IDdfDataFrame"/>
</return>
</method>

</class>
</bajadoc>
