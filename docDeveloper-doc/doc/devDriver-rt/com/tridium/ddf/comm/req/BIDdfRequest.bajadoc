<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="devDriver" runtimeProfile="rt" qualifiedName="com.tridium.ddf.comm.req.BIDdfRequest" name="BIDdfRequest" packageName="com.tridium.ddf.comm.req" public="true" interface="true" abstract="true" category="interface">
<description>
BIDdfRequest represents serializable data to be transmitted out of a BDdfCommunicator&#xa; in a station. A BDdfCommunicator can be a BDdfSerialCommunicator, a BDdfTcpCommunicator,&#xa; , or some other object that extends BDdfCommunicator.
</description>
<tag name="@author">lperkins</tag>
<implements>
<type class="javax.baja.sys.BInterface"/>
</implements>
<implements>
<type class="com.tridium.ddf.IDdfFacetConst"/>
</implements>
<!-- com.tridium.ddf.comm.req.BIDdfRequest.getDeviceId() -->
<method name="getDeviceId"  public="true" abstract="true">
<description>
All requests are addressed to an actual device.&#xa;&#xa; Occasionally some protocols have global requests. In those&#xa; cases, there are two scenarios that we have always&#xa; encountered:&#xa;&#xa; 1.) The protocols send requests to a reserved address on the&#xa; field-bus. In that case, the deviceId here will be a custom-instance&#xa; of BDdfIdParams that identifies the particular reserved device id.&#xa;&#xa; 2.) The protocols define a special request that needs no device-id&#xa; because the request itself applies specifically globally. In that&#xa; case, the deviceId can be an instance of BDdfIdParams or&#xa; some other customized instance of BDdfIdParams that essentially&#xa; means that the device address is null.
</description>
<return>
<type class="com.tridium.ddf.identify.BDdfIdParams"/>
<description/>
</return>
</method>

<!-- com.tridium.ddf.comm.req.BIDdfRequest.setDeviceId(com.tridium.ddf.identify.BDdfIdParams) -->
<method name="setDeviceId"  public="true" abstract="true">
<description>
The ddf calls this method automatically as it&#xa; instantiates requests to transmit on behalf of devices or points&#xa; under devices.
</description>
<parameter name="deviceId">
<type class="com.tridium.ddf.identify.BDdfIdParams"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddf.comm.req.BIDdfRequest.getTag() -->
<method name="getTag"  public="true" abstract="true">
<description>
The ddf uses the return value from this method&#xa; to match up requests to responses. Implementing this method to return&#xa; a value other than null is especially important for drivers that use&#xa; the ddf multiple-transaction-manager to match reqeusts to responses.&#xa;&#xa; For the simplest master-slave, serial protocols, this&#xa; can return null. These types of drivers should just use an&#xa; ddf single-transaction-manager anyway, which always matches the most&#xa; recently received frame with the most recently transmitted request.&#xa;&#xa; For more complicated drivers that support multiple outstanding transactions,&#xa; a BString that encodes the hex string that the request expects in the response&#xa; will be adequate.
</description>
<return>
<type class="javax.baja.sys.BSimple"/>
<description>
a BSimple with the same hashCode that you design to also be in the&#xa; corresponding BSimple tag of the BIDdfResponse.
</description>
</return>
</method>

<!-- com.tridium.ddf.comm.req.BIDdfRequest.toByteArray() -->
<method name="toByteArray"  public="true" abstract="true">
<description>
Driver developers should follow their driver&#x27;s protocol documentation&#xa; and construct the appropriate byte array for the request here. Please&#xa; note that in most cases, the ddf will have already&#xa; automatically called setDeviceId and passed in the information necessary&#xa; to address the device on the field-bus to which your request will&#xa; ultimately be transmitted. Therefore, you can call getDeviceId, and&#xa; cast the result into the property type for your driver&#x27;s device&#x27;s&#xa; deviceId property (that you defined in your device&#x27;s slotomatic header).&#xa;&#xa; Please note that read requests (BIDdfReadRequest) can also call getReadParameters&#xa; for a copy of the proxy&#x27;s (IDdfReadable&#x27;s) readParameters property value.&#xa;&#xa; Please note that ping requests (BIDdfPingRequest) can also call getPingParameters&#xa; for a copy of the device&#x27;s (IDdfPingable&#x27;s) pingParameters property value.&#xa;&#xa; Please note that discovery requests (BIDdfPingRequest) can also call getDiscoveryId&#xa; for a copy of the (IDdfPingable&#x27;s) discoverId property value that is between the min&#xa; and max discoveryId as defined on your driver&#x27;s discovery preferences.&#xa;&#xa; Please note that write requests (BIDdfWriteRequest) can also call getWriteParameters&#xa; for a copy of the proxy&#x27;s (IDdfWritable&#x27;s) writeParameters property value.
</description>
<return>
<type class="byte" dimension="1"/>
<description>
a byte array following the instuctions above
</description>
</return>
</method>

<!-- com.tridium.ddf.comm.req.BIDdfRequest.getResponseTimeout() -->
<method name="getResponseTimeout"  public="true" abstract="true">
<description>
The ddf calls this method to find out long to wait&#xa; after transmitting the request before timing out. The easiest implementation&#xa; would be for you to return the value was most recently passed to the&#xa; setResponseTimeout method.
</description>
<return>
<type class="javax.baja.sys.BRelTime"/>
</return>
</method>

<!-- com.tridium.ddf.comm.req.BIDdfRequest.setResponseTimeout(javax.baja.sys.BRelTime) -->
<method name="setResponseTimeout"  public="true" abstract="true">
<description>
By default, the ddf calls this automatically before&#xa; calling the toByteArray method, and passes in the value that response&#xa; timeout value from the receiver component under your driver&#x27;s&#xa; communicator.
</description>
<parameter name="v">
<type class="javax.baja.sys.BRelTime"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddf.comm.req.BIDdfRequest.getRemainingRetryCount() -->
<method name="getRemainingRetryCount"  public="true" abstract="true">
<description>
Gets the remaining number of retries for this message. The ddf&#xa; driver framework will call setRemainingRetryCount with a decremented&#xa; count, as necessary, during the retry processing.&#xa;&#xa; If BIDdfRequest.USE_DEFAULT_RETRY_COUNT is initially returned then&#xa; the ddf will initally call setMaxRetryCount and pass in the&#xa; default value from the ddf communicator&#x27;s transmitter through which&#xa; this request is transmitted. After that, it will subsequently decrement&#xa; the remaining retry count by calling setRemainingRetryCount with a descremented&#xa; value, for each failed transmission attempt, until this method returns&#xa; zero.
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- com.tridium.ddf.comm.req.BIDdfRequest.setRemainingRetryCount(int) -->
<method name="setRemainingRetryCount"  public="true" abstract="true">
<description>
The ddf communicator will call this to decrement the number of remaining&#xa; retries, as appropriate, during its attempts to successfully transmit this&#xa; request.
</description>
<parameter name="v">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddf.comm.req.BIDdfRequest.processReceive(com.tridium.ddf.comm.IDdfDataFrame) -->
<method name="processReceive"  public="true" abstract="true">
<description>
After transmitting this request, the BDdfCommunicator will pass frames that it receives&#xa; here. If you implement the getTag method then the ddf communicator will only pass data frames&#xa; whose tag&#x27;s hashcode matches your request tag&#x27;s hashcode. If your request returns null from&#xa; the getTag method then all received data frames will be passed here, until the request times&#xa; out or returns a BIDdfResponse from this method.&#xa;&#xa;  This request needs to take one of the following steps:&#xa;   1. Ignore the frame and return null. The transaction remains open.&#xa;   2. Collect the frame and return a BIDdfMultiFrameResponse whose &lt;i&gt;isComplete&lt;/i&gt; method returns &lt;i&gt;false&lt;/i&gt;. In which case, you need to implement your own collection&#xa;      mechanism. For example, this could be as simple as putting them all in a Vector in the BIDdfMultiFrameResponse. In&#xa;      this scenario, the transaction remains open. The transaction response timeout will be reset to the &lt;i&gt;responseTimeout&lt;/i&gt; of the&#xa;      returned &lt;i&gt;BIMultiFrameResponse&lt;/i&gt; thereby allowing more time for the remainder of the transaction to complete.&#xa;   3. Return a BIDdfResponse for the data frame and any previously collected frames that you determine together make up a completed response.&#xa;      This completes the transaction. Alternatively, if you have any previously collected frames then you may return the instance of&#xa;      BIDdfMultiFrameResponse as long as its &lt;i&gt;isComplete&lt;/i&gt; method subsequently returns &lt;i&gt;true&lt;/i&gt;. Both of these scenarios&#xa;      complete the transaction.  &#xa;   4. Throw an DdfResponseException or subclass there-of to indicate the the frame&#xa;   forms a complete message but indicates an error condition in the device preventing&#xa;   a successful response. This completes the transaction.&#xa;&#xa;   WARNING: In scenario&#x27;s 2 and 3, please copy the frame&#x27;s bytes as the frame&#x27;s byte array could be a direct reference to an internal&#xa;   buffer in the receiver.
</description>
<parameter name="iDdfDataFrame">
<type class="com.tridium.ddf.comm.IDdfDataFrame"/>
<description/>
</parameter>
<return>
<type class="com.tridium.ddf.comm.rsp.BIDdfResponse"/>
<description>
BIDdfResponse but please review the full description for this method.
</description>
</return>
<throws>
<type class="com.tridium.ddf.comm.rsp.DdfResponseException"/>
<description>
but please review the full description for this method.
</description>
</throws>
</method>

<!-- com.tridium.ddf.comm.req.BIDdfRequest.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

<!-- com.tridium.ddf.comm.req.BIDdfRequest.USE_DEFAULT_RESPONSE_TIMEOUT -->
<field name="USE_DEFAULT_RESPONSE_TIMEOUT"  public="true" static="true" final="true">
<type class="int"/>
<description/>
</field>

<!-- com.tridium.ddf.comm.req.BIDdfRequest.USE_DEFAULT_RETRY_COUNT -->
<field name="USE_DEFAULT_RETRY_COUNT"  public="true" static="true" final="true">
<type class="int"/>
<description/>
</field>

</class>
</bajadoc>
