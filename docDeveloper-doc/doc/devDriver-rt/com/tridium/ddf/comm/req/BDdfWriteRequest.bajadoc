<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="devDriver" runtimeProfile="rt" qualifiedName="com.tridium.ddf.comm.req.BDdfWriteRequest" name="BDdfWriteRequest" packageName="com.tridium.ddf.comm.req" public="true" abstract="true">
<description>
This is the default base class that implements BIDdfWriteRequest.&#xa; &#xa; The &lt;i&gt;toByteArray&lt;/i&gt; method will need implemented in the descendant&#xa; class. During the automatic writing mechanism that is provided by&#xa; BDdfProxyExt, the &lt;i&gt;writeParameters&lt;/i&gt; property is automatically&#xa; set to a copy of the &lt;i&gt;writeParameters&lt;/i&gt; from the instance of&#xa; the proxy extension. Likewise the &lt;i&gt;deviceId&lt;/i&gt; property is automatically&#xa; set to a copy of the &lt;i&gt;deviceId&lt;/i&gt; property of the device that owns&#xa; the driver&#x27;s BDdfProxyExt.&#xa; &#xa; The same mechanism also provides the &lt;i&gt;writable source array&lt;/i&gt; that&#xa; is available to the &lt;i&gt;toByteArray&lt;/i&gt; method by calling the &lt;i&gt;getWritableSource&lt;/i&gt;&#xa; method.&#xa; &#xa; The &lt;i&gt;writeParameters&lt;/i&gt; value is used to coalesce (combine) multiple write&#xa; operations into a single protocol request. If the driver&#x27;s protocol features&#xa; write requests where a single write request can modify the values for more&#xa; than one data point, then the driver&#x27;s discovery mechanism should be implemented&#xa; such that it provides multiple discovery leaves, each with an equivalent copy&#xa; of &#x27;writeParameters&#x27; but each should a different &#x27;pointId&#x27;.&#xa; &#xa; Then from the &lt;i&gt;toByteArray&lt;/i&gt; method, the developer may loop through the&#xa; &lt;i&gt;writable source array&lt;/i&gt; and build the serialized byte array accordingly.&#xa; The header of the serialized byte array will typically contain information&#xa; from the &lt;i&gt;writeParameters&lt;/i&gt; property (which all &lt;i&gt;writable source&lt;/i&gt;&#xa; objects happen to share a copy of). The data portion of the serialized byte&#xa; array will typically contain information identifying each &lt;i&gt;writable source&lt;/i&gt;&#xa; object (i.e. driver data point) as well as the new value for each &lt;i&gt;writable&#xa; source&lt;/i&gt; object (i.e driver data point)&#xa; &#xa; For more details please see:&#xa; &lt;ol&gt;&#xa; &lt;li&gt;The Java Doc that is provided with BIDdfWriteRequest for&#xa; more details.&#xa; &lt;li&gt;The Java Doc and Baja Doc that are provided for the&#xa; &lt;i&gt;writeParameters&lt;/i&gt; property on this class.&#xa; &lt;/ol&gt;
</description>
<tag name="@see">BIDdfWriteRequest</tag>
<tag name="@author">lperkins</tag>
<extends>
<type class="com.tridium.ddf.comm.req.BDdfRequest"/>
</extends>
<implements>
<type class="com.tridium.ddf.comm.req.BIDdfWriteRequest"/>
</implements>
<property name="writeParameters" flags="">
<type class="com.tridium.ddf.identify.BDdfIdParams"/>
<description>
Slot for the &lt;code&gt;writeParameters&lt;/code&gt; property.&#xa; These are the writeParameters that are common to all points that the write&#xa; request needs write. The ddf instantiates write&#xa; requests automatically. Here is how: Whenever a driver point needs to be&#xa; written, the ddf looks at the point&#x27;s write parameters and&#xa; instantiates an instance of the write request type that is specified by&#xa; the point&#x27;s write parameters. It then sets the writes parameters on the new&#xa; write request equal to the write parameters on the point. Then it calls the&#xa; setWritableSource method on the new write request and passes in all other&#xa; driver points under the same point device extension that have the equivalent&#xa; writeParameters. This effectively places all driver points under the same&#xa; device that share the same writeParameters into a single group for writing. This&#xa; allows the values for all of the points under a device that have equivalent&#xa; write parameters to be written using just one field-bus request.
</description>
<tag name="@see">#getWriteParameters</tag>
<tag name="@see">#setWriteParameters</tag>
</property>

<!-- com.tridium.ddf.comm.req.BDdfWriteRequest() -->
<constructor name="BDdfWriteRequest" public="true">
<description/>
</constructor>

<!-- com.tridium.ddf.comm.req.BDdfWriteRequest(javax.baja.sys.BRelTime, int, com.tridium.ddf.identify.BDdfIdParams, com.tridium.ddf.identify.BIDdfWriteParams) -->
<constructor name="BDdfWriteRequest" public="true">
<parameter name="responseTimeout">
<type class="javax.baja.sys.BRelTime"/>
<description/>
</parameter>
<parameter name="maxRetryCount">
<type class="int"/>
<description/>
</parameter>
<parameter name="deviceId">
<type class="com.tridium.ddf.identify.BDdfIdParams"/>
<description/>
</parameter>
<parameter name="writeParams">
<type class="com.tridium.ddf.identify.BIDdfWriteParams"/>
<description/>
</parameter>
<description/>
</constructor>

<!-- com.tridium.ddf.comm.req.BDdfWriteRequest(javax.baja.sys.BRelTime, int, com.tridium.ddf.point.BDdfProxyExt) -->
<constructor name="BDdfWriteRequest" public="true">
<parameter name="responseTimeout">
<type class="javax.baja.sys.BRelTime"/>
<description/>
</parameter>
<parameter name="maxRetryCount">
<type class="int"/>
<description/>
</parameter>
<parameter name="ddfProxyExt">
<type class="com.tridium.ddf.point.BDdfProxyExt"/>
<description/>
</parameter>
<description/>
</constructor>

<!-- com.tridium.ddf.comm.req.BDdfWriteRequest(com.tridium.ddf.identify.BDdfIdParams, com.tridium.ddf.identify.BIDdfWriteParams) -->
<constructor name="BDdfWriteRequest" public="true">
<parameter name="deviceId">
<type class="com.tridium.ddf.identify.BDdfIdParams"/>
<description/>
</parameter>
<parameter name="writeParams">
<type class="com.tridium.ddf.identify.BIDdfWriteParams"/>
<description/>
</parameter>
<description/>
</constructor>

<!-- com.tridium.ddf.comm.req.BDdfWriteRequest(com.tridium.ddf.point.BDdfProxyExt) -->
<constructor name="BDdfWriteRequest" public="true">
<parameter name="ddfProxyExt">
<type class="com.tridium.ddf.point.BDdfProxyExt"/>
<description/>
</parameter>
<description/>
</constructor>

<!-- com.tridium.ddf.comm.req.BDdfWriteRequest.getWriteParameters() -->
<method name="getWriteParameters"  public="true">
<description>
Get the &lt;code&gt;writeParameters&lt;/code&gt; property.&#xa; These are the writeParameters that are common to all points that the write&#xa; request needs write. The ddf instantiates write&#xa; requests automatically. Here is how: Whenever a driver point needs to be&#xa; written, the ddf looks at the point&#x27;s write parameters and&#xa; instantiates an instance of the write request type that is specified by&#xa; the point&#x27;s write parameters. It then sets the writes parameters on the new&#xa; write request equal to the write parameters on the point. Then it calls the&#xa; setWritableSource method on the new write request and passes in all other&#xa; driver points under the same point device extension that have the equivalent&#xa; writeParameters. This effectively places all driver points under the same&#xa; device that share the same writeParameters into a single group for writing. This&#xa; allows the values for all of the points under a device that have equivalent&#xa; write parameters to be written using just one field-bus request.
</description>
<tag name="@see">#writeParameters</tag>
<return>
<type class="com.tridium.ddf.identify.BDdfIdParams"/>
</return>
</method>

<!-- com.tridium.ddf.comm.req.BDdfWriteRequest.setWriteParameters(com.tridium.ddf.identify.BDdfIdParams) -->
<method name="setWriteParameters"  public="true">
<description>
Set the &lt;code&gt;writeParameters&lt;/code&gt; property.&#xa; These are the writeParameters that are common to all points that the write&#xa; request needs write. The ddf instantiates write&#xa; requests automatically. Here is how: Whenever a driver point needs to be&#xa; written, the ddf looks at the point&#x27;s write parameters and&#xa; instantiates an instance of the write request type that is specified by&#xa; the point&#x27;s write parameters. It then sets the writes parameters on the new&#xa; write request equal to the write parameters on the point. Then it calls the&#xa; setWritableSource method on the new write request and passes in all other&#xa; driver points under the same point device extension that have the equivalent&#xa; writeParameters. This effectively places all driver points under the same&#xa; device that share the same writeParameters into a single group for writing. This&#xa; allows the values for all of the points under a device that have equivalent&#xa; write parameters to be written using just one field-bus request.
</description>
<tag name="@see">#writeParameters</tag>
<parameter name="v">
<type class="com.tridium.ddf.identify.BDdfIdParams"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddf.comm.req.BDdfWriteRequest.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- com.tridium.ddf.comm.req.BDdfWriteRequest.isGroupable() -->
<method name="isGroupable"  public="true">
<description>
By default, multiple IDdfWritables&#x27;s with the&#xa; same writeParams, under the same device, should be&#xa; automatically coalesced into the same write request&#xa; if the write params structure has properties.&#xa; &#xa; The philosophy here is that if the developer has&#xa; custom-defined any properties on the write params&#xa; then any two proxies (writables) that share the&#xa; same write parameters should be written in one&#xa; request.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- com.tridium.ddf.comm.req.BDdfWriteRequest.getAutoWriteFailOnTimeout() -->
<method name="getAutoWriteFailOnTimeout"  public="true">
<description/>
<return>
<type class="boolean"/>
<description>
true
</description>
</return>
</method>

<!-- com.tridium.ddf.comm.req.BDdfWriteRequest.getAutoWriteFailOnError() -->
<method name="getAutoWriteFailOnError"  public="true">
<description/>
<return>
<type class="boolean"/>
<description>
true
</description>
</return>
</method>

<!-- com.tridium.ddf.comm.req.BDdfWriteRequest.getAutoWriteOk() -->
<method name="getAutoWriteOk"  public="true">
<description/>
<return>
<type class="boolean"/>
<description>
true
</description>
</return>
</method>

<!-- com.tridium.ddf.comm.req.BDdfWriteRequest.getAutoWriteOkLate() -->
<method name="getAutoWriteOkLate"  public="true">
<description/>
<return>
<type class="boolean"/>
<description>
true
</description>
</return>
</method>

<!-- com.tridium.ddf.comm.req.BDdfWriteRequest.getWritableSource() -->
<method name="getWritableSource"  public="true">
<description/>
<return>
<type class="com.tridium.ddf.comm.req.IDdfWritable" dimension="1"/>
<description>
the IDdfWritable[] that was most recently passed to the&#xa; &lt;i&gt;setWritableSource&lt;/i&gt; method.
</description>
</return>
</method>

<!-- com.tridium.ddf.comm.req.BDdfWriteRequest.setWritableSource(com.tridium.ddf.comm.req.IDdfWritable[]) -->
<method name="setWritableSource"  public="true">
<description/>
<parameter name="writeableSource">
<type class="com.tridium.ddf.comm.req.IDdfWritable" dimension="1"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddf.comm.req.BDdfWriteRequest.getRawValue(com.tridium.ddf.comm.req.IDdfWritable) -->
<method name="getRawValue"  protected="true">
<description>
Descendants may call this method while constructing the&#xa; toByteArray method and pass in any of their IDdfWritable&#xa; source objects to get a raw &lt;i&gt;double&lt;/i&gt; for serializing.
</description>
<parameter name="ddfWritable">
<type class="com.tridium.ddf.comm.req.IDdfWritable"/>
<description/>
</parameter>
<return>
<type class="double"/>
<description>
a raw double representation of the given ddfWritable&#x27;s writeValue.
</description>
</return>
</method>

<!-- com.tridium.ddf.comm.req.BDdfWriteRequest.writeParameters -->
<field name="writeParameters"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;writeParameters&lt;/code&gt; property.&#xa; These are the writeParameters that are common to all points that the write&#xa; request needs write. The ddf instantiates write&#xa; requests automatically. Here is how: Whenever a driver point needs to be&#xa; written, the ddf looks at the point&#x27;s write parameters and&#xa; instantiates an instance of the write request type that is specified by&#xa; the point&#x27;s write parameters. It then sets the writes parameters on the new&#xa; write request equal to the write parameters on the point. Then it calls the&#xa; setWritableSource method on the new write request and passes in all other&#xa; driver points under the same point device extension that have the equivalent&#xa; writeParameters. This effectively places all driver points under the same&#xa; device that share the same writeParameters into a single group for writing. This&#xa; allows the values for all of the points under a device that have equivalent&#xa; write parameters to be written using just one field-bus request.
</description>
<tag name="@see">#getWriteParameters</tag>
<tag name="@see">#setWriteParameters</tag>
</field>

<!-- com.tridium.ddf.comm.req.BDdfWriteRequest.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
