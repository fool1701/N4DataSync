<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="devDriver" runtimeProfile="rt" qualifiedName="com.tridium.ddf.comm.req.BIDdfWriteRequest" name="BIDdfWriteRequest" packageName="com.tridium.ddf.comm.req" public="true" interface="true" abstract="true" category="interface">
<description>
Drivers should create a class that implements this interface for each&#xa; message in their driver&#x27;s protocol that is capable of updating a value&#xa; or setting a data value in some field equipment.
</description>
<tag name="@author">lperkins</tag>
<implements>
<type class="com.tridium.ddf.comm.req.BIDdfRequest"/>
</implements>
<!-- com.tridium.ddf.comm.req.BIDdfWriteRequest.isGroupable() -->
<method name="isGroupable"  public="true" abstract="true">
<description>
Indicates whether multiple IDdfWritables&#x27;s with the&#xa; same writeParams, under the same device, should be&#xa; automatically grouped (coalesced) into the same write request.&#xa;&#xa; In other words, if an attempt is ever made to write multiple IDdfWritables&#xa; at about the same time, then they will all be written&#xa; using the same write request.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- com.tridium.ddf.comm.req.BIDdfWriteRequest.getWriteParameters() -->
<method name="getWriteParameters"  public="true" abstract="true">
<description>
Gets the write parameters that distinguish one instance&#xa; of the request class from another instance, in addition&#xa; to the deviceId that BIDdfRequest already provides.
</description>
<return>
<type class="com.tridium.ddf.identify.BDdfIdParams"/>
<description/>
</return>
</method>

<!-- com.tridium.ddf.comm.req.BIDdfWriteRequest.setWriteParameters(com.tridium.ddf.identify.BDdfIdParams) -->
<method name="setWriteParameters"  public="true" abstract="true">
<description>
Sets the write parameters that distinguish one instance&#xa; of the request class from another instance, in addition&#xa; to the deviceId that BIDdfRequest already provides.
</description>
<parameter name="requestId">
<type class="com.tridium.ddf.identify.BDdfIdParams"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddf.comm.req.BIDdfWriteRequest.getWritableSource() -->
<method name="getWritableSource"  public="true" abstract="true">
<description>
Returns the writableSource objects that this message can&#xa; update. The ddf will automatically call&#xa; writeOk or writeFail on these items.
</description>
<return>
<type class="com.tridium.ddf.comm.req.IDdfWritable" dimension="1"/>
</return>
</method>

<!-- com.tridium.ddf.comm.req.BIDdfWriteRequest.setWritableSource(com.tridium.ddf.comm.req.IDdfWritable[]) -->
<method name="setWritableSource"  public="true" abstract="true">
<description>
Assigns the writableSource objects that this message can&#xa; update. If the message only reads one&#xa; item then the array may be of length one!&#xa;&#xa; This method is also called automatically in the&#xa; com.tridium.ddf framework to automatically&#xa; write points in drivers that are based on the ddf driver&#xa; framework.
</description>
<parameter name="writableSource">
<type class="com.tridium.ddf.comm.req.IDdfWritable" dimension="1"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddf.comm.req.BIDdfWriteRequest.getAutoWriteOk() -->
<method name="getAutoWriteOk"  public="true" abstract="true">
<description>
If set to true then the ddf will automatically&#xa; call writeOk on all writable source objects whenever a response is&#xa; received for this request.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- com.tridium.ddf.comm.req.BIDdfWriteRequest.getAutoWriteOkLate() -->
<method name="getAutoWriteOkLate"  public="true" abstract="true">
<description>
If set to true then the ddf will automatically&#xa; call writeOk on all writable source objects in the event that the&#xa; response to this message is received late after this request times&#xa; out. This behavior is sometimes desireable for protocols that support&#xa; multiple outstanding requests.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- com.tridium.ddf.comm.req.BIDdfWriteRequest.getAutoWriteFailOnTimeout() -->
<method name="getAutoWriteFailOnTimeout"  public="true" abstract="true">
<description>
If set to true then the ddf will automatically&#xa; call writeFail on all writable source objects in the event that the&#xa; a timeout occurs while waiting for the response to this message.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- com.tridium.ddf.comm.req.BIDdfWriteRequest.getAutoWriteFailOnError() -->
<method name="getAutoWriteFailOnError"  public="true" abstract="true">
<description>
If this method returns true then the ddf driver&#xa; framework will call writeFail on all readable sources&#xa; for this request upon receipt of a response that&#xa; indicates an error condition.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- com.tridium.ddf.comm.req.BIDdfWriteRequest.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
