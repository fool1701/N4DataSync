<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="devDriver" runtimeProfile="rt" qualifiedName="com.tridium.ddf.comm.req.util.DdfRequestUtil" name="DdfRequestUtil" packageName="com.tridium.ddf.comm.req.util" public="true" abstract="true">
<description>
This class contains methods that allow the communicator to process&#xa; communication errors, responses, and timeouts in an orderly fashion.&#xa; &#xa; This class also features the &#x27;communicateSync&#x27; method that allows&#xa; developers to perform driver communications in a blocking (synchronous)&#xa; fashion.
</description>
<tag name="@author">lperkins</tag>
<tag name="@creation">Oct 9, 2006</tag>
<tag name="@version">$Revision$ $Date$</tag>
<tag name="@since">Niagara 3.0</tag>
<extends>
<type class="java.lang.Object"/>
</extends>
<implements>
<type class="com.tridium.ddf.IDdfFacetConst"/>
</implements>
<!-- com.tridium.ddf.comm.req.util.DdfRequestUtil() -->
<constructor name="DdfRequestUtil" public="true">
<description/>
</constructor>

<!-- com.tridium.ddf.comm.req.util.DdfRequestUtil.processResponse(com.tridium.ddf.comm.req.BIDdfRequest, com.tridium.ddf.comm.rsp.BIDdfResponse) -->
<method name="processResponse"  public="true" static="true">
<description>
This is a callback method that the BDdfCommunicator calls when it pairs up a response message&#xa; with a request message.&#xa;&#xa; If the request is a ddf custom request then this method calls&#xa; processResponse on the request to allow the implementor to take&#xa; appropriate, custom action. After that this calls notifyAll on&#xa; the object to optionally allow stuff such as the poll method to&#xa; wait on the request for the transaction to be completed.
</description>
<parameter name="ddfReq">
<type class="com.tridium.ddf.comm.req.BIDdfRequest"/>
</parameter>
<parameter name="ddfRsp">
<type class="com.tridium.ddf.comm.rsp.BIDdfResponse"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddf.comm.req.util.DdfRequestUtil.processTimeout(com.tridium.ddf.comm.req.BIDdfRequest) -->
<method name="processTimeout"  public="true" static="true">
<description>
This is a callback method that the BDdfCommunicator calls when&#xa; it decides to give up on receiving a response for a ddf request.&#xa;&#xa; If the request is a ddf custom request then this method calls&#xa; processTimeout on the request to allow the implementor to take&#xa; appropriate, custom action. After that this calls notifyAll on&#xa; the object to optionally allow stuff such as the poll method to&#xa; wait on the request for the transaction to be completed.
</description>
<parameter name="ddfReq">
<type class="com.tridium.ddf.comm.req.BIDdfRequest"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddf.comm.req.util.DdfRequestUtil.processLateResponse(com.tridium.ddf.comm.req.BIDdfRequest, com.tridium.ddf.comm.rsp.BIDdfResponse) -->
<method name="processLateResponse"  public="true" static="true">
<description>
This is a callback method that the BDdfCommunicator calls if it&#xa; recieves a response to a BIDdfRequest message after it has timed out.&#xa;&#xa; If the request is a ddf custom request then this method calls&#xa; processLateResponse on the request to allow the implementor to take&#xa; appropriate, custom action..
</description>
<parameter name="ddfReq">
<type class="com.tridium.ddf.comm.req.BIDdfRequest"/>
</parameter>
<parameter name="ddfRsp">
<type class="com.tridium.ddf.comm.rsp.BIDdfResponse"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddf.comm.req.util.DdfRequestUtil.processReceive(com.tridium.ddf.comm.req.BIDdfRequest, com.tridium.ddf.comm.IDdfDataFrame) -->
<method name="processReceive"  public="true" static="true">
<description>
After transmitting this request, the BDdfCommunicator will pass all data frames that it receives&#xa; here.&#xa;&#xa; This method in turn calls ddfProcessReceive as a hook for descendant classes to implement.&#xa;&#xa;  This request needs to take one of the following steps:&#xa;   1. Ignore the frame and return null.&#xa;   2. Collect the frame and return null.&#xa;   3. Return a DdfResponse for the data frame and any previously collected frames that comprise&#xa;   the response (the latter is not typical).&#xa;   4. Throw an DdfResponseException or subclass there-of to indicate the the frame&#xa;   forms a complete message but indicates an error condition in the device preventing&#xa;   a successful response.
</description>
<parameter name="ddfReq">
<type class="com.tridium.ddf.comm.req.BIDdfRequest"/>
</parameter>
<parameter name="iDdfDataFrame">
<type class="com.tridium.ddf.comm.IDdfDataFrame"/>
<description/>
</parameter>
<return>
<type class="com.tridium.ddf.comm.rsp.BIDdfResponse"/>
<description/>
</return>
<throws>
<type class="com.tridium.ddf.comm.rsp.DdfResponseException"/>
</throws>
</method>

<!-- com.tridium.ddf.comm.req.util.DdfRequestUtil.processErrorResponse(com.tridium.ddf.comm.req.BIDdfRequest, com.tridium.ddf.comm.rsp.DdfResponseException) -->
<method name="processErrorResponse"  public="true" static="true">
<description>
This is a callback method that the BDdfCommunicator calls when it pairs up the received&#xa; frame(s) with a request message but the frames indicate that an error condition exists&#xa; in the device preventing it from responding successfully.
</description>
<parameter name="ddfReq">
<type class="com.tridium.ddf.comm.req.BIDdfRequest"/>
</parameter>
<parameter name="errorRsp">
<type class="com.tridium.ddf.comm.rsp.DdfResponseException"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddf.comm.req.util.DdfRequestUtil.communicateSync(com.tridium.ddf.comm.BIDdfCommunicator, com.tridium.ddf.comm.req.BIDdfRequest) -->
<method name="communicateSync"  public="true" static="true">
<description>
This method simulates a synchronous communication mechanism.&#xa;&#xa; Note: The developer driver framework functions in a completely asynchronous&#xa; fashion. If the developer needs to take some action as a result of the request&#xa; timing out or receiving a response, then the correct way to accomplish this&#xa; is by making the request implement BIDdfCustomRequest. By doing that, the&#xa; developer driver framework will make some callbacks onto the request itself&#xa; when the request either times out or gets a response. In the latter case, the&#xa; response is even passed to the callback method.&#xa;&#xa; If a developer insists on a synchronous communications interface then the&#xa; developer may call this method, pass in the communicator, and pass in the&#xa; request. This method will block until the response has been received for the&#xa; request or until the request times out.
</description>
<parameter name="communicator">
<type class="com.tridium.ddf.comm.BIDdfCommunicator"/>
<description/>
</parameter>
<parameter name="req">
<type class="com.tridium.ddf.comm.req.BIDdfRequest"/>
<description/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

</class>
</bajadoc>
