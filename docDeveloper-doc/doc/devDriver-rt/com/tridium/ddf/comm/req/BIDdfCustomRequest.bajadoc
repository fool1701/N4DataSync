<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="devDriver" runtimeProfile="rt" qualifiedName="com.tridium.ddf.comm.req.BIDdfCustomRequest" name="BIDdfCustomRequest" packageName="com.tridium.ddf.comm.req" public="true" interface="true" abstract="true" category="interface">
<description>
The driver developer should make request message&#xa; types implement this method if the driver developer&#xa; wishes to perform his or her own special processing&#xa; on the response.&#xa;&#xa; Please keep in mind that devDriver automatically&#xa; provides default behavior in BIDdfReadRequest to&#xa; update control points, in BIDdfPingRequest to&#xa; update pingable devices, networks, etc, in BIDdfWriteRequest&#xa; to update the value of one or more driver points, and in &#xa; BIDdfDiscoveryRequest to find one or more driver points&#xa; or devices. Therefore, a driver developer should only&#xa; implement this interface if he or she needs to perform&#xa; additional operations upon the response.
</description>
<tag name="@author">lperkins</tag>
<implements>
<type class="javax.baja.sys.BInterface"/>
</implements>
<!-- com.tridium.ddf.comm.req.BIDdfCustomRequest.processLateResponse(com.tridium.ddf.comm.rsp.BIDdfResponse) -->
<method name="processLateResponse"  public="true" abstract="true">
<description>
This is a callback method that the BDdfCommunicator calls if it recieves a response to this&#xa; message after it has timed out.
</description>
<parameter name="ddfRsp">
<type class="com.tridium.ddf.comm.rsp.BIDdfResponse"/>
<description/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddf.comm.req.BIDdfCustomRequest.processReceive(com.tridium.ddf.comm.IDdfDataFrame) -->
<method name="processReceive"  public="true" abstract="true">
<description>
After transmitting this request, the BDdfCommunicator will pass frames that it receives&#xa; here. If you implement the getTag method then the ddf communicator will only pass data frames&#xa; whose tag&#x27;s hashcode matches your request tag&#x27;s hashcode. If your request returns null from&#xa; the getTag method then all received data frames will be passed here, until the request times&#xa; out or returns a BIDdfResponse from this method.&#xa;&#xa;  This request needs to take one of the following steps:&#xa;   1. Ignore the frame and return null. The transaction remains open.&#xa;   2. Collect the frame and return a BIDdfMultiFrameResponse whose &lt;i&gt;isComplete&lt;/i&gt; method returns &lt;i&gt;false&lt;/i&gt;. In which case, you need to implement your own collection&#xa;      mechanism. For example, this could be as simple as putting them all in a Vector in the BIDdfMultiFrameResponse. In&#xa;      this scenario, the transaction remains open. The transaction response timeout will be reset to the &lt;i&gt;responseTimeout&lt;/i&gt; of the&#xa;      returned &lt;i&gt;BIMultiFrameResponse&lt;/i&gt; thereby allowing more time for the remainder of the transaction to complete.&#xa;   3. Return a BIDdfResponse for the data frame and any previously collected frames that you determine together make up a completed response.&#xa;      This completes the transaction. Alternatively, if you have any previously collected frames then you may return the instance of&#xa;      BIDdfMultiFrameResponse as long as its &lt;i&gt;isComplete&lt;/i&gt; method subsequently returns &lt;i&gt;true&lt;/i&gt;. Both of these scenarios&#xa;      complete the transaction.  &#xa;   4. Throw an DdfResponseException or subclass there-of to indicate the the frame&#xa;   forms a complete message but indicates an error condition in the device preventing&#xa;   a successful response. This completes the transaction.&#xa;&#xa;   WARNING: In scenario&#x27;s 2 and 3, please copy the frame&#x27;s bytes as the frame&#x27;s byte array could be a direct reference to an internal&#xa;   buffer in the receiver.
</description>
<parameter name="iDdfDataFrame">
<type class="com.tridium.ddf.comm.IDdfDataFrame"/>
<description/>
</parameter>
<return>
<type class="com.tridium.ddf.comm.rsp.BIDdfResponse"/>
<description>
BIDdfResponse but please review the full description for this method.
</description>
</return>
<throws>
<type class="com.tridium.ddf.comm.rsp.DdfResponseException"/>
<description>
but please review the full description for this method.
</description>
</throws>
</method>

<!-- com.tridium.ddf.comm.req.BIDdfCustomRequest.processResponse(com.tridium.ddf.comm.rsp.BIDdfResponse) -->
<method name="processResponse"  public="true" abstract="true">
<description>
This is a callback method that the BDdfCommunicator calls when it pairs up a response message&#xa; with this message.
</description>
<parameter name="ddfRsp">
<type class="com.tridium.ddf.comm.rsp.BIDdfResponse"/>
<description/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddf.comm.req.BIDdfCustomRequest.processTimeout() -->
<method name="processTimeout"  public="true" abstract="true">
<description>
The BDdfTransactionManager calls this method on responses&#xa; when they timeout. The response should update any database&#xa; or discovery items accordingly.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddf.comm.req.BIDdfCustomRequest.processErrorResponse(com.tridium.ddf.comm.rsp.DdfResponseException) -->
<method name="processErrorResponse"  public="true" abstract="true">
<description>
This is a callback method that the BDdfCommunicator calls when it pairs up the received&#xa; frame(s) to this request but the receive frame(s) report an error condition that inhibits&#xa; the device from responding successfully.
</description>
<parameter name="errorRsp">
<type class="com.tridium.ddf.comm.rsp.DdfResponseException"/>
<description>
- the DdfResponseException that was thrown from the processReceive method.
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddf.comm.req.BIDdfCustomRequest.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
