<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="devDriver" runtimeProfile="rt" qualifiedName="com.tridium.ddf.comm.req.util.DdfReadRequestUtil" name="DdfReadRequestUtil" packageName="com.tridium.ddf.comm.req.util" public="true">
<description>
Processes read requests on behalf of the transaction manager.
</description>
<tag name="@author">lperkins</tag>
<extends>
<type class="java.lang.Object"/>
</extends>
<implements>
<type class="com.tridium.ddf.IDdfFacetConst"/>
</implements>
<!-- com.tridium.ddf.comm.req.util.DdfReadRequestUtil() -->
<constructor name="DdfReadRequestUtil" public="true">
<description/>
</constructor>

<!-- com.tridium.ddf.comm.req.util.DdfReadRequestUtil.processResponse(com.tridium.ddf.comm.req.BIDdfReadRequest, com.tridium.ddf.comm.rsp.BIDdfReadResponse) -->
<method name="processResponse"  public="true" static="true">
<description>
This is a callback method that the BDdfCommunicator calls when it pairs up a read response&#xa; with a read request.&#xa;&#xa; This loops through all readableSource objects for the ddfReq and calls readOk on&#xa; each of them, passing in the result of calling parseReadValue on the ddf response&#xa; passing in the readableSource object. After that, this calls DdfRequestUtil.processResponse
</description>
<parameter name="ddfReq">
<type class="com.tridium.ddf.comm.req.BIDdfReadRequest"/>
</parameter>
<parameter name="ddfRsp">
<type class="com.tridium.ddf.comm.rsp.BIDdfReadResponse"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddf.comm.req.util.DdfReadRequestUtil.processTimeout(com.tridium.ddf.comm.req.BIDdfReadRequest) -->
<method name="processTimeout"  public="true" static="true">
<description>
This is a callback method that the BDdfCommunicator calls when it decides to give up on receiving&#xa; a response message for this message.&#xa;&#xa; This loops through all readableSource objects for the ddfReq and calls readFail on&#xa; each of them. After that, this calls DdfRequestUtil.processTimeout.
</description>
<parameter name="ddfReq">
<type class="com.tridium.ddf.comm.req.BIDdfReadRequest"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddf.comm.req.util.DdfReadRequestUtil.processLateResponse(com.tridium.ddf.comm.req.BIDdfReadRequest, com.tridium.ddf.comm.rsp.BIDdfReadResponse) -->
<method name="processLateResponse"  public="true" static="true">
<description>
This is a callback method that the BDdfCommunicator calls when it pairs up a read response&#xa; with a read request, late, after the read request has already timed out.&#xa;&#xa; If the getAutoReadOkLate method of the ddfRsp returns true then this loops through all&#xa; readableSource objects for the ddfReq and calls readOk on each of them, passing in the&#xa; result of calling parseReadValue on the ddf response and passing in the readableSource&#xa; object. After that, this calls DdfRequestUtil.processResponse
</description>
<parameter name="ddfReq">
<type class="com.tridium.ddf.comm.req.BIDdfReadRequest"/>
</parameter>
<parameter name="ddfRsp">
<type class="com.tridium.ddf.comm.rsp.BIDdfReadResponse"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddf.comm.req.util.DdfReadRequestUtil.processReceive(com.tridium.ddf.comm.req.BIDdfReadRequest, com.tridium.ddf.comm.IDdfDataFrame) -->
<method name="processReceive"  public="true" static="true">
<description>
After transmitting a read request, the BDdfCommunicator will pass all data frames that it receives&#xa; for the request here. This request needs to take one of the following steps:&#xa;   1. Ignore the frame and return null.&#xa;   2. Collect the frame and return null.&#xa;   3. Return a DdfResponse for the data frame and any previously collected frames that comprise&#xa;   the response (the latter is not typical).
</description>
<parameter name="ddfReq">
<type class="com.tridium.ddf.comm.req.BIDdfReadRequest"/>
</parameter>
<parameter name="iDdfDataFrame">
<type class="com.tridium.ddf.comm.IDdfDataFrame"/>
<description/>
</parameter>
<return>
<type class="com.tridium.ddf.comm.rsp.BIDdfResponse"/>
<description>
the BIDdfResponse that is returned by calling processReceive on the ddfReq passing in&#xa; the iDdfDataFrame. One caveat though: the BIDdfResponse must be a BIDdfReadResponse
</description>
</return>
<throws>
<type class="com.tridium.ddf.comm.rsp.DdfResponseException"/>
</throws>
</method>

<!-- com.tridium.ddf.comm.req.util.DdfReadRequestUtil.processErrorResponse(com.tridium.ddf.comm.req.BIDdfReadRequest, com.tridium.ddf.comm.rsp.DdfResponseException) -->
<method name="processErrorResponse"  public="true" static="true">
<description>
This is a callback method that DdfRequestUtil calls when it pairs up the received&#xa; frame(s) with a request message but the frames indicate that an error condition exists&#xa; in the device preventing it from responding successfully.
</description>
<parameter name="ddfReq">
<type class="com.tridium.ddf.comm.req.BIDdfReadRequest"/>
</parameter>
<parameter name="errorRsp">
<type class="com.tridium.ddf.comm.rsp.DdfResponseException"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

</class>
</bajadoc>
