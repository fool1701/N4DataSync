<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="devDriver" runtimeProfile="rt" qualifiedName="com.tridium.ddf.comm.req.BDdfDiscoveryRequest" name="BDdfDiscoveryRequest" packageName="com.tridium.ddf.comm.req" public="true" abstract="true">
<description>
This is a default, base class that implements BIDdfDiscoverRequest.&#xa; &#xa; The following are related to the automatic discovery mechanism&#xa; that devDriver provides:&#xa; &#xa; &lt;ul&gt;&#xa; &lt;li&gt;BIDdfDiscoverRequest&#xa; &lt;li&gt;BIDdfDiscoverResponse&#xa; &lt;li&gt;All classes in the packages &lt;i&gt;com.tridium.ddf.discover&lt;/i&gt; and &lt;i&gt;com.tridium.ddf.discover.auto&lt;/i&gt;&#xa; &lt;/ul&gt;&#xa; &#xa; For more details, please see the Java Doc that is provided with&#xa; BIDdfDiscoverRequest.
</description>
<tag name="@see">BIDdfDiscoverRequest</tag>
<tag name="@author">lperkins</tag>
<extends>
<type class="com.tridium.ddf.comm.req.BDdfRequest"/>
</extends>
<implements>
<type class="com.tridium.ddf.comm.req.BIDdfDiscoverRequest"/>
</implements>
<property name="discoverParameters" flags="">
<type class="com.tridium.ddf.identify.BDdfIdParams"/>
<description>
Slot for the &lt;code&gt;discoverParameters&lt;/code&gt; property.&#xa; This provides the necessary data that the toByteArray method&#xa; Needs in order to construct the byte array.&#xa; NOTE: During auto-discovery, the auto discovery job loops&#xa; through all possible combinations of discoverParameters. Each&#xa; pass through the loop, the next discoverParameters value for&#xa; your driver is passed to this property. When you implement&#xa; the toByteArray method, you may cast this to your own&#xa; discoverParameters class (that is what it will ultimately be).
</description>
<tag name="@see">#getDiscoverParameters</tag>
<tag name="@see">#setDiscoverParameters</tag>
</property>

<!-- com.tridium.ddf.comm.req.BDdfDiscoveryRequest() -->
<constructor name="BDdfDiscoveryRequest" public="true">
<description/>
</constructor>

<!-- com.tridium.ddf.comm.req.BDdfDiscoveryRequest.getDiscoverParameters() -->
<method name="getDiscoverParameters"  public="true">
<description>
Get the &lt;code&gt;discoverParameters&lt;/code&gt; property.&#xa; This provides the necessary data that the toByteArray method&#xa; Needs in order to construct the byte array.&#xa; NOTE: During auto-discovery, the auto discovery job loops&#xa; through all possible combinations of discoverParameters. Each&#xa; pass through the loop, the next discoverParameters value for&#xa; your driver is passed to this property. When you implement&#xa; the toByteArray method, you may cast this to your own&#xa; discoverParameters class (that is what it will ultimately be).
</description>
<tag name="@see">#discoverParameters</tag>
<return>
<type class="com.tridium.ddf.identify.BDdfIdParams"/>
</return>
</method>

<!-- com.tridium.ddf.comm.req.BDdfDiscoveryRequest.setDiscoverParameters(com.tridium.ddf.identify.BDdfIdParams) -->
<method name="setDiscoverParameters"  public="true">
<description>
Set the &lt;code&gt;discoverParameters&lt;/code&gt; property.&#xa; This provides the necessary data that the toByteArray method&#xa; Needs in order to construct the byte array.&#xa; NOTE: During auto-discovery, the auto discovery job loops&#xa; through all possible combinations of discoverParameters. Each&#xa; pass through the loop, the next discoverParameters value for&#xa; your driver is passed to this property. When you implement&#xa; the toByteArray method, you may cast this to your own&#xa; discoverParameters class (that is what it will ultimately be).
</description>
<tag name="@see">#discoverParameters</tag>
<parameter name="v">
<type class="com.tridium.ddf.identify.BDdfIdParams"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddf.comm.req.BDdfDiscoveryRequest.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- com.tridium.ddf.comm.req.BDdfDiscoveryRequest.getDiscoverer() -->
<method name="getDiscoverer"  public="true">
<description/>
<return>
<type class="com.tridium.ddf.discover.IDdfDiscoverer"/>
</return>
</method>

<!-- com.tridium.ddf.comm.req.BDdfDiscoveryRequest.setDiscoverer(com.tridium.ddf.discover.IDdfDiscoverer) -->
<method name="setDiscoverer"  public="true">
<description/>
<parameter name="discoverer">
<type class="com.tridium.ddf.discover.IDdfDiscoverer"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddf.comm.req.BDdfDiscoveryRequest.discoverParameters -->
<field name="discoverParameters"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;discoverParameters&lt;/code&gt; property.&#xa; This provides the necessary data that the toByteArray method&#xa; Needs in order to construct the byte array.&#xa; NOTE: During auto-discovery, the auto discovery job loops&#xa; through all possible combinations of discoverParameters. Each&#xa; pass through the loop, the next discoverParameters value for&#xa; your driver is passed to this property. When you implement&#xa; the toByteArray method, you may cast this to your own&#xa; discoverParameters class (that is what it will ultimately be).
</description>
<tag name="@see">#getDiscoverParameters</tag>
<tag name="@see">#setDiscoverParameters</tag>
</field>

<!-- com.tridium.ddf.comm.req.BDdfDiscoveryRequest.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
