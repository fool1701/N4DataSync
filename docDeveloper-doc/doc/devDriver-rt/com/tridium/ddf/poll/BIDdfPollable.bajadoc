<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="devDriver" runtimeProfile="rt" qualifiedName="com.tridium.ddf.poll.BIDdfPollable" name="BIDdfPollable" packageName="com.tridium.ddf.poll" public="true" interface="true" abstract="true" category="interface">
<description>
If you are designing a driver that extends the ddf and you would like&#xa; to introduce some data to the Niagara AX framework, then you should define some classes&#xa; that implement the BIDdfPollable interface.&#xa;&#xa; HINT: The most typical usage is where proxy extensions are placed on proxy points under a ddf&#xa; device. We encourage you to adopt this model and extend the ddf proxy ext.&#xa;&#xa; Even though this interface does not extend javax.baja.driver.sys.BIPollable, implementing classes&#xa; are encouraged to implement BIPollable if it could make sense for them to have a poll frequency.
</description>
<tag name="@author">lperkins</tag>
<tag name="@creation">Oct 10, 2006</tag>
<tag name="@version">$Revision$ $Date$</tag>
<tag name="@since">Niagara 3.0</tag>
<implements>
<type class="javax.baja.sys.BInterface"/>
</implements>
<implements>
<type class="com.tridium.ddf.comm.req.IDdfReadable"/>
</implements>
<implements>
<type class="com.tridium.ddf.IDdfFacetConst"/>
</implements>
<!-- com.tridium.ddf.poll.BIDdfPollable.getReadRequestType() -->
<method name="getReadRequestType"  public="true" abstract="true">
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- com.tridium.ddf.poll.BIDdfPollable.getPollGroupCode() -->
<method name="getPollGroupCode"  public="true" abstract="true">
<description>
HINT: Making this method return something other than null is optional.&#xa;&#xa; Allows a group of BIDdfPollables to be polled using a single message on the field-bus.&#xa;&#xa; All BIDdfPollables that can be polled in a single message on the field-bus should return&#xa; the same reference from this method. The easiest example would be where a group of ddf&#xa; proxies returns the instance of their ddf device. That would cause all ddf proxies under&#xa; the ddf device to be polled in a single field-bus message.
</description>
<return>
<type class="java.lang.Object"/>
</return>
</method>

<!-- com.tridium.ddf.poll.BIDdfPollable.getDdfCommunicator() -->
<method name="getDdfCommunicator"  public="true" abstract="true">
<description>
Indicates the BDdfCommunicator that will send and/or receive field-bus messages for this object. This&#xa; could vary widely based on the communication medium. For serial drivers, the ddf communicator object is&#xa; usually placed on the ddf network. For tcp driver, the ddf communicator object is typically placed on&#xa; the ddf network if the network acts as a gateway, or on the ddf device if the field device has its own&#xa; i.p. address.
</description>
<return>
<type class="com.tridium.ddf.comm.BIDdfCommunicator"/>
</return>
</method>

<!-- com.tridium.ddf.poll.BIDdfPollable.makePollRequest() -->
<method name="makePollRequest"  public="true" abstract="true">
<description>
Instances need to construct an instance of BIDdfReadRequest to be placed on the ddf&#xa; communicator. The ddf communicator will make &#x27;transmit&#x27; the serialized data from this&#xa; BIDdfReadRequest onto the field-bus and make call-backs to this BIDdfReadRequest object&#xa; when the response is receive or timed out.
</description>
<return>
<type class="com.tridium.ddf.comm.req.BIDdfReadRequest"/>
</return>
</method>

<!-- com.tridium.ddf.poll.BIDdfPollable.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
