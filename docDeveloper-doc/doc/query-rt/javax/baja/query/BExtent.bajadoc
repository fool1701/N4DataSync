<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="query" runtimeProfile="rt" qualifiedName="javax.baja.query.BExtent" name="BExtent" packageName="javax.baja.query" public="true" abstract="true">
<description>
Describes the contract that all extents in the query must implement. An extent&#xa; is used to restrict the set of objects that the query will execute against.&#xa; Use the &lt;code&gt;list()&lt;/code&gt; to find out that set; the meaning of the extent&#xa; is almost always query language specific, and possibly BSpace specific.&#xa; &lt;p&gt;&#xa; &lt;code&gt;BTypedExtent&lt;/code&gt; describes a contract for a BExtent that is defined&#xa; by zero or more &lt;code&gt;Type&lt;/code&gt;s.  &lt;code&gt;BSingleExtent&lt;/code&gt; provides an &#xa; implementation of &lt;code&gt;BTypedExtent&lt;/code&gt; that only allows at most a single Type&#xa; in the extent. BSingleExtent is, by far, the most common BExtent for practical use.
</description>
<tag name="@author">Matthew Giannini</tag>
<tag name="@creation">Apr 14, 2008</tag>
<tag name="@version">$Revision: 14$ $Date: 7/18/08 8:54:46 AM EDT$</tag>
<tag name="@since">Baja 3.4</tag>
<tag name="@see">BTypedExtent</tag>
<tag name="@see">BSingleExtent</tag>
<tag name="@see">#make(Type)</tag>
<extends>
<type class="javax.baja.query.BQueryNode"/>
</extends>
<!-- javax.baja.query.BExtent() -->
<constructor name="BExtent" public="true">
<description/>
</constructor>

<!-- javax.baja.query.BExtent.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.query.BExtent.list() -->
<method name="list"  public="true" abstract="true">
<description>
All BExtent must be able to return a representation of themselves as&#xa; a list of String.
</description>
<return>
<type class="java.lang.String" dimension="1"/>
<description>
a String[] where each element is the String representation of&#xa; part of the extent. If the BExtent is empty, return a zero-length array.
</description>
</return>
</method>

<!-- javax.baja.query.BExtent.isBaseExtent() -->
<method name="isBaseExtent"  public="true" final="true">
<description>
An extent is a base extent if the extent is solely determined by they&#xa; query base. This is the case only when &lt;code&gt;list().length == 0&lt;/code&gt;
</description>
<return>
<type class="boolean"/>
<description>
true if &lt;code&gt;list().length == 0&lt;/code&gt;, false otherwise.
</description>
</return>
</method>

<!-- javax.baja.query.BExtent.isTypedExtent() -->
<method name="isTypedExtent"  public="true" final="true">
<description>
Does this extent extend from type &lt;code&gt;BTypedExtent&lt;/code&gt;?
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.query.BExtent.asTypedExtent() -->
<method name="asTypedExtent"  public="true" final="true">
<description>
narrow to &lt;code&gt;BTypedExtent&lt;/code&gt;.
</description>
<return>
<type class="javax.baja.query.BTypedExtent"/>
</return>
</method>

<!-- javax.baja.query.BExtent.make(javax.baja.sys.Type) -->
<method name="make"  public="true" static="true">
<description>
Convenience for &lt;code&gt;new BSingleExtent(baseType)&lt;/code&gt;
</description>
<parameter name="baseType">
<type class="javax.baja.sys.Type"/>
</parameter>
<return>
<type class="javax.baja.query.BSingleExtent"/>
</return>
</method>

<!-- javax.baja.query.BExtent.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
