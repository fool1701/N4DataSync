<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="query" runtimeProfile="rt" qualifiedName="javax.baja.query.util.Funcs" name="Funcs" packageName="javax.baja.query.util" public="true">
<description/>
<tag name="@author">Matthew Giannini</tag>
<tag name="@creation">Apr 18, 2008</tag>
<tag name="@version">$Revision: 8$ $Date: 11/3/09 12:05:30 PM EST$</tag>
<tag name="@since">Baja 3.4</tag>
<extends>
<type class="javax.baja.query.util.Exprs"/>
</extends>
<!-- javax.baja.query.util.Funcs() -->
<constructor name="Funcs" public="true">
<description/>
</constructor>

<!-- javax.baja.query.util.Funcs.make(java.lang.String, javax.baja.sys.Type, javax.baja.query.BExpression[]) -->
<method name="make"  public="true" static="true">
<description>
Make a function expression.
</description>
<parameter name="functionName">
<type class="java.lang.String"/>
<description>
the String name of the function.
</description>
</parameter>
<parameter name="returnType">
<type class="javax.baja.sys.Type"/>
<description>
the Type of the return type.
</description>
</parameter>
<parameter name="params">
<type class="javax.baja.query.BExpression" dimension="1"/>
<description>
the BExpression[] list containing the parameters in the proper&#xa; order.
</description>
</parameter>
<return>
<type class="javax.baja.query.expression.BFunctionExpression"/>
<description>
a BFunctionExpression built using the parameters.
</description>
</return>
</method>

<!-- javax.baja.query.util.Funcs.make(java.lang.String, javax.baja.sys.Type, javax.baja.query.BExpression) -->
<method name="make"  public="true" static="true">
<description/>
<parameter name="functionName">
<type class="java.lang.String"/>
</parameter>
<parameter name="returnType">
<type class="javax.baja.sys.Type"/>
</parameter>
<parameter name="expr">
<type class="javax.baja.query.BExpression"/>
</parameter>
<return>
<type class="javax.baja.query.expression.BFunctionExpression"/>
</return>
</method>

<!-- javax.baja.query.util.Funcs.make(java.lang.String, javax.baja.sys.Type, java.lang.String) -->
<method name="make"  public="true" static="true">
<description/>
<parameter name="functionName">
<type class="java.lang.String"/>
</parameter>
<parameter name="returnType">
<type class="javax.baja.sys.Type"/>
</parameter>
<parameter name="field">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.query.expression.BFunctionExpression"/>
</return>
</method>

<!-- javax.baja.query.util.Funcs.avg(javax.baja.query.BExpression) -->
<method name="avg"  public="true" static="true">
<description>
Convenience for &lt;code&gt;make(&#x22;AVG&#x22;, BDouble.TYPE, expr)&lt;/code&gt;
</description>
<parameter name="expr">
<type class="javax.baja.query.BExpression"/>
</parameter>
<return>
<type class="javax.baja.query.expression.BFunctionExpression"/>
</return>
</method>

<!-- javax.baja.query.util.Funcs.avg(java.lang.String) -->
<method name="avg"  public="true" static="true">
<description>
Convenience for &lt;code&gt;make(&#x22;AVG&#x22;, BDouble.TYPE, field)&lt;/code&gt;
</description>
<parameter name="field">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.query.expression.BFunctionExpression"/>
</return>
</method>

<!-- javax.baja.query.util.Funcs.count(javax.baja.query.BExpression) -->
<method name="count"  public="true" static="true">
<description>
Convenience for &lt;code&gt;make(&#x22;COUNT&#x22;, BInteger.TYPE, expr)&lt;/code&gt;
</description>
<parameter name="expr">
<type class="javax.baja.query.BExpression"/>
</parameter>
<return>
<type class="javax.baja.query.expression.BFunctionExpression"/>
</return>
</method>

<!-- javax.baja.query.util.Funcs.count(java.lang.String) -->
<method name="count"  public="true" static="true">
<description>
Convenience for &lt;code&gt;make(&#x22;COUNT&#x22;, BInteger.TYPE, field)&lt;/code&gt;
</description>
<parameter name="field">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.query.expression.BFunctionExpression"/>
</return>
</method>

<!-- javax.baja.query.util.Funcs.max(javax.baja.query.BExpression) -->
<method name="max"  public="true" static="true">
<description>
Convenience for &lt;code&gt;make(&#x22;MAX&#x22;, BDouble.TYPE, expr)&lt;/code&gt;
</description>
<parameter name="expr">
<type class="javax.baja.query.BExpression"/>
</parameter>
<return>
<type class="javax.baja.query.expression.BFunctionExpression"/>
</return>
</method>

<!-- javax.baja.query.util.Funcs.max(java.lang.String) -->
<method name="max"  public="true" static="true">
<description>
Convenience for &lt;code&gt;make(&#x22;MAX&#x22;, BDouble.TYPE, field)&lt;/code&gt;
</description>
<parameter name="field">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.query.expression.BFunctionExpression"/>
</return>
</method>

<!-- javax.baja.query.util.Funcs.min(javax.baja.query.BExpression) -->
<method name="min"  public="true" static="true">
<description>
Convenience for &lt;code&gt;make(&#x22;MIN&#x22;, BDouble.TYPE, expr)&lt;/code&gt;
</description>
<parameter name="expr">
<type class="javax.baja.query.BExpression"/>
</parameter>
<return>
<type class="javax.baja.query.expression.BFunctionExpression"/>
</return>
</method>

<!-- javax.baja.query.util.Funcs.min(java.lang.String) -->
<method name="min"  public="true" static="true">
<description>
Convenience for &lt;code&gt;make(&#x22;MIN&#x22;, BDouble.TYPE, field)&lt;/code&gt;
</description>
<parameter name="field">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.query.expression.BFunctionExpression"/>
</return>
</method>

<!-- javax.baja.query.util.Funcs.sum(javax.baja.query.BExpression) -->
<method name="sum"  public="true" static="true">
<description>
Convenience for &lt;code&gt;make(&#x22;SUM&#x22;, BDouble.TYPE, expr)&lt;/code&gt;
</description>
<parameter name="expr">
<type class="javax.baja.query.BExpression"/>
</parameter>
<return>
<type class="javax.baja.query.expression.BFunctionExpression"/>
</return>
</method>

<!-- javax.baja.query.util.Funcs.sum(java.lang.String) -->
<method name="sum"  public="true" static="true">
<description>
Convenience for &lt;code&gt;make(&#x22;SUM&#x22;, BDouble.TYPE, field)&lt;/code&gt;
</description>
<parameter name="field">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.query.expression.BFunctionExpression"/>
</return>
</method>

<!-- javax.baja.query.util.Funcs.lower(javax.baja.query.BExpression) -->
<method name="lower"  public="true" static="true">
<description>
Convenience for &lt;code&gt;make(&#x22;lower&#x22;, BSTRING.TYPE, expr)&lt;/code&gt;
</description>
<parameter name="expr">
<type class="javax.baja.query.BExpression"/>
</parameter>
<return>
<type class="javax.baja.query.expression.BFunctionExpression"/>
</return>
</method>

<!-- javax.baja.query.util.Funcs.lower(java.lang.String) -->
<method name="lower"  public="true" static="true">
<description>
Convenience for &lt;code&gt;make(&#x22;lower&#x22;, BSTRING.TYPE, field)&lt;/code&gt;
</description>
<parameter name="field">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.query.expression.BFunctionExpression"/>
</return>
</method>

<!-- javax.baja.query.util.Funcs.upper(javax.baja.query.BExpression) -->
<method name="upper"  public="true" static="true">
<description>
Convenience for &lt;code&gt;make(&#x22;upper&#x22;, BSTRING.TYPE, expr)&lt;/code&gt;
</description>
<parameter name="expr">
<type class="javax.baja.query.BExpression"/>
</parameter>
<return>
<type class="javax.baja.query.expression.BFunctionExpression"/>
</return>
</method>

<!-- javax.baja.query.util.Funcs.upper(java.lang.String) -->
<method name="upper"  public="true" static="true">
<description>
Convenience for &lt;code&gt;make(&#x22;upper&#x22;, BSTRING.TYPE, field)&lt;/code&gt;
</description>
<parameter name="field">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.query.expression.BFunctionExpression"/>
</return>
</method>

</class>
</bajadoc>
