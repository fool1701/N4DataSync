<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="query" runtimeProfile="rt" qualifiedName="javax.baja.query.BPredicate" name="BPredicate" packageName="javax.baja.query" public="true">
<description>
Represents a predicate in a BQuery.  A default implementation is provided,&#xa; but this class could be overridden if necessary.
</description>
<tag name="@author">Matthew Giannini</tag>
<tag name="@creation">Apr 18, 2008</tag>
<tag name="@version">$Revision: 7$ $Date: 6/20/08 3:05:22 PM EDT$</tag>
<tag name="@since">Baja 3.4</tag>
<extends>
<type class="javax.baja.query.BQueryNode"/>
</extends>
<!-- javax.baja.query.BPredicate() -->
<constructor name="BPredicate" public="true">
<description/>
</constructor>

<!-- javax.baja.query.BPredicate(javax.baja.query.BExpression) -->
<constructor name="BPredicate" public="true">
<parameter name="predicateExpr">
<type class="javax.baja.query.BExpression"/>
</parameter>
<description>
Creates a new predicate and sets the predicate expression to the given&#xa; value.  If &lt;code&gt;predicateExpr&lt;/code&gt; is null, then an empty predicate&#xa; is created.
</description>
</constructor>

<!-- javax.baja.query.BPredicate.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.query.BPredicate.getPredicateExpr() -->
<method name="getPredicateExpr"  public="true">
<description/>
<return>
<type class="javax.baja.query.BExpression"/>
<description>
the BExpression for the predicate, or null if the BPredicate&#xa; does not have a BExpression.
</description>
</return>
</method>

<!-- javax.baja.query.BPredicate.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
