<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="query" runtimeProfile="rt" qualifiedName="javax.baja.query.expression.BFunctionExpression" name="BFunctionExpression" packageName="javax.baja.query.expression" public="true" abstract="true">
<description>
A function expression represents a function call.
</description>
<tag name="@author">Matthew Giannini</tag>
<tag name="@creation">Apr 16, 2008</tag>
<tag name="@version">$Revision: 6$ $Date: 7/31/08 4:56:58 PM EDT$</tag>
<tag name="@since">Baja 3.4</tag>
<extends>
<type class="javax.baja.query.BExpression"/>
</extends>
<!-- javax.baja.query.expression.BFunctionExpression() -->
<constructor name="BFunctionExpression" public="true">
<description/>
</constructor>

<!-- javax.baja.query.expression.BFunctionExpression.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.query.expression.BFunctionExpression.getFunctionName() -->
<method name="getFunctionName"  public="true" abstract="true">
<description/>
<return>
<type class="java.lang.String"/>
<description>
a String representing the name of the function.
</description>
</return>
</method>

<!-- javax.baja.query.expression.BFunctionExpression.getFunctionType() -->
<method name="getFunctionType"  public="true" abstract="true">
<description/>
<return>
<type class="javax.baja.sys.Type"/>
<description>
the Type that is the return type of the function.
</description>
</return>
</method>

<!-- javax.baja.query.expression.BFunctionExpression.getParameters() -->
<method name="getParameters"  public="true" abstract="true">
<description/>
<return>
<type class="javax.baja.query.BExpression" dimension="1"/>
<description>
a BExpression[] containing the expressions to evaluate for each&#xa; parameter of the parameter list.  If the function does not take any &#xa; parameters, a zero-length array should be returned.
</description>
</return>
</method>

<!-- javax.baja.query.expression.BFunctionExpression.setDistinct(boolean) -->
<method name="setDistinct"  public="true" abstract="true">
<description>
Explicitly set the distinct flag for the function.
</description>
<tag name="@see">#distinct()</tag>
<parameter name="isDistinct">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.query.expression.BFunctionExpression.isDistinct() -->
<method name="isDistinct"  public="true" abstract="true">
<description/>
<tag name="@see">#distinct()</tag>
<return>
<type class="boolean"/>
<description>
true if the function is distinct, false otherwise.
</description>
</return>
</method>

<!-- javax.baja.query.expression.BFunctionExpression.distinct() -->
<method name="distinct"  public="true" final="true">
<description>
Marks that the function should act on only distinct instances&#xa; of its parameter values. For example, an SQL query engine that&#xa; supports distinct parameters could generate the following string&#xa; when executing if the distinct flag was set:&#xa; &lt;p&gt;&#xa; &lt;code&gt;COUNT(distinct lastName)&lt;/code&gt;
</description>
<return>
<type class="javax.baja.query.expression.BFunctionExpression"/>
</return>
</method>

<!-- javax.baja.query.expression.BFunctionExpression.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
