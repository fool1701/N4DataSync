<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="driver" runtimeProfile="rt" qualifiedName="javax.baja.driver.point.Tuning" name="Tuning" packageName="javax.baja.driver.point" public="true">
<description>
Tuning is the support class used by BITunables.  The&#xa; parent BITunable is required to make callbacks to this class&#xa; under specific conditions.  Refer to BITunable for details.
</description>
<tag name="@author">Brian Frank</tag>
<tag name="@creation">23 Jun 04</tag>
<tag name="@version">$Revision: 20$ $Date: 3/2/06 9:23:59 AM EST$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="java.lang.Object"/>
</extends>
<!-- javax.baja.driver.point.Tuning(javax.baja.driver.point.BITunable) -->
<constructor name="Tuning" public="true">
<parameter name="parent">
<type class="javax.baja.driver.point.BITunable"/>
</parameter>
<description>
Construct a BTuning with the specified BITunable parent.
</description>
</constructor>

<!-- javax.baja.driver.point.Tuning.getNetwork() -->
<method name="getNetwork"  public="true" final="true">
<description>
Get the parent network.
</description>
<return>
<type class="javax.baja.driver.BDeviceNetwork"/>
</return>
</method>

<!-- javax.baja.driver.point.Tuning.getPolicyMap() -->
<method name="getPolicyMap"  public="true" final="true">
<description>
Get the BTuningPolicyMap on the parent network.
</description>
<return>
<type class="javax.baja.driver.point.BTuningPolicyMap"/>
</return>
</method>

<!-- javax.baja.driver.point.Tuning.getPolicy() -->
<method name="getPolicy"  public="true">
<description>
Get the BTuningPolicy configured by policyName.  If the&#xa; policyName doesn&#x27;t map to a valid policy then log a warning&#xa; and use the defaultPolicy.
</description>
<return>
<type class="javax.baja.driver.point.BTuningPolicy"/>
</return>
</method>

<!-- javax.baja.driver.point.Tuning.getTunable() -->
<method name="getTunable"  public="true" final="true">
<description>
Get the parent ITunable.
</description>
<return>
<type class="javax.baja.driver.point.BITunable"/>
</return>
</method>

<!-- javax.baja.driver.point.Tuning.getLastReadTicks() -->
<method name="getLastReadTicks"  public="true" final="true">
<description>
Get the ticks of the last successful read or 0 if&#xa; no reads have occured yet.
</description>
<return>
<type class="long"/>
</return>
</method>

<!-- javax.baja.driver.point.Tuning.getLastWriteTicks() -->
<method name="getLastWriteTicks"  public="true" final="true">
<description>
Get the ticks of the last successful write or 0 if&#xa; no writes have occured yet.
</description>
<return>
<type class="long"/>
</return>
</method>

<!-- javax.baja.driver.point.Tuning.getLastReadTime() -->
<method name="getLastReadTime"  public="true" final="true">
<description>
Convenience for translating getLastReadTicks() into a BAbsTime.&#xa; Return BAbsTime.NULL if no reads have occurred yet.
</description>
<return>
<type class="javax.baja.sys.BAbsTime"/>
</return>
</method>

<!-- javax.baja.driver.point.Tuning.getLastWriteTime() -->
<method name="getLastWriteTime"  public="true" final="true">
<description>
Convenience for translating getLastWriteTicks() into a BAbsTime.&#xa; Return BAbsTime.NULL if no writes have occurred yet.
</description>
<return>
<type class="javax.baja.sys.BAbsTime"/>
</return>
</method>

<!-- javax.baja.driver.point.Tuning.toString(javax.baja.sys.Context) -->
<method name="toString"  public="true">
<description>
To string.
</description>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.driver.point.Tuning.transition() -->
<method name="transition"  public="true">
<description>
The ITunable should call this method whenever it performs&#xa; a state transition: started, atSteadyState, stopped, status&#xa; change, subscribed, or unsubscribed.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.driver.point.Tuning.writeDesired() -->
<method name="writeDesired"  public="true">
<description>
This method is called when a write is desired.  This method&#xa; should be called whenever the value to be written is changed.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.driver.point.Tuning.readOk() -->
<method name="readOk"  public="true">
<description>
The ITunable should call this method when a read succeeds.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.driver.point.Tuning.readFail() -->
<method name="readFail"  public="true">
<description>
The ITunable should call this method when a read fails.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.driver.point.Tuning.writeOk() -->
<method name="writeOk"  public="true">
<description>
The ITunable should call this method when a write succeeds.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.driver.point.Tuning.writeFail() -->
<method name="writeFail"  public="true">
<description>
The ITunable should call this method when a write fails.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.driver.point.Tuning.getIcon() -->
<method name="getIcon"  public="true">
<description/>
<return>
<type class="javax.baja.sys.BIcon"/>
</return>
</method>

<!-- javax.baja.driver.point.Tuning.spy(javax.baja.spy.SpyWriter) -->
<method name="spy"  public="true">
<description/>
<parameter name="out">
<type class="javax.baja.spy.SpyWriter"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

</class>
</bajadoc>
