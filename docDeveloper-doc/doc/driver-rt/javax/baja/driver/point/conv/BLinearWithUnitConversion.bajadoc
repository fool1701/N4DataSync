<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="driver" runtimeProfile="rt" qualifiedName="javax.baja.driver.point.conv.BLinearWithUnitConversion" name="BLinearWithUnitConversion" packageName="javax.baja.driver.point.conv" public="true" final="true">
<description>
BLinearWithUnitConversion expands on BlinearCoversion by adding unit conversion before, or after, the&#xa; linear conversion with a scale and offset.
</description>
<tag name="@author">Robert Staley on 23-Aug-2019</tag>
<tag name="@since">Niagara 4.9</tag>
<extends>
<type class="javax.baja.driver.point.BProxyConversion"/>
</extends>
<annotation><type class="javax.baja.nre.annotations.NoSlotomatic"/>
</annotation>
<!-- javax.baja.driver.point.conv.BLinearWithUnitConversion.make(double, double, boolean) -->
<method name="make"  public="true" static="true">
<description>
Make a LinearConversion instance with the specified scale&#xa; and offset to use for the device to proxy linear equation.
</description>
<parameter name="scale">
<type class="double"/>
</parameter>
<parameter name="offset">
<type class="double"/>
</parameter>
<parameter name="applyUnitsToDevice">
<type class="boolean"/>
</parameter>
<return>
<type class="javax.baja.driver.point.conv.BLinearWithUnitConversion"/>
</return>
</method>

<!-- javax.baja.driver.point.conv.BLinearWithUnitConversion.getScale() -->
<method name="getScale"  public="true">
<description>
Get the scale value for the device to proxy linear equation.
</description>
<return>
<type class="double"/>
</return>
</method>

<!-- javax.baja.driver.point.conv.BLinearWithUnitConversion.getOffset() -->
<method name="getOffset"  public="true">
<description>
Get the offset value for the device to proxy linear equation.
</description>
<return>
<type class="double"/>
</return>
</method>

<!-- javax.baja.driver.point.conv.BLinearWithUnitConversion.getApplyUnitsToDevice() -->
<method name="getApplyUnitsToDevice"  public="true">
<description>
Get the boolean value controlling when the unit conversion is applied.&#xa;&#xa; true indicates units are converted on the device value.&#xa; false indicates units are converted on the proxy value.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.driver.point.conv.BLinearWithUnitConversion.convertDeviceToProxy(javax.baja.driver.point.BProxyExt, javax.baja.status.BStatusValue, javax.baja.status.BStatusValue) -->
<method name="convertDeviceToProxy"  public="true">
<description>
Convert using forward equation: &lt;code&gt;proxy = device*scale + offset&lt;/code&gt;.&#xa; &lt;p&gt;&#xa; Unit conversions are preformed on either the device value or the proxy value, based&#xa; on the value returned from &lt;code&gt;getApplyUnitsToDevice()&lt;/code&gt;.&#xa;&#xa; true indicates units are converted on the device value.&#xa; false indicates units are converted on the proxy value.
</description>
<parameter name="ext">
<type class="javax.baja.driver.point.BProxyExt"/>
</parameter>
<parameter name="deviceValue">
<type class="javax.baja.status.BStatusValue"/>
</parameter>
<parameter name="proxyValue">
<type class="javax.baja.status.BStatusValue"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.driver.point.conv.BLinearWithUnitConversion.convertProxyToDevice(javax.baja.driver.point.BProxyExt, javax.baja.status.BStatusValue, javax.baja.status.BStatusValue) -->
<method name="convertProxyToDevice"  public="true">
<description>
Convert using reverse equation:  &lt;code&gt;device = (proxy-offset)/scale&lt;/code&gt;.&#xa; &lt;p&gt;&#xa; Unit conversions are preformed on either the device value or the proxy value, based&#xa; on the value returned from &lt;code&gt;getApplyUnitsToDevice()&lt;/code&gt;.&#xa;&#xa; true indicates units are converted on the device value.&#xa; false indicates units are converted on the proxy value.
</description>
<parameter name="ext">
<type class="javax.baja.driver.point.BProxyExt"/>
</parameter>
<parameter name="proxyValue">
<type class="javax.baja.status.BStatusValue"/>
</parameter>
<parameter name="deviceValue">
<type class="javax.baja.status.BStatusValue"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.driver.point.conv.BLinearWithUnitConversion.hashCode() -->
<method name="hashCode"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
BLinearWithUnitConversion uses its scale/offset/applyUnitsToDevice to compute the hash code.
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.driver.point.conv.BLinearWithUnitConversion.equals(java.lang.Object) -->
<method name="equals"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
BLinearWithUnitConversion uses its scale/offset/applyUnitsToDevice to determine equality.
</description>
<parameter name="obj">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.driver.point.conv.BLinearWithUnitConversion.toString(javax.baja.sys.Context) -->
<method name="toString"  public="true">
<description/>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.driver.point.conv.BLinearWithUnitConversion.encode(java.io.DataOutput) -->
<method name="encode"  public="true">
<description/>
<parameter name="out">
<type class="java.io.DataOutput"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.driver.point.conv.BLinearWithUnitConversion.decode(java.io.DataInput) -->
<method name="decode"  public="true">
<description/>
<parameter name="in">
<type class="java.io.DataInput"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.driver.point.conv.BLinearWithUnitConversion.encodeToString() -->
<method name="encodeToString"  public="true">
<description/>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.driver.point.conv.BLinearWithUnitConversion.decodeFromString(java.lang.String) -->
<method name="decodeFromString"  public="true">
<description/>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.driver.point.conv.BLinearWithUnitConversion.getType() -->
<method name="getType"  public="true">
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.driver.point.conv.BLinearWithUnitConversion.DEFAULT -->
<field name="DEFAULT"  public="true" static="true" final="true">
<type class="javax.baja.driver.point.conv.BLinearWithUnitConversion"/>
<description>
This is default instance has scale of 1, offset of 0, and performs unit conversion after data conversion.
</description>
</field>

<!-- javax.baja.driver.point.conv.BLinearWithUnitConversion.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
