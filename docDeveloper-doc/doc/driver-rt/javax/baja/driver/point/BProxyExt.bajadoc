<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="driver" runtimeProfile="rt" qualifiedName="javax.baja.driver.point.BProxyExt" name="BProxyExt" packageName="javax.baja.driver.point" public="true" abstract="true">
<description>
BProxyExt is the point extension supported in BControlPoints &#xa; which are proxies for point data in an external system.
</description>
<tag name="@author">Brian Frank</tag>
<tag name="@creation">5 Dec 01</tag>
<tag name="@version">$Revision: 81$ $Date: 6/12/09 10:27:08 AM EDT$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="javax.baja.control.ext.BAbstractProxyExt"/>
</extends>
<implements>
<type class="javax.baja.status.BIStatus"/>
</implements>
<implements>
<type class="javax.baja.driver.point.BITunable"/>
</implements>
<property name="status" flags="rt">
<type class="javax.baja.status.BStatus"/>
<description>
Slot for the &lt;code&gt;status&lt;/code&gt; property.&#xa; The status of the proxy extension.  This&#xa; property should never be set directly.
</description>
<tag name="@see">#getStatus</tag>
<tag name="@see">#setStatus</tag>
</property>

<property name="faultCause" flags="rt">
<type class="java.lang.String"/>
<description>
Slot for the &lt;code&gt;faultCause&lt;/code&gt; property.&#xa; Provides a description if the point is in fault.
</description>
<tag name="@see">#getFaultCause</tag>
<tag name="@see">#setFaultCause</tag>
</property>

<property name="enabled" flags="">
<type class="boolean"/>
<description>
Slot for the &lt;code&gt;enabled&lt;/code&gt; property.&#xa; Used to manually enable and disable this point.
</description>
<tag name="@see">#getEnabled</tag>
<tag name="@see">#setEnabled</tag>
</property>

<property name="deviceFacets" flags="">
<type class="javax.baja.sys.BFacets"/>
<description>
Slot for the &lt;code&gt;deviceFacets&lt;/code&gt; property.&#xa; Facets of device value being read and/or written.
</description>
<tag name="@see">#getDeviceFacets</tag>
<tag name="@see">#setDeviceFacets</tag>
</property>

<property name="conversion" flags="">
<type class="javax.baja.driver.point.BProxyConversion"/>
<description>
Slot for the &lt;code&gt;conversion&lt;/code&gt; property.&#xa; Conversion controls mapping between the device value&#xa; space and the proxy value space.
</description>
<tag name="@see">#getConversion</tag>
<tag name="@see">#setConversion</tag>
</property>

<property name="tuningPolicyName" flags="">
<type class="java.lang.String"/>
<description>
Slot for the &lt;code&gt;tuningPolicyName&lt;/code&gt; property.&#xa; References the TuningPolicy component by name.
</description>
<tag name="@see">#getTuningPolicyName</tag>
<tag name="@see">#setTuningPolicyName</tag>
</property>

<property name="readValue" flags="rt">
<type class="javax.baja.status.BStatusValue"/>
<description>
Slot for the &lt;code&gt;readValue&lt;/code&gt; property.&#xa; The last value read from the device.
</description>
<tag name="@see">#getReadValue</tag>
<tag name="@see">#setReadValue</tag>
</property>

<property name="writeValue" flags="rt">
<type class="javax.baja.status.BStatusValue"/>
<description>
Slot for the &lt;code&gt;writeValue&lt;/code&gt; property.&#xa; The value current desired to be written.
</description>
<tag name="@see">#getWriteValue</tag>
<tag name="@see">#setWriteValue</tag>
</property>

<!-- javax.baja.driver.point.BProxyExt() -->
<constructor name="BProxyExt" public="true">
<description/>
</constructor>

<!-- javax.baja.driver.point.BProxyExt.getStatus() -->
<method name="getStatus"  public="true">
<description>
Get the &lt;code&gt;status&lt;/code&gt; property.&#xa; The status of the proxy extension.  This&#xa; property should never be set directly.
</description>
<tag name="@see">#status</tag>
<return>
<type class="javax.baja.status.BStatus"/>
</return>
</method>

<!-- javax.baja.driver.point.BProxyExt.setStatus(javax.baja.status.BStatus) -->
<method name="setStatus"  public="true">
<description>
Set the &lt;code&gt;status&lt;/code&gt; property.&#xa; The status of the proxy extension.  This&#xa; property should never be set directly.
</description>
<tag name="@see">#status</tag>
<parameter name="v">
<type class="javax.baja.status.BStatus"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.driver.point.BProxyExt.getFaultCause() -->
<method name="getFaultCause"  public="true">
<description>
Get the &lt;code&gt;faultCause&lt;/code&gt; property.&#xa; Provides a description if the point is in fault.
</description>
<tag name="@see">#faultCause</tag>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.driver.point.BProxyExt.setFaultCause(java.lang.String) -->
<method name="setFaultCause"  public="true">
<description>
Set the &lt;code&gt;faultCause&lt;/code&gt; property.&#xa; Provides a description if the point is in fault.
</description>
<tag name="@see">#faultCause</tag>
<parameter name="v">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.driver.point.BProxyExt.getEnabled() -->
<method name="getEnabled"  public="true">
<description>
Get the &lt;code&gt;enabled&lt;/code&gt; property.&#xa; Used to manually enable and disable this point.
</description>
<tag name="@see">#enabled</tag>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.driver.point.BProxyExt.setEnabled(boolean) -->
<method name="setEnabled"  public="true">
<description>
Set the &lt;code&gt;enabled&lt;/code&gt; property.&#xa; Used to manually enable and disable this point.
</description>
<tag name="@see">#enabled</tag>
<parameter name="v">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.driver.point.BProxyExt.getDeviceFacets() -->
<method name="getDeviceFacets"  public="true">
<description>
Get the &lt;code&gt;deviceFacets&lt;/code&gt; property.&#xa; Facets of device value being read and/or written.
</description>
<tag name="@see">#deviceFacets</tag>
<return>
<type class="javax.baja.sys.BFacets"/>
</return>
</method>

<!-- javax.baja.driver.point.BProxyExt.setDeviceFacets(javax.baja.sys.BFacets) -->
<method name="setDeviceFacets"  public="true">
<description>
Set the &lt;code&gt;deviceFacets&lt;/code&gt; property.&#xa; Facets of device value being read and/or written.
</description>
<tag name="@see">#deviceFacets</tag>
<parameter name="v">
<type class="javax.baja.sys.BFacets"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.driver.point.BProxyExt.getConversion() -->
<method name="getConversion"  public="true">
<description>
Get the &lt;code&gt;conversion&lt;/code&gt; property.&#xa; Conversion controls mapping between the device value&#xa; space and the proxy value space.
</description>
<tag name="@see">#conversion</tag>
<return>
<type class="javax.baja.driver.point.BProxyConversion"/>
</return>
</method>

<!-- javax.baja.driver.point.BProxyExt.setConversion(javax.baja.driver.point.BProxyConversion) -->
<method name="setConversion"  public="true">
<description>
Set the &lt;code&gt;conversion&lt;/code&gt; property.&#xa; Conversion controls mapping between the device value&#xa; space and the proxy value space.
</description>
<tag name="@see">#conversion</tag>
<parameter name="v">
<type class="javax.baja.driver.point.BProxyConversion"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.driver.point.BProxyExt.getTuningPolicyName() -->
<method name="getTuningPolicyName"  public="true">
<description>
Get the &lt;code&gt;tuningPolicyName&lt;/code&gt; property.&#xa; References the TuningPolicy component by name.
</description>
<tag name="@see">#tuningPolicyName</tag>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.driver.point.BProxyExt.setTuningPolicyName(java.lang.String) -->
<method name="setTuningPolicyName"  public="true">
<description>
Set the &lt;code&gt;tuningPolicyName&lt;/code&gt; property.&#xa; References the TuningPolicy component by name.
</description>
<tag name="@see">#tuningPolicyName</tag>
<parameter name="v">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.driver.point.BProxyExt.getReadValue() -->
<method name="getReadValue"  public="true">
<description>
Get the &lt;code&gt;readValue&lt;/code&gt; property.&#xa; The last value read from the device.
</description>
<tag name="@see">#readValue</tag>
<return>
<type class="javax.baja.status.BStatusValue"/>
</return>
</method>

<!-- javax.baja.driver.point.BProxyExt.setReadValue(javax.baja.status.BStatusValue) -->
<method name="setReadValue"  public="true">
<description>
Set the &lt;code&gt;readValue&lt;/code&gt; property.&#xa; The last value read from the device.
</description>
<tag name="@see">#readValue</tag>
<parameter name="v">
<type class="javax.baja.status.BStatusValue"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.driver.point.BProxyExt.getWriteValue() -->
<method name="getWriteValue"  public="true">
<description>
Get the &lt;code&gt;writeValue&lt;/code&gt; property.&#xa; The value current desired to be written.
</description>
<tag name="@see">#writeValue</tag>
<return>
<type class="javax.baja.status.BStatusValue"/>
</return>
</method>

<!-- javax.baja.driver.point.BProxyExt.setWriteValue(javax.baja.status.BStatusValue) -->
<method name="setWriteValue"  public="true">
<description>
Set the &lt;code&gt;writeValue&lt;/code&gt; property.&#xa; The value current desired to be written.
</description>
<tag name="@see">#writeValue</tag>
<parameter name="v">
<type class="javax.baja.status.BStatusValue"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.driver.point.BProxyExt.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.driver.point.BProxyExt.getDeviceExtType() -->
<method name="getDeviceExtType"  public="true" abstract="true">
<description>
Get the parent PointDeviceExt type this proxy &#xa; extension belongs under (and by deduction which&#xa; device and network).
</description>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.driver.point.BProxyExt.getMode() -->
<method name="getMode"  public="true" abstract="true">
<description>
Return if this proxy point is readonly, readWrite or writeonly.
</description>
<return>
<type class="javax.baja.driver.point.BReadWriteMode"/>
</return>
</method>

<!-- javax.baja.driver.point.BProxyExt.getNetwork() -->
<method name="getNetwork"  public="true" final="true">
<description>
Get the parent network.  Throw an exception if this &#xa; component is not running or has a fatal fault.
</description>
<return>
<type class="javax.baja.driver.BDeviceNetwork"/>
</return>
</method>

<!-- javax.baja.driver.point.BProxyExt.getDevice() -->
<method name="getDevice"  public="true" final="true">
<description>
Get the parent device.  Throw an exception if this &#xa; component is not running or has a fatal fault.
</description>
<return>
<type class="javax.baja.driver.BDevice"/>
</return>
</method>

<!-- javax.baja.driver.point.BProxyExt.getDeviceExt() -->
<method name="getDeviceExt"  public="true" final="true">
<description>
Get the parent PointDeviceExt.  Throw an exception if &#xa; this component is not running or has a fatal fault.
</description>
<return>
<type class="javax.baja.driver.point.BPointDeviceExt"/>
</return>
</method>

<!-- javax.baja.driver.point.BProxyExt.getSlotFacets(javax.baja.sys.Slot) -->
<method name="getSlotFacets"  public="true">
<description>
Get the facets for the specified slot.
</description>
<parameter name="slot">
<type class="javax.baja.sys.Slot"/>
</parameter>
<return>
<type class="javax.baja.sys.BFacets"/>
</return>
</method>

<!-- javax.baja.driver.point.BProxyExt.isDown() -->
<method name="isDown"  public="true" final="true">
<description>
Return true if the parent device is down.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.driver.point.BProxyExt.isDisabled() -->
<method name="isDisabled"  public="true" final="true">
<description>
Return true if the point is disabled.  A point is disabled if &#xa; the user has manually set the network, device, or proxyExt &#xa; enabled property to false.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.driver.point.BProxyExt.isFault() -->
<method name="isFault"  public="true" final="true">
<description>
Return true if the point is in fault.  A point is in fault if &#xa; either a fatal fault was detected, the last read failed, or the&#xa; last write failed.  A point is also automatically  marked in &#xa; fault if the parent device is in fault.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.driver.point.BProxyExt.isUnoperational() -->
<method name="isUnoperational"  public="true" final="true">
<description>
The point is unoperational if it is down, disabled, &#xa; or in fatal fault.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.driver.point.BProxyExt.updateStatus() -->
<method name="updateStatus"  public="true" final="true">
<description>
Recompute the proxy extensions status.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.driver.point.BProxyExt.isFatalFault() -->
<method name="isFatalFault"  public="true" final="true">
<description>
Return true if the point detected a fatal fault.&#xa; Fatal faults cannot be recovered until the point&#xa; is restarted.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.driver.point.BProxyExt.configFatal(java.lang.String) -->
<method name="configFatal"  public="true" final="true">
<description>
Set the proxyExt into the fatal fault condition.  Unlike&#xa; configFail(), the fatal fault condition cannot be cleared&#xa; until station restart.
</description>
<parameter name="cause">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.driver.point.BProxyExt.checkStatusValueTypes() -->
<method name="checkStatusValueTypes"  public="true">
<description>
Check that readValue and writeValue are of the&#xa; correct type for the parent point.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.driver.point.BProxyExt.onExecute(javax.baja.status.BStatusValue, javax.baja.sys.Context) -->
<method name="onExecute"  public="true" final="true">
<description>
If this point is writable, store the working value away&#xa; in the writeValue property to be written.  Return the current&#xa; readValue as the new working variable.
</description>
<parameter name="working">
<type class="javax.baja.status.BStatusValue"/>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.driver.point.BProxyExt.pointFacetsChanged() -->
<method name="pointFacetsChanged"  public="true">
<description>
This callback is made when the parent point&#x27;s facets are &#xa; modified.  This hook is used to force a  write to the &#xa; external device.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.driver.point.BProxyExt.writablePointActionInvoked() -->
<method name="writablePointActionInvoked"  public="true">
<description>
Callback when any of the WritablePoint&#x27;s command&#xa; actions are invoked: emergencyOverride, emergencyAuto,&#xa; override, auto, or set.  This hook is used to force a &#xa; write to the external device.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.driver.point.BProxyExt.getTuning() -->
<method name="getTuning"  public="true" final="true">
<description>
Get the tuning support instance.
</description>
<return>
<type class="javax.baja.driver.point.Tuning"/>
</return>
</method>

<!-- javax.baja.driver.point.BProxyExt.setStale(boolean, javax.baja.sys.Context) -->
<method name="setStale"  public="true">
<description>
Set or clear the point&#x27;s stale status.  Stale is used to indicate&#xa; that the current readValue might be untrustworthy.  If the tuning&#xa; policy has a non-zero staleTime, then stale is automatically called&#xa; when staleTime elapses without any calls to readOk (or writeOk in&#xa; the case of a writeonly point).  If staleTime is zero, then stale &#xa; must be handled by the driver.  The stale status is always cleared &#xa; on readOk (or writeOk for a writeonly point).
</description>
<parameter name="stale">
<type class="boolean"/>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.driver.point.BProxyExt.getTuningPolicy() -->
<method name="getTuningPolicy"  public="true" final="true">
<description>
Convenience for &lt;code&gt;getTuning().getPolicy()&lt;/code&gt;.
</description>
<return>
<type class="javax.baja.driver.point.BTuningPolicy"/>
</return>
</method>

<!-- javax.baja.driver.point.BProxyExt.isSubscribedDesired() -->
<method name="isSubscribedDesired"  public="true">
<description>
Return if the parent point is subscribed.  This is &#xa; independent of any status conditions which might be &#xa; preventing actual subscription.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.driver.point.BProxyExt.pointSubscribed() -->
<method name="pointSubscribed"  public="true" final="true">
<description>
Route to tuning.  Actual subscribed taking status&#xa; into account is done via readSubscription().
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.driver.point.BProxyExt.pointUnsubscribed() -->
<method name="pointUnsubscribed"  public="true" final="true">
<description>
Route to tuning.  Actual unsubscribed taking status&#xa; into account is done via readUnsubscribed().
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.driver.point.BProxyExt.readSubscribed(javax.baja.sys.Context) -->
<method name="readSubscribed"  public="true" abstract="true">
<description>
This callback is made when the point enters a subscribed &#xa; state based on the current status and tuning.  The driver &#xa; should register for changes or begin polling.  Any IO should&#xa; be done asynchronously on another thread - never block the&#xa; calling thread.  The result of reads should be to call the&#xa; readOk() or readFail() method.
</description>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.driver.point.BProxyExt.readUnsubscribed(javax.baja.sys.Context) -->
<method name="readUnsubscribed"  public="true" abstract="true">
<description>
This callback is made when the point exits the subscribed&#xa; state based on the current status and tuning.  The driver&#xa; should unregister for changes of cease polling.  Any IO should&#xa; be done asynchronously on another thread - never block the&#xa; calling thread.
</description>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.driver.point.BProxyExt.write(javax.baja.sys.Context) -->
<method name="write"  public="true" abstract="true">
<description>
This callback is made when a write is desired based on the&#xa; current status and tuning.  The value to write is the current&#xa; value of the writeValue property.  Any IO should be done &#xa; asynchronously on another thread - never block the calling &#xa; thread.  If the write is enqueued then return true and call &#xa; writeOk() or writeFail() once it has been processed.  If the &#xa; write is canceled immediately for other reasons then return false.
</description>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="boolean"/>
<description>
true if a write is now pending
</description>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.driver.point.BProxyExt.readOk(javax.baja.status.BStatusValue) -->
<method name="readOk"  public="true">
<description>
This method is called when a value is successfully&#xa; read from the device.  The newValue argument is the&#xa; value just read (including any status which was read).
</description>
<parameter name="newValue">
<type class="javax.baja.status.BStatusValue"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.driver.point.BProxyExt.readReset() -->
<method name="readReset"  public="true">
<description>
Read reset is used to clear a readFail, but does not indicate&#xa; that a successful read has been accomplished.  It clears the&#xa; read fault and marks the value as stale.  It does not update&#xa; the readValue or readTime properties.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.driver.point.BProxyExt.readFail(java.lang.String) -->
<method name="readFail"  public="true">
<description>
This method is called when a read from the device&#xa; fails due to a configuration or fault error.
</description>
<parameter name="cause">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.driver.point.BProxyExt.writeOk(javax.baja.status.BStatusValue) -->
<method name="writeOk"  public="true">
<description>
This method is called when a value is successfully&#xa; written to the device.  The parameter passed is the &#xa; value that was written.
</description>
<parameter name="writeValue">
<type class="javax.baja.status.BStatusValue"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.driver.point.BProxyExt.writeReset() -->
<method name="writeReset"  public="true">
<description>
This method is called when a pending write to the device is canceled or short &#xa; circuited.  This often happens when an attempt is made to write a value with a&#xa; null status bit.  This method clears the fault cause and clears the tunings write&#xa; pending flag.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.driver.point.BProxyExt.writeFail(java.lang.String) -->
<method name="writeFail"  public="true">
<description>
This method is called when a write to the device&#xa; fails for any reason.
</description>
<parameter name="cause">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.driver.point.BProxyExt.convertDeviceToProxy(javax.baja.status.BStatusValue, javax.baja.status.BStatusValue) -->
<method name="convertDeviceToProxy"  protected="true">
<description>
Copy the deviceValue to the proxyValue.  The default implementation &#xa; routes to &lt;code&gt;getConversion().convertDeviceToProxy()&lt;/code&gt;.
</description>
<parameter name="deviceValue">
<type class="javax.baja.status.BStatusValue"/>
</parameter>
<parameter name="proxyValue">
<type class="javax.baja.status.BStatusValue"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.driver.point.BProxyExt.convertProxyToDevice(javax.baja.status.BStatusValue, javax.baja.status.BStatusValue) -->
<method name="convertProxyToDevice"  protected="true">
<description>
Copy the proxyValue to the deviceValue.  The default implementation &#xa; routes to &lt;code&gt;getConversion().convertProxyToDevice()&lt;/code&gt;.
</description>
<parameter name="proxyValue">
<type class="javax.baja.status.BStatusValue"/>
</parameter>
<parameter name="deviceValue">
<type class="javax.baja.status.BStatusValue"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.driver.point.BProxyExt.fw(int, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object) -->
<method name="fw"  public="true" final="true">
<description/>
<parameter name="x">
<type class="int"/>
</parameter>
<parameter name="a">
<type class="java.lang.Object"/>
</parameter>
<parameter name="b">
<type class="java.lang.Object"/>
</parameter>
<parameter name="c">
<type class="java.lang.Object"/>
</parameter>
<parameter name="d">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="java.lang.Object"/>
</return>
</method>

<!-- javax.baja.driver.point.BProxyExt.spy(javax.baja.spy.SpyWriter) -->
<method name="spy"  public="true">
<description/>
<parameter name="out">
<type class="javax.baja.spy.SpyWriter"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.driver.point.BProxyExt.status -->
<field name="status"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;status&lt;/code&gt; property.&#xa; The status of the proxy extension.  This&#xa; property should never be set directly.
</description>
<tag name="@see">#getStatus</tag>
<tag name="@see">#setStatus</tag>
</field>

<!-- javax.baja.driver.point.BProxyExt.faultCause -->
<field name="faultCause"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;faultCause&lt;/code&gt; property.&#xa; Provides a description if the point is in fault.
</description>
<tag name="@see">#getFaultCause</tag>
<tag name="@see">#setFaultCause</tag>
</field>

<!-- javax.baja.driver.point.BProxyExt.enabled -->
<field name="enabled"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;enabled&lt;/code&gt; property.&#xa; Used to manually enable and disable this point.
</description>
<tag name="@see">#getEnabled</tag>
<tag name="@see">#setEnabled</tag>
</field>

<!-- javax.baja.driver.point.BProxyExt.deviceFacets -->
<field name="deviceFacets"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;deviceFacets&lt;/code&gt; property.&#xa; Facets of device value being read and/or written.
</description>
<tag name="@see">#getDeviceFacets</tag>
<tag name="@see">#setDeviceFacets</tag>
</field>

<!-- javax.baja.driver.point.BProxyExt.conversion -->
<field name="conversion"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;conversion&lt;/code&gt; property.&#xa; Conversion controls mapping between the device value&#xa; space and the proxy value space.
</description>
<tag name="@see">#getConversion</tag>
<tag name="@see">#setConversion</tag>
</field>

<!-- javax.baja.driver.point.BProxyExt.tuningPolicyName -->
<field name="tuningPolicyName"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;tuningPolicyName&lt;/code&gt; property.&#xa; References the TuningPolicy component by name.
</description>
<tag name="@see">#getTuningPolicyName</tag>
<tag name="@see">#setTuningPolicyName</tag>
</field>

<!-- javax.baja.driver.point.BProxyExt.readValue -->
<field name="readValue"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;readValue&lt;/code&gt; property.&#xa; The last value read from the device.
</description>
<tag name="@see">#getReadValue</tag>
<tag name="@see">#setReadValue</tag>
</field>

<!-- javax.baja.driver.point.BProxyExt.writeValue -->
<field name="writeValue"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;writeValue&lt;/code&gt; property.&#xa; The value current desired to be written.
</description>
<tag name="@see">#getWriteValue</tag>
<tag name="@see">#setWriteValue</tag>
</field>

<!-- javax.baja.driver.point.BProxyExt.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
