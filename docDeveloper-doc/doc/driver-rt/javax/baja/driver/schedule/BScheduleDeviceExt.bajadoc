<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="driver" runtimeProfile="rt" qualifiedName="javax.baja.driver.schedule.BScheduleDeviceExt" name="BScheduleDeviceExt" packageName="javax.baja.driver.schedule" public="true" abstract="true">
<description>
Supervisor (master) and subordinate (not master) schedule device ext.&lt;p&gt;&#xa; Child objects will be subordinate schedules and BScheduleExports.&#xa; &lt;p&gt;&lt;b&gt;Subclassing&lt;/b&gt;&lt;br&gt;&#xa; Subclasses must implement:&#xa; &lt;ul&gt;&#xa; &lt;li&gt;makeExport()&lt;/li&gt;&#xa; &lt;li&gt;makeImportExt()&lt;/li&gt;&#xa; &lt;/ul&gt;&#xa; &lt;p&gt;&#xa; &lt;b&gt;Subscribe&lt;/b&gt;&lt;br&gt;&#xa; Subscription is a conditional invocation of the BScheduleImportExt.pull action.  &#xa; It will not be invoked if there has already been communication between&#xa; the subordinate and supervisor since the devicelet was started.&#xa; &lt;p&gt;&lt;b&gt;Subscribe Window&lt;/b&gt;&lt;br&gt;&#xa; This is the maximum amount of time after a devicelet is started&#xa; that a subscribe can occur.  The actual time is randomly &#xa; calculated at startup.&#xa; &lt;p&gt;&#xa; This random subscribe is just in case the descriptors on the supervisor &#xa; side are accidentally deleted.
</description>
<tag name="@author">Aaron Hansen</tag>
<tag name="@creation">Jan 2004</tag>
<tag name="@version">$Revision: 29$ $Date: 7/27/10 7:32:38 AM EDT$</tag>
<extends>
<type class="javax.baja.driver.util.BDescriptorDeviceExt"/>
</extends>
<property name="subscribeWindow" flags="">
<type class="javax.baja.sys.BRelTime"/>
<description>
Slot for the &lt;code&gt;subscribeWindow&lt;/code&gt; property.
</description>
<tag name="@see">#getSubscribeWindow</tag>
<tag name="@see">#setSubscribeWindow</tag>
</property>

<action name="subscribe" flags="ah">
<return>
<type class="void"/>
</return>
<description>
Slot for the &lt;code&gt;subscribe&lt;/code&gt; action.
</description>
<tag name="@see">#subscribe()</tag>
</action>

<!-- javax.baja.driver.schedule.BScheduleDeviceExt() -->
<constructor name="BScheduleDeviceExt" public="true">
<description/>
</constructor>

<!-- javax.baja.driver.schedule.BScheduleDeviceExt.getSubscribeWindow() -->
<method name="getSubscribeWindow"  public="true">
<description>
Get the &lt;code&gt;subscribeWindow&lt;/code&gt; property.
</description>
<tag name="@see">#subscribeWindow</tag>
<return>
<type class="javax.baja.sys.BRelTime"/>
</return>
</method>

<!-- javax.baja.driver.schedule.BScheduleDeviceExt.setSubscribeWindow(javax.baja.sys.BRelTime) -->
<method name="setSubscribeWindow"  public="true">
<description>
Set the &lt;code&gt;subscribeWindow&lt;/code&gt; property.
</description>
<tag name="@see">#subscribeWindow</tag>
<parameter name="v">
<type class="javax.baja.sys.BRelTime"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.driver.schedule.BScheduleDeviceExt.subscribe() -->
<method name="subscribe"  public="true">
<description>
Invoke the &lt;code&gt;subscribe&lt;/code&gt; action.
</description>
<tag name="@see">#subscribe</tag>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.driver.schedule.BScheduleDeviceExt.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.driver.schedule.BScheduleDeviceExt.added(javax.baja.sys.Property, javax.baja.sys.Context) -->
<method name="added"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="p">
<type class="javax.baja.sys.Property"/>
</parameter>
<parameter name="c">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.driver.schedule.BScheduleDeviceExt.doSubscribe() -->
<method name="doSubscribe"  public="true" final="true">
<description>
Only executes BScheduleImportExts who have not communicated&#xa; with their supervisor since station started.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.driver.schedule.BScheduleDeviceExt.getExt(javax.baja.schedule.BAbstractSchedule) -->
<method name="getExt"  public="true" static="true">
<description>
Convenience method for finding the schedule extension on a subordinate&#xa; schedule.
</description>
<parameter name="sch">
<type class="javax.baja.schedule.BAbstractSchedule"/>
</parameter>
<return>
<type class="javax.baja.driver.schedule.BScheduleImportExt"/>
</return>
</method>

<!-- javax.baja.driver.schedule.BScheduleDeviceExt.getIcon() -->
<method name="getIcon"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.BIcon"/>
</return>
</method>

<!-- javax.baja.driver.schedule.BScheduleDeviceExt.getVersionOf(javax.baja.schedule.BAbstractSchedule) -->
<method name="getVersionOf"  public="true" static="true">
<description/>
<parameter name="sch">
<type class="javax.baja.schedule.BAbstractSchedule"/>
</parameter>
<return>
<type class="javax.baja.sys.BAbsTime"/>
</return>
</method>

<!-- javax.baja.driver.schedule.BScheduleDeviceExt.makeExport(java.lang.String) -->
<method name="makeExport"  public="true" abstract="true">
<description>
Called when a pull request is received but no descriptor exists&#xa; for the subordinate.  This is subscription.
</description>
<parameter name="supervisorId">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.driver.schedule.BScheduleExport"/>
</return>
</method>

<!-- javax.baja.driver.schedule.BScheduleDeviceExt.makeImportExt() -->
<method name="makeImportExt"  public="true" abstract="true">
<description>
Called when a schedule is added as a child of the devicelet; if the&#xa; schedule doesn&#x27;t already have an extension.
</description>
<return>
<type class="javax.baja.driver.schedule.BScheduleImportExt"/>
</return>
</method>

<!-- javax.baja.driver.schedule.BScheduleDeviceExt.processExport(java.lang.String, javax.baja.schedule.BAbstractSchedule) -->
<method name="processExport"  public="true">
<description>
Subordinate side convenience for processing exports.  Finds the&#xa; BScheduleExt, calls importSupervisor on it and returns the&#xa; subordinate version.
</description>
<parameter name="supervisorId">
<type class="java.lang.String"/>
</parameter>
<parameter name="supervisor">
<type class="javax.baja.schedule.BAbstractSchedule"/>
</parameter>
<return>
<type class="javax.baja.sys.BAbsTime"/>
<description>
The subordinate version.
</description>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.driver.schedule.BScheduleDeviceExt.processImport(java.lang.String, javax.baja.sys.BAbsTime) -->
<method name="processImport"  public="true">
<description>
Supervisor side convenience for processing import request.  Compares&#xa; the version and if the subordinate is out of date, returns the&#xa; exportable schedule.
</description>
<parameter name="supervisorId">
<type class="java.lang.String"/>
</parameter>
<parameter name="subordinateVersion">
<type class="javax.baja.sys.BAbsTime"/>
</parameter>
<return>
<type class="javax.baja.schedule.BAbstractSchedule"/>
<description>
Null if the subordinate is up to date.
</description>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.driver.schedule.BScheduleDeviceExt.processLearn() -->
<method name="processLearn"  public="true" final="true">
<description>
Returns all schedules in my space.&#xa; Column 0 will be the supervisorId string and column 1 will be&#xa; BTypeSpec.encodeToString.
</description>
<return>
<parameterizedType class="javax.baja.collection.BITable">
<args>
<wildcardType class="?">
</wildcardType>
</args>
</parameterizedType>
</return>
</method>

<!-- javax.baja.driver.schedule.BScheduleDeviceExt.started() -->
<method name="started"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.driver.schedule.BScheduleDeviceExt.getDescriptor(java.lang.String) -->
<method name="getDescriptor"  protected="true">
<description/>
<parameter name="supervisorId">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.driver.schedule.BScheduleExport"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.driver.schedule.BScheduleDeviceExt.getExt(java.lang.String) -->
<method name="getExt"  protected="true">
<description/>
<parameter name="supervisorId">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.driver.schedule.BScheduleImportExt"/>
</return>
</method>

<!-- javax.baja.driver.schedule.BScheduleDeviceExt.subscribeWindow -->
<field name="subscribeWindow"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;subscribeWindow&lt;/code&gt; property.
</description>
<tag name="@see">#getSubscribeWindow</tag>
<tag name="@see">#setSubscribeWindow</tag>
</field>

<!-- javax.baja.driver.schedule.BScheduleDeviceExt.subscribe -->
<field name="subscribe"  public="true" static="true" final="true">
<type class="javax.baja.sys.Action"/>
<description>
Slot for the &lt;code&gt;subscribe&lt;/code&gt; action.
</description>
<tag name="@see">#subscribe()</tag>
</field>

<!-- javax.baja.driver.schedule.BScheduleDeviceExt.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
