<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="driver" runtimeProfile="rt" qualifiedName="javax.baja.driver.BDevice" name="BDevice" packageName="javax.baja.driver" public="true" abstract="true">
<description>
BDevice models a device plugged into the host computer,&#xa; either through a bus or network connection.
</description>
<tag name="@author">Brian Frank</tag>
<tag name="@creation">17 Oct 01</tag>
<tag name="@version">$Revision: 51$ $Date: 6/1/05 2:50:18 PM EDT$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="javax.baja.sys.BComponent"/>
</extends>
<implements>
<type class="javax.baja.status.BIStatus"/>
</implements>
<implements>
<type class="javax.baja.driver.ping.BIPingable"/>
</implements>
<property name="status" flags="trsd">
<type class="javax.baja.status.BStatus"/>
<description>
Slot for the &lt;code&gt;status&lt;/code&gt; property.&#xa; Status of the device.  This property should&#xa; never be set directly.
</description>
<tag name="@see">#getStatus</tag>
<tag name="@see">#setStatus</tag>
</property>

<property name="enabled" flags="">
<type class="boolean"/>
<description>
Slot for the &lt;code&gt;enabled&lt;/code&gt; property.&#xa; Enabled is used to manually disable all communication with the device.
</description>
<tag name="@see">#getEnabled</tag>
<tag name="@see">#setEnabled</tag>
</property>

<property name="faultCause" flags="trd">
<type class="java.lang.String"/>
<description>
Slot for the &lt;code&gt;faultCause&lt;/code&gt; property.&#xa; Provides a short message why the network is in fault.
</description>
<tag name="@see">#getFaultCause</tag>
<tag name="@see">#setFaultCause</tag>
</property>

<property name="health" flags="rd">
<type class="javax.baja.driver.ping.BPingHealth"/>
<description>
Slot for the &lt;code&gt;health&lt;/code&gt; property.&#xa; Indicates communication health status.
</description>
<tag name="@see">#getHealth</tag>
<tag name="@see">#setHealth</tag>
</property>

<property name="alarmSourceInfo" flags="">
<type class="javax.baja.alarm.BAlarmSourceInfo"/>
<description>
Slot for the &lt;code&gt;alarmSourceInfo&lt;/code&gt; property.
</description>
<tag name="@see">#getAlarmSourceInfo</tag>
<tag name="@see">#setAlarmSourceInfo</tag>
</property>

<action name="ping" flags="a">
<return>
<type class="void"/>
</return>
<description>
Slot for the &lt;code&gt;ping&lt;/code&gt; action.&#xa; Perform a ping test of the device.
</description>
<tag name="@see">#ping()</tag>
</action>

<action name="ackAlarm" flags="h">
<parameter name="parameter">
<type class="javax.baja.alarm.BAlarmRecord"/>
</parameter>
<return>
<type class="javax.baja.sys.BBoolean"/>
</return>
<description>
Slot for the &lt;code&gt;ackAlarm&lt;/code&gt; action.
</description>
<tag name="@see">#ackAlarm(BAlarmRecord parameter)</tag>
</action>

<!-- javax.baja.driver.BDevice() -->
<constructor name="BDevice" public="true">
<description/>
</constructor>

<!-- javax.baja.driver.BDevice.getStatus() -->
<method name="getStatus"  public="true">
<description>
Get the &lt;code&gt;status&lt;/code&gt; property.&#xa; Status of the device.  This property should&#xa; never be set directly.
</description>
<tag name="@see">#status</tag>
<return>
<type class="javax.baja.status.BStatus"/>
</return>
</method>

<!-- javax.baja.driver.BDevice.setStatus(javax.baja.status.BStatus) -->
<method name="setStatus"  public="true">
<description>
Set the &lt;code&gt;status&lt;/code&gt; property.&#xa; Status of the device.  This property should&#xa; never be set directly.
</description>
<tag name="@see">#status</tag>
<parameter name="v">
<type class="javax.baja.status.BStatus"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.driver.BDevice.getEnabled() -->
<method name="getEnabled"  public="true">
<description>
Get the &lt;code&gt;enabled&lt;/code&gt; property.&#xa; Enabled is used to manually disable all communication with the device.
</description>
<tag name="@see">#enabled</tag>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.driver.BDevice.setEnabled(boolean) -->
<method name="setEnabled"  public="true">
<description>
Set the &lt;code&gt;enabled&lt;/code&gt; property.&#xa; Enabled is used to manually disable all communication with the device.
</description>
<tag name="@see">#enabled</tag>
<parameter name="v">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.driver.BDevice.getFaultCause() -->
<method name="getFaultCause"  public="true">
<description>
Get the &lt;code&gt;faultCause&lt;/code&gt; property.&#xa; Provides a short message why the network is in fault.
</description>
<tag name="@see">#faultCause</tag>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.driver.BDevice.setFaultCause(java.lang.String) -->
<method name="setFaultCause"  public="true">
<description>
Set the &lt;code&gt;faultCause&lt;/code&gt; property.&#xa; Provides a short message why the network is in fault.
</description>
<tag name="@see">#faultCause</tag>
<parameter name="v">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.driver.BDevice.getHealth() -->
<method name="getHealth"  public="true">
<description>
Get the &lt;code&gt;health&lt;/code&gt; property.&#xa; Indicates communication health status.
</description>
<tag name="@see">#health</tag>
<return>
<type class="javax.baja.driver.ping.BPingHealth"/>
</return>
</method>

<!-- javax.baja.driver.BDevice.setHealth(javax.baja.driver.ping.BPingHealth) -->
<method name="setHealth"  public="true">
<description>
Set the &lt;code&gt;health&lt;/code&gt; property.&#xa; Indicates communication health status.
</description>
<tag name="@see">#health</tag>
<parameter name="v">
<type class="javax.baja.driver.ping.BPingHealth"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.driver.BDevice.getAlarmSourceInfo() -->
<method name="getAlarmSourceInfo"  public="true">
<description>
Get the &lt;code&gt;alarmSourceInfo&lt;/code&gt; property.
</description>
<tag name="@see">#alarmSourceInfo</tag>
<return>
<type class="javax.baja.alarm.BAlarmSourceInfo"/>
</return>
</method>

<!-- javax.baja.driver.BDevice.setAlarmSourceInfo(javax.baja.alarm.BAlarmSourceInfo) -->
<method name="setAlarmSourceInfo"  public="true">
<description>
Set the &lt;code&gt;alarmSourceInfo&lt;/code&gt; property.
</description>
<tag name="@see">#alarmSourceInfo</tag>
<parameter name="v">
<type class="javax.baja.alarm.BAlarmSourceInfo"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.driver.BDevice.ping() -->
<method name="ping"  public="true">
<description>
Invoke the &lt;code&gt;ping&lt;/code&gt; action.&#xa; Perform a ping test of the device.
</description>
<tag name="@see">#ping</tag>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.driver.BDevice.ackAlarm(javax.baja.alarm.BAlarmRecord) -->
<method name="ackAlarm"  public="true">
<description>
Invoke the &lt;code&gt;ackAlarm&lt;/code&gt; action.
</description>
<tag name="@see">#ackAlarm</tag>
<parameter name="parameter">
<type class="javax.baja.alarm.BAlarmRecord"/>
</parameter>
<return>
<type class="javax.baja.sys.BBoolean"/>
</return>
</method>

<!-- javax.baja.driver.BDevice.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.driver.BDevice.getNetworkType() -->
<method name="getNetworkType"  public="true" abstract="true">
<description>
Get the Type of the parent network.
</description>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.driver.BDevice.getNetwork() -->
<method name="getNetwork"  public="true" final="true">
<description>
Get the parent as a BDeviceNetwork.  Throw an exception&#xa; if this device is not running or has a fatal fault.
</description>
<return>
<type class="javax.baja.driver.BDeviceNetwork"/>
</return>
</method>

<!-- javax.baja.driver.BDevice.getDeviceExts() -->
<method name="getDeviceExts"  public="true" final="true">
<description>
Get an array containing all the BDeviceExt&#xa; children of this device.
</description>
<return>
<type class="javax.baja.driver.BDeviceExt" dimension="1"/>
</return>
</method>

<!-- javax.baja.driver.BDevice.isDown() -->
<method name="isDown"  public="true" final="true">
<description>
Return true if the device is down.  A device is down when&#xa; &lt;code&gt;pingFail()&lt;/code&gt; has been called  more recently than&#xa; &lt;code&gt;pinkOk()&lt;/code&gt;. A device is also automatically marked&#xa; down if the network is down.  Refer to either the network or&#xa; the device &lt;code&gt;health.lastFailCause&lt;/code&gt; for the down&#xa; reason.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.driver.BDevice.isDisabled() -->
<method name="isDisabled"  public="true" final="true">
<description>
Return true if the device is disabled.  A device is disabled if&#xa; the user has manually set either the network&#x27;s or this device&#x27;s&#xa; enabled property to false.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.driver.BDevice.isFault() -->
<method name="isFault"  public="true" final="true">
<description>
Return true if the device is in fault.  A device is in fault if&#xa; either a fatal fault was detected or if &lt;code&gt;configFail()&lt;/code&gt;&#xa; has been called more recently than &lt;code&gt;configOk()&lt;/code&gt;.  A&#xa; device is also automatically marked in fault if the network is&#xa; in fault.  Refer to either the network&#x27;s or the device&#x27;s&#xa; &lt;code&gt;faultCause&lt;/code&gt; property for the fault reason.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.driver.BDevice.updateStatus() -->
<method name="updateStatus"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Recompute the device status and let child&#xa; extensions know if something has changed.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.driver.BDevice.isFatalFault() -->
<method name="isFatalFault"  public="true" final="true">
<description>
Return true if the device detected a fatal fault.&#xa; Fatal faults cannot be recovered until the device&#xa; is restarted.  Fatal faults trump config faults.&#xa; Fatal device faults include licensing failures and&#xa; invalid parentage.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.driver.BDevice.configOk() -->
<method name="configOk"  public="true" final="true">
<description>
Clear the configuration fault status.  The device may&#xa; remain in fault if the network is in fault or if the&#xa; device has fatal faults.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.driver.BDevice.configFail(java.lang.String) -->
<method name="configFail"  public="true" final="true">
<description>
Set the device into configuration fault.  If the device&#xa; was previously not in fault, then this sets the entire&#xa; device into fault.
</description>
<parameter name="cause">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.driver.BDevice.configFatal(java.lang.String) -->
<method name="configFatal"  public="true" final="true">
<description>
Set the device into the fatal fault condition.  Unlike&#xa; configFail(), the fatal fault condition cannot be cleared&#xa; until station restart.
</description>
<parameter name="cause">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.driver.BDevice.postPing() -->
<method name="postPing"  protected="true" abstract="true">
<description>
Callback to post an asynchronous ping request.
</description>
<return>
<type class="javax.baja.util.IFuture"/>
</return>
</method>

<!-- javax.baja.driver.BDevice.doPing() -->
<method name="doPing"  public="true" abstract="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Implementation of ping.
</description>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.driver.BDevice.getMonitor() -->
<method name="getMonitor"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get the network&#x27;s monitor.
</description>
<return>
<type class="javax.baja.driver.ping.BPingMonitor"/>
</return>
</method>

<!-- javax.baja.driver.BDevice.pingOk() -->
<method name="pingOk"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Called when &lt;code&gt;doPing()&lt;/code&gt; is successful.  May also&#xa; be called when any successful communication occurs.  This&#xa; method is routed to &lt;code&gt;getHealth().pingOk()&lt;/code&gt;.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.driver.BDevice.pingFail(java.lang.String) -->
<method name="pingFail"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Called when &lt;code&gt;doPing()&lt;/code&gt; fails.  This method is&#xa; routed to &lt;code&gt;getHealth().pingFail()&lt;/code&gt;.
</description>
<parameter name="cause">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.driver.BDevice.doAckAlarm(javax.baja.alarm.BAlarmRecord) -->
<method name="doAckAlarm"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Called on alarm acknowledge.  This method is routed&#xa; to &lt;code&gt;getHealth().doAckAlarm(ackRequest)&lt;/code&gt;
</description>
<parameter name="ackRequest">
<type class="javax.baja.alarm.BAlarmRecord"/>
</parameter>
<return>
<type class="javax.baja.sys.BBoolean"/>
</return>
</method>

<!-- javax.baja.driver.BDevice.post(javax.baja.sys.Action, javax.baja.sys.BValue, javax.baja.sys.Context) -->
<method name="post"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Callback to post an async action.  Subclasses should call super.
</description>
<parameter name="action">
<type class="javax.baja.sys.Action"/>
</parameter>
<parameter name="arg">
<type class="javax.baja.sys.BValue"/>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="javax.baja.util.IFuture"/>
</return>
</method>

<!-- javax.baja.driver.BDevice.fw(int, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object) -->
<method name="fw"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="x">
<type class="int"/>
</parameter>
<parameter name="a">
<type class="java.lang.Object"/>
</parameter>
<parameter name="b">
<type class="java.lang.Object"/>
</parameter>
<parameter name="c">
<type class="java.lang.Object"/>
</parameter>
<parameter name="d">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="java.lang.Object"/>
</return>
</method>

<!-- javax.baja.driver.BDevice.getLog() -->
<method name="getLog"  public="true">
<annotation><type class="java.lang.Deprecated"/>
</annotation>
<description>
Get the log named &#x22;{networkLog}.{deviceName}&#x22;.
</description>
<tag name="@deprecated">As of Niagara 4.0, replaced by &lt;code&gt;<see ref="javax.baja.driver.BDevice#getLogger()">#getLogger()</see>&lt;/code&gt;</tag>
<return>
<type class="javax.baja.log.Log"/>
</return>
</method>

<!-- javax.baja.driver.BDevice.getLogger() -->
<method name="getLogger"  public="true">
<description>
Get the logger name &#x22;{networkLog}.{deviceName}&#x22;.
</description>
<return>
<type class="java.util.logging.Logger"/>
<description>
the Logger named {networkLog}.{deviceName}
</description>
</return>
</method>

<!-- javax.baja.driver.BDevice.getIcon() -->
<method name="getIcon"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get the icon.
</description>
<return>
<type class="javax.baja.sys.BIcon"/>
</return>
</method>

<!-- javax.baja.driver.BDevice.status -->
<field name="status"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;status&lt;/code&gt; property.&#xa; Status of the device.  This property should&#xa; never be set directly.
</description>
<tag name="@see">#getStatus</tag>
<tag name="@see">#setStatus</tag>
</field>

<!-- javax.baja.driver.BDevice.enabled -->
<field name="enabled"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;enabled&lt;/code&gt; property.&#xa; Enabled is used to manually disable all communication with the device.
</description>
<tag name="@see">#getEnabled</tag>
<tag name="@see">#setEnabled</tag>
</field>

<!-- javax.baja.driver.BDevice.faultCause -->
<field name="faultCause"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;faultCause&lt;/code&gt; property.&#xa; Provides a short message why the network is in fault.
</description>
<tag name="@see">#getFaultCause</tag>
<tag name="@see">#setFaultCause</tag>
</field>

<!-- javax.baja.driver.BDevice.health -->
<field name="health"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;health&lt;/code&gt; property.&#xa; Indicates communication health status.
</description>
<tag name="@see">#getHealth</tag>
<tag name="@see">#setHealth</tag>
</field>

<!-- javax.baja.driver.BDevice.alarmSourceInfo -->
<field name="alarmSourceInfo"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;alarmSourceInfo&lt;/code&gt; property.
</description>
<tag name="@see">#getAlarmSourceInfo</tag>
<tag name="@see">#setAlarmSourceInfo</tag>
</field>

<!-- javax.baja.driver.BDevice.ping -->
<field name="ping"  public="true" static="true" final="true">
<type class="javax.baja.sys.Action"/>
<description>
Slot for the &lt;code&gt;ping&lt;/code&gt; action.&#xa; Perform a ping test of the device.
</description>
<tag name="@see">#ping()</tag>
</field>

<!-- javax.baja.driver.BDevice.ackAlarm -->
<field name="ackAlarm"  public="true" static="true" final="true">
<type class="javax.baja.sys.Action"/>
<description>
Slot for the &lt;code&gt;ackAlarm&lt;/code&gt; action.
</description>
<tag name="@see">#ackAlarm(BAlarmRecord parameter)</tag>
</field>

<!-- javax.baja.driver.BDevice.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

<!-- javax.baja.driver.BDevice.icon -->
<field name="icon"  protected="true" static="true" final="true">
<type class="javax.baja.sys.BIcon"/>
<description/>
</field>

</class>
</bajadoc>
