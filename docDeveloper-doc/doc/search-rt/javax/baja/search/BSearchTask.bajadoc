<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="search" runtimeProfile="rt" qualifiedName="javax.baja.search.BSearchTask" name="BSearchTask" packageName="javax.baja.search" public="true" final="true">
<description>
An individual search task.  It collects search results in memory on the local VM&#xa; where it was executed (ie. the station/server side only).  To kick off a search&#xa; task from a client VM, use the SearchService&#x27;s search action.  Then to retrieve&#xa; results from a client VM, use the SearchService&#x27;s retrieveResults action.
</description>
<tag name="@author">Dan Heine</tag>
<tag name="@author">Scott Hoye</tag>
<tag name="@creation">2013-08-19</tag>
<tag name="@since">Niagara 4.0</tag>
<extends>
<type class="javax.baja.job.BJob"/>
</extends>
<implements>
<type class="java.lang.Runnable"/>
</implements>
<property name="query" flags="tro">
<type class="java.lang.String"/>
<description>
Slot for the &lt;code&gt;query&lt;/code&gt; property.&#xa; String that defines the search query.  It is the String form of a query ORD.
</description>
<tag name="@see">#getQuery</tag>
<tag name="@see">#setQuery</tag>
</property>

<property name="resultCount" flags="tro">
<type class="long"/>
<description>
Slot for the &lt;code&gt;resultCount&lt;/code&gt; property.&#xa; Total number of results available in the entire result set so far.&#xa; This running total is not considered final until the task&#xa; successfully completes.
</description>
<tag name="@see">#getResultCount</tag>
<tag name="@see">#setResultCount</tag>
</property>

<property name="resultsExceedLimit" flags="tro">
<type class="boolean"/>
<description>
Slot for the &lt;code&gt;resultsExceedLimit&lt;/code&gt; property.&#xa; If the total number of results exceeds the max size as defined&#xa; by the BSearchService&#x27;s maxResultsPerSearch property, then this&#xa; property will be set to true indicating that the search results&#xa; were capped.
</description>
<tag name="@see">#getResultsExceedLimit</tag>
<tag name="@see">#setResultsExceedLimit</tag>
</property>

<action name="expire" flags="hrAo">
<return>
<type class="void"/>
</return>
<description>
Slot for the &lt;code&gt;expire&lt;/code&gt; action.&#xa; This hidden action is used to expire this search task which&#xa; will force it to cancel and dispose itself.
</description>
<tag name="@see">#expire()</tag>
</action>

<!-- javax.baja.search.BSearchTask() -->
<constructor name="BSearchTask" public="true">
<description>
For framework use only.  Do not use this constructor.
</description>
</constructor>

<!-- javax.baja.search.BSearchTask(javax.baja.search.BSearchParams, javax.baja.sys.Context) -->
<constructor name="BSearchTask" public="true">
<parameter name="searchParams">
<type class="javax.baja.search.BSearchParams"/>
<description/>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
<description/>
</parameter>
<description>
Creates a BSearchTask instance using the parameters to&#xa; initialize the search query arguments.  A BajaRuntimeException&#xa; will be thrown if any of the parameters are invalid&#xa; for performing a search.
</description>
</constructor>

<!-- javax.baja.search.BSearchTask.getQuery() -->
<method name="getQuery"  public="true">
<description>
Get the &lt;code&gt;query&lt;/code&gt; property.&#xa; String that defines the search query.  It is the String form of a query ORD.
</description>
<tag name="@see">#query</tag>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.search.BSearchTask.setQuery(java.lang.String) -->
<method name="setQuery"  public="true">
<description>
Set the &lt;code&gt;query&lt;/code&gt; property.&#xa; String that defines the search query.  It is the String form of a query ORD.
</description>
<tag name="@see">#query</tag>
<parameter name="v">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.search.BSearchTask.getResultCount() -->
<method name="getResultCount"  public="true">
<description>
Get the &lt;code&gt;resultCount&lt;/code&gt; property.&#xa; Total number of results available in the entire result set so far.&#xa; This running total is not considered final until the task&#xa; successfully completes.
</description>
<tag name="@see">#resultCount</tag>
<return>
<type class="long"/>
</return>
</method>

<!-- javax.baja.search.BSearchTask.setResultCount(long) -->
<method name="setResultCount"  public="true">
<description>
Set the &lt;code&gt;resultCount&lt;/code&gt; property.&#xa; Total number of results available in the entire result set so far.&#xa; This running total is not considered final until the task&#xa; successfully completes.
</description>
<tag name="@see">#resultCount</tag>
<parameter name="v">
<type class="long"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.search.BSearchTask.getResultsExceedLimit() -->
<method name="getResultsExceedLimit"  public="true">
<description>
Get the &lt;code&gt;resultsExceedLimit&lt;/code&gt; property.&#xa; If the total number of results exceeds the max size as defined&#xa; by the BSearchService&#x27;s maxResultsPerSearch property, then this&#xa; property will be set to true indicating that the search results&#xa; were capped.
</description>
<tag name="@see">#resultsExceedLimit</tag>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.search.BSearchTask.setResultsExceedLimit(boolean) -->
<method name="setResultsExceedLimit"  public="true">
<description>
Set the &lt;code&gt;resultsExceedLimit&lt;/code&gt; property.&#xa; If the total number of results exceeds the max size as defined&#xa; by the BSearchService&#x27;s maxResultsPerSearch property, then this&#xa; property will be set to true indicating that the search results&#xa; were capped.
</description>
<tag name="@see">#resultsExceedLimit</tag>
<parameter name="v">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.search.BSearchTask.expire() -->
<method name="expire"  public="true">
<description>
Invoke the &lt;code&gt;expire&lt;/code&gt; action.&#xa; This hidden action is used to expire this search task which&#xa; will force it to cancel and dispose itself.
</description>
<tag name="@see">#expire</tag>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.search.BSearchTask.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.search.BSearchTask.getResults() -->
<method name="getResults"  public="true">
<description>
Return the results for this search task.  Results are only available when&#xa; the search task has been run (or is running).  Results are also only available&#xa; in the context of the station VM.
</description>
<return>
<type class="javax.baja.search.BSearchResultSet"/>
<description>
a BSearchResultSet instance containing the cached results.
</description>
</return>
</method>

<!-- javax.baja.search.BSearchTask.doExpire(javax.baja.sys.Context) -->
<method name="doExpire"  public="true">
<description>
Called when the expire action is invoked.
</description>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.search.BSearchTask.run() -->
<method name="run"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.search.BSearchTask.submit(javax.baja.sys.Context) -->
<method name="submit"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Convenience for &lt;code&gt;BSearchService.getService().submitSearchTask(this, cx)&lt;/code&gt;.
</description>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="javax.baja.naming.BOrd"/>
</return>
</method>

<!-- javax.baja.search.BSearchTask.doRun(javax.baja.sys.Context) -->
<method name="doRun"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
This is the callback to begin the task.  All work should be done&#xa; on a background thread - never block the callers thread.  During&#xa; the task execution, subclasses should periodically update progress&#xa; via the &lt;code&gt;progress()&lt;/code&gt; or &lt;code&gt;heartbeat()&lt;/code&gt; method.&#xa; Diagnostics information may be dumped via the log() method.  Once&#xa; the run finishes, the subclass must invoke one of the completion&#xa; methods (success, canceled, failed, or complete).
</description>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.search.BSearchTask.doCancel(javax.baja.sys.Context) -->
<method name="doCancel"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
This callback is invoked when the user manually cancels a&#xa; running task.  It is up to the subclass to terminate the task on&#xa; the background thread.  Typically the state should be set to&#xa; canceling while waiting for the background thread to terminate.
</description>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.search.BSearchTask.stopped() -->
<method name="stopped"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.search.BSearchTask.subscribed() -->
<method name="subscribed"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Callback when the component enters the subscribed state.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.search.BSearchTask.unsubscribed() -->
<method name="unsubscribed"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Callback when the component exits the subscribed state.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.search.BSearchTask.getPermissions(javax.baja.sys.Context) -->
<method name="getPermissions"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="javax.baja.security.BPermissions"/>
</return>
</method>

<!-- javax.baja.search.BSearchTask.getIcon() -->
<method name="getIcon"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.BIcon"/>
</return>
</method>

<!-- javax.baja.search.BSearchTask.query -->
<field name="query"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;query&lt;/code&gt; property.&#xa; String that defines the search query.  It is the String form of a query ORD.
</description>
<tag name="@see">#getQuery</tag>
<tag name="@see">#setQuery</tag>
</field>

<!-- javax.baja.search.BSearchTask.resultCount -->
<field name="resultCount"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;resultCount&lt;/code&gt; property.&#xa; Total number of results available in the entire result set so far.&#xa; This running total is not considered final until the task&#xa; successfully completes.
</description>
<tag name="@see">#getResultCount</tag>
<tag name="@see">#setResultCount</tag>
</field>

<!-- javax.baja.search.BSearchTask.resultsExceedLimit -->
<field name="resultsExceedLimit"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;resultsExceedLimit&lt;/code&gt; property.&#xa; If the total number of results exceeds the max size as defined&#xa; by the BSearchService&#x27;s maxResultsPerSearch property, then this&#xa; property will be set to true indicating that the search results&#xa; were capped.
</description>
<tag name="@see">#getResultsExceedLimit</tag>
<tag name="@see">#setResultsExceedLimit</tag>
</field>

<!-- javax.baja.search.BSearchTask.expire -->
<field name="expire"  public="true" static="true" final="true">
<type class="javax.baja.sys.Action"/>
<description>
Slot for the &lt;code&gt;expire&lt;/code&gt; action.&#xa; This hidden action is used to expire this search task which&#xa; will force it to cancel and dispose itself.
</description>
<tag name="@see">#expire()</tag>
</field>

<!-- javax.baja.search.BSearchTask.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
