<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="search" runtimeProfile="rt" qualifiedName="javax.baja.search.BSearchService" name="BSearchService" packageName="javax.baja.search" public="true" final="true">
<description>
The Niagara search service.
</description>
<tag name="@author">Dan Heine, Scott Hoye on 2013-08-19</tag>
<tag name="@since">Niagara 4.0</tag>
<extends>
<type class="javax.baja.sys.BAbstractService"/>
</extends>
<property name="defaultScheme" flags="">
<type class="java.lang.String"/>
<description>
Slot for the &lt;code&gt;defaultScheme&lt;/code&gt; property.&#xa; The default search or query scheme.  The default scheme is assumed&#xa; when the scheme is omitted from the search request.
</description>
<tag name="@see">#getDefaultScheme</tag>
<tag name="@see">#setDefaultScheme</tag>
</property>

<property name="defaultScopes" flags="">
<type class="javax.baja.sys.BVector"/>
<description>
Slot for the &lt;code&gt;defaultScopes&lt;/code&gt; property.&#xa; The list of scopes designated as suggested defaults.  These&#xa; scopes will be marked as defaults in the list returned&#xa; by getSearchScopes().  Each element in the list is expected&#xa; to be either a BSearchScope or a BOrd.
</description>
<tag name="@see">#getDefaultScopes</tag>
<tag name="@see">#setDefaultScopes</tag>
</property>

<property name="maxConcurrentSearches" flags="">
<type class="int"/>
<description>
Slot for the &lt;code&gt;maxConcurrentSearches&lt;/code&gt; property.&#xa; This size determines the maximum number of concurrent&#xa; (active) searches that are allowed at one time.  Active&#xa; search tasks are those that are in a subscribed state.
</description>
<tag name="@see">#getMaxConcurrentSearches</tag>
<tag name="@see">#setMaxConcurrentSearches</tag>
</property>

<property name="maxResultsPerSearch" flags="">
<type class="int"/>
<description>
Slot for the &lt;code&gt;maxResultsPerSearch&lt;/code&gt; property.&#xa; For each search request submitted, this size determines&#xa; the maximum number of results that will be cached in memory&#xa; for the duration of the search task.
</description>
<tag name="@see">#getMaxResultsPerSearch</tag>
<tag name="@see">#setMaxResultsPerSearch</tag>
</property>

<property name="searchTaskTimeToLive" flags="">
<type class="javax.baja.sys.BRelTime"/>
<description>
Slot for the &lt;code&gt;searchTaskTimeToLive&lt;/code&gt; property.&#xa; For each Search Task child created in the activeSearchContainer&#xa; as the result of a search invocation, this time to live value&#xa; determines how long the Search Task will linger in the station&#xa; before it is automatically removed if it has not been used&#xa; during this time.  If the Search Task is subscribed or accessed&#xa; in any way, it will reset the expiration such that the Search&#xa; Task will remain until it is no longer used and this time to live&#xa; has expired since it was last in a subscription state or otherwise&#xa; accessed.
</description>
<tag name="@see">#getSearchTaskTimeToLive</tag>
<tag name="@see">#setSearchTaskTimeToLive</tag>
</property>

<property name="activeSearchContainer" flags="hot">
<type class="javax.baja.sys.BVector"/>
<description>
Slot for the &lt;code&gt;activeSearchContainer&lt;/code&gt; property.&#xa; A container for the active search tasks.  We need this container&#xa; because the active search tasks will linger in memory as long as&#xa; they are subscribed, so we don&#x27;t want views on the SearchService&#xa; (such as the property sheet) causing the active search tasks to&#xa; remain subscribed even if a user isn&#x27;t actively viewing the search&#xa; results for a given search task.
</description>
<tag name="@see">#getActiveSearchContainer</tag>
<tag name="@see">#setActiveSearchContainer</tag>
</property>

<action name="search" flags="ho">
<parameter name="parameter">
<type class="javax.baja.search.BSearchParams"/>
</parameter>
<return>
<type class="javax.baja.naming.BOrd"/>
</return>
<description>
Slot for the &lt;code&gt;search&lt;/code&gt; action.&#xa; Perform asynchronous search for data based on user specified search parameters.&#xa; Search results are returned via an Ord that maps to a BSearchTask.
</description>
<tag name="@see">#search(BSearchParams parameter)</tag>
</action>

<action name="retrieveResults" flags="hAo">
<parameter name="parameter">
<type class="javax.baja.search.BResultsRequest"/>
</parameter>
<return>
<type class="javax.baja.search.BSearchResultSet"/>
</return>
<description>
Slot for the &lt;code&gt;retrieveResults&lt;/code&gt; action.&#xa; Retrieve results from a search operation.
</description>
<tag name="@see">#retrieveResults(BResultsRequest parameter)</tag>
</action>

<action name="getSearchScopes" flags="hAo">
<return>
<type class="javax.baja.sys.BVector"/>
</return>
<description>
Slot for the &lt;code&gt;getSearchScopes&lt;/code&gt; action.&#xa; Retrieve the list of available search scopes.
</description>
<tag name="@see">#getSearchScopes()</tag>
</action>

<action name="updateDefaultScopeInfo" flags="a">
<return>
<type class="void"/>
</return>
<description>
Slot for the &lt;code&gt;updateDefaultScopeInfo&lt;/code&gt; action.&#xa; Update the name and lexicon info for any blank values&#xa; in the default scopes.
</description>
<tag name="@see">#updateDefaultScopeInfo()</tag>
</action>

<!-- javax.baja.search.BSearchService() -->
<constructor name="BSearchService" public="true">
<description/>
</constructor>

<!-- javax.baja.search.BSearchService.getDefaultScheme() -->
<method name="getDefaultScheme"  public="true">
<description>
Get the &lt;code&gt;defaultScheme&lt;/code&gt; property.&#xa; The default search or query scheme.  The default scheme is assumed&#xa; when the scheme is omitted from the search request.
</description>
<tag name="@see">#defaultScheme</tag>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.search.BSearchService.setDefaultScheme(java.lang.String) -->
<method name="setDefaultScheme"  public="true">
<description>
Set the &lt;code&gt;defaultScheme&lt;/code&gt; property.&#xa; The default search or query scheme.  The default scheme is assumed&#xa; when the scheme is omitted from the search request.
</description>
<tag name="@see">#defaultScheme</tag>
<parameter name="v">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.search.BSearchService.getDefaultScopes() -->
<method name="getDefaultScopes"  public="true">
<description>
Get the &lt;code&gt;defaultScopes&lt;/code&gt; property.&#xa; The list of scopes designated as suggested defaults.  These&#xa; scopes will be marked as defaults in the list returned&#xa; by getSearchScopes().  Each element in the list is expected&#xa; to be either a BSearchScope or a BOrd.
</description>
<tag name="@see">#defaultScopes</tag>
<return>
<type class="javax.baja.sys.BVector"/>
</return>
</method>

<!-- javax.baja.search.BSearchService.setDefaultScopes(javax.baja.sys.BVector) -->
<method name="setDefaultScopes"  public="true">
<description>
Set the &lt;code&gt;defaultScopes&lt;/code&gt; property.&#xa; The list of scopes designated as suggested defaults.  These&#xa; scopes will be marked as defaults in the list returned&#xa; by getSearchScopes().  Each element in the list is expected&#xa; to be either a BSearchScope or a BOrd.
</description>
<tag name="@see">#defaultScopes</tag>
<parameter name="v">
<type class="javax.baja.sys.BVector"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.search.BSearchService.getMaxConcurrentSearches() -->
<method name="getMaxConcurrentSearches"  public="true">
<description>
Get the &lt;code&gt;maxConcurrentSearches&lt;/code&gt; property.&#xa; This size determines the maximum number of concurrent&#xa; (active) searches that are allowed at one time.  Active&#xa; search tasks are those that are in a subscribed state.
</description>
<tag name="@see">#maxConcurrentSearches</tag>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.search.BSearchService.setMaxConcurrentSearches(int) -->
<method name="setMaxConcurrentSearches"  public="true">
<description>
Set the &lt;code&gt;maxConcurrentSearches&lt;/code&gt; property.&#xa; This size determines the maximum number of concurrent&#xa; (active) searches that are allowed at one time.  Active&#xa; search tasks are those that are in a subscribed state.
</description>
<tag name="@see">#maxConcurrentSearches</tag>
<parameter name="v">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.search.BSearchService.getMaxResultsPerSearch() -->
<method name="getMaxResultsPerSearch"  public="true">
<description>
Get the &lt;code&gt;maxResultsPerSearch&lt;/code&gt; property.&#xa; For each search request submitted, this size determines&#xa; the maximum number of results that will be cached in memory&#xa; for the duration of the search task.
</description>
<tag name="@see">#maxResultsPerSearch</tag>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.search.BSearchService.setMaxResultsPerSearch(int) -->
<method name="setMaxResultsPerSearch"  public="true">
<description>
Set the &lt;code&gt;maxResultsPerSearch&lt;/code&gt; property.&#xa; For each search request submitted, this size determines&#xa; the maximum number of results that will be cached in memory&#xa; for the duration of the search task.
</description>
<tag name="@see">#maxResultsPerSearch</tag>
<parameter name="v">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.search.BSearchService.getSearchTaskTimeToLive() -->
<method name="getSearchTaskTimeToLive"  public="true">
<description>
Get the &lt;code&gt;searchTaskTimeToLive&lt;/code&gt; property.&#xa; For each Search Task child created in the activeSearchContainer&#xa; as the result of a search invocation, this time to live value&#xa; determines how long the Search Task will linger in the station&#xa; before it is automatically removed if it has not been used&#xa; during this time.  If the Search Task is subscribed or accessed&#xa; in any way, it will reset the expiration such that the Search&#xa; Task will remain until it is no longer used and this time to live&#xa; has expired since it was last in a subscription state or otherwise&#xa; accessed.
</description>
<tag name="@see">#searchTaskTimeToLive</tag>
<return>
<type class="javax.baja.sys.BRelTime"/>
</return>
</method>

<!-- javax.baja.search.BSearchService.setSearchTaskTimeToLive(javax.baja.sys.BRelTime) -->
<method name="setSearchTaskTimeToLive"  public="true">
<description>
Set the &lt;code&gt;searchTaskTimeToLive&lt;/code&gt; property.&#xa; For each Search Task child created in the activeSearchContainer&#xa; as the result of a search invocation, this time to live value&#xa; determines how long the Search Task will linger in the station&#xa; before it is automatically removed if it has not been used&#xa; during this time.  If the Search Task is subscribed or accessed&#xa; in any way, it will reset the expiration such that the Search&#xa; Task will remain until it is no longer used and this time to live&#xa; has expired since it was last in a subscription state or otherwise&#xa; accessed.
</description>
<tag name="@see">#searchTaskTimeToLive</tag>
<parameter name="v">
<type class="javax.baja.sys.BRelTime"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.search.BSearchService.getActiveSearchContainer() -->
<method name="getActiveSearchContainer"  public="true">
<description>
Get the &lt;code&gt;activeSearchContainer&lt;/code&gt; property.&#xa; A container for the active search tasks.  We need this container&#xa; because the active search tasks will linger in memory as long as&#xa; they are subscribed, so we don&#x27;t want views on the SearchService&#xa; (such as the property sheet) causing the active search tasks to&#xa; remain subscribed even if a user isn&#x27;t actively viewing the search&#xa; results for a given search task.
</description>
<tag name="@see">#activeSearchContainer</tag>
<return>
<type class="javax.baja.sys.BVector"/>
</return>
</method>

<!-- javax.baja.search.BSearchService.setActiveSearchContainer(javax.baja.sys.BVector) -->
<method name="setActiveSearchContainer"  public="true">
<description>
Set the &lt;code&gt;activeSearchContainer&lt;/code&gt; property.&#xa; A container for the active search tasks.  We need this container&#xa; because the active search tasks will linger in memory as long as&#xa; they are subscribed, so we don&#x27;t want views on the SearchService&#xa; (such as the property sheet) causing the active search tasks to&#xa; remain subscribed even if a user isn&#x27;t actively viewing the search&#xa; results for a given search task.
</description>
<tag name="@see">#activeSearchContainer</tag>
<parameter name="v">
<type class="javax.baja.sys.BVector"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.search.BSearchService.search(javax.baja.search.BSearchParams) -->
<method name="search"  public="true">
<description>
Invoke the &lt;code&gt;search&lt;/code&gt; action.&#xa; Perform asynchronous search for data based on user specified search parameters.&#xa; Search results are returned via an Ord that maps to a BSearchTask.
</description>
<tag name="@see">#search</tag>
<parameter name="parameter">
<type class="javax.baja.search.BSearchParams"/>
</parameter>
<return>
<type class="javax.baja.naming.BOrd"/>
</return>
</method>

<!-- javax.baja.search.BSearchService.retrieveResults(javax.baja.search.BResultsRequest) -->
<method name="retrieveResults"  public="true">
<description>
Invoke the &lt;code&gt;retrieveResults&lt;/code&gt; action.&#xa; Retrieve results from a search operation.
</description>
<tag name="@see">#retrieveResults</tag>
<parameter name="parameter">
<type class="javax.baja.search.BResultsRequest"/>
</parameter>
<return>
<type class="javax.baja.search.BSearchResultSet"/>
</return>
</method>

<!-- javax.baja.search.BSearchService.getSearchScopes() -->
<method name="getSearchScopes"  public="true">
<description>
Invoke the &lt;code&gt;getSearchScopes&lt;/code&gt; action.&#xa; Retrieve the list of available search scopes.
</description>
<tag name="@see">#getSearchScopes</tag>
<return>
<type class="javax.baja.sys.BVector"/>
</return>
</method>

<!-- javax.baja.search.BSearchService.updateDefaultScopeInfo() -->
<method name="updateDefaultScopeInfo"  public="true">
<description>
Invoke the &lt;code&gt;updateDefaultScopeInfo&lt;/code&gt; action.&#xa; Update the name and lexicon info for any blank values&#xa; in the default scopes.
</description>
<tag name="@see">#updateDefaultScopeInfo</tag>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.search.BSearchService.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.search.BSearchService.getServiceTypes() -->
<method name="getServiceTypes"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type" dimension="1"/>
</return>
</method>

<!-- javax.baja.search.BSearchService.serviceStarted() -->
<method name="serviceStarted"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.search.BSearchService.serviceStopped() -->
<method name="serviceStopped"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.search.BSearchService.enabled() -->
<method name="enabled"  protected="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
This method is called when moving from disabled&#xa; state into the enabled state.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.search.BSearchService.disabled() -->
<method name="disabled"  protected="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
This method is called when moving from enabled&#xa; state into the disabled state.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.search.BSearchService.getService() -->
<method name="getService"  public="true" static="true">
<description>
Return the BSearchService object when running in the station.
</description>
<return>
<type class="javax.baja.search.BSearchService"/>
<description>
search service
</description>
</return>
</method>

<!-- javax.baja.search.BSearchService.getLicenseFeature() -->
<method name="getLicenseFeature"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Return a &#x22;search&#x22; license feature
</description>
<return>
<type class="javax.baja.license.Feature"/>
</return>
</method>

<!-- javax.baja.search.BSearchService.changed(javax.baja.sys.Property, javax.baja.sys.Context) -->
<method name="changed"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="property">
<type class="javax.baja.sys.Property"/>
</parameter>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.search.BSearchService.post(javax.baja.sys.Action, javax.baja.sys.BValue, javax.baja.sys.Context) -->
<method name="post"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="action">
<type class="javax.baja.sys.Action"/>
</parameter>
<parameter name="argument">
<type class="javax.baja.sys.BValue"/>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="javax.baja.util.IFuture"/>
</return>
</method>

<!-- javax.baja.search.BSearchService.executeSearch(javax.baja.search.BSearchParams, java.util.concurrent.Executor, javax.baja.sys.Context) -->
<method name="executeSearch"  public="true">
<description>
Search a scope using the passed-in executor (or the default executor&#xa; if the passed-in executor is null) and context.
</description>
<parameter name="searchParams">
<type class="javax.baja.search.BSearchParams"/>
<description>
search parameters
</description>
</parameter>
<parameter name="executor">
<type class="java.util.concurrent.Executor"/>
<description>
executor to use for search execution
</description>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
<description>
Context to use for the search
</description>
</parameter>
<return>
<type class="javax.baja.search.BSearchTask"/>
<description>
a running search task
</description>
</return>
</method>

<!-- javax.baja.search.BSearchService.executeSearch(javax.baja.search.BSearchParams, java.util.concurrent.Executor) -->
<method name="executeSearch"  public="true">
<description>
Search a scope using the passed-in executor, or the default executor&#xa; if the passed-in executor is null.
</description>
<parameter name="searchParams">
<type class="javax.baja.search.BSearchParams"/>
<description>
search parameters
</description>
</parameter>
<parameter name="executor">
<type class="java.util.concurrent.Executor"/>
<description>
executor to use for search execution
</description>
</parameter>
<return>
<type class="javax.baja.search.BSearchTask"/>
<description>
a running search task
</description>
</return>
</method>

<!-- javax.baja.search.BSearchService.executeSearch(javax.baja.search.BSearchParams) -->
<method name="executeSearch"  public="true">
<description>
Search a scope using the default executor.
</description>
<parameter name="searchParams">
<type class="javax.baja.search.BSearchParams"/>
<description>
search parameters
</description>
</parameter>
<return>
<type class="javax.baja.search.BSearchTask"/>
<description>
a running search task
</description>
</return>
</method>

<!-- javax.baja.search.BSearchService.doSearch(javax.baja.search.BSearchParams, javax.baja.sys.Context) -->
<method name="doSearch"  public="true">
<description>
Kick off a search task using the given search parameters&#xa; and return the BOrd to the BSearchTask created.
</description>
<parameter name="searchParams">
<type class="javax.baja.search.BSearchParams"/>
<description>
search parameters
</description>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
<description>
The context associated with the search request
</description>
</parameter>
<return>
<type class="javax.baja.naming.BOrd"/>
<description>
absolute Ord
</description>
</return>
</method>

<!-- javax.baja.search.BSearchService.doRetrieveResults(javax.baja.search.BResultsRequest, javax.baja.sys.Context) -->
<method name="doRetrieveResults"  public="true">
<description>
Retrieve results from a search task.
</description>
<parameter name="request">
<type class="javax.baja.search.BResultsRequest"/>
<description>
The parameters to use for retrieving search results
</description>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
<description>
The context associated with the request
</description>
</parameter>
<return>
<type class="javax.baja.search.BSearchResultSet"/>
<description/>
</return>
</method>

<!-- javax.baja.search.BSearchService.doUpdateDefaultScopeInfo() -->
<method name="doUpdateDefaultScopeInfo"  public="true">
<description>
Fill in any blank information that can be determined&#xa; for the default scopes.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.search.BSearchService.doGetSearchScopes(javax.baja.sys.Context) -->
<method name="doGetSearchScopes"  public="true">
<description>
Action: getSearchScopes&#xa;&#xa; Get the default search scopes as a vector of BSearchScope.&#xa; The vector is constructed by including each element of the&#xa; defaultScopes property that is readable in the current context.&#xa;&#xa; The action is used by search clients to provide a list of&#xa; scopes for users to choose from.
</description>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
<description>
The context that the action is executing in.
</description>
</parameter>
<return>
<type class="javax.baja.sys.BVector"/>
<description>
Returns a BVector of BSearchScope objects.
</description>
</return>
</method>

<!-- javax.baja.search.BSearchService.getExecutor() -->
<method name="getExecutor"  public="true">
<description>
Get the default search executor.
</description>
<return>
<type class="java.util.concurrent.Executor"/>
</return>
</method>

<!-- javax.baja.search.BSearchService.spy(javax.baja.spy.SpyWriter) -->
<method name="spy"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="out">
<type class="javax.baja.spy.SpyWriter"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.search.BSearchService.getIcon() -->
<method name="getIcon"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.BIcon"/>
</return>
</method>

<!-- javax.baja.search.BSearchService.defaultScheme -->
<field name="defaultScheme"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;defaultScheme&lt;/code&gt; property.&#xa; The default search or query scheme.  The default scheme is assumed&#xa; when the scheme is omitted from the search request.
</description>
<tag name="@see">#getDefaultScheme</tag>
<tag name="@see">#setDefaultScheme</tag>
</field>

<!-- javax.baja.search.BSearchService.defaultScopes -->
<field name="defaultScopes"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;defaultScopes&lt;/code&gt; property.&#xa; The list of scopes designated as suggested defaults.  These&#xa; scopes will be marked as defaults in the list returned&#xa; by getSearchScopes().  Each element in the list is expected&#xa; to be either a BSearchScope or a BOrd.
</description>
<tag name="@see">#getDefaultScopes</tag>
<tag name="@see">#setDefaultScopes</tag>
</field>

<!-- javax.baja.search.BSearchService.maxConcurrentSearches -->
<field name="maxConcurrentSearches"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;maxConcurrentSearches&lt;/code&gt; property.&#xa; This size determines the maximum number of concurrent&#xa; (active) searches that are allowed at one time.  Active&#xa; search tasks are those that are in a subscribed state.
</description>
<tag name="@see">#getMaxConcurrentSearches</tag>
<tag name="@see">#setMaxConcurrentSearches</tag>
</field>

<!-- javax.baja.search.BSearchService.maxResultsPerSearch -->
<field name="maxResultsPerSearch"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;maxResultsPerSearch&lt;/code&gt; property.&#xa; For each search request submitted, this size determines&#xa; the maximum number of results that will be cached in memory&#xa; for the duration of the search task.
</description>
<tag name="@see">#getMaxResultsPerSearch</tag>
<tag name="@see">#setMaxResultsPerSearch</tag>
</field>

<!-- javax.baja.search.BSearchService.searchTaskTimeToLive -->
<field name="searchTaskTimeToLive"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;searchTaskTimeToLive&lt;/code&gt; property.&#xa; For each Search Task child created in the activeSearchContainer&#xa; as the result of a search invocation, this time to live value&#xa; determines how long the Search Task will linger in the station&#xa; before it is automatically removed if it has not been used&#xa; during this time.  If the Search Task is subscribed or accessed&#xa; in any way, it will reset the expiration such that the Search&#xa; Task will remain until it is no longer used and this time to live&#xa; has expired since it was last in a subscription state or otherwise&#xa; accessed.
</description>
<tag name="@see">#getSearchTaskTimeToLive</tag>
<tag name="@see">#setSearchTaskTimeToLive</tag>
</field>

<!-- javax.baja.search.BSearchService.activeSearchContainer -->
<field name="activeSearchContainer"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;activeSearchContainer&lt;/code&gt; property.&#xa; A container for the active search tasks.  We need this container&#xa; because the active search tasks will linger in memory as long as&#xa; they are subscribed, so we don&#x27;t want views on the SearchService&#xa; (such as the property sheet) causing the active search tasks to&#xa; remain subscribed even if a user isn&#x27;t actively viewing the search&#xa; results for a given search task.
</description>
<tag name="@see">#getActiveSearchContainer</tag>
<tag name="@see">#setActiveSearchContainer</tag>
</field>

<!-- javax.baja.search.BSearchService.search -->
<field name="search"  public="true" static="true" final="true">
<type class="javax.baja.sys.Action"/>
<description>
Slot for the &lt;code&gt;search&lt;/code&gt; action.&#xa; Perform asynchronous search for data based on user specified search parameters.&#xa; Search results are returned via an Ord that maps to a BSearchTask.
</description>
<tag name="@see">#search(BSearchParams parameter)</tag>
</field>

<!-- javax.baja.search.BSearchService.retrieveResults -->
<field name="retrieveResults"  public="true" static="true" final="true">
<type class="javax.baja.sys.Action"/>
<description>
Slot for the &lt;code&gt;retrieveResults&lt;/code&gt; action.&#xa; Retrieve results from a search operation.
</description>
<tag name="@see">#retrieveResults(BResultsRequest parameter)</tag>
</field>

<!-- javax.baja.search.BSearchService.getSearchScopes -->
<field name="getSearchScopes"  public="true" static="true" final="true">
<type class="javax.baja.sys.Action"/>
<description>
Slot for the &lt;code&gt;getSearchScopes&lt;/code&gt; action.&#xa; Retrieve the list of available search scopes.
</description>
<tag name="@see">#getSearchScopes()</tag>
</field>

<!-- javax.baja.search.BSearchService.updateDefaultScopeInfo -->
<field name="updateDefaultScopeInfo"  public="true" static="true" final="true">
<type class="javax.baja.sys.Action"/>
<description>
Slot for the &lt;code&gt;updateDefaultScopeInfo&lt;/code&gt; action.&#xa; Update the name and lexicon info for any blank values&#xa; in the default scopes.
</description>
<tag name="@see">#updateDefaultScopeInfo()</tag>
</field>

<!-- javax.baja.search.BSearchService.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

<!-- javax.baja.search.BSearchService.logger -->
<field name="logger"  public="true" static="true" final="true">
<type class="java.util.logging.Logger"/>
<description/>
</field>

<!-- javax.baja.search.BSearchService.executor -->
<field name="executor"  protected="true">
<type class="java.util.concurrent.ForkJoinPool"/>
<description/>
</field>

</class>
</bajadoc>
