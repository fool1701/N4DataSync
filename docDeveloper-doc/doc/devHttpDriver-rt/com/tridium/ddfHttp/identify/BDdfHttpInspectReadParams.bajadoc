<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="devHttpDriver" runtimeProfile="rt" qualifiedName="com.tridium.ddfHttp.identify.BDdfHttpInspectReadParams" name="BDdfHttpInspectReadParams" packageName="com.tridium.ddfHttp.identify" public="true">
<description>
This is part of the devHttpDriver &#x27;inspect&#x27; support whose purpose is&#xa; to allow drivers to inspect (comb) web pages for data and import the&#xa; data into a Niagara AX station as a standard Niagara AX driver control&#xa; point.
</description>
<tag name="@author">lperkins</tag>
<extends>
<type class="com.tridium.ddf.identify.BDdfReadParams"/>
</extends>
<implements>
<type class="com.tridium.ddfHttp.identify.BIDdfHttpInspectUrl"/>
</implements>
<property name="url" flags="">
<type class="java.lang.String"/>
<description>
Slot for the &lt;code&gt;url&lt;/code&gt; property.&#xa; This is the address of the HTTP server to get a result from. Behind the scenes,&#xa; the driver will simulate a web browser connecting to this address. To submit data&#xa; as part of the request, simply add a question mark in this field after the URL.&#xa; After that, add as many name value pairs as necessary, each separated by an&#xa; ampersand &#x27;&amp;&#x27; character. If present, then this form data will be presented to&#xa; the corresponding web server as part of an HTTP GET operation. Alternatively,&#xa; to pass this data as part of an HTTP POST operation, simply add the text &#x22;POST&#x22;&#xa; followed by a space to the front of this string.&#xa; &lt;br&gt;
</description>
<tag name="@see">com.tridium.ddfHttp.identify.BIDdfHttpInspectUrl#getUrl()</tag>
<tag name="@see">#getUrl</tag>
<tag name="@see">#setUrl</tag>
</property>

<!-- com.tridium.ddfHttp.identify.BDdfHttpInspectReadParams() -->
<constructor name="BDdfHttpInspectReadParams" public="true">
<description/>
</constructor>

<!-- com.tridium.ddfHttp.identify.BDdfHttpInspectReadParams.getUrl() -->
<method name="getUrl"  public="true">
<description>
Get the &lt;code&gt;url&lt;/code&gt; property.&#xa; This is the address of the HTTP server to get a result from. Behind the scenes,&#xa; the driver will simulate a web browser connecting to this address. To submit data&#xa; as part of the request, simply add a question mark in this field after the URL.&#xa; After that, add as many name value pairs as necessary, each separated by an&#xa; ampersand &#x27;&amp;&#x27; character. If present, then this form data will be presented to&#xa; the corresponding web server as part of an HTTP GET operation. Alternatively,&#xa; to pass this data as part of an HTTP POST operation, simply add the text &#x22;POST&#x22;&#xa; followed by a space to the front of this string.&#xa; &lt;br&gt;
</description>
<tag name="@see">com.tridium.ddfHttp.identify.BIDdfHttpInspectUrl#getUrl()</tag>
<tag name="@see">#url</tag>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- com.tridium.ddfHttp.identify.BDdfHttpInspectReadParams.setUrl(java.lang.String) -->
<method name="setUrl"  public="true">
<description>
Set the &lt;code&gt;url&lt;/code&gt; property.&#xa; This is the address of the HTTP server to get a result from. Behind the scenes,&#xa; the driver will simulate a web browser connecting to this address. To submit data&#xa; as part of the request, simply add a question mark in this field after the URL.&#xa; After that, add as many name value pairs as necessary, each separated by an&#xa; ampersand &#x27;&amp;&#x27; character. If present, then this form data will be presented to&#xa; the corresponding web server as part of an HTTP GET operation. Alternatively,&#xa; to pass this data as part of an HTTP POST operation, simply add the text &#x22;POST&#x22;&#xa; followed by a space to the front of this string.&#xa; &lt;br&gt;
</description>
<tag name="@see">com.tridium.ddfHttp.identify.BIDdfHttpInspectUrl#getUrl()</tag>
<tag name="@see">#url</tag>
<parameter name="v">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddfHttp.identify.BDdfHttpInspectReadParams.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- com.tridium.ddfHttp.identify.BDdfHttpInspectReadParams.getReadRequestType() -->
<method name="getReadRequestType"  public="true">
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- com.tridium.ddfHttp.identify.BDdfHttpInspectReadParams.url -->
<field name="url"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;url&lt;/code&gt; property.&#xa; This is the address of the HTTP server to get a result from. Behind the scenes,&#xa; the driver will simulate a web browser connecting to this address. To submit data&#xa; as part of the request, simply add a question mark in this field after the URL.&#xa; After that, add as many name value pairs as necessary, each separated by an&#xa; ampersand &#x27;&amp;&#x27; character. If present, then this form data will be presented to&#xa; the corresponding web server as part of an HTTP GET operation. Alternatively,&#xa; to pass this data as part of an HTTP POST operation, simply add the text &#x22;POST&#x22;&#xa; followed by a space to the front of this string.&#xa; &lt;br&gt;
</description>
<tag name="@see">com.tridium.ddfHttp.identify.BIDdfHttpInspectUrl#getUrl()</tag>
<tag name="@see">#getUrl</tag>
<tag name="@see">#setUrl</tag>
</field>

<!-- com.tridium.ddfHttp.identify.BDdfHttpInspectReadParams.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
