<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="devHttpDriver" runtimeProfile="rt" qualifiedName="com.tridium.ddfHttp.comm.req.BDdfHttpInspectReadRequest" name="BDdfHttpInspectReadRequest" packageName="com.tridium.ddfHttp.comm.req" public="true">
<description>
This class is used to read the value of an HTTP driver data point&#xa; by inspecting (parsing/combing) the HTTP response for the data&#xa; value.  &#xa; &#xa; The response will inspect (parse / comb) the HTTP response data for&#xa; the data point value by feeding the HTTP response data and a regular&#xa; expression for the data point through a Perl 5 regular expression&#xa; engine.&#xa; &#xa; This assumes that the pointId of the proxyExt and/or the pingParameters of&#xa; the device implement BIDdfHttpInspectUrl. The URL is&#xa; determined based on the deviceId and the pointId.&#xa; &#xa; If only the deviceId implements BIDdfHttpInspectUrl then&#xa; the URL from the deviceId will be used.&#xa; &#xa; If only the pointId implements BIDdfHttpInspectUrl&#xa; then the URL from the pointId will be used.&#xa; &#xa; If both the deviceId and pointId define a URL then&#xa; the URL for the pointId will be treated as being&#xa; relative to the URL for the deviceId. More specifically,&#xa; the HTTP connection will be established to the URL that&#xa; results by combining the deviceId URL with the pointId&#xa; URL.
</description>
<tag name="@author">Lenard Perkins</tag>
<tag name="@creation">01 Jan 08</tag>
<tag name="@version">$Revision$ $Date: 02/19/2009 3:42:00 PM$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="com.tridium.ddf.comm.req.BDdfReadRequest"/>
</extends>
<!-- com.tridium.ddfHttp.comm.req.BDdfHttpInspectReadRequest() -->
<constructor name="BDdfHttpInspectReadRequest" public="true">
<description/>
</constructor>

<!-- com.tridium.ddfHttp.comm.req.BDdfHttpInspectReadRequest.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- com.tridium.ddfHttp.comm.req.BDdfHttpInspectReadRequest.toByteArray() -->
<method name="toByteArray"  public="true">
<description>
The devHttpDriver framework uses the byte array that is returned&#xa; as the URL to browse to over the network. The corresponding response&#xa; will inspect (parse / comb) the HTTP response for data values.&#xa; &#xa; The URL optionally encodes any data to be sent by placing a question mark after the web address&#xa; and then placing data fields as a series of key=value pairs that are delimited by the ampersand&#xa; character.&#xa; &#xa; By default, the devHttpDriver framework will establish an HTTP GET connection to the URL. If&#xa; the URL begins with &#x22;POST &#x22; (that is to say, the string POST all upper case followed by a&#xa; space) then the devHttpDriver will establish an HTTP POST connection to the web address portion&#xa; of the URL (that is to say, the text on the left side of the question mark in the URL). In this&#xa; scenario, the data (that is to say, the text on the right side of the question mark in the URL)&#xa; will be placed into the HTTP data stream in the location where form data is typically placed&#xa; by Web Browsers.&#xa; &#xa; This request class uses the URL that is defined on the proxyExt&#x27;s readParameters the device&#x27;s&#xa; deviceId.&#xa; &#xa; Please review the javadoc for this class&#x27;s declaration for more details about how the URL is&#xa; formed.
</description>
<return>
<type class="byte" dimension="1"/>
</return>
</method>

<!-- com.tridium.ddfHttp.comm.req.BDdfHttpInspectReadRequest.processReceive(com.tridium.ddf.comm.IDdfDataFrame) -->
<method name="processReceive"  public="true">
<description/>
<parameter name="ddfDataFrame">
<type class="com.tridium.ddf.comm.IDdfDataFrame"/>
</parameter>
<return>
<type class="com.tridium.ddf.comm.rsp.BIDdfResponse"/>
</return>
<throws>
<type class="com.tridium.ddf.comm.rsp.DdfResponseException"/>
</throws>
</method>

<!-- com.tridium.ddfHttp.comm.req.BDdfHttpInspectReadRequest.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

<!-- com.tridium.ddfHttp.comm.req.BDdfHttpInspectReadRequest.urlAddress -->
<field name="urlAddress"  protected="true">
<type class="java.lang.String"/>
<description/>
</field>

</class>
</bajadoc>
