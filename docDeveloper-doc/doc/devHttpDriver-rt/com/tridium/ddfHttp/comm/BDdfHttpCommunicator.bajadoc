<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="devHttpDriver" runtimeProfile="rt" qualifiedName="com.tridium.ddfHttp.comm.BDdfHttpCommunicator" name="BDdfHttpCommunicator" packageName="com.tridium.ddfHttp.comm" public="true">
<description>
This is an HTTP communicator for use on driver networks or driver&#xa; devices that communicate to field equipment over HTTP.&#xa; &#xa; For standard HTTP communications, driver devices should extend&#xa; BDdfHttpDevice, which includes a standard BDdfHttpCommunicator&#xa; as Niagara AX child property.
</description>
<tag name="@author">Lenard Perkins</tag>
<tag name="@creation">01 Jan 08</tag>
<tag name="@version">$Revision$ $Date: 02/19/2009 3:42:00 PM$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="com.tridium.ddf.comm.singleTransaction.BDdfSingleTransactionCommunicator"/>
</extends>
<property name="credentials" flags="">
<type class="com.tridium.ddfHttp.comm.BDdfHttpUserNameAndPassword"/>
<description>
Slot for the &lt;code&gt;credentials&lt;/code&gt; property.&#xa; The user name and password to use if the Http server requires a user&#xa; name and password.
</description>
<tag name="@see">#getCredentials</tag>
<tag name="@see">#setCredentials</tag>
</property>

<!-- com.tridium.ddfHttp.comm.BDdfHttpCommunicator() -->
<constructor name="BDdfHttpCommunicator" public="true">
<description/>
</constructor>

<!-- com.tridium.ddfHttp.comm.BDdfHttpCommunicator.getCredentials() -->
<method name="getCredentials"  public="true">
<description>
Get the &lt;code&gt;credentials&lt;/code&gt; property.&#xa; The user name and password to use if the Http server requires a user&#xa; name and password.
</description>
<tag name="@see">#credentials</tag>
<return>
<type class="com.tridium.ddfHttp.comm.BDdfHttpUserNameAndPassword"/>
</return>
</method>

<!-- com.tridium.ddfHttp.comm.BDdfHttpCommunicator.setCredentials(com.tridium.ddfHttp.comm.BDdfHttpUserNameAndPassword) -->
<method name="setCredentials"  public="true">
<description>
Set the &lt;code&gt;credentials&lt;/code&gt; property.&#xa; The user name and password to use if the Http server requires a user&#xa; name and password.
</description>
<tag name="@see">#credentials</tag>
<parameter name="v">
<type class="com.tridium.ddfHttp.comm.BDdfHttpUserNameAndPassword"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddfHttp.comm.BDdfHttpCommunicator.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- com.tridium.ddfHttp.comm.BDdfHttpCommunicator.getHttpTransmitter() -->
<method name="getHttpTransmitter"  public="true">
<description>
Returns the value of the &#x27;transmitter&#x27; slot cast to BDdfHttpTransmitter.
</description>
<return>
<type class="com.tridium.ddfHttp.comm.BDdfHttpTransmitter"/>
</return>
</method>

<!-- com.tridium.ddfHttp.comm.BDdfHttpCommunicator.getHttpReceiver() -->
<method name="getHttpReceiver"  public="true">
<description>
Returns the value of the &#x27;receiver&#x27; slot cast to BDdfHttpTransmitter.
</description>
<return>
<type class="com.tridium.ddfHttp.comm.BDdfHttpReceiver"/>
</return>
</method>

<!-- com.tridium.ddfHttp.comm.BDdfHttpCommunicator.getHttpCredentials(com.tridium.ddf.comm.req.BIDdfRequest) -->
<method name="getHttpCredentials"  public="true">
<description>
Gets the user name and password for the given BIDdfRequest. By default, this returns the value of the&#xa; username property. Drivers may override if they need to define a different username per&#xa; request.
</description>
<parameter name="ddfHttpRequest">
<type class="com.tridium.ddf.comm.req.BIDdfRequest"/>
</parameter>
<return>
<type class="javax.baja.security.BICredentials"/>
</return>
</method>

<!-- com.tridium.ddfHttp.comm.BDdfHttpCommunicator.getHttpContentType(com.tridium.ddf.comm.req.BIDdfRequest) -->
<method name="getHttpContentType"  public="true">
<description>
Gets the HTTP-CONTENT-TYPE for the given BIDdfRequest.
</description>
<parameter name="ddfHttpRequest">
<type class="com.tridium.ddf.comm.req.BIDdfRequest"/>
<description/>
</parameter>
<return>
<type class="java.lang.String"/>
<description>
&#x22;application/x-www-form-urlencoded&#x22; by default. This&#xa; method may be overridden if a different HTTP-CONTENT-TYPE&#xa; is required.
</description>
</return>
</method>

<!-- com.tridium.ddfHttp.comm.BDdfHttpCommunicator.getSoTimeout(com.tridium.ddf.comm.req.BIDdfRequest) -->
<method name="getSoTimeout"  public="true">
<description>
Gets the timeout for the HTTP socket connection.
</description>
<parameter name="ddfHttpRequest">
<type class="com.tridium.ddf.comm.req.BIDdfRequest"/>
</parameter>
<return>
<type class="int"/>
<description>
by default this returns 0 which effectively disables the&#xa; socket timeout. This method may be overriden if a different&#xa; HTTP-CONTENT-TYPE is required
</description>
</return>
</method>

<!-- com.tridium.ddfHttp.comm.BDdfHttpCommunicator.preProcessStreamRequest(com.tridium.ddfHttp.comm.req.BIDdfHttpStreamRequest) -->
<method name="preProcessStreamRequest"  protected="true">
<description>
The doCommunicate method calls this method for any ddf request that&#xa; implements BIDdfHttpStreamRequest. It calls this method before calling&#xa; super.doCommunicate(ddfRequest).&#xa; &#xa; By default, this causes the standard BDdfCommunicator and BDdfTransactionMgr&#xa; logic to treat this request like a raw-transmit request and not process it&#xa; in a request-response transaction. This is necessary because the request&#xa; itself will be consuming the response bytes and leaving nothing to remain&#xa; for dev driver to process a response for. This is accomplished by changing&#xa; the respone time on the request to BRelTime.DEFAULT.&#xa; &#xa; If driver developers do not desire this functionality then they may&#xa; override this method and either do nothing or do anything that they&#xa; might prefer to do differently.
</description>
<parameter name="ddfRequest">
<type class="com.tridium.ddfHttp.comm.req.BIDdfHttpStreamRequest"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddfHttp.comm.BDdfHttpCommunicator.preValidateUrl(com.tridium.ddf.comm.req.BIDdfRequest) -->
<method name="preValidateUrl"  protected="true">
<description/>
<parameter name="ddfRequest">
<type class="com.tridium.ddf.comm.req.BIDdfRequest"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- com.tridium.ddfHttp.comm.BDdfHttpCommunicator.doCommunicate(com.tridium.ddf.comm.req.BIDdfRequest) -->
<method name="doCommunicate"  public="true">
<description/>
<parameter name="ddfRequest">
<type class="com.tridium.ddf.comm.req.BIDdfRequest"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddfHttp.comm.BDdfHttpCommunicator.traceText() -->
<method name="traceText"  public="true">
<description>
Descendants may override if they wish for the receive frames&#xa; to be printed as pure text during station debug trace.
</description>
<return>
<type class="boolean"/>
<description>
false
</description>
</return>
</method>

<!-- com.tridium.ddfHttp.comm.BDdfHttpCommunicator.transmitter -->
<field name="transmitter"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;transmitter&lt;/code&gt; property.&#xa; This item transmits messages for the communicator.
</description>
<tag name="@see">#getTransmitter</tag>
<tag name="@see">#setTransmitter</tag>
</field>

<!-- com.tridium.ddfHttp.comm.BDdfHttpCommunicator.receiver -->
<field name="receiver"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;receiver&lt;/code&gt; property.&#xa; This is a place-holder for the receiver.
</description>
<tag name="@see">#getReceiver</tag>
<tag name="@see">#setReceiver</tag>
</field>

<!-- com.tridium.ddfHttp.comm.BDdfHttpCommunicator.credentials -->
<field name="credentials"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;credentials&lt;/code&gt; property.&#xa; The user name and password to use if the Http server requires a user&#xa; name and password.
</description>
<tag name="@see">#getCredentials</tag>
<tag name="@see">#setCredentials</tag>
</field>

<!-- com.tridium.ddfHttp.comm.BDdfHttpCommunicator.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
