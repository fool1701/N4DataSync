<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="devHttpDriver" runtimeProfile="rt" qualifiedName="com.tridium.ddfHttp.comm.DdfHttpHelper" name="DdfHttpHelper" packageName="com.tridium.ddfHttp.comm" public="true">
<description>
This class encapsulates the details that must occur in order to&#xa; open an Http connection, possibly authenticate, and possibly post&#xa; form data from the &#x27;forceTransmit&#x27; method on the outer instance&#xa; which occurs on the &#x27;communicator&#x27; thread.&#xa;&#xa; This class also encapsulates the details that must occur in order&#xa; to read the content from the Http connection. This occurs on the&#xa; &#x27;receive&#x27; thread.&#xa; &#xa; The BDdfHttpTransmitter and BDdfHttpReceiver both rely on this class for&#xa; inter-thread synchronization. The BDdfHttpTransmitter calls the synchronized&#xa; &#x27;transmitWhenReadyToReceive&#x27; method on the communicator thread when the next&#xa; devDriver request needs to be transmitted. The BDdfHttpReceiver calls the&#xa; synchronized &#x27;waitReceiveNextAndClose&#x27; method on the receive thread in the&#xa; receive thread&#x27;s tight loop to continually receive incoming dev driver&#xa; data frames. The &#x27;waitReceiveNextAndClose&#x27; method blocks, waits for the&#xa; &#x27;transmitWhenReadyToReceive&#x27; method to transmit over HTTP, &#xa; &#xa; While this is devHttpDriver&#x27;s best attempt at HTTP transmit and receive, its creators realize that some&#xa; web servers could implement HTTP transmit and receive differently (hopefully just slightly). For that reason,&#xa; all fields are granted protected access and all methods are split up into many&#xa; smaller methods, all of which are granted protected access. This should allow&#xa; developers to customize any pieces of the authentication that might be necessary on a&#xa; per-driver basis.&#xa; &#xa; To plug-in the custom DdfHttpHelper (which uses the custom DdfAuthenticationHelper, override&#xa; the &#x27;makeHttpHelper&#x27; method on the driver&#x27;s transmitter class which extends BDdfHttpTransmitter.
</description>
<tag name="@see">DdfAuthenticationHelper</tag>
<tag name="@see">BDdfHttpTransmitter</tag>
<tag name="@see">BDdfHttpReceiver</tag>
<tag name="@author">Lenard Perkins</tag>
<tag name="@creation">01 Jan 08</tag>
<tag name="@version">$Revision$ $Date: 02/19/2009 3:42:00 PM$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="java.lang.Object"/>
</extends>
<!-- com.tridium.ddfHttp.comm.DdfHttpHelper(com.tridium.ddfHttp.comm.BDdfHttpTransmitter) -->
<constructor name="DdfHttpHelper" public="true">
<parameter name="ddfHttpTransmitter">
<type class="com.tridium.ddfHttp.comm.BDdfHttpTransmitter"/>
<description/>
</parameter>
<description/>
</constructor>

<!-- com.tridium.ddfHttp.comm.DdfHttpHelper.getWatchdogThreadName() -->
<method name="getWatchdogThreadName"  protected="true">
<description>
ASSUMPTIONS: httpCommunicator is not null
</description>
<return>
<type class="java.lang.String"/>
<description/>
</return>
</method>

<!-- com.tridium.ddfHttp.comm.DdfHttpHelper.getThreadSuffix(com.tridium.ddf.comm.BIDdfCommunicator) -->
<method name="getThreadSuffix"  protected="true" static="true">
<description/>
<parameter name="ddfCommunicator">
<type class="com.tridium.ddf.comm.BIDdfCommunicator"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- com.tridium.ddfHttp.comm.DdfHttpHelper.stopHelping() -->
<method name="stopHelping"  public="true">
<description>
Cleans up the list
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddfHttp.comm.DdfHttpHelper.cleanupListOfOutstandingUrlConnections() -->
<method name="cleanupListOfOutstandingUrlConnections"  protected="true">
<description>
Calls &#x27;close&#x27; on all UrlConnections in the &lt;code&gt;<see ref="com.tridium.ddfHttp.comm.DdfHttpHelper#openHttpConnections">#openHttpConnections</see>&lt;/code&gt; list&#xa; that are still open. This method is called from the &lt;code&gt;<see ref="com.tridium.ddfHttp.comm.DdfHttpHelper#stopHelping()">#stopHelping()</see>&lt;/code&gt; method.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddfHttp.comm.DdfHttpHelper.transmitWhenReadyToReceive(com.tridium.ddf.comm.req.BIDdfRequest) -->
<method name="transmitWhenReadyToReceive"  public="true" synchronized="true">
<description>
Waits for the &#x27;receiverReadyToReceive&#x27; to be set to true and then calls&#xa; &#x27;transmit&#x27; and passes in the given ddfRequst.
</description>
<parameter name="ddfRequest">
<type class="com.tridium.ddf.comm.req.BIDdfRequest"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
<description/>
</throws>
</method>

<!-- com.tridium.ddfHttp.comm.DdfHttpHelper.transmit(com.tridium.ddf.comm.req.BIDdfRequest) -->
<method name="transmit"  protected="true">
<description>
Transmits the given &#x27;ddfRequest&#x27; over Http by calling the &#x27;toByteArray&#x27; method on it and using&#xa; the return as a url that optionally includes form data delimited from the url address by a&#xa; question mark -- just as web browsers currently post form data.
</description>
<parameter name="ddfRequest">
<type class="com.tridium.ddf.comm.req.BIDdfRequest"/>
<description/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
<description/>
</throws>
</method>

<!-- com.tridium.ddfHttp.comm.DdfHttpHelper.cleanupClosedOutstandingStreams() -->
<method name="cleanupClosedOutstandingStreams"  protected="true">
<description>
Removes references to any UrlConnections that were passed to a &#xa; BIDdfStreamRequest that were not closed at the time but have&#xa; since been closed.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddfHttp.comm.DdfHttpHelper.waitReceiveNextAndClose() -->
<method name="waitReceiveNextAndClose"  public="true" synchronized="true">
<description>
Blocks on the instance of DdfHttpHelper until the DdfHttpHelper opens an Http connection and&#xa; transmits. After that, this reads the content from the Http connection, closes the Http&#xa; connection, and returns the Http content.
</description>
<return>
<type class="byte" dimension="1"/>
<description>
the Http content from the next Http connection that is opened.
</description>
</return>
<throws>
<type class="java.lang.Exception"/>
<description>
passes along any I/O or InterruptedException that could occur as a result of&#xa;           waiting or performing Http I/O.
</description>
</throws>
<throws>
<type class="javax.baja.net.HttpException"/>
</throws>
</method>

<!-- com.tridium.ddfHttp.comm.DdfHttpHelper.readContent() -->
<method name="readContent"  protected="true">
<description>
Reads the content from the most recent baja url connection.
</description>
<return>
<type class="byte" dimension="1"/>
<description>
the bytes of the conent from the most recent baja url connection.
</description>
</return>
<throws>
<type class="java.lang.Exception"/>
<description>
any I/O exception that might occur while reading content
</description>
</throws>
</method>

<!-- com.tridium.ddfHttp.comm.DdfHttpHelper.readContentAndClose() -->
<method name="readContentAndClose"  public="true">
<description>
Calls readContent() and then calls closeConnection()
</description>
<tag name="@see">#readContent</tag>
<tag name="@see">#closeConnection()</tag>
<return>
<type class="byte" dimension="1"/>
<description>
the byte array that readContent() returns
</description>
</return>
<throws>
<type class="java.lang.Exception"/>
<description>
any I/O exception that might occur when calling&#xa; the readContent() and closeConnection() methods.
</description>
</throws>
<throws>
<type class="javax.baja.net.HttpException"/>
</throws>
</method>

<!-- com.tridium.ddfHttp.comm.DdfHttpHelper.closeConnection() -->
<method name="closeConnection"  protected="true">
<description>
Closes the most recent baja url connection. This is called on the receive thread&#xa; after reading the contents of an HTTP response.
</description>
<tag name="@see">#readContentAndClose()</tag>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddfHttp.comm.DdfHttpHelper.makeConnection() -->
<method name="makeConnection"  protected="true">
<description>
Sets mostRecentBajaUrlConnection to a new UrlConnection for the mostRecentJavaUrl.&#xa; &#xa; This is called by the transmitHttp method to prepare for the actual HTTP GET or POST&#xa; operation.
</description>
<tag name="@see">#transmitHttp()</tag>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
<description>
if anything goes wrong. This exception is passed up to a higher&#xa; level where it can be placed in the communicator&#x27;s log.
</description>
</throws>
</method>

<!-- com.tridium.ddfHttp.comm.DdfHttpHelper.doGetOrPost() -->
<method name="doGetOrPost"  protected="true">
<description>
This attempts to perform the actual HTTP GET or POST operation. The operation will&#xa; be a POST if the &#x27;toByteArray&#x27; method of the mostRecentDdfRequest returns an ascii&#xa; byte array with the String &#x22;POST &#x22; on the front. Otherwise, this attempts to perform&#xa; an HTTP GET.
</description>
<tag name="@see">#transmitHttp()</tag>
<tag name="@see">#reviewStatusCode(int)</tag>
<return>
<type class="int"/>
<description>
the status code from the HTTP GET or POST connection
</description>
</return>
<throws>
<type class="java.lang.Exception"/>
<description>
if anything goes wrong. This exception is passed up to a higher&#xa; level where it can be placed in the communicator&#x27;s log.
</description>
</throws>
</method>

<!-- com.tridium.ddfHttp.comm.DdfHttpHelper.transmitHttp() -->
<method name="transmitHttp"  protected="true">
<description>
Connects to the &#x27;mostRecentJavaUrl&#x27; (authenticates first if possible) and performs&#xa; an HTTP GET or POST according to the return value of the &#x27;toByteArray&#x27; method on&#xa; the mostRecentDdfRequest.&#xa; &#xa; This calls the following extendable methods in order:&#xa; 1. makeConnection&#xa; 2. considerPreAuthorization&#xa; 3. doGetOrPost&#xa; 4. reviewStatusCode
</description>
<tag name="@see">#makeConnection()</tag>
<tag name="@see">#considerPreAuthentication()</tag>
<tag name="@see">#doGetOrPost()</tag>
<tag name="@see">#reviewStatusCode(int)</tag>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
<description>
if anything goes wrong. This exception is passed up to a higher&#xa; level where it can be placed in the communicator&#x27;s log.
</description>
</throws>
</method>

<!-- com.tridium.ddfHttp.comm.DdfHttpHelper.reviewStatusCode(int) -->
<method name="reviewStatusCode"  protected="true">
<description>
This is called from the &#x27;transmitHttp&#x27; method after attempting the HTTP GET or POST.&#xa; &#xa; This reviews the HTTP status code and takes any necessary action as a result of the&#xa; HTTP status code. At present, this checks if the status code is a code 401 (401=&#xa; unauthorized), attempts to add authentication to the HTTP request, and attempts&#xa; to retry the HTTP GET or POST with the user name, password and appropriate encryption&#xa; algorithm (basic vs. digest)
</description>
<tag name="@see">#transmitHttp()</tag>
<parameter name="statusCode">
<type class="int"/>
<description>
the status code returned from the most recent attempt to perform&#xa; an HTTP GET or POST.
</description>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
<description>
if anything goes wrong. This exception is passed up to a higher&#xa; level where it can be placed in the communicator&#x27;s log.
</description>
</throws>
</method>

<!-- com.tridium.ddfHttp.comm.DdfHttpHelper.verifyOk() -->
<method name="verifyOk"  protected="true">
<description/>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.net.HttpException"/>
</throws>
</method>

<!-- com.tridium.ddfHttp.comm.DdfHttpHelper.getUserNameAndPasswordForTransaction() -->
<method name="getUserNameAndPasswordForTransaction"  protected="true">
<description>
Gets the BUsernameAndPassord to use for the current HTTP transmission.
</description>
<tag name="@see">#addAuthenticationBasedOnHttpResponse()</tag>
<return>
<type class="javax.baja.security.BUsernameAndPassword"/>
<description>
ddfHttpTransmitter.getHttpCommunicator().getHttpCredentials(mostRecentDdfRequest)
</description>
</return>
</method>

<!-- com.tridium.ddfHttp.comm.DdfHttpHelper.makeAuthenticationHelper(javax.baja.security.BUsernameAndPassword) -->
<method name="makeAuthenticationHelper"  protected="true">
<description>
Creates a DdfAuthenticationHelper to authenticate the connection to the&#xa; mostRecentBajaUrlConnection (which just failed with an HTTP code 401)&#xa; using the given user name and password credentials.
</description>
<parameter name="credentials">
<type class="javax.baja.security.BUsernameAndPassword"/>
<description>
the user name and password to use to log into the&#xa; web server in order to gain access to the mostRecentBajaUrlConnection.
</description>
</parameter>
<return>
<type class="com.tridium.ddfHttp.comm.DdfAuthenticationHelper"/>
<description>
a new instance of DdfAuthenticationHelper to authenticate the&#xa; connection to the mostRecentBajaUrlConnection.
</description>
</return>
</method>

<!-- com.tridium.ddfHttp.comm.DdfHttpHelper.addAuthenticationBasedOnHttpResponse() -->
<method name="addAuthenticationBasedOnHttpResponse"  protected="true">
<description>
Adds authentication to the mostRecentBajaUrlConnection based on the HTTP response&#xa; header of the most recent failed (http code 401) response header in the mostRecentBajaUrlConnection.&#xa; &#xa; This is called after a GET or POST is made to a URL that fails with HTTP code 401&#xa; (401=unauthorized). This reviews the response header for the failure. From the&#xa; response code, this determines whether the URL requires basic or digest authentication.&#xa; Then this adds the appropriate request header back onto the mostRecentBajaUrlConnection.&#xa; This allows for another GET or POST attempt but hopefully with the correction username&#xa; and log-in credentials.
</description>
<tag name="@see">#reviewStatusCode(int)</tag>
<tag name="@see">#transmitHttp()</tag>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
<description>
if anything goes wrong. This exception is passed up to a higher&#xa; level where it can be placed in the communicator&#x27;s log.
</description>
</throws>
</method>

<!-- com.tridium.ddfHttp.comm.DdfHttpHelper.computeHashCodeForAuthenticationHelper(java.net.URL, javax.baja.security.BUsernameAndPassword) -->
<method name="computeHashCodeForAuthenticationHelper"  protected="true">
<description>
Computes a hash code taken from the string that results when combining the url, username, and password.
</description>
<parameter name="javaUrl">
<type class="java.net.URL"/>
</parameter>
<parameter name="credentials">
<type class="javax.baja.security.BUsernameAndPassword"/>
</parameter>
<return>
<type class="int"/>
</return>
</method>

<!-- com.tridium.ddfHttp.comm.DdfHttpHelper.considerPreAuthentication() -->
<method name="considerPreAuthentication"  protected="true">
<description/>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- com.tridium.ddfHttp.comm.DdfHttpHelper.parseJavaUrl() -->
<method name="parseJavaUrl"  protected="true">
<description/>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.net.MalformedURLException"/>
</throws>
</method>

<!-- com.tridium.ddfHttp.comm.DdfHttpHelper.trace() -->
<method name="trace"  protected="true">
<description/>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddfHttp.comm.DdfHttpHelper.parseUrlString() -->
<method name="parseUrlString"  protected="true">
<description/>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddfHttp.comm.DdfHttpHelper.parseRequestMethod() -->
<method name="parseRequestMethod"  protected="true">
<description/>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddfHttp.comm.DdfHttpHelper.parseAddressAndData() -->
<method name="parseAddressAndData"  protected="true">
<description/>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddfHttp.comm.DdfHttpHelper.mostRecentUrlString -->
<field name="mostRecentUrlString"  protected="true">
<type class="java.lang.String"/>
<description>
This is the entire url that is received as a result of calling &#x27;toByteArray&#x27;&#xa; on the BIDdfRequest that was most recently passed to the &#x27;transmit&#x27;&#xa; method. If the driver developer wishes to post form data then that data&#xa; is delimited from the URL by a question mark.
</description>
</field>

<!-- com.tridium.ddfHttp.comm.DdfHttpHelper.mostRecentRequestMethod -->
<field name="mostRecentRequestMethod"  protected="true">
<type class="java.lang.String"/>
<description>
This is a string that indicates the HTTP request type for the most recent&#xa; call to the &#x27;transmit&#x27; method. For example, the will be &#x22;GET&#x22; or &#x22;POST&#x22;
</description>
</field>

<!-- com.tridium.ddfHttp.comm.DdfHttpHelper.mostRecentUrlAddress -->
<field name="mostRecentUrlAddress"  protected="true">
<type class="java.lang.String"/>
<description>
This is the address portion of the mostRecentUrlString. The address portion is the&#xa; string content on the left-side of the optional question mark delimiter. It&#xa; will be the entire mostRecentUrlString if the mostRecentUrlString does not have a question mark&#xa; in it.
</description>
</field>

<!-- com.tridium.ddfHttp.comm.DdfHttpHelper.mostRecentUrlPostData -->
<field name="mostRecentUrlPostData"  protected="true">
<type class="java.lang.String"/>
<description>
This is the form data portion of the mostRecentUrlString. The form data is the part&#xa; of the string content on the right-side of the optional question mark&#xa; delimiter. This will be null if the mostRecentUrlString does not have a question&#xa; mark.
</description>
</field>

<!-- com.tridium.ddfHttp.comm.DdfHttpHelper.mostRecentDdfRequest -->
<field name="mostRecentDdfRequest"  protected="true">
<type class="com.tridium.ddf.comm.req.BIDdfRequest"/>
<description>
This is the BIDdfRequest that was most recently passed to the &#x27;transmit&#x27;&#xa; method.
</description>
</field>

<!-- com.tridium.ddfHttp.comm.DdfHttpHelper.mostRecentJavaUrl -->
<field name="mostRecentJavaUrl"  protected="true">
<type class="java.net.URL"/>
<description>
This is a java.net.URL object that represents the mostRecentUrlString.
</description>
</field>

<!-- com.tridium.ddfHttp.comm.DdfHttpHelper.httpCommunicator -->
<field name="httpCommunicator"  protected="true">
<type class="com.tridium.ddfHttp.comm.BDdfHttpCommunicator"/>
<description>
This is the BDdfHttpCommunicator that was returned when the &#x27;trasmit&#x27; method&#xa; last called the getHttpCommunicator() method.
</description>
</field>

<!-- com.tridium.ddfHttp.comm.DdfHttpHelper.mostRecentBajaUrlConnection -->
<field name="mostRecentBajaUrlConnection"  protected="true">
<type class="javax.baja.net.UrlConnection"/>
<description>
This is the javax.baja.net.UrlConnection object that was created and connected&#xa; to during the most recent call to the &#x27;transmit&#x27; method.
</description>
</field>

<!-- com.tridium.ddfHttp.comm.DdfHttpHelper.receiverReadyToReceive -->
<field name="receiverReadyToReceive"  protected="true">
<type class="boolean"/>
<description>
This is used a part of the inter-thread communication between the &#x27;transmitWhenReadyToReceive&#x27;&#xa; method (called on the communicator thread) and the &#x27;waitToReceiveNextAndClose()&#x27; method&#xa; (called on the receiver thread).&#xa;&#xa; More specifically, the &#x27;transmitWhenReadyToReceive&#x27; method will first check this variable. If&#xa; this variable is false then it will wait.&#xa;&#xa; The &#x27;waitToReceiveNextAndClose&#x27; method will first set this variable to true and then notify&#xa; the &#x27;transmitWhenReadyToReceive&#x27; method.
</description>
</field>

<!-- com.tridium.ddfHttp.comm.DdfHttpHelper.httpHelperStopped -->
<field name="httpHelperStopped"  protected="true">
<type class="boolean"/>
<description>
This variable is used to prevent the &#x27;waitReceiveNextAndClose&#x27; method from&#xa; blocking forever it the receive thread tries to receive after the driver&#xa; has been shut down.
</description>
</field>

<!-- com.tridium.ddfHttp.comm.DdfHttpHelper.ddfHttpTransmitter -->
<field name="ddfHttpTransmitter"  protected="true">
<type class="com.tridium.ddfHttp.comm.BDdfHttpTransmitter"/>
<description>
This is the BDdfHttpTransmitter that is passed to the constructor.
</description>
</field>

<!-- com.tridium.ddfHttp.comm.DdfHttpHelper.openHttpConnections -->
<field name="openHttpConnections"  protected="true">
<parameterizedType class="java.util.LinkedList">
<args>
<type class="javax.baja.net.UrlConnection"/>
</args>
</parameterizedType>
<description>
This is an array of UrlConnections for all BIDdfHttpStreamRequests&#xa; that return &#x27;false&#x27; from their &#x27;processHttpStream&#x27; method. Keeping&#xa; track of this array allows the UrlConnections to at least be closed&#xa; upon station shut down. This array is also checked periodically&#xa; to see if any UrlConnections are subsequently closed. If so then&#xa; the closed UrlConnections are removed from the Array so as to&#xa; prevent a memory leak.
</description>
</field>

<!-- com.tridium.ddfHttp.comm.DdfHttpHelper.authenticationHelpers -->
<field name="authenticationHelpers"  protected="true">
<type class="javax.baja.nre.util.IntHashMap"/>
<description>
This hashes DdfAuthenticationHelper objects to Url/UserName/Password hash codes.
</description>
</field>

<!-- com.tridium.ddfHttp.comm.DdfHttpHelper.connectionWatchdogThread -->
<field name="connectionWatchdogThread"  protected="true">
<type class="com.tridium.ddfHttp.comm.DdfHttpHelper$ConnectionWatchdogThread"/>
<description/>
</field>

<!-- com.tridium.ddfHttp.comm.DdfHttpHelper.LEX -->
<field name="LEX"  public="true" static="true" final="true">
<type class="javax.baja.util.Lexicon"/>
<description>
This provides access to the localized text lexicon of the devHttpDriver module.
</description>
</field>

</class>
</bajadoc>
