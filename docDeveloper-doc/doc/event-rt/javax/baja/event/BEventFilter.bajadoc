<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="event" runtimeProfile="rt" qualifiedName="javax.baja.event.BEventFilter" name="BEventFilter" packageName="javax.baja.event" public="true" abstract="true">
<description>
A component used to filter &lt;code&gt;BEvent&lt;/code&gt; instances.  Events enter the &#xa; filter through the &lt;code&gt;process&lt;/code&gt; action, and based on the implementation &#xa; logic of the filter, trigger the &lt;code&gt;event&lt;/code&gt; topic to be fired.  &#xa; &#xa; &lt;p&gt;It is not guaranteed that the event output from the &lt;code&gt;event&lt;/code&gt; &#xa; topic will be the same as the one received through the &lt;code&gt;process&lt;/code&gt; &#xa; action.&#xa; &#xa; &lt;p&gt;As an implementation of &lt;code&gt;<see ref="javax.baja.event.BIEventRoutable">BIEventRoutable</see>&lt;/code&gt;, these components can be &#xa; chained to other &lt;code&gt;BEventRoutable&lt;/code&gt; components such as &#xa; &lt;code&gt;<see ref="javax.baja.event.BEventSource">BEventSource</see>&lt;/code&gt;, &lt;code&gt;<see ref="javax.baja.event.BEventService">BEventService</see>&lt;/code&gt;, &lt;code&gt;<see ref="javax.baja.event.BEventRecipient">BEventRecipient</see>&lt;/code&gt;, and &#xa; other &lt;code&gt;BEventFilter&lt;/code&gt; instances.
</description>
<tag name="@author">Lee Adcock</tag>
<tag name="@creation">20 Feb 11</tag>
<tag name="@version">$Revision: 4$ $Date: 4/11/11 3:48:34 PM EDT$</tag>
<tag name="@since">Niagara 3.7</tag>
<extends>
<type class="javax.baja.sys.BComponent"/>
</extends>
<implements>
<type class="javax.baja.event.BIEventRoutable"/>
</implements>
<action name="process" flags="s">
<parameter name="parameter">
<type class="javax.baja.event.BEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
<description>
Slot for the &lt;code&gt;process&lt;/code&gt; action.&#xa; The Action slot for incoming events.
</description>
<tag name="@see">#process(BEvent parameter)</tag>
</action>

<topic name="event" flags="s">
<eventType>
<type class="javax.baja.event.BEvent"/>
</eventType><description>
Slot for the &lt;code&gt;event&lt;/code&gt; topic.&#xa; The Topic slot for events that have passed the filter.
</description>
<tag name="@see">#fireEvent</tag>
</topic>

<!-- javax.baja.event.BEventFilter() -->
<constructor name="BEventFilter" public="true">
<description/>
</constructor>

<!-- javax.baja.event.BEventFilter.process(javax.baja.event.BEvent) -->
<method name="process"  public="true">
<description>
Invoke the &lt;code&gt;process&lt;/code&gt; action.&#xa; The Action slot for incoming events.
</description>
<tag name="@see">#process</tag>
<parameter name="parameter">
<type class="javax.baja.event.BEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.event.BEventFilter.fireEvent(javax.baja.event.BEvent) -->
<method name="fireEvent"  public="true">
<description>
Fire an event for the &lt;code&gt;event&lt;/code&gt; topic.&#xa; The Topic slot for events that have passed the filter.
</description>
<tag name="@see">#event</tag>
<parameter name="parameter">
<type class="javax.baja.event.BEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.event.BEventFilter.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.event.BEventFilter.doProcess(javax.baja.event.BEvent) -->
<method name="doProcess"  public="true" abstract="true">
<description>
The extension point for determining if a &lt;code&gt;BEvent&lt;/code&gt; should pass &#xa; the filter.  Implementations should implement this according to their own&#xa; filter logic.  An event that passes the filter should result in a call to &#xa; &lt;code&gt;<see ref="javax.baja.event.BEventFilter#fireEvent(javax.baja.event.BEvent)">#fireEvent(BEvent)</see>&lt;/code&gt; to fire the &lt;code&gt;event&lt;/code&gt; topic of &#xa; this component.&#xa; &#xa; The &lt;code&gt;process&lt;/code&gt; method for custom filter with a username slot that &#xa; wanted to allow only &lt;code&gt;BEvent&lt;/code&gt; objects containing &#xa; &lt;code&gt;<see ref="javax.baja.sys.BComponentEvent">BComponentEvent</see>&lt;/code&gt; values from a the specified user might look like &#xa; the following:&#xa; &lt;pre&gt;&#xa; public void doProcess(BEvent incomingEvent)&#xa; {&#xa;     // if the username slot has not been set, allow everything&#xa;     if(getUsername().equals(username.getDefaultValue().toString()) || &#xa;        ((BComponentEvent)incomingEvent.getValue()).getValue().toString().equals(getUsername()) {&#xa;       fireEvent(incomingEvent);&#xa; }&#xa;&lt;/pre&gt;
</description>
<parameter name="event">
<type class="javax.baja.event.BEvent"/>
<description>
The incoming &lt;code&gt;BEvent&lt;/code&gt; for filtering.
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.event.BEventFilter.isParentLegal(javax.baja.sys.BComponent) -->
<method name="isParentLegal"  public="true" final="true">
<description>
Enforces that filters must be child instances of either &#xa; &lt;code&gt;BEventService&lt;/code&gt; or &lt;code&gt;<see ref="com.tridium.event.BEventSourceFolder">BEventSourceFolder</see>&lt;/code&gt;.
</description>
<parameter name="parent">
<type class="javax.baja.sys.BComponent"/>
<description>
The component that is being tested as a parent of this &#xa;               component.
</description>
</parameter>
<return>
<type class="boolean"/>
<description>
True if the component is valid, meaning it is the Event Service or&#xa;         an Event Source Folder, false otherwise.
</description>
</return>
</method>

<!-- javax.baja.event.BEventFilter.getEventService() -->
<method name="getEventService"  public="true" final="true">
<description>
A convenience method for obtaining a reference to the local &#xa; &lt;code&gt;BEventService&lt;/code&gt;.
</description>
<return>
<type class="javax.baja.event.BEventService"/>
<description>
A reference to the local &lt;code&gt;BEventService&lt;/code&gt;
</description>
</return>
</method>

<!-- javax.baja.event.BEventFilter.routeTo(javax.baja.event.BIEventRoutable) -->
<method name="routeTo"  public="true" final="true">
<description/>
<parameter name="routable">
<type class="javax.baja.event.BIEventRoutable"/>
</parameter>
<return>
<type class="javax.baja.event.BIEventRoutable"/>
</return>
</method>

<!-- javax.baja.event.BEventFilter.routeTo(java.lang.String, javax.baja.event.BIEventRoutable) -->
<method name="routeTo"  public="true" final="true">
<description/>
<parameter name="name">
<type class="java.lang.String"/>
</parameter>
<parameter name="routable">
<type class="javax.baja.event.BIEventRoutable"/>
</parameter>
<return>
<type class="javax.baja.event.BIEventRoutable"/>
</return>
</method>

<!-- javax.baja.event.BEventFilter.getIcon() -->
<method name="getIcon"  public="true">
<description/>
<return>
<type class="javax.baja.sys.BIcon"/>
</return>
</method>

<!-- javax.baja.event.BEventFilter.process -->
<field name="process"  public="true" static="true" final="true">
<type class="javax.baja.sys.Action"/>
<description>
Slot for the &lt;code&gt;process&lt;/code&gt; action.&#xa; The Action slot for incoming events.
</description>
<tag name="@see">#process(BEvent parameter)</tag>
</field>

<!-- javax.baja.event.BEventFilter.event -->
<field name="event"  public="true" static="true" final="true">
<type class="javax.baja.sys.Topic"/>
<description>
Slot for the &lt;code&gt;event&lt;/code&gt; topic.&#xa; The Topic slot for events that have passed the filter.
</description>
<tag name="@see">#fireEvent</tag>
</field>

<!-- javax.baja.event.BEventFilter.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
