<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="event" runtimeProfile="rt" qualifiedName="javax.baja.event.BEventService" name="BEventService" packageName="javax.baja.event" public="true">
<description>
&lt;p&gt;The &lt;code&gt;BEventService&lt;/code&gt; routes events between &lt;code&gt;<see ref="javax.baja.event.BEventSource">BEventSource</see>&lt;/code&gt;, &#xa; &lt;code&gt;<see ref="javax.baja.event.BEventFilter">BEventFilter</see>&lt;/code&gt;, and &lt;code&gt;<see ref="javax.baja.event.BEventRecipient">BEventRecipient</see>&lt;/code&gt; instances.  &#xa; &lt;code&gt;BEventService&lt;/code&gt; is responsible for establishing event &#xa; communication between Niagara stations.&lt;/p&gt;&#xa;&#xa; &lt;p&gt; Each station contains a single &lt;code&gt;BEventService&lt;/code&gt; available via &#xa; the &lt;code&gt;service:event:EventService&lt;/code&gt; ORD when accessed within the same &#xa; JVM, or remotely.  Can also be access from the same JVM using the &#xa; &lt;code&gt;<see ref="javax.baja.sys.Sys#getService(javax.baja.sys.Type)">Sys#getService(Type)</see>&lt;/code&gt; method or the convenience &lt;code&gt;<see ref="javax.baja.event.BEventService#get()">BEventService#get()</see>&lt;/code&gt;&#xa; method.&lt;/p&gt;&#xa; &#xa; &lt;p&gt;The following illustrates routing a new Event through an event source that&#xa; using the EventService:&lt;/p&gt;&#xa; &#xa; &lt;pre&gt;&#xa;  BEvent myEvent = BEvent.make();&#xa;  BEventService service = (BEventService)Sys.getService(BEventService.TYPE);&#xa;  BEventSource source = service.getEventSource(&#x22;alarms&#x22;)&#xa;  source.process(myEvent);&#xa; &lt;/pre&gt;&#xa; &#xa; The EventService itself is capable of routing events to the default event&#xa; source:&#xa; &#xa; &lt;pre&gt;&#xa;  BEvent myEvent = BEvent.make();&#xa;  BEventService service = (BEventService)Sys.getService(BEventService.TYPE);&#xa;  service.process(myEvent);&#xa; &lt;/pre&gt;&#xa; &#xa; Event service components may be chained together using methods in the &#xa; &lt;code&gt;<see ref="javax.baja.event.BIEventRoutable">BIEventRoutable</see>&lt;/code&gt; interface.  This allows developers to easily create&#xa; event processing chains.&#xa;&#xa;  &lt;pre&gt;&#xa;  BEventService service = (BEventService) Sys.getService(BEventService.TYPE);&#xa;  BEventSource source = service.getEventSource(&#x22;CardSwipeSource&#x22;);&#xa;&#xa;  // Create a filter and recipient, routing the source to the chain of both&#xa;  // newly created objects&#xa;  BEventFilter filter = new BCardSwipeUserFilter();&#xa;  BEventRecipient recipient = new BCardReaderLogger();&#xa;  &#xa;  source.routeTo(filter).routeTo(recipient);&#xa; &lt;/pre&gt;
</description>
<tag name="@author">Lee Adcock on Feb 11 2012</tag>
<tag name="@since">Niagara 3.7</tag>
<extends>
<type class="javax.baja.sys.BAbstractService"/>
</extends>
<implements>
<type class="javax.baja.event.BIEventRoutable"/>
</implements>
<implements>
<type class="javax.baja.util.BIRestrictedComponent"/>
</implements>
<property name="defaultSource" flags="">
<type class="javax.baja.event.BEventSource"/>
<description>
Slot for the &lt;code&gt;defaultSource&lt;/code&gt; property.&#xa; The default event source is the destination for incoming events.
</description>
<tag name="@see">#getDefaultSource</tag>
<tag name="@see">#setDefaultSource</tag>
</property>

<action name="process" flags="s">
<parameter name="parameter">
<type class="javax.baja.event.BEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
<description>
Slot for the &lt;code&gt;process&lt;/code&gt; action.&#xa; Provide the BEventService with a BEvent instance for routing.
</description>
<tag name="@see">#process(BEvent parameter)</tag>
</action>

<!-- javax.baja.event.BEventService() -->
<constructor name="BEventService" public="true">
<description/>
</constructor>

<!-- javax.baja.event.BEventService.getDefaultSource() -->
<method name="getDefaultSource"  public="true">
<description>
Get the &lt;code&gt;defaultSource&lt;/code&gt; property.&#xa; The default event source is the destination for incoming events.
</description>
<tag name="@see">#defaultSource</tag>
<return>
<type class="javax.baja.event.BEventSource"/>
</return>
</method>

<!-- javax.baja.event.BEventService.setDefaultSource(javax.baja.event.BEventSource) -->
<method name="setDefaultSource"  public="true">
<description>
Set the &lt;code&gt;defaultSource&lt;/code&gt; property.&#xa; The default event source is the destination for incoming events.
</description>
<tag name="@see">#defaultSource</tag>
<parameter name="v">
<type class="javax.baja.event.BEventSource"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.event.BEventService.process(javax.baja.event.BEvent) -->
<method name="process"  public="true">
<description>
Invoke the &lt;code&gt;process&lt;/code&gt; action.&#xa; Provide the BEventService with a BEvent instance for routing.
</description>
<tag name="@see">#process</tag>
<parameter name="parameter">
<type class="javax.baja.event.BEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.event.BEventService.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.event.BEventService.getServiceTypes() -->
<method name="getServiceTypes"  public="true">
<description>
&lt;p&gt;&#xa; <inheritDoc/>&#xa; &lt;/p&gt;&#xa; &lt;code&gt;BEventService&lt;/code&gt; is registered as &lt;code&gt;event:EventService&lt;/code&gt;
</description>
<return>
<type class="javax.baja.sys.Type" dimension="1"/>
<description>
A &lt;code&gt;<see ref="javax.baja.sys.Type">Type</see>&lt;/code&gt;&lt;code&gt;[]&lt;/code&gt; containing the BEventService Type.
</description>
</return>
</method>

<!-- javax.baja.event.BEventService.serviceStarted() -->
<method name="serviceStarted"  public="true">
<description/>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.event.BEventService.serviceStopped() -->
<method name="serviceStopped"  public="true">
<description/>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.event.BEventService.isChildLegal(javax.baja.sys.BComponent) -->
<method name="isChildLegal"  public="true">
<description>
Tests that the specified child is a valid child component for this &#xa; component. &lt;code&gt;BEventService&lt;/code&gt; disallows &lt;code&gt;<see ref="javax.baja.util.BFolder">BFolder</see>&lt;/code&gt; instances &#xa; that are not also &lt;code&gt;<see ref="com.tridium.event.BEventSourceFolder">BEventSourceFolder</see>&lt;/code&gt; instances.
</description>
<parameter name="child">
<type class="javax.baja.sys.BComponent"/>
<description>
The &lt;code&gt;BComponent&lt;/code&gt; instance to test for validity.
</description>
</parameter>
<return>
<type class="boolean"/>
<description>
true if &lt;code&gt;child&lt;/code&gt; is a valid child component; otherwise &#xa;         false.
</description>
</return>
</method>

<!-- javax.baja.event.BEventService.checkAdd(java.lang.String, javax.baja.sys.BValue, int, javax.baja.sys.BFacets, javax.baja.sys.Context) -->
<method name="checkAdd"  public="true">
<description>
Disallows duplicate &lt;code&gt;BEventSource&lt;/code&gt; children.&#xa; &#xa; &lt;p&gt;<inheritDoc/>&lt;/p&gt;&#xa; &#xa; In the case of adding a &lt;code&gt;BEventSource&lt;/code&gt;,  &#xa; &lt;code&gt;BEventService&lt;/code&gt; validates that an event source of the same name &#xa; does not already exist either as a child of the service or as a child of &#xa; any contained &lt;code&gt;BEventSourceFolder&lt;/code&gt; instances.
</description>
<parameter name="newName">
<type class="java.lang.String"/>
<description>
The name of the child object being added
</description>
</parameter>
<parameter name="value">
<type class="javax.baja.sys.BValue"/>
<description>
The child object being added
</description>
</parameter>
<parameter name="flags">
<type class="int"/>
<description>
&lt;code&gt;<see ref="javax.baja.sys.Flags">Flags</see>&lt;/code&gt; to be added to the child object
</description>
</parameter>
<parameter name="facets">
<type class="javax.baja.sys.BFacets"/>
<description>
&lt;code&gt;<see ref="javax.baja.sys.BFacets">BFacets</see>&lt;/code&gt; to be added to the child object
</description>
</parameter>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
<description>
The execution &lt;code&gt;<see ref="javax.baja.sys.Context">Context</see>&lt;/code&gt;.
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.event.BEventService.checkRename(javax.baja.sys.Property, java.lang.String, javax.baja.sys.Context) -->
<method name="checkRename"  public="true">
<description>
Disallows duplicate &lt;code&gt;BEventSource&lt;/code&gt; children.&#xa; &#xa; &lt;p&gt;<inheritDoc/>&lt;/p&gt;&#xa; &#xa; In the case of renaming a &lt;code&gt;BEventSource&lt;/code&gt;,  &#xa; &lt;code&gt;BEventService&lt;/code&gt; validates that an event source of the same name &#xa; does not already exist either as a child of the service or as a child of &#xa; any contained &lt;code&gt;BEventSourceFolder&lt;/code&gt; instances.
</description>
<parameter name="property">
<type class="javax.baja.sys.Property"/>
<description>
The &lt;code&gt;<see ref="javax.baja.sys.Property">Property</see>&lt;/code&gt; being renamed
</description>
</parameter>
<parameter name="newName">
<type class="java.lang.String"/>
<description>
The name of the child object being added
</description>
</parameter>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
<description>
The execution &lt;code&gt;<see ref="javax.baja.sys.Context">Context</see>&lt;/code&gt;
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.event.BEventService.checkParentForRestrictedComponent(javax.baja.sys.BComponent, javax.baja.sys.Context) -->
<method name="checkParentForRestrictedComponent"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Only one allowed to live under the station&#x27;s BServiceContainer.&#xa; Only Super Users are allowed to add an instance of this type to the station.
</description>
<parameter name="parent">
<type class="javax.baja.sys.BComponent"/>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.event.BEventService.get() -->
<method name="get"  public="true" static="true">
<description>
Convenience method for getting an instance of the BEventService.  This &#xa; method only returns services registered in the local VM.  To lookup a &#xa; service in a remote session use the &lt;code&gt;service:&lt;/code&gt; ord scheme.
</description>
<tag name="@see">Sys#getService(Type)</tag>
<tag name="@see">Sys#getServices(Type)</tag>
<tag name="@see">BOrd#make(String)</tag>
<tag name="@see">BServiceScheme</tag>
<return>
<type class="javax.baja.event.BEventService"/>
<description>
The first &lt;code&gt;BEventService&lt;/code&gt; instance registered in&#xa;         the local VM.
</description>
</return>
</method>

<!-- javax.baja.event.BEventService.doProcess(javax.baja.event.BEvent) -->
<method name="doProcess"  public="true">
<description>
&lt;p&gt;&#xa; Implementation of the &lt;code&gt;<see ref="javax.baja.event.BEventService#process(javax.baja.event.BEvent)">#process(BEvent)</see>&lt;/code&gt; &lt;code&gt;<see ref="javax.baja.sys.Action">Action</see>&lt;/code&gt; that &#xa; delegates incoming events to the &#xa; &lt;code&gt;<see ref="javax.baja.event.BEventSource#process(javax.baja.event.BEvent)">BEventSource#process(BEvent)</see>&lt;/code&gt; handler of the default event source as&#xa; specified by the &lt;code&gt;<see ref="javax.baja.event.BEventService#defaultSource">#defaultSource</see>&lt;/code&gt; slot.  &#xa; &lt;/p&gt;&#xa; &lt;p&gt;&#xa; This is the entry point for events entering the station via remote &#xa; connections and the default entry point for any events directly routed to &#xa; the &lt;code&gt;BEventService&lt;/code&gt; itself.&#xa; &lt;/p&gt;
</description>
<parameter name="event">
<type class="javax.baja.event.BEvent"/>
<description>
The &lt;code&gt;BEvent&lt;/code&gt; instance for processing.
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.event.BEventService.getEventSources() -->
<method name="getEventSources"  public="true" final="true">
<description>
Retrieve an array of all &lt;code&gt;BEventSource&lt;/code&gt; children.  This &#xa; retrieves all direct children, and any instances located in nested &#xa; &lt;code&gt;BEventSourceFolder&lt;/code&gt; instances.
</description>
<return>
<type class="javax.baja.event.BEventSource" dimension="1"/>
<description>
An array of &lt;code&gt;BEventSource&lt;/code&gt; instances that are children &#xa;         of the &lt;code&gt;BEventService&lt;/code&gt;.
</description>
</return>
</method>

<!-- javax.baja.event.BEventService.getEventSource(java.lang.String) -->
<method name="getEventSource"  public="true" final="true">
<description>
Locate an event source by name. Searches the &lt;code&gt;BEventService&lt;/code&gt; and &#xa; &lt;code&gt;BEventSourceFolder&lt;/code&gt; structure for a &lt;code&gt;BEventSource&lt;/code&gt;&#xa; with a name that matches &lt;code&gt;eventSourceName&lt;/code&gt;
</description>
<parameter name="eventSourceName">
<type class="java.lang.String"/>
<description>
The name of the &lt;code&gt;BEventSource&lt;/code&gt; instance.
</description>
</parameter>
<return>
<type class="javax.baja.event.BEventSource"/>
<description>
The event source whose name matches &lt;code&gt;eventSourceName&lt;/code&gt; or &#xa;         the default event source if no matching event source is located.
</description>
</return>
</method>

<!-- javax.baja.event.BEventService.routeTo(javax.baja.event.BIEventRoutable) -->
<method name="routeTo"  public="true" final="true">
<description>
&lt;p&gt;Add a new transient BIEventRoutable into the component tree and create a &#xa; transient link from &lt;code&gt;this&lt;/code&gt; to the &lt;code&gt;process&lt;/code&gt; action of &#xa; the target &lt;code&gt;BIEventRoutable&lt;/code&gt;.&lt;/p&gt;&#xa; &#xa; &lt;p&gt;The component must be flagged as &lt;code&gt;Flags.TRANSIENT&lt;/code&gt; when added&#xa; in order to fulfill transient portion of this contract.  The added &#xa; component should be flagged &lt;code&gt;Flags.HIDDEN&lt;/code&gt; to prevent workbench &#xa; visibility of the transient objects.&lt;/p&gt;&#xa; &#xa; &lt;p&gt;The &lt;code&gt;BIEventRoutable&lt;/code&gt; returned from a call to &#xa; &lt;code&gt;routeTo&lt;/code&gt; should be the same as &lt;code&gt;filter&lt;/code&gt; to support &#xa; easy chaining of route calls.&lt;/p&gt;&#xa; &#xa; &lt;p&gt;The name of the slot used for parenting the &lt;code&gt;BIEventRoutable&lt;/code&gt;&#xa;  will be generated.&lt;/p&gt;&#xa; The child component is added as a child of the default event source.
</description>
<tag name="@see">BIEventRoutable#routeTo(String, BIEventRoutable)</tag>
<parameter name="routable">
<type class="javax.baja.event.BIEventRoutable"/>
<description>
New instance of a &lt;code&gt;BIEventRoutable&lt;/code&gt;
</description>
</parameter>
<return>
<type class="javax.baja.event.BIEventRoutable"/>
<description>
The &lt;code&gt;BIEventRoutable&lt;/code&gt; added to the component tree with&#xa;         active links.
</description>
</return>
</method>

<!-- javax.baja.event.BEventService.routeTo(java.lang.String, javax.baja.event.BIEventRoutable) -->
<method name="routeTo"  public="true" final="true">
<description>
&lt;p&gt;Add a new transient BIEventRoutable into the component tree and create a &#xa; transient link from &lt;code&gt;this&lt;/code&gt; to the &lt;code&gt;process&lt;/code&gt; action of &#xa; the target &lt;code&gt;BIEventRoutable&lt;/code&gt;.&lt;/p&gt;&#xa; &#xa; &lt;p&gt;The component must be flagged as &lt;code&gt;Flags.TRANSIENT&lt;/code&gt; when added&#xa; in order to fulfill transient portion of this contract.  The added &#xa; component should be flagged &lt;code&gt;Flags.HIDDEN&lt;/code&gt; to prevent workbench &#xa; visibility of the transient objects.&lt;/p&gt;&#xa; &#xa; &lt;p&gt;The &lt;code&gt;BIEventRoutable&lt;/code&gt; returned from a call to &#xa; &lt;code&gt;routeTo&lt;/code&gt; should be the same as &lt;code&gt;filter&lt;/code&gt; to support &#xa; easy chaining of route calls.&#xa; &lt;p&gt;The service implementation adds the component as a child of the &#xa; default event source.&lt;/p&gt;
</description>
<parameter name="name">
<type class="java.lang.String"/>
<description>
Name to be used when parenting the &#xa;        &lt;code&gt;BIEventRoutable&lt;/code&gt;. This value may be null.
</description>
</parameter>
<parameter name="routable">
<type class="javax.baja.event.BIEventRoutable"/>
<description>
New instance of a &lt;code&gt;BIEventRoutable&lt;/code&gt;.
</description>
</parameter>
<return>
<type class="javax.baja.event.BIEventRoutable"/>
<description>
The &lt;code&gt;BIEventRoutable&lt;/code&gt; added to the component tree with&#xa;         an active link to &lt;code&gt;filter.process&lt;/code&gt;.
</description>
</return>
</method>

<!-- javax.baja.event.BEventService.getLicenseFeature() -->
<method name="getLicenseFeature"  public="true" final="true">
<description>
Enforce the presence of the eventService license feature.
</description>
<return>
<type class="javax.baja.license.Feature"/>
<description>
The license &lt;code&gt;<see ref="javax.baja.license.Feature">Feature</see>&lt;/code&gt; for the &lt;code&gt;BEventService&lt;/code&gt;.
</description>
</return>
</method>

<!-- javax.baja.event.BEventService.getAgents(javax.baja.sys.Context) -->
<method name="getAgents"  public="true">
<description/>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="javax.baja.agent.AgentList"/>
</return>
</method>

<!-- javax.baja.event.BEventService.getIcon() -->
<method name="getIcon"  public="true">
<description/>
<return>
<type class="javax.baja.sys.BIcon"/>
</return>
</method>

<!-- javax.baja.event.BEventService.defaultSource -->
<field name="defaultSource"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;defaultSource&lt;/code&gt; property.&#xa; The default event source is the destination for incoming events.
</description>
<tag name="@see">#getDefaultSource</tag>
<tag name="@see">#setDefaultSource</tag>
</field>

<!-- javax.baja.event.BEventService.process -->
<field name="process"  public="true" static="true" final="true">
<type class="javax.baja.sys.Action"/>
<description>
Slot for the &lt;code&gt;process&lt;/code&gt; action.&#xa; Provide the BEventService with a BEvent instance for routing.
</description>
<tag name="@see">#process(BEvent parameter)</tag>
</field>

<!-- javax.baja.event.BEventService.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

<!-- javax.baja.event.BEventService.log -->
<field name="log"  public="true" static="true" final="true">
<type class="java.util.logging.Logger"/>
<description/>
</field>

</class>
</bajadoc>
