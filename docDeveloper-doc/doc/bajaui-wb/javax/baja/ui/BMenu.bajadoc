<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="bajaui" runtimeProfile="wb" qualifiedName="javax.baja.ui.BMenu" name="BMenu" packageName="javax.baja.ui" public="true">
<description>
BMenu is the container for BMenuItems which are &#xa; displayed via a popup window.
</description>
<tag name="@author">Brian Frank</tag>
<tag name="@creation">2 Dec 00</tag>
<tag name="@version">$Revision: 47$ $Date: 6/20/11 9:34:25 AM EDT$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="javax.baja.ui.BAbstractBar"/>
</extends>
<implements>
<type class="javax.baja.ui.menu.BIMenu"/>
</implements>
<property name="text" flags="">
<type class="java.lang.String"/>
<description>
Slot for the &lt;code&gt;text&lt;/code&gt; property.&#xa; The text to display as the menu&#x27;s label when&#xa; used on a MenuBar.
</description>
<tag name="@see">#getText</tag>
<tag name="@see">#setText</tag>
</property>

<!-- javax.baja.ui.BMenu(java.lang.String) -->
<constructor name="BMenu" public="true">
<parameter name="text">
<type class="java.lang.String"/>
</parameter>
<description>
Constructor with text.
</description>
</constructor>

<!-- javax.baja.ui.BMenu() -->
<constructor name="BMenu" public="true">
<description>
No argument constructor.
</description>
</constructor>

<!-- javax.baja.ui.BMenu.getText() -->
<method name="getText"  public="true">
<description>
Get the &lt;code&gt;text&lt;/code&gt; property.&#xa; The text to display as the menu&#x27;s label when&#xa; used on a MenuBar.
</description>
<tag name="@see">#text</tag>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.ui.BMenu.setText(java.lang.String) -->
<method name="setText"  public="true">
<description>
Set the &lt;code&gt;text&lt;/code&gt; property.&#xa; The text to display as the menu&#x27;s label when&#xa; used on a MenuBar.
</description>
<tag name="@see">#text</tag>
<parameter name="v">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BMenu.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.ui.BMenu.asWidget() -->
<method name="asWidget"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.ui.BWidget"/>
</return>
</method>

<!-- javax.baja.ui.BMenu.add(java.lang.String, javax.baja.ui.Command) -->
<method name="add"  public="true">
<description>
Add a BActionMenuItem or BCheckBoxMenuItem using &#xa; the specified Command.
</description>
<parameter name="name">
<type class="java.lang.String"/>
</parameter>
<parameter name="command">
<type class="javax.baja.ui.Command"/>
</parameter>
<return>
<type class="javax.baja.ui.BMenuItem"/>
</return>
</method>

<!-- javax.baja.ui.BMenu.computePreferredSize() -->
<method name="computePreferredSize"  public="true">
<description>
Compute the menu&#x27;s preferred size.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BMenu.doLayout(javax.baja.ui.BWidget[]) -->
<method name="doLayout"  public="true">
<description>
Layout the menu.
</description>
<parameter name="kids">
<type class="javax.baja.ui.BWidget" dimension="1"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BMenu.paint(javax.baja.gx.Graphics) -->
<method name="paint"  public="true">
<description>
Paint the menu.
</description>
<parameter name="g">
<type class="javax.baja.gx.Graphics"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BMenu.getStyleSelector() -->
<method name="getStyleSelector"  public="true">
<description/>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.ui.BMenu.getMenuItems() -->
<method name="getMenuItems"  public="true">
<description>
Get an array of all the child menu items.
</description>
<return>
<type class="javax.baja.ui.BMenuItem" dimension="1"/>
</return>
</method>

<!-- javax.baja.ui.BMenu.getItemCount() -->
<method name="getItemCount"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.ui.BMenu.addItem(java.lang.String, javax.baja.ui.menu.BIMenuItem) -->
<method name="addItem"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="menuItemName">
<type class="java.lang.String"/>
</parameter>
<parameter name="menuItem">
<type class="javax.baja.ui.menu.BIMenuItem"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BMenu.addItemToFront(java.lang.String, javax.baja.ui.menu.BIMenuItem) -->
<method name="addItemToFront"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="menuItemName">
<type class="java.lang.String"/>
</parameter>
<parameter name="menuItem">
<type class="javax.baja.ui.menu.BIMenuItem"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BMenu.addItem(java.lang.String, javax.baja.ui.Command) -->
<method name="addItem"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="menuItemName">
<type class="java.lang.String"/>
</parameter>
<parameter name="menuItemCommand">
<type class="javax.baja.ui.Command"/>
</parameter>
<return>
<type class="javax.baja.ui.menu.BIMenuItem"/>
</return>
</method>

<!-- javax.baja.ui.BMenu.getSubMenu(java.lang.String) -->
<method name="getSubMenu"  public="true">
<description>
Convenience for &lt;code&gt;((BSubMenuItem)get(name)).getMenu()&lt;/code&gt;.
</description>
<parameter name="name">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.ui.BMenu"/>
</return>
</method>

<!-- javax.baja.ui.BMenu.removeSubMenu(java.lang.String) -->
<method name="removeSubMenu"  public="true">
<description>
This method removes a SubMenuItem and returns it&#x27;s menu&#xa; free to be mounted elsewhere.  It is a convenience method&#xa; often used with WbProfiles to move sub-menus around.
</description>
<parameter name="name">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.ui.BMenu"/>
</return>
</method>

<!-- javax.baja.ui.BMenu.removeItem(java.lang.String) -->
<method name="removeItem"  public="true">
<description>
This method removes a MenuItem and returns it free &#xa; to be mounted elsewhere.  It is a convenience method&#xa; often used with WbProfiles to move menu items around.
</description>
<parameter name="name">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.ui.menu.BIMenuItem"/>
</return>
</method>

<!-- javax.baja.ui.BMenu.getItem(java.lang.String) -->
<method name="getItem"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="menuItemName">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.ui.menu.BIMenuItem"/>
</return>
</method>

<!-- javax.baja.ui.BMenu.retainItems(java.lang.String[]) -->
<method name="retainItems"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="menuItems">
<type class="java.lang.String" dimension="1"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BMenu.addSeparator() -->
<method name="addSeparator"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BMenu.addSeparatorToFront() -->
<method name="addSeparatorToFront"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BMenu.update() -->
<method name="update"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BMenu.isDynamic() -->
<method name="isDynamic"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.ui.BMenu.isOpen() -->
<method name="isOpen"  public="true">
<description>
Is this menu currently opened?
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.ui.BMenu.open(javax.baja.ui.BWidget, double, double) -->
<method name="open"  public="true">
<description>
Show the menu at the given coordinate relative to&#xa; to the specified widget&#x27;s coordinate space.  If&#xa; the specified widget implements MenuCloseListener,&#xa; then it will get a callback when the menu is closed.
</description>
<parameter name="owner">
<type class="javax.baja.ui.BWidget"/>
</parameter>
<parameter name="x">
<type class="double"/>
</parameter>
<parameter name="y">
<type class="double"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BMenu.open(javax.baja.ui.event.BMouseEvent) -->
<method name="open"  public="true">
<description>
Convenience for &lt;code&gt;open(event.getWidget(), event.getX(), event.getY())&lt;/code&gt;.
</description>
<parameter name="event">
<type class="javax.baja.ui.event.BMouseEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BMenu.isFocusTraversable() -->
<method name="isFocusTraversable"  public="true">
<description/>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.ui.BMenu.keyReleased(javax.baja.ui.event.BKeyEvent) -->
<method name="keyReleased"  public="true">
<description/>
<parameter name="event">
<type class="javax.baja.ui.event.BKeyEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BMenu.getDebugString() -->
<method name="getDebugString"  public="true">
<description/>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.ui.BMenu.getIcon() -->
<method name="getIcon"  public="true">
<description>
Get the icon.
</description>
<return>
<type class="javax.baja.sys.BIcon"/>
</return>
</method>

<!-- javax.baja.ui.BMenu.visible -->
<field name="visible"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;visible&lt;/code&gt; property.
</description>
<tag name="@see">#getVisible</tag>
<tag name="@see">#setVisible</tag>
</field>

<!-- javax.baja.ui.BMenu.text -->
<field name="text"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;text&lt;/code&gt; property.&#xa; The text to display as the menu&#x27;s label when&#xa; used on a MenuBar.
</description>
<tag name="@see">#getText</tag>
<tag name="@see">#setText</tag>
</field>

<!-- javax.baja.ui.BMenu.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
