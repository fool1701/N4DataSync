<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="bajaui" runtimeProfile="wb" qualifiedName="javax.baja.ui.BPicture$IPictureImpl" name="BPicture.IPictureImpl" packageName="javax.baja.ui" public="true" interface="true" abstract="true" static="true" innerClass="true" category="interface">
<description>
An interface for a Picture implementation. This is required because&#xa; BPicture has direct AWT dependencies. Because an instance of a BPicture&#xa; could be used on an Hx Px page on a JACE (running Java 8 Compact 3),&#xa; the AWT dependencies need to be dynamically loaded at runtime.&#xa; &lt;p&gt;&#xa; Any implementations require a constructor that takes a BPicture instance&#xa; as an argument.
</description>
<!-- javax.baja.ui.BPicture.IPictureImpl.resetPeer() -->
<method name="resetPeer"  public="true" abstract="true">
<description>
Reset the underlying peer reference so it can be recreated.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BPicture.IPictureImpl.ensurePeer() -->
<method name="ensurePeer"  public="true" abstract="true">
<description>
Return an image peer. If the peer isn&#x27;t created, this will&#xa; lazily create it.
</description>
<return>
<type class="com.tridium.gx.ImagePeer"/>
<description>
The underlying ImagePeer instance.
</description>
</return>
</method>

<!-- javax.baja.ui.BPicture.IPictureImpl.paint(javax.baja.gx.Graphics) -->
<method name="paint"  public="true" abstract="true">
<description>
Paint the picture and return true if it successfully rendered the image.&#xa; If false is returned, the image was unable to paint in its current state.
</description>
<parameter name="g">
<type class="javax.baja.gx.Graphics"/>
<description>
The Graphics Context.
</description>
</parameter>
<return>
<type class="boolean"/>
<description>
Returns true if painted successfully.
</description>
</return>
</method>

</class>
</bajadoc>
