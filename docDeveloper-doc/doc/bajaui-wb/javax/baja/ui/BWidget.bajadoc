<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="bajaui" runtimeProfile="wb" qualifiedName="javax.baja.ui.BWidget" name="BWidget" packageName="javax.baja.ui" public="true">
<description>
BWidget the base class for all visual&#xa; components which are run on the client side.
</description>
<tag name="@author">Brian Frank on 19 Nov 00</tag>
<tag name="@version">$Revision: 165$ $Date: 6/24/11 11:19:40 AM EDT$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="javax.baja.sys.BComponent"/>
</extends>
<implements>
<type class="javax.baja.ui.style.IStylable"/>
</implements>
<annotation><type class="javax.baja.nre.annotations.NoSlotomatic"/>
</annotation>
<property name="visible" flags="">
<type class="boolean"/>
<description>
Slot for the &lt;code&gt;visible&lt;/code&gt; property.&#xa; When the visible property is true the widget is&#xa; rendered to its graphics context and can accept&#xa; user input from the mouse and keyboard.  When visible&#xa; if false the widget is hidden and will not receive&#xa; user input.
</description>
<tag name="@see">#getVisible</tag>
<tag name="@see">#setVisible</tag>
</property>

<property name="enabled" flags="">
<type class="boolean"/>
<description>
Slot for the &lt;code&gt;enabled&lt;/code&gt; property.&#xa; All widgets support an enabled field which allows&#xa; the to enable and disable user interaction.
</description>
<tag name="@see">#getEnabled</tag>
<tag name="@see">#setEnabled</tag>
</property>

<property name="layout" flags="">
<type class="javax.baja.ui.BLayout"/>
<description>
Slot for the &lt;code&gt;layout&lt;/code&gt; property.&#xa; Layout stores absolute position.
</description>
<tag name="@see">#getLayout</tag>
<tag name="@see">#setLayout</tag>
</property>

<property name="styleClasses" flags="h">
<type class="java.lang.String"/>
<description>
Slot for the &lt;code&gt;styleClasses&lt;/code&gt; property.&#xa; Enables classes for theme styling.
</description>
<tag name="@see">#getStyleClasses</tag>
<tag name="@see">#setStyleClasses</tag>
</property>

<property name="styleId" flags="h">
<type class="java.lang.String"/>
<description>
Slot for the &lt;code&gt;styleId&lt;/code&gt; property.&#xa; Enables IDs for theme styling.
</description>
<tag name="@see">#getStyleId</tag>
<tag name="@see">#setStyleId</tag>
</property>

<topic name="keyEvent" flags="">
<eventType>
<type class="javax.baja.ui.event.BKeyEvent"/>
</eventType><description>
Slot for the &lt;code&gt;keyEvent&lt;/code&gt; topic.&#xa; This topic is fired whenever keyboard input&#xa; occurs on this component. In order to receive&#xa; keyboard input, the widget must currently have&#xa; focus.
</description>
<tag name="@see">#fireKeyEvent</tag>
</topic>

<topic name="mouseEvent" flags="">
<eventType>
<type class="javax.baja.ui.event.BMouseEvent"/>
</eventType><description>
Slot for the &lt;code&gt;mouseEvent&lt;/code&gt; topic.&#xa; The mouseEvent topic is fired when the widget&#xa; received mouse input.
</description>
<tag name="@see">#fireMouseEvent</tag>
</topic>

<topic name="focusEvent" flags="">
<eventType>
<type class="javax.baja.ui.event.BFocusEvent"/>
</eventType><description>
Slot for the &lt;code&gt;focusEvent&lt;/code&gt; topic.&#xa; The focusEvent topic is fired when the widget&#xa; gains or loses focus.
</description>
<tag name="@see">#fireFocusEvent</tag>
</topic>

<!-- javax.baja.ui.BWidget() -->
<constructor name="BWidget" public="true">
<description>
Construct a widget.
</description>
</constructor>

<!-- javax.baja.ui.BWidget.getVisible() -->
<method name="getVisible"  public="true">
<description>
Get the &lt;code&gt;visible&lt;/code&gt; property.&#xa; When the visible property is true the widget is&#xa; rendered to its graphics context and can accept&#xa; user input from the mouse and keyboard.  When visible&#xa; if false the widget is hidden and will not receive&#xa; user input.
</description>
<tag name="@see">#visible</tag>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.setVisible(boolean) -->
<method name="setVisible"  public="true">
<description>
Set the &lt;code&gt;visible&lt;/code&gt; property.&#xa; When the visible property is true the widget is&#xa; rendered to its graphics context and can accept&#xa; user input from the mouse and keyboard.  When visible&#xa; if false the widget is hidden and will not receive&#xa; user input.
</description>
<tag name="@see">#visible</tag>
<parameter name="v">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.getEnabled() -->
<method name="getEnabled"  public="true">
<description>
Get the &lt;code&gt;enabled&lt;/code&gt; property.&#xa; All widgets support an enabled field which allows&#xa; the to enable and disable user interaction.
</description>
<tag name="@see">#enabled</tag>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.setEnabled(boolean) -->
<method name="setEnabled"  public="true">
<description>
Set the &lt;code&gt;enabled&lt;/code&gt; property.&#xa; All widgets support an enabled field which allows&#xa; the to enable and disable user interaction.
</description>
<tag name="@see">#enabled</tag>
<parameter name="v">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.getLayout() -->
<method name="getLayout"  public="true">
<description>
Get the &lt;code&gt;layout&lt;/code&gt; property.&#xa; Layout stores absolute position.
</description>
<tag name="@see">#layout</tag>
<return>
<type class="javax.baja.ui.BLayout"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.setLayout(javax.baja.ui.BLayout) -->
<method name="setLayout"  public="true">
<description>
Set the &lt;code&gt;layout&lt;/code&gt; property.&#xa; Layout stores absolute position.
</description>
<tag name="@see">#layout</tag>
<parameter name="v">
<type class="javax.baja.ui.BLayout"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.getStyleClasses() -->
<method name="getStyleClasses"  public="true">
<description>
Get the &lt;code&gt;styleClasses&lt;/code&gt; property.&#xa; Enables classes for theme styling.
</description>
<tag name="@see">#styleClasses</tag>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.setStyleClasses(java.lang.String) -->
<method name="setStyleClasses"  public="true">
<description>
Set the &lt;code&gt;styleClasses&lt;/code&gt; property.&#xa; Enables classes for theme styling.
</description>
<tag name="@see">#styleClasses</tag>
<parameter name="v">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.getStyleId() -->
<method name="getStyleId"  public="true">
<description>
Get the &lt;code&gt;styleId&lt;/code&gt; property.&#xa; Enables IDs for theme styling.
</description>
<tag name="@see">#styleId</tag>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.setStyleId(java.lang.String) -->
<method name="setStyleId"  public="true">
<description>
Set the &lt;code&gt;styleId&lt;/code&gt; property.&#xa; Enables IDs for theme styling.
</description>
<tag name="@see">#styleId</tag>
<parameter name="v">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.isWidget() -->
<method name="isWidget"  public="true" final="true">
<description>
This is a BWidget!
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.isNull() -->
<method name="isNull"  public="true">
<description>
BWidget is not null.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.getShell() -->
<method name="getShell"  public="true" final="true">
<description>
Get the parent BWidgetShell this widget is &#xa; rooted in, or return null the widget is not&#xa; inside a BWidgetShell.
</description>
<return>
<type class="javax.baja.ui.BWidgetShell"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.getShellManager() -->
<method name="getShellManager"  public="true" final="true">
<description/>
<return>
<type class="com.tridium.ui.ShellManager"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.isDesignTime() -->
<method name="isDesignTime"  public="true" final="true">
<description>
Return whether this widget is currently&#xa; being edited or not.
</description>
<tag name="@since">Niagara 3.3</tag>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.getApplication() -->
<method name="getApplication"  public="true" static="true">
<description>
Get the BWidgetApplication singleton.
</description>
<return>
<type class="javax.baja.ui.BWidgetApplication"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.getParentWidget() -->
<method name="getParentWidget"  public="true" final="true">
<description>
Get this component&#x27;s parent as a BWidget.  If&#xa; this component doesn&#x27;t have a parent, or it has&#xa; a non-BWidget parent then return null.
</description>
<return>
<type class="javax.baja.ui.BWidget"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.getChildWidgets() -->
<method name="getChildWidgets"  public="true" final="true">
<description>
Get the list of child widgets.
</description>
<return>
<type class="javax.baja.ui.BWidget" dimension="1"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.getStyleSelector() -->
<method name="getStyleSelector"  public="true">
<description>
Get the appropriate selector for an NSS file for this widget type.&#xa; BButton would override to return &#x22;button&#x22;, while BRadioButton would&#xa; return &#x22;button radio&#x22;, for instance.
</description>
<return>
<type class="java.lang.String"/>
<description>
NSS selector
</description>
</return>
</method>

<!-- javax.baja.ui.BWidget.getMouseCursor() -->
<method name="getMouseCursor"  public="true">
<description>
Get the mouse cursor for the widget.
</description>
<return>
<type class="javax.baja.ui.MouseCursor"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.setMouseCursor(javax.baja.ui.MouseCursor) -->
<method name="setMouseCursor"  public="true">
<description>
Set the mouse cursor for this widget.  If null is&#xa; passed then use &lt;code&gt;MouseCursor.normal&lt;/code&gt;.&#xa; Note that the busy state trumps local widget &#xa; cursor changes.  Return the old MouseCursor.
</description>
<parameter name="c">
<type class="javax.baja.ui.MouseCursor"/>
</parameter>
<return>
<type class="javax.baja.ui.MouseCursor"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.enterBusy() -->
<method name="enterBusy"  public="true">
<description>
Enter a section of code which could potentially&#xa; require a lengthy amount of time.  This changes&#xa; the shell&#x27;s cursor to a busy cursor, and may also&#xa; provide additional visual feedback to the user&#xa; that the shell is &#x22;working&#x22;.  It is critical that&#xa; the caller of this method also call exitBusy() the&#xa; same number of times that enterBusy was called.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.exitBusy() -->
<method name="exitBusy"  public="true">
<description>
Exit a busy section of code.  This call should be&#xa; called exactly once for every call to enterBusy.&#xa;&#xa; NOTE: if there is a chance that this widget has&#xa; been unmounted from the shell since the call to&#xa; enterBusy(), then use the shell for enterBusy()&#xa; and exitBusy(), not the widget.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.changed(javax.baja.sys.Property, javax.baja.sys.Context) -->
<method name="changed"  public="true">
<description>
Default implementation of the property &#xa; change callback is to call repaint.
</description>
<parameter name="prop">
<type class="javax.baja.sys.Property"/>
</parameter>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.fw(int, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object) -->
<method name="fw"  public="true">
<description>
Framework support access; this method should&#xa; never be used by developers.
</description>
<parameter name="x">
<type class="int"/>
</parameter>
<parameter name="a">
<type class="java.lang.Object"/>
</parameter>
<parameter name="b">
<type class="java.lang.Object"/>
</parameter>
<parameter name="c">
<type class="java.lang.Object"/>
</parameter>
<parameter name="d">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="java.lang.Object"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.getBindings() -->
<method name="getBindings"  public="true" final="true">
<description>
Get an array of child bindings or return an empty&#xa; array if no bindings are installed on this widget.
</description>
<return>
<type class="javax.baja.ui.BBinding" dimension="1"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.hasBindings() -->
<method name="hasBindings"  public="true" final="true">
<description>
Return true if there are one or more bindings on this widget.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.bindingsChanged() -->
<method name="bindingsChanged"  public="true">
<description>
This is callback is invoked when a binding is added, &#xa; removed, or its target is changed.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.isOverriddenByBinding(javax.baja.sys.Property) -->
<method name="isOverriddenByBinding"  public="true">
<description>
Return true if the specified property is overridden&#xa; by a child binding via the BBinding.getOnWidget() method.
</description>
<parameter name="prop">
<type class="javax.baja.sys.Property"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.childAt(javax.baja.gx.Point) -->
<method name="childAt"  public="true">
<description>
Get the immediate child of this widget which&#xa; is located at the specified coordinates relative&#xa; to this widget&#x27;s coordinate space.  This method&#xa; automatically excludes all children widgets which&#xa; are not visible regardless of their current bounds.
</description>
<parameter name="pt">
<type class="javax.baja.gx.Point"/>
<description>
point in this widget&#x27;s coordinate&#xa;    system.  The point is not guaranteed to&#xa;    remain immutable.
</description>
</parameter>
<return>
<type class="javax.baja.ui.BWidget"/>
<description>
null if no immediate children&#xa;    contain the specified point.
</description>
</return>
</method>

<!-- javax.baja.ui.BWidget.descendentAt(javax.baja.gx.Point) -->
<method name="descendentAt"  public="true" final="true">
<description>
Recursively get the deepest descendent of&#xa; of this widget which contains the given&#xa; point relative to this widget&#x27;s coordinate&#xa; space.  Unlike childAt(), this method&#xa; recursively searches nested widgets to find&#xa; the deepest one.
</description>
<parameter name="pt">
<type class="javax.baja.gx.Point"/>
<description>
point in this widget&#x27;s coordinate&#xa;    system.  The point is not guaranteed to&#xa;    remain immutable.
</description>
</parameter>
<return>
<type class="javax.baja.ui.BWidget"/>
<description>
null if no descendents contain&#xa;    the specified point.
</description>
</return>
</method>

<!-- javax.baja.ui.BWidget.translateToChild(javax.baja.ui.BWidget, javax.baja.gx.Point) -->
<method name="translateToChild"  public="true">
<description>
Translate a point from this widget&#x27;s coordinate&#xa; system to the given child&#x27;s coordinate system.
</description>
<parameter name="child">
<type class="javax.baja.ui.BWidget"/>
</parameter>
<parameter name="pt">
<type class="javax.baja.gx.Point"/>
</parameter>
<return>
<type class="javax.baja.gx.Point"/>
<description>
point argument
</description>
</return>
</method>

<!-- javax.baja.ui.BWidget.translateFromChild(javax.baja.ui.BWidget, javax.baja.gx.Point) -->
<method name="translateFromChild"  public="true">
<description>
Translate a point from the specified child&#xa; widget&#x27;s coordinate space to this widget&#x27;s&#xa; coordinate system.
</description>
<parameter name="child">
<type class="javax.baja.ui.BWidget"/>
</parameter>
<parameter name="pt">
<type class="javax.baja.gx.Point"/>
</parameter>
<return>
<type class="javax.baja.gx.Point"/>
<description>
point argument
</description>
</return>
</method>

<!-- javax.baja.ui.BWidget.translateFromAncestor(javax.baja.ui.BWidget, javax.baja.gx.Point) -->
<method name="translateFromAncestor"  public="true" final="true">
<description>
Given a point relative to ancestor&#x27;s&#xa; coordinate space, translate it to this&#xa; widget&#x27;s coordinate space.
</description>
<parameter name="ancestor">
<type class="javax.baja.ui.BWidget"/>
</parameter>
<parameter name="pt">
<type class="javax.baja.gx.Point"/>
</parameter>
<return>
<type class="javax.baja.gx.Point"/>
<description>
point argument.
</description>
</return>
</method>

<!-- javax.baja.ui.BWidget.translateToAncestor(javax.baja.ui.BWidget, javax.baja.gx.Point) -->
<method name="translateToAncestor"  public="true" final="true">
<description>
Given a point relative to this widget&#x27;s&#xa; coordinate space, translate it to the specified&#xa; ancestor&#x27;s coordinate space.
</description>
<parameter name="ancestor">
<type class="javax.baja.ui.BWidget"/>
</parameter>
<parameter name="pt">
<type class="javax.baja.gx.Point"/>
</parameter>
<return>
<type class="javax.baja.gx.Point"/>
<description>
point argument
</description>
</return>
</method>

<!-- javax.baja.ui.BWidget.translateToScreen(javax.baja.gx.Point) -->
<method name="translateToScreen"  public="true" final="true">
<description>
Translate the point relative to this widget&#x27;s&#xa; coordinate space to the screen coordinate space.
</description>
<parameter name="pt">
<type class="javax.baja.gx.Point"/>
</parameter>
<return>
<type class="javax.baja.gx.Point"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.getX() -->
<method name="getX"  public="true" final="true">
<description>
Get the view&#x27;s current x location in its parent.
</description>
<return>
<type class="double"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.getY() -->
<method name="getY"  public="true" final="true">
<description>
Get the view&#x27;s current y location in its parent.
</description>
<return>
<type class="double"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.getWidth() -->
<method name="getWidth"  public="true" final="true">
<description>
Get the view&#x27;s current width in pixels.
</description>
<return>
<type class="double"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.getHeight() -->
<method name="getHeight"  public="true" final="true">
<description>
Get the view&#x27;s current height in pixels.
</description>
<return>
<type class="double"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.getPreferredWidth() -->
<method name="getPreferredWidth"  public="true" final="true">
<description>
Get the view&#x27;s preferred width in pixels.
</description>
<return>
<type class="double"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.getPreferredHeight() -->
<method name="getPreferredHeight"  public="true" final="true">
<description>
Get the view&#x27;s preferred height in pixels.
</description>
<return>
<type class="double"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.contains(double, double) -->
<method name="contains"  public="true">
<description>
Does this widget contain specified point&#xa; which is relative to this widget&#x27;s coordinate&#xa; space.
</description>
<parameter name="x">
<type class="double"/>
</parameter>
<parameter name="y">
<type class="double"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.setLocation(double, double) -->
<method name="setLocation"  public="true">
<description>
Set the view&#x27;s location in its parent coordinate space.
</description>
<parameter name="x">
<type class="double"/>
</parameter>
<parameter name="y">
<type class="double"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.setSize(double, double) -->
<method name="setSize"  public="true">
<description>
Set the view&#x27;s size.
</description>
<parameter name="width">
<type class="double"/>
</parameter>
<parameter name="height">
<type class="double"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.setBounds(double, double, double, double) -->
<method name="setBounds"  public="true">
<description>
Set the view&#x27;s bounds which includes both its&#xa; location and size.
</description>
<parameter name="x">
<type class="double"/>
</parameter>
<parameter name="y">
<type class="double"/>
</parameter>
<parameter name="width">
<type class="double"/>
</parameter>
<parameter name="height">
<type class="double"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.setPreferredSize(double, double) -->
<method name="setPreferredSize"  public="true" final="true">
<description>
Set the view&#x27;s preferred size.
</description>
<parameter name="width">
<type class="double"/>
</parameter>
<parameter name="height">
<type class="double"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.needsLayout() -->
<method name="needsLayout"  public="true" final="true">
<description>
Get the needsLayout flag to determine if&#xa; layout needs to be called before the view&#xa; painted.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.relayout() -->
<method name="relayout"  public="true" final="true">
<description>
Relayout is invoked to request that this widget, and&#xa; potentially its ancestors have their position and size&#xa; recalculated.  This method sets the needsLayout flag to&#xa; true and calls parent.childCalledRelayout().  When this&#xa; method returns nothing has actually been laid out yet,&#xa; rather the actual layout will occur on the next paint.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.relayoutSync() -->
<method name="relayoutSync"  public="true" final="true">
<description>
This method is similar to &lt;code&gt;relayout()&lt;/code&gt;, however&#xa; it blocks until the actual layout is finished.  It is useful&#xa; if you immediately need to know position and size information&#xa; and you don&#x27;t want to wait for the next paint.  However it should&#xa; be used with caution since it can quickly degrade performance.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.childCalledRelayout(javax.baja.ui.BWidget) -->
<method name="childCalledRelayout"  public="true">
<description>
This method is invoked when a child of this widget makes&#xa; a call to relayout().  It gives this parent widget a chance &#xa; to decide if a relayout on the child would require a relayout&#xa; on this widget.  In general a relayout on the child means&#xa; that its preferred size has changed.  If this widget&#x27;s&#xa; preferred size is based on the child&#x27;s preferred size, then&#xa; this method should call relayout on itself.  The default&#xa; implementation is to call relayout.
</description>
<parameter name="child">
<type class="javax.baja.ui.BWidget"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.layout() -->
<method name="layout"  public="true" final="true">
<description>
Layout is called on this component whenever the widget is &#xa; under going a layout.  It should never be called directly, &#xa; but rather subclasses should override the doLayout() method.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.doLayout(javax.baja.ui.BWidget[]) -->
<method name="doLayout"  public="true">
<description>
The doLayout method is the hook to perform&#xa; layout on the widget&#x27;s children as well as&#xa; compute information needed to paint the widget.&#xa; If the widget contains children, it should call&#xa; setBounds() on each child to position the child&#xa; correctly.
</description>
<parameter name="children">
<type class="javax.baja.ui.BWidget" dimension="1"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.computePreferredSize() -->
<method name="computePreferredSize"  public="true">
<description>
Calculate this components preferred size.&#xa; This method should be overridden to calculate&#xa; the desired size using the specified graphics&#xa; context, then cache it by calling setPreferredSize().
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.scrollToVisible(javax.baja.gx.RectGeom) -->
<method name="scrollToVisible"  public="true">
<description>
This method forwards the scroll to visible message&#xa; to its parent.  If the widget is contained by a&#xa; BScrollBar ancestor, then this rect specified relative&#xa; to this widget&#x27;s coordinate space will be made visible.
</description>
<parameter name="rect">
<type class="javax.baja.gx.RectGeom"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.isVisible() -->
<method name="isVisible"  public="true" final="true">
<description>
This is a convenience method for getVisible().
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.isEnabled() -->
<method name="isEnabled"  public="true" final="true">
<description>
This is a convenience method for getEnabled().
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.repaint() -->
<method name="repaint"  public="true">
<description>
Repaint this component which will invoke&#xa; the paint method in the near future.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.repaint(double, double, double, double) -->
<method name="repaint"  public="true">
<description>
Repaint this component which will invoke&#xa; the paint method in the near future.
</description>
<parameter name="x">
<type class="double"/>
</parameter>
<parameter name="y">
<type class="double"/>
</parameter>
<parameter name="width">
<type class="double"/>
</parameter>
<parameter name="height">
<type class="double"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.paint(javax.baja.gx.Graphics) -->
<method name="paint"  public="true">
<description>
Paint this component to the specified Graphics.
</description>
<parameter name="g">
<type class="javax.baja.gx.Graphics"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.paintChildren(javax.baja.gx.Graphics) -->
<method name="paintChildren"  public="true">
<description>
Paint the children views of this BWidget.
</description>
<parameter name="g">
<type class="javax.baja.gx.Graphics"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.paintChild(javax.baja.gx.Graphics, javax.baja.ui.BWidget) -->
<method name="paintChild"  public="true">
<description>
Paint a child widget.
</description>
<parameter name="g">
<type class="javax.baja.gx.Graphics"/>
</parameter>
<parameter name="child">
<type class="javax.baja.ui.BWidget"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.animate() -->
<method name="animate"  public="true">
<description>
Animate is the callback invoked at a standard &#xa; frame rate of 10/sec (once every 100ms).  The&#xa; default implementation paints the children widgets.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.animateChildren() -->
<method name="animateChildren"  public="true">
<description>
Call animate on all visible child widgets.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.isFocusTraversable() -->
<method name="isFocusTraversable"  public="true">
<description>
Return true if this widget can gain focus&#xa; by traversing focus with the Tab or Shift+Tab&#xa; keys.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.hasFocus() -->
<method name="hasFocus"  public="true" final="true">
<description>
Does this widget currently have the focus.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.requestFocus() -->
<method name="requestFocus"  public="true">
<description>
Request the focus for this component.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.receiveInputEvents() -->
<method name="receiveInputEvents"  public="true">
<description>
Return true if this widget should receive input&#xa; events.  By default this is true and all keyboard&#xa; or mouse input events are routed directly to this&#xa; widget.  If this method returns false then input&#xa; events targeted to this widget will be directed to&#xa; to the parent widget.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.fireFocusEvent(javax.baja.ui.event.BFocusEvent) -->
<method name="fireFocusEvent"  public="true" final="true">
<description>
Fire an event for the &lt;code&gt;focusEvent&lt;/code&gt; topic.&#xa; This method first routes the event to one the widget&#xa; focusX(BFocusEvent) callbacks, then fires it for any&#xa; potential links.
</description>
<tag name="@see">javax.baja.ui.BWidget#focusEvent</tag>
<parameter name="event">
<type class="javax.baja.ui.event.BFocusEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.focusGained(javax.baja.ui.event.BFocusEvent) -->
<method name="focusGained"  public="true">
<description>
This callback is invoked when the fireFocusEvent() is&#xa; invoked with a BFocusEvent with an id of FOCUS_GAINED.&#xa; The default implementation is to call scrollToVisible()&#xa; and repaint().
</description>
<parameter name="event">
<type class="javax.baja.ui.event.BFocusEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.focusLost(javax.baja.ui.event.BFocusEvent) -->
<method name="focusLost"  public="true">
<description>
This callback is invoked when the fireFocusEvent() is&#xa; invoked with a BFocusEvent with an id of FOCUS_LOST.&#xa; The default implementation is to call repaint().
</description>
<parameter name="event">
<type class="javax.baja.ui.event.BFocusEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.fireMouseEvent(javax.baja.ui.event.BMouseEvent) -->
<method name="fireMouseEvent"  public="true">
<description>
Fire an event for the &lt;code&gt;mouseEvent&lt;/code&gt; topic.&#xa; This method first routes the event to one the widget&#xa; mouseX(BMouseEvent) callbacks, then fires it for any&#xa; potential links.
</description>
<tag name="@see">javax.baja.ui.BWidget#mouseEvent</tag>
<parameter name="event">
<type class="javax.baja.ui.event.BMouseEvent"/>
<description>
the mouse event that is being fired
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.mousePressed(javax.baja.ui.event.BMouseEvent) -->
<method name="mousePressed"  public="true">
<description>
This callback is invoked when the fireMouseEvent() is&#xa; invoked with a BMouseEvent with an id of MOUSE_PRESSED.
</description>
<parameter name="event">
<type class="javax.baja.ui.event.BMouseEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.mouseReleased(javax.baja.ui.event.BMouseEvent) -->
<method name="mouseReleased"  public="true">
<description>
This callback is invoked when the fireMouseEvent() is&#xa; invoked with a BMouseEvent with an id of MOUSE_RELEASED.
</description>
<parameter name="event">
<type class="javax.baja.ui.event.BMouseEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.mouseEntered(javax.baja.ui.event.BMouseEvent) -->
<method name="mouseEntered"  public="true">
<description>
This callback is invoked when the fireMouseEvent() is&#xa; invoked with a BMouseEvent with an id of MOUSE_ENTERED.
</description>
<parameter name="event">
<type class="javax.baja.ui.event.BMouseEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.mouseExited(javax.baja.ui.event.BMouseEvent) -->
<method name="mouseExited"  public="true">
<description>
This callback is invoked when the fireMouseEvent() is&#xa; invoked with a BMouseEvent with an id of MOUSE_EXITED.
</description>
<parameter name="event">
<type class="javax.baja.ui.event.BMouseEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.mouseMoved(javax.baja.ui.event.BMouseEvent) -->
<method name="mouseMoved"  public="true">
<description>
This callback is invoked when the fireMouseMotionEvent()&#xa; is invoked with a BMouseEvent with an id of MOUSE_MOVED.
</description>
<parameter name="event">
<type class="javax.baja.ui.event.BMouseEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.mouseDragged(javax.baja.ui.event.BMouseEvent) -->
<method name="mouseDragged"  public="true">
<description>
This callback is invoked when the fireMouseMotionEvent()&#xa; is invoked with a BMouseEvent with an id of MOUSE_DRAGGED.
</description>
<parameter name="event">
<type class="javax.baja.ui.event.BMouseEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.mousePulsed(javax.baja.ui.event.BMouseEvent) -->
<method name="mousePulsed"  public="true">
<description>
This callback is invoked when the fireMouseEvent() is&#xa; invoked with a BMouseEvent with an id of MOUSE_PULSED.
</description>
<parameter name="event">
<type class="javax.baja.ui.event.BMouseEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.mouseDragStarted(javax.baja.ui.event.BMouseEvent) -->
<method name="mouseDragStarted"  public="true">
<description>
This callback is invoked when the fireMouseEvent() is&#xa; invoked with a BMouseEvent with an id of MOUSE_DRAG_STARTED.
</description>
<parameter name="event">
<type class="javax.baja.ui.event.BMouseEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.mouseWheel(javax.baja.ui.event.BMouseWheelEvent) -->
<method name="mouseWheel"  public="true">
<description>
This callback is invoked when the fireMouseEvent() is&#xa; invoked with a BMouseWheelEvent with an id of MOUSE_WHEEL.&#xa; Unlike other mouse events, the framework will propagate a &#xa; wheel event up the widget&#x27;s ancestor tree until it is&#xa; consumed.  So it is possible that the source of the event&#xa; is not this widget.
</description>
<parameter name="event">
<type class="javax.baja.ui.event.BMouseWheelEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.mouseHover(javax.baja.ui.event.BMouseEvent) -->
<method name="mouseHover"  public="true">
<description>
This callback is invoked when the fireMouseEvent() is&#xa; invoked with a BMouseEvent with an id of MOUSE_HOVER.
</description>
<parameter name="event">
<type class="javax.baja.ui.event.BMouseEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.resetHover() -->
<method name="resetHover"  public="true">
<description>
Reset the hover timer to receive another mouseHover() callback.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.fireKeyEvent(javax.baja.ui.event.BKeyEvent) -->
<method name="fireKeyEvent"  public="true">
<description>
Fire an event for the &lt;code&gt;keyEvent&lt;/code&gt; topic.&#xa; This call first routes the event to one the widget&#xa; keyX(BKeyEvent) callbacks, then fires it for any&#xa; potential links.
</description>
<tag name="@see">javax.baja.ui.BWidget#keyEvent</tag>
<parameter name="event">
<type class="javax.baja.ui.event.BKeyEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.keyPressed(javax.baja.ui.event.BKeyEvent) -->
<method name="keyPressed"  public="true">
<description>
This callback is invoked when the fireKeyEvent() is&#xa; invoked with a BKeyEvent with an id of KEY_PRESSED.
</description>
<parameter name="event">
<type class="javax.baja.ui.event.BKeyEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.keyReleased(javax.baja.ui.event.BKeyEvent) -->
<method name="keyReleased"  public="true">
<description>
This callback is invoked when the fireKeyEvent() is&#xa; invoked with a BKeyEvent with an id of KEY_RELEASED.
</description>
<parameter name="event">
<type class="javax.baja.ui.event.BKeyEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.keyTyped(javax.baja.ui.event.BKeyEvent) -->
<method name="keyTyped"  public="true">
<description>
This callback is invoked when the fireKeyEvent() is&#xa; invoked with a BKeyEvent with an id of KEY_TYPED.
</description>
<parameter name="event">
<type class="javax.baja.ui.event.BKeyEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.getAgents(javax.baja.sys.Context) -->
<method name="getAgents"  public="true">
<description/>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="javax.baja.agent.AgentList"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.getIcon() -->
<method name="getIcon"  public="true">
<description>
Get the icon.
</description>
<return>
<type class="javax.baja.sys.BIcon"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.widgetSupport(java.lang.Object) -->
<method name="widgetSupport"  public="true">
<description>
For framework use only.
</description>
<parameter name="x">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="java.lang.Object"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.getUndoManager() -->
<method name="getUndoManager"  public="true">
<description>
Get the UndoManager associated with this widget.
</description>
<return>
<type class="javax.baja.ui.UndoManager"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.invokeLater(java.lang.Runnable) -->
<method name="invokeLater"  public="true" static="true" final="true">
<description>
Causes &#x27;event.run()&#x27; to be called on bajaui&#x27;s event dispatch thread.&#xa; This will happen after all pending events have been processed. This method should&#xa; be used when another thread needs to update the GUI.
</description>
<tag name="@since">Niagara 3.6</tag>
<parameter name="event">
<type class="java.lang.Runnable"/>
<description>
The Runnable event to be invoked on the event dispatch thread.
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.toDebugString() -->
<method name="toDebugString"  public="true">
<description/>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.getDebugString() -->
<method name="getDebugString"  public="true">
<description/>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.boundsToString() -->
<method name="boundsToString"  public="true">
<description/>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.preferredSizeToString() -->
<method name="preferredSizeToString"  public="true">
<description/>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.ui.BWidget.visible -->
<field name="visible"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;visible&lt;/code&gt; property.&#xa; When the visible property is true the widget is&#xa; rendered to its graphics context and can accept&#xa; user input from the mouse and keyboard.  When visible&#xa; if false the widget is hidden and will not receive&#xa; user input.
</description>
<tag name="@see">#getVisible</tag>
<tag name="@see">#setVisible</tag>
</field>

<!-- javax.baja.ui.BWidget.enabled -->
<field name="enabled"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;enabled&lt;/code&gt; property.&#xa; All widgets support an enabled field which allows&#xa; the to enable and disable user interaction.
</description>
<tag name="@see">#getEnabled</tag>
<tag name="@see">#setEnabled</tag>
</field>

<!-- javax.baja.ui.BWidget.layout -->
<field name="layout"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;layout&lt;/code&gt; property.&#xa; Layout stores absolute position.
</description>
<tag name="@see">#getLayout</tag>
<tag name="@see">#setLayout</tag>
</field>

<!-- javax.baja.ui.BWidget.styleClasses -->
<field name="styleClasses"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;styleClasses&lt;/code&gt; property.&#xa; Enables classes for theme styling.
</description>
<tag name="@see">#getStyleClasses</tag>
<tag name="@see">#setStyleClasses</tag>
</field>

<!-- javax.baja.ui.BWidget.styleId -->
<field name="styleId"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;styleId&lt;/code&gt; property.&#xa; Enables IDs for theme styling.
</description>
<tag name="@see">#getStyleId</tag>
<tag name="@see">#setStyleId</tag>
</field>

<!-- javax.baja.ui.BWidget.keyEvent -->
<field name="keyEvent"  public="true" static="true" final="true">
<type class="javax.baja.sys.Topic"/>
<description>
Slot for the &lt;code&gt;keyEvent&lt;/code&gt; topic.&#xa; This topic is fired whenever keyboard input&#xa; occurs on this component. In order to receive&#xa; keyboard input, the widget must currently have&#xa; focus.
</description>
<tag name="@see">#fireKeyEvent</tag>
</field>

<!-- javax.baja.ui.BWidget.mouseEvent -->
<field name="mouseEvent"  public="true" static="true" final="true">
<type class="javax.baja.sys.Topic"/>
<description>
Slot for the &lt;code&gt;mouseEvent&lt;/code&gt; topic.&#xa; The mouseEvent topic is fired when the widget&#xa; received mouse input.
</description>
<tag name="@see">#fireMouseEvent</tag>
</field>

<!-- javax.baja.ui.BWidget.focusEvent -->
<field name="focusEvent"  public="true" static="true" final="true">
<type class="javax.baja.sys.Topic"/>
<description>
Slot for the &lt;code&gt;focusEvent&lt;/code&gt; topic.&#xa; The focusEvent topic is fired when the widget&#xa; gains or loses focus.
</description>
<tag name="@see">#fireFocusEvent</tag>
</field>

<!-- javax.baja.ui.BWidget.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
