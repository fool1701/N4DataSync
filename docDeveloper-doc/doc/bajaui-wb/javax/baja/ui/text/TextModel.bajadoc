<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="bajaui" runtimeProfile="wb" qualifiedName="javax.baja.ui.text.TextModel" name="TextModel" packageName="javax.baja.ui.text" public="true">
<description>
TextModel stores the text document being viewed and&#xa; edited by a BTextWidget.
</description>
<tag name="@author">Brian Frank</tag>
<tag name="@creation">9 Dec 00</tag>
<tag name="@version">$Revision: 46$ $Date: 6/27/07 1:31:17 PM EDT$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="javax.baja.ui.text.BTextEditor$TextSupport"/>
</extends>
<!-- javax.baja.ui.text.TextModel() -->
<constructor name="TextModel" public="true">
<description/>
</constructor>

<!-- javax.baja.ui.text.TextModel.getLineCount() -->
<method name="getLineCount"  public="true">
<description>
Get the number of lines in this document.
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.ui.text.TextModel.getLine(int) -->
<method name="getLine"  public="true">
<description>
Get the Line modeling the specified zero indexed line.
</description>
<parameter name="line">
<type class="int"/>
</parameter>
<return>
<type class="javax.baja.ui.text.Line"/>
</return>
</method>

<!-- javax.baja.ui.text.TextModel.getText() -->
<method name="getText"  public="true">
<description>
Get the document as a String.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.ui.text.TextModel.getText(javax.baja.ui.text.Position, javax.baja.ui.text.Position) -->
<method name="getText"  public="true">
<description>
Get the text between fromPos and toPos inclusively.
</description>
<parameter name="fromPos">
<type class="javax.baja.ui.text.Position"/>
</parameter>
<parameter name="toPos">
<type class="javax.baja.ui.text.Position"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.ui.text.TextModel.getCharArray(javax.baja.ui.text.Position, javax.baja.ui.text.Position) -->
<method name="getCharArray"  public="true">
<description>
Get the text between fromPos and toPos &#xa; inclusively as a char[].
</description>
<parameter name="fromPos">
<type class="javax.baja.ui.text.Position"/>
</parameter>
<parameter name="toPos">
<type class="javax.baja.ui.text.Position"/>
</parameter>
<return>
<type class="char" dimension="1"/>
</return>
</method>

<!-- javax.baja.ui.text.TextModel.setText(java.lang.String) -->
<method name="setText"  public="true">
<description>
Set the document with a String.
</description>
<parameter name="text">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.text.TextModel.getAnchorX() -->
<method name="getAnchorX"  public="true">
<description>
Gets the text model&#x27;s current &#x22;anchor&#x22; X position.
</description>
<return>
<type class="double"/>
<description>
the current &#x22;anchor&#x22; X position, in pixels
</description>
</return>
</method>

<!-- javax.baja.ui.text.TextModel.setAnchorX(double) -->
<method name="setAnchorX"  public="true">
<description>
Sets the text model&#x27;s current &#x22;anchor&#x22; X position. Once the anchor is &#xa; updated, navigating through the text editor by pressing up/down/pgup/pgdown&#xa; will try to stay as close to this X position as it can. Prevents the caret &#xa; from slamming hard left when navigating past empty lines, for instance.
</description>
<parameter name="anchorX">
<type class="double"/>
<description>
the new &#x22;anchor&#x22; X position, in pixels
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.text.TextModel.read(java.io.Reader, int) -->
<method name="read"  public="true">
<description>
Read the document from the specified input stream&#xa; given the number of characters to read.
</description>
<parameter name="in">
<type class="java.io.Reader"/>
</parameter>
<parameter name="length">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.ui.text.TextModel.read(java.io.Reader) -->
<method name="read"  public="true">
<description>
Read the document from the specified input stream&#xa; until the end of file is reached.
</description>
<parameter name="in">
<type class="java.io.Reader"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.ui.text.TextModel.read(char[]) -->
<method name="read"  public="true">
<description>
Read the document from the specified char array.
</description>
<parameter name="buf">
<type class="char" dimension="1"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.text.TextModel.write(java.io.Writer) -->
<method name="write"  public="true">
<description>
Write the document to the specified writer stream.
</description>
<parameter name="out">
<type class="java.io.Writer"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.ui.text.TextModel.getStartPosition() -->
<method name="getStartPosition"  public="true">
<description>
Get the document&#x27;s starting position.
</description>
<return>
<type class="javax.baja.ui.text.Position"/>
</return>
</method>

<!-- javax.baja.ui.text.TextModel.getEndPosition() -->
<method name="getEndPosition"  public="true">
<description>
Get the document&#x27;s ending position.
</description>
<return>
<type class="javax.baja.ui.text.Position"/>
</return>
</method>

<!-- javax.baja.ui.text.TextModel.getPrevPosition(javax.baja.ui.text.Position) -->
<method name="getPrevPosition"  public="true">
<description>
Get the position immediately before the specified&#xa; position, or if the given position is the document&#xa; start, then return the start position.
</description>
<parameter name="pos">
<type class="javax.baja.ui.text.Position"/>
</parameter>
<return>
<type class="javax.baja.ui.text.Position"/>
</return>
</method>

<!-- javax.baja.ui.text.TextModel.getNextPosition(javax.baja.ui.text.Position) -->
<method name="getNextPosition"  public="true">
<description>
Get the position immediately after the &#xa; specified position.
</description>
<parameter name="pos">
<type class="javax.baja.ui.text.Position"/>
</parameter>
<return>
<type class="javax.baja.ui.text.Position"/>
</return>
</method>

<!-- javax.baja.ui.text.TextModel.getWordLeft(javax.baja.ui.text.Position) -->
<method name="getWordLeft"  public="true">
<description>
Get the start position of the current word,&#xa; of if pos not in a word segment, then get&#xa; the start position of the previous word.
</description>
<parameter name="pos">
<type class="javax.baja.ui.text.Position"/>
</parameter>
<return>
<type class="javax.baja.ui.text.Position"/>
</return>
</method>

<!-- javax.baja.ui.text.TextModel.getWordRight(javax.baja.ui.text.Position) -->
<method name="getWordRight"  public="true">
<description>
Get the &#x22;wordRight&#x22; caret position.  The&#xa; returned value is based on the current&#xa; setting of the wordRightToEndOfWord option.&#xa; &lt;p&gt;&#xa; If the option is true, get the ending position&#xa; of the current word, or if pos not inside a word&#xa; segment then the ending position of the next word.&#xa; &lt;p&gt;&#xa; If the option is false, get the start position&#xa; of the next word.
</description>
<parameter name="pos">
<type class="javax.baja.ui.text.Position"/>
</parameter>
<return>
<type class="javax.baja.ui.text.Position"/>
</return>
</method>

<!-- javax.baja.ui.text.TextModel.findNext(javax.baja.ui.text.FindPattern) -->
<method name="findNext"  public="true">
<description>
Starting with the caret position, find the next &#xa; occurance of the specified text or return null if &#xa; not found before the end of the document.
</description>
<parameter name="pattern">
<type class="javax.baja.ui.text.FindPattern"/>
</parameter>
<return>
<type class="javax.baja.ui.text.Position"/>
</return>
</method>

<!-- javax.baja.ui.text.TextModel.findPrev(javax.baja.ui.text.FindPattern) -->
<method name="findPrev"  public="true">
<description>
Starting with the caret position, find the previous&#xa; occurance of the specified text or return null if &#xa; not found before the end of the document.
</description>
<parameter name="pattern">
<type class="javax.baja.ui.text.FindPattern"/>
</parameter>
<return>
<type class="javax.baja.ui.text.Position"/>
</return>
</method>

<!-- javax.baja.ui.text.TextModel.insert(javax.baja.ui.text.Position, java.lang.String) -->
<method name="insert"  public="true">
<description>
Insert the given text into the document at &#xa; the specified offset position.
</description>
<parameter name="pos">
<type class="javax.baja.ui.text.Position"/>
</parameter>
<parameter name="text">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.ui.text.Position"/>
<description>
the Position immediately following&#xa;   the inserted text.
</description>
</return>
</method>

<!-- javax.baja.ui.text.TextModel.insert(javax.baja.ui.text.Position, char[], int, int) -->
<method name="insert"  public="true">
<description>
Insert the given text into the document at&#xa; the specified offset position.
</description>
<parameter name="pos">
<type class="javax.baja.ui.text.Position"/>
</parameter>
<parameter name="buf">
<type class="char" dimension="1"/>
</parameter>
<parameter name="offset">
<type class="int"/>
</parameter>
<parameter name="len">
<type class="int"/>
</parameter>
<return>
<type class="javax.baja.ui.text.Position"/>
<description>
the Position immediately following&#xa;   the inserted text.
</description>
</return>
</method>

<!-- javax.baja.ui.text.TextModel.remove(javax.baja.ui.text.Position, javax.baja.ui.text.Position) -->
<method name="remove"  public="true">
<description>
Remove the characters between the from&#xa; and to positions inclusively.
</description>
<parameter name="fromPos">
<type class="javax.baja.ui.text.Position"/>
</parameter>
<parameter name="toPos">
<type class="javax.baja.ui.text.Position"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.text.TextModel.cut() -->
<method name="cut"  public="true">
<description>
Cut the current selection to the clipboard, or &#xa; if no selection, then don&#x27;t do anything.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.text.TextModel.copy() -->
<method name="copy"  public="true">
<description>
Copy the current selection to the clipboard, or &#xa; if no selection, then don&#x27;t do anything.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.text.TextModel.paste() -->
<method name="paste"  public="true">
<description>
Paste the text on the clipboard into the document&#xa; at the current caret position.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.text.TextModel.getSelectedText() -->
<method name="getSelectedText"  public="true">
<description>
Get the selected text or null if no current selection.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.ui.text.TextModel.getSelectedCharArray() -->
<method name="getSelectedCharArray"  public="true">
<description>
Get the selected text as a char[] or null if no &#xa; current selection.
</description>
<return>
<type class="char" dimension="1"/>
</return>
</method>

<!-- javax.baja.ui.text.TextModel.update(char[]) -->
<method name="update"  protected="true">
<description>
Perform an reset on the document by reparsing&#xa; the specified character buffer.
</description>
<parameter name="buf">
<type class="char" dimension="1"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.text.TextModel.update(javax.baja.ui.text.Line[]) -->
<method name="update"  protected="true">
<description>
All changes to the model eventually route here &#xa; for consistent processing.
</description>
<parameter name="lines">
<type class="javax.baja.ui.text.Line" dimension="1"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.text.TextModel.textModified() -->
<method name="textModified"  protected="true">
<description>
This callback is invoked whenever the text is modified.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.text.TextModel.getTextLength() -->
<method name="getTextLength"  public="true">
<description>
Get the total number of characters in the text string.
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.ui.text.TextModel.getPreferredWidth() -->
<method name="getPreferredWidth"  public="true">
<description/>
<return>
<type class="double"/>
</return>
</method>

<!-- javax.baja.ui.text.TextModel.getPreferredHeight() -->
<method name="getPreferredHeight"  public="true">
<description/>
<return>
<type class="double"/>
</return>
</method>

<!-- javax.baja.ui.text.TextModel.dump() -->
<method name="dump"  public="true">
<description>
Dump the model to standard output.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.text.TextModel.dump(java.io.PrintWriter) -->
<method name="dump"  public="true">
<description>
Dump the model to the specified print writer.
</description>
<parameter name="out">
<type class="java.io.PrintWriter"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.text.TextModel.toString(char[]) -->
<method name="toString"  public="true" static="true">
<description>
Get an escaped String for the char[] buffer.
</description>
<parameter name="buf">
<type class="char" dimension="1"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

</class>
</bajadoc>
