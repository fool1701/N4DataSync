<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="bajaui" runtimeProfile="wb" qualifiedName="javax.baja.ui.text.BTextEditor" name="BTextEditor" packageName="javax.baja.ui.text" public="true">
<description>
BTextEditor provides support for all text entry widgets.&#xa; By itself BTextEditor is a multi-line editor with a preferred &#xa; size necessary to display all rows and columns.  BTextField&#xa; provides a standard single line text entry widget.  The&#xa; BTextEditorPane provides a BTextEditor automatically wrapped&#xa; by a BScrollPane.&#xa; &lt;p&gt;&#xa; The current design of BTextEditor is designed for simple&#xa; text fields and to provide color coded editors for writing&#xa; source code.  Therefore it assume a fixed width font and &#xa; only certain features are designed to be extended.  &#xa; &lt;p&gt;&#xa; Features included in BTextEditor:&#xa; &lt;ul&gt;&#xa;   &lt;li&gt;RequiresConfiguration options&lt;/li&gt;&#xa;   &lt;li&gt;RequiresConfiguration key binding&lt;/li&gt;&#xa;   &lt;li&gt;RequiresConfiguration color coding&lt;/li&gt;&#xa;   &lt;li&gt;Pluggable color coding parsers&lt;/li&gt;&#xa;   &lt;li&gt;Rich set of predefined navigation and text &#xa;       manipulation commands&lt;/li&gt;&#xa;   &lt;li&gt;Integration with the undo framework&lt;/li&gt;&#xa;   &lt;li&gt;Pluggable user input processing&lt;/li&gt;&#xa;   &lt;li&gt;Pluggable line rendering&lt;/li&gt;&#xa; &lt;/ul&gt;&#xa;&#xa; &lt;p&gt;&#xa; BTextEditor is composed of several pluggable support classes:&#xa; &lt;ul&gt;&#xa; &lt;li&gt;&lt;b&gt;Model:&lt;/b&gt; The TextModel stores the text being edited.&#xa;   The text model is based on a list of Lines denoted by&#xa;   explicit line breaks.  Each Line contains its own character&#xa;   buffer and a list of Segments.  The Segments of a Line&#xa;   determine where token breaks occur and how to render &#xa;   attributes such as color coding.&#xa; &lt;/li&gt;&#xa; &lt;li&gt;&lt;b&gt;Controller:&lt;/b&gt; BTextEditor routes all focus, keyboard,&#xa;   and mouse events to its installed TextController. This&#xa;   provides an ideal override point to catch user input.&#xa; &lt;/li&gt;&#xa; &lt;li&gt;&lt;b&gt;Renderer:&lt;/b&gt; TextRenderer provides a pluggable class&#xa;   for managing the layout and painting of each Line in&#xa;   the document.  The default implementation uses a fixed width&#xa;   font and uses the Segment flags to support color coding.&#xa; &lt;/li&gt;&#xa; &lt;li&gt;&lt;b&gt;Parser:&lt;/b&gt; TextParser provides a pluggable parser&#xa;   for a BTextEditor.  The parser is responsible for translating&#xa;   char data into Lines and Segments.  A set of standard parsers&#xa;   is included for color coding Java, C, C++, and XML.&#xa; &lt;/li&gt;&#xa; &lt;li&gt;&lt;b&gt;Options:&lt;/b&gt;The BTextEditorOptions integrates with&#xa;   the options framework to persistently store editor options.&#xa;   Options are used to to store color coding, key bindings,&#xa;   and configuration of editor features.&#xa; &lt;/li&gt;&#xa; &lt;/ul&gt;
</description>
<tag name="@author">Brian Frank</tag>
<tag name="@creation">30 Nov 00</tag>
<tag name="@version">$Revision: 106$ $Date: 6/29/11 12:15:44 PM EDT$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="javax.baja.ui.transfer.BTransferWidget"/>
</extends>
<implements>
<type class="javax.baja.ui.UndoManager$Scope"/>
</implements>
<annotation><type class="javax.baja.nre.annotations.NoSlotomatic"/>
</annotation>
<property name="editable" flags="">
<type class="boolean"/>
<description>
Slot for the &lt;code&gt;editable&lt;/code&gt; property.&#xa; If editable is true then the text may be modified,&#xa; or if false the text is readonly.
</description>
<tag name="@see">#getEditable</tag>
<tag name="@see">#setEditable</tag>
</property>

<topic name="textModified" flags="">
<eventType>
<type class="javax.baja.ui.event.BWidgetEvent"/>
</eventType><description>
Slot for the &lt;code&gt;textModified&lt;/code&gt; topic.&#xa; Fired when the text model is modified.
</description>
<tag name="@see">#fireTextModified</tag>
</topic>

<topic name="selectionModified" flags="">
<eventType>
<type class="javax.baja.ui.event.BWidgetEvent"/>
</eventType><description>
Slot for the &lt;code&gt;selectionModified&lt;/code&gt; topic.&#xa; Fired when the text selection is modified.
</description>
<tag name="@see">#fireSelectionModified</tag>
</topic>

<topic name="inputMethodEvent" flags="">
<eventType>
<type class="javax.baja.ui.event.BInputEvent"/>
</eventType><description>
Slot for the &lt;code&gt;inputMethodEvent&lt;/code&gt; topic.&#xa; This method runs here, then fires it for any&#xa; potential links.
</description>
<tag name="@see">#fireInputMethodEvent</tag>
</topic>

<!-- javax.baja.ui.text.BTextEditor(java.lang.String, boolean) -->
<constructor name="BTextEditor" public="true">
<parameter name="text">
<type class="java.lang.String"/>
</parameter>
<parameter name="editable">
<type class="boolean"/>
</parameter>
<description>
Constructor with default text and editable state.
</description>
</constructor>

<!-- javax.baja.ui.text.BTextEditor() -->
<constructor name="BTextEditor" public="true">
<description>
Default constructor.
</description>
</constructor>

<!-- javax.baja.ui.text.BTextEditor.getEditable() -->
<method name="getEditable"  public="true">
<description>
Get the &lt;code&gt;editable&lt;/code&gt; property.&#xa; If editable is true then the text may be modified,&#xa; or if false the text is readonly.
</description>
<tag name="@see">#editable</tag>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.setEditable(boolean) -->
<method name="setEditable"  public="true">
<description>
Set the &lt;code&gt;editable&lt;/code&gt; property.&#xa; If editable is true then the text may be modified,&#xa; or if false the text is readonly.
</description>
<tag name="@see">#editable</tag>
<parameter name="v">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.fireTextModified(javax.baja.ui.event.BWidgetEvent) -->
<method name="fireTextModified"  public="true">
<description>
Fire an event for the &lt;code&gt;textModified&lt;/code&gt; topic.&#xa; Fired when the text model is modified.
</description>
<tag name="@see">#textModified</tag>
<parameter name="event">
<type class="javax.baja.ui.event.BWidgetEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.fireSelectionModified(javax.baja.ui.event.BWidgetEvent) -->
<method name="fireSelectionModified"  public="true">
<description>
Fire an event for the &lt;code&gt;selectionModified&lt;/code&gt; topic.&#xa; Fired when the text selection is modified.
</description>
<tag name="@see">#selectionModified</tag>
<parameter name="event">
<type class="javax.baja.ui.event.BWidgetEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.fireInputMethodEvent(javax.baja.ui.event.BInputEvent) -->
<method name="fireInputMethodEvent"  public="true" final="true">
<description>
Fire an event for the &lt;code&gt;inputMethodEvent&lt;/code&gt; topic.&#xa; This method runs here, then fires it for any&#xa; potential links.
</description>
<tag name="@see">#inputMethodEvent</tag>
<parameter name="event">
<type class="javax.baja.ui.event.BInputEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.caretPositionChanged(javax.baja.ui.event.BInputMethodEvent) -->
<method name="caretPositionChanged"  public="true">
<description/>
<parameter name="event">
<type class="javax.baja.ui.event.BInputMethodEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.imTextChanged(javax.baja.ui.event.BInputMethodEvent) -->
<method name="imTextChanged"  public="true">
<description/>
<parameter name="event">
<type class="javax.baja.ui.event.BInputMethodEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.getModel() -->
<method name="getModel"  public="true">
<description>
Get the text model currently installed.
</description>
<return>
<type class="javax.baja.ui.text.TextModel"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.setModel(javax.baja.ui.text.TextModel) -->
<method name="setModel"  public="true">
<description>
Install the specified model this BTextEditor visualizes.
</description>
<parameter name="model">
<type class="javax.baja.ui.text.TextModel"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.getController() -->
<method name="getController"  public="true">
<description>
Get the text controller currently installed.
</description>
<return>
<type class="javax.baja.ui.text.TextController"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.setController(javax.baja.ui.text.TextController) -->
<method name="setController"  public="true">
<description>
Install the specified controller.
</description>
<parameter name="controller">
<type class="javax.baja.ui.text.TextController"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.getParser() -->
<method name="getParser"  public="true">
<description>
Get the text parser currently installed.
</description>
<return>
<type class="javax.baja.ui.text.TextParser"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.setParser(javax.baja.ui.text.TextParser) -->
<method name="setParser"  public="true">
<description>
Install the specified parser.
</description>
<parameter name="parser">
<type class="javax.baja.ui.text.TextParser"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.getCommandFactory() -->
<method name="getCommandFactory"  public="true">
<description>
Get the text command factory currently installed.
</description>
<return>
<type class="javax.baja.ui.text.TextCommandFactory"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.setCommandFactory(javax.baja.ui.text.TextCommandFactory) -->
<method name="setCommandFactory"  public="true">
<description>
Install the specified command factory.
</description>
<parameter name="commandFactory">
<type class="javax.baja.ui.text.TextCommandFactory"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.getSelection() -->
<method name="getSelection"  public="true">
<description>
Get the current text selection.
</description>
<return>
<type class="javax.baja.ui.text.TextSelection"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.setSelection(javax.baja.ui.text.TextSelection) -->
<method name="setSelection"  public="true">
<description>
Install the specified selection model.
</description>
<parameter name="selection">
<type class="javax.baja.ui.text.TextSelection"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.getRenderer() -->
<method name="getRenderer"  public="true">
<description>
Get the TextRenderer currently installed.
</description>
<return>
<type class="javax.baja.ui.text.TextRenderer"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.setRenderer(javax.baja.ui.text.TextRenderer) -->
<method name="setRenderer"  public="true">
<description>
Install the specified TextRenderer.
</description>
<parameter name="renderer">
<type class="javax.baja.ui.text.TextRenderer"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.getOptions() -->
<method name="getOptions"  public="true">
<description>
Get the text editor options currently installed.&#xa; By default the system wide options are used.
</description>
<return>
<type class="javax.baja.ui.text.BTextEditorOptions"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.setOptions(javax.baja.ui.text.BTextEditorOptions) -->
<method name="setOptions"  public="true">
<description>
Install the specified options this BTextEditor uses.
</description>
<parameter name="options">
<type class="javax.baja.ui.text.BTextEditorOptions"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.isEditable() -->
<method name="isEditable"  public="true" final="true">
<description>
Convenience method for getEditable.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.isSingleLine() -->
<method name="isSingleLine"  public="true">
<description>
Return true if this is a single line text entry widget.  &#xa; BTextField is the default implementation of a single &#xa; line text editor.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.getText() -->
<method name="getText"  public="true">
<description>
Convenience method for &lt;code&gt;getModel().getText()&lt;/code&gt;.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.setText(java.lang.String) -->
<method name="setText"  public="true">
<description>
Convenience method for &lt;code&gt;getModel().setText()&lt;/code&gt;.
</description>
<parameter name="text">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.getAllowCopying() -->
<method name="getAllowCopying"  public="true">
<description>
Is copying enabled from this editor.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.setAllowCopying(boolean) -->
<method name="setAllowCopying"  public="true">
<description>
Enabled or disable copying from this editor.
</description>
<parameter name="allow">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.getCaretPosition() -->
<method name="getCaretPosition"  public="true">
<description>
Return the logical position of the caret.
</description>
<return>
<type class="javax.baja.ui.text.Position"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.moveCaretPosition(javax.baja.ui.text.Position) -->
<method name="moveCaretPosition"  public="true">
<description>
Move the caret position to the specified position.
</description>
<parameter name="pos">
<type class="javax.baja.ui.text.Position"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.isCaretBlinking() -->
<method name="isCaretBlinking"  public="true">
<description>
Is this text widget&#x27;s caret currently blinking.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.setCaretBlinking(boolean) -->
<method name="setCaretBlinking"  public="true">
<description>
Set the caret&#x27;s blinking state to blink or&#xa; not to blink.
</description>
<parameter name="blinking">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.getVisibleLineCount() -->
<method name="getVisibleLineCount"  public="true">
<description>
Get the number of lines current visible.
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.scrollToVisible(javax.baja.ui.text.Position) -->
<method name="scrollToVisible"  public="true">
<description>
If the text editor requires scrolling, then&#xa; ensure the specified position is visible.
</description>
<parameter name="pos">
<type class="javax.baja.ui.text.Position"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.getPositionAt(double, double) -->
<method name="getPositionAt"  public="true">
<description>
Translate the specified pixel position to &#xa; the a logical document position.
</description>
<parameter name="x">
<type class="double"/>
</parameter>
<parameter name="y">
<type class="double"/>
</parameter>
<return>
<type class="javax.baja.ui.text.Position"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.computePreferredSize() -->
<method name="computePreferredSize"  public="true">
<description>
Compute the preferred size of the text editor.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.doLayout(javax.baja.ui.BWidget[]) -->
<method name="doLayout"  public="true">
<description>
Layout the text editor.
</description>
<parameter name="kids">
<type class="javax.baja.ui.BWidget" dimension="1"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.getInsets() -->
<method name="getInsets"  protected="true">
<description>
Get the insets used to offset the text lines&#xa; from the edge of the editor bounds.  Subclasses&#xa; can override this method to provide different&#xa; insets.
</description>
<return>
<type class="javax.baja.gx.BInsets"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.paint(javax.baja.gx.Graphics) -->
<method name="paint"  public="true">
<description>
Paint the text editor.
</description>
<parameter name="g">
<type class="javax.baja.gx.Graphics"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.getStyleSelector() -->
<method name="getStyleSelector"  public="true">
<description/>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.isFocusTraversable() -->
<method name="isFocusTraversable"  public="true">
<description>
Route to TextController.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.focusGained(javax.baja.ui.event.BFocusEvent) -->
<method name="focusGained"  public="true">
<description>
Route to TextController.
</description>
<parameter name="event">
<type class="javax.baja.ui.event.BFocusEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.focusLost(javax.baja.ui.event.BFocusEvent) -->
<method name="focusLost"  public="true">
<description>
Route to TextController.
</description>
<parameter name="event">
<type class="javax.baja.ui.event.BFocusEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.keyPressed(javax.baja.ui.event.BKeyEvent) -->
<method name="keyPressed"  public="true">
<description>
Route to TextController.
</description>
<parameter name="event">
<type class="javax.baja.ui.event.BKeyEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.keyReleased(javax.baja.ui.event.BKeyEvent) -->
<method name="keyReleased"  public="true">
<description>
Route to TextController.
</description>
<parameter name="event">
<type class="javax.baja.ui.event.BKeyEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.keyTyped(javax.baja.ui.event.BKeyEvent) -->
<method name="keyTyped"  public="true">
<description>
Route to TextController.
</description>
<parameter name="event">
<type class="javax.baja.ui.event.BKeyEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.fireKeyEvent(javax.baja.ui.event.BKeyEvent) -->
<method name="fireKeyEvent"  public="true">
<description>
Fire an event for the &lt;code&gt;inputMethod&lt;/code&gt; topic.&#xa; This call first routes the event to one the widget&#xa; keyX(BKeyEvent) callbacks, then fires it for any&#xa; potential links.
</description>
<tag name="@see">javax.baja.ui.BWidget#keyEvent</tag>
<parameter name="event">
<type class="javax.baja.ui.event.BKeyEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.mousePressed(javax.baja.ui.event.BMouseEvent) -->
<method name="mousePressed"  public="true">
<description>
Route to TextController.
</description>
<parameter name="event">
<type class="javax.baja.ui.event.BMouseEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.mouseReleased(javax.baja.ui.event.BMouseEvent) -->
<method name="mouseReleased"  public="true">
<description>
Route to TextController.
</description>
<parameter name="event">
<type class="javax.baja.ui.event.BMouseEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.mouseEntered(javax.baja.ui.event.BMouseEvent) -->
<method name="mouseEntered"  public="true">
<description>
Route to TextController.
</description>
<parameter name="event">
<type class="javax.baja.ui.event.BMouseEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.mouseExited(javax.baja.ui.event.BMouseEvent) -->
<method name="mouseExited"  public="true">
<description>
Route to TextController.
</description>
<parameter name="event">
<type class="javax.baja.ui.event.BMouseEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.mouseMoved(javax.baja.ui.event.BMouseEvent) -->
<method name="mouseMoved"  public="true">
<description>
Route to TextController.
</description>
<parameter name="event">
<type class="javax.baja.ui.event.BMouseEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.mouseDragged(javax.baja.ui.event.BMouseEvent) -->
<method name="mouseDragged"  public="true">
<description>
Route to TextController.
</description>
<parameter name="event">
<type class="javax.baja.ui.event.BMouseEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.mousePulsed(javax.baja.ui.event.BMouseEvent) -->
<method name="mousePulsed"  public="true">
<description>
Route to TextController.
</description>
<parameter name="event">
<type class="javax.baja.ui.event.BMouseEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.changed(javax.baja.sys.Property, javax.baja.sys.Context) -->
<method name="changed"  public="true">
<description/>
<parameter name="prop">
<type class="javax.baja.sys.Property"/>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.updateEnableStates() -->
<method name="updateEnableStates"  public="true">
<description>
Update enable states.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.updateAnchorX() -->
<method name="updateAnchorX"  public="true">
<description>
Updates the text editor&#x27;s current &#x22;anchor&#x22; X position, based on the&#xa; current caret position. Once the anchor is updated, navigating through&#xa; the text editor by pressing up/down/pgup/pgdown will try to stay as close&#xa; to this X position as it can. Prevents the caret from slamming hard left&#xa; when navigating past empty lines, for instance.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.updateAnchorX(javax.baja.ui.text.Position) -->
<method name="updateAnchorX"  public="true">
<description>
Updates the text editor&#x27;s current &#x22;anchor&#x22; X position based on the&#xa; given Position (column/line).
</description>
<tag name="@see">javax.baja.ui.text.BTextEditor#updateAnchorX()</tag>
<parameter name="newPos">
<type class="javax.baja.ui.text.Position"/>
<description/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.doFind() -->
<method name="doFind"  public="true">
<description/>
<return>
<type class="javax.baja.ui.CommandArtifact"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.ui.text.BTextEditor.doFindPrev() -->
<method name="doFindPrev"  public="true">
<description/>
<return>
<type class="javax.baja.ui.CommandArtifact"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.ui.text.BTextEditor.doFindNext() -->
<method name="doFindNext"  public="true">
<description/>
<return>
<type class="javax.baja.ui.CommandArtifact"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.ui.text.BTextEditor.doReplace() -->
<method name="doReplace"  public="true">
<description/>
<return>
<type class="javax.baja.ui.CommandArtifact"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.ui.text.BTextEditor.doGoto() -->
<method name="doGoto"  public="true">
<description/>
<return>
<type class="javax.baja.ui.CommandArtifact"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.ui.text.BTextEditor.doDelete() -->
<method name="doDelete"  public="true">
<description>
Handle transfer delete command.
</description>
<return>
<type class="javax.baja.ui.CommandArtifact"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.ui.text.BTextEditor.getTransferData() -->
<method name="getTransferData"  public="true">
<description>
Get the selection as transfer data.
</description>
<return>
<type class="javax.baja.ui.transfer.TransferEnvelope"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.ui.text.BTextEditor.removeTransferData(javax.baja.ui.transfer.TransferContext) -->
<method name="removeTransferData"  public="true">
<description>
Remove the selected text and return artifact.
</description>
<parameter name="cx">
<type class="javax.baja.ui.transfer.TransferContext"/>
</parameter>
<return>
<type class="javax.baja.ui.CommandArtifact"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.ui.text.BTextEditor.insertTransferData(javax.baja.ui.transfer.TransferContext) -->
<method name="insertTransferData"  public="true">
<description>
Insert the specified text into the editor.
</description>
<parameter name="cx">
<type class="javax.baja.ui.transfer.TransferContext"/>
</parameter>
<return>
<type class="javax.baja.ui.CommandArtifact"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.ui.text.BTextEditor.getIcon() -->
<method name="getIcon"  public="true">
<description>
Get the icon.
</description>
<return>
<type class="javax.baja.sys.BIcon"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.getInstalledUndoManager() -->
<method name="getInstalledUndoManager"  public="true">
<description>
Get the UndoManager for this shell.
</description>
<return>
<type class="javax.baja.ui.UndoManager"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.setInstalledUndoManager(javax.baja.ui.UndoManager) -->
<method name="setInstalledUndoManager"  public="true">
<description>
Set the UndoManager for this shell.
</description>
<parameter name="undoManager">
<type class="javax.baja.ui.UndoManager"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.text.BTextEditor.editable -->
<field name="editable"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;editable&lt;/code&gt; property.&#xa; If editable is true then the text may be modified,&#xa; or if false the text is readonly.
</description>
<tag name="@see">#getEditable</tag>
<tag name="@see">#setEditable</tag>
</field>

<!-- javax.baja.ui.text.BTextEditor.textModified -->
<field name="textModified"  public="true" static="true" final="true">
<type class="javax.baja.sys.Topic"/>
<description>
Slot for the &lt;code&gt;textModified&lt;/code&gt; topic.&#xa; Fired when the text model is modified.
</description>
<tag name="@see">#fireTextModified</tag>
</field>

<!-- javax.baja.ui.text.BTextEditor.selectionModified -->
<field name="selectionModified"  public="true" static="true" final="true">
<type class="javax.baja.sys.Topic"/>
<description>
Slot for the &lt;code&gt;selectionModified&lt;/code&gt; topic.&#xa; Fired when the text selection is modified.
</description>
<tag name="@see">#fireSelectionModified</tag>
</field>

<!-- javax.baja.ui.text.BTextEditor.inputMethodEvent -->
<field name="inputMethodEvent"  public="true" static="true" final="true">
<type class="javax.baja.sys.Topic"/>
<description>
Slot for the &lt;code&gt;inputMethodEvent&lt;/code&gt; topic.&#xa; This method runs here, then fires it for any&#xa; potential links.
</description>
<tag name="@see">#fireInputMethodEvent</tag>
</field>

<!-- javax.baja.ui.text.BTextEditor.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
