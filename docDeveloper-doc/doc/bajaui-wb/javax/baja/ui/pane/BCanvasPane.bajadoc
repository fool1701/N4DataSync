<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="bajaui" runtimeProfile="wb" qualifiedName="javax.baja.ui.pane.BCanvasPane" name="BCanvasPane" packageName="javax.baja.ui.pane" public="true">
<description>
BCanvasPane is commonly used to provide absolute layout using&#xa; BLayout for most BWidgets and BGeom for BShapes.  BCanvasPane also&#xa; provides support for scaling and/or aligning its contents.
</description>
<tag name="@author">Brian Frank on 19 Nov 00</tag>
<tag name="@version">$Revision: 18$ $Date: 2/4/08 10:12:33 AM EST$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="javax.baja.ui.pane.BPane"/>
</extends>
<property name="viewSize" flags="">
<type class="javax.baja.gx.BSize"/>
<description>
Slot for the &lt;code&gt;viewSize&lt;/code&gt; property.&#xa; View size specifies the logical size of the&#xa; pane&#x27;s coordinate system.
</description>
<tag name="@see">#getViewSize</tag>
<tag name="@see">#setViewSize</tag>
</property>

<property name="scale" flags="">
<type class="javax.baja.ui.enums.BScaleMode"/>
<description>
Slot for the &lt;code&gt;scale&lt;/code&gt; property.&#xa; Specifies if/how to scale the viewSize to fit the pane&#x27;s bounds.
</description>
<tag name="@see">#getScale</tag>
<tag name="@see">#setScale</tag>
</property>

<property name="minScaleFactor" flags="">
<type class="double"/>
<description>
Slot for the &lt;code&gt;minScaleFactor&lt;/code&gt; property.&#xa; When BScaleMode of fitRatio is used, a non-zero value specifies the limit for the zoom level.&#xa; Note that a ScrollPane must be be in the directly  ancestry of the BCanvasPane with only BBorderPanes allowed in between.
</description>
<tag name="@see">#getMinScaleFactor</tag>
<tag name="@see">#setMinScaleFactor</tag>
</property>

<property name="maxScaleFactor" flags="">
<type class="double"/>
<description>
Slot for the &lt;code&gt;maxScaleFactor&lt;/code&gt; property.&#xa; When BScaleMode of fitRatio is used, a non-zero value specifies the limit for the zoom level.
</description>
<tag name="@see">#getMaxScaleFactor</tag>
<tag name="@see">#setMaxScaleFactor</tag>
</property>

<property name="halign" flags="">
<type class="javax.baja.ui.enums.BHalign"/>
<description>
Slot for the &lt;code&gt;halign&lt;/code&gt; property.&#xa; Defines how to align the view box horizontally.
</description>
<tag name="@see">#getHalign</tag>
<tag name="@see">#setHalign</tag>
</property>

<property name="valign" flags="">
<type class="javax.baja.ui.enums.BValign"/>
<description>
Slot for the &lt;code&gt;valign&lt;/code&gt; property.&#xa; Defines how to align the view box vertically.
</description>
<tag name="@see">#getValign</tag>
<tag name="@see">#setValign</tag>
</property>

<property name="background" flags="">
<type class="javax.baja.gx.BBrush"/>
<description>
Slot for the &lt;code&gt;background&lt;/code&gt; property.&#xa; Specifies how the pane&#x27;s background is painted.  Background&#xa; encompasses the pane&#x27;s bounds, not it&#x27;s view box.
</description>
<tag name="@see">#getBackground</tag>
<tag name="@see">#setBackground</tag>
</property>

<!-- javax.baja.ui.pane.BCanvasPane() -->
<constructor name="BCanvasPane" public="true">
<description/>
</constructor>

<!-- javax.baja.ui.pane.BCanvasPane.getViewSize() -->
<method name="getViewSize"  public="true">
<description>
Get the &lt;code&gt;viewSize&lt;/code&gt; property.&#xa; View size specifies the logical size of the&#xa; pane&#x27;s coordinate system.
</description>
<tag name="@see">#viewSize</tag>
<return>
<type class="javax.baja.gx.BSize"/>
</return>
</method>

<!-- javax.baja.ui.pane.BCanvasPane.setViewSize(javax.baja.gx.BSize) -->
<method name="setViewSize"  public="true">
<description>
Set the &lt;code&gt;viewSize&lt;/code&gt; property.&#xa; View size specifies the logical size of the&#xa; pane&#x27;s coordinate system.
</description>
<tag name="@see">#viewSize</tag>
<parameter name="v">
<type class="javax.baja.gx.BSize"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.pane.BCanvasPane.getScale() -->
<method name="getScale"  public="true">
<description>
Get the &lt;code&gt;scale&lt;/code&gt; property.&#xa; Specifies if/how to scale the viewSize to fit the pane&#x27;s bounds.
</description>
<tag name="@see">#scale</tag>
<return>
<type class="javax.baja.ui.enums.BScaleMode"/>
</return>
</method>

<!-- javax.baja.ui.pane.BCanvasPane.setScale(javax.baja.ui.enums.BScaleMode) -->
<method name="setScale"  public="true">
<description>
Set the &lt;code&gt;scale&lt;/code&gt; property.&#xa; Specifies if/how to scale the viewSize to fit the pane&#x27;s bounds.
</description>
<tag name="@see">#scale</tag>
<parameter name="v">
<type class="javax.baja.ui.enums.BScaleMode"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.pane.BCanvasPane.getMinScaleFactor() -->
<method name="getMinScaleFactor"  public="true">
<description>
Get the &lt;code&gt;minScaleFactor&lt;/code&gt; property.&#xa; When BScaleMode of fitRatio is used, a non-zero value specifies the limit for the zoom level.&#xa; Note that a ScrollPane must be be in the directly  ancestry of the BCanvasPane with only BBorderPanes allowed in between.
</description>
<tag name="@see">#minScaleFactor</tag>
<return>
<type class="double"/>
</return>
</method>

<!-- javax.baja.ui.pane.BCanvasPane.setMinScaleFactor(double) -->
<method name="setMinScaleFactor"  public="true">
<description>
Set the &lt;code&gt;minScaleFactor&lt;/code&gt; property.&#xa; When BScaleMode of fitRatio is used, a non-zero value specifies the limit for the zoom level.&#xa; Note that a ScrollPane must be be in the directly  ancestry of the BCanvasPane with only BBorderPanes allowed in between.
</description>
<tag name="@see">#minScaleFactor</tag>
<parameter name="v">
<type class="double"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.pane.BCanvasPane.getMaxScaleFactor() -->
<method name="getMaxScaleFactor"  public="true">
<description>
Get the &lt;code&gt;maxScaleFactor&lt;/code&gt; property.&#xa; When BScaleMode of fitRatio is used, a non-zero value specifies the limit for the zoom level.
</description>
<tag name="@see">#maxScaleFactor</tag>
<return>
<type class="double"/>
</return>
</method>

<!-- javax.baja.ui.pane.BCanvasPane.setMaxScaleFactor(double) -->
<method name="setMaxScaleFactor"  public="true">
<description>
Set the &lt;code&gt;maxScaleFactor&lt;/code&gt; property.&#xa; When BScaleMode of fitRatio is used, a non-zero value specifies the limit for the zoom level.
</description>
<tag name="@see">#maxScaleFactor</tag>
<parameter name="v">
<type class="double"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.pane.BCanvasPane.getHalign() -->
<method name="getHalign"  public="true">
<description>
Get the &lt;code&gt;halign&lt;/code&gt; property.&#xa; Defines how to align the view box horizontally.
</description>
<tag name="@see">#halign</tag>
<return>
<type class="javax.baja.ui.enums.BHalign"/>
</return>
</method>

<!-- javax.baja.ui.pane.BCanvasPane.setHalign(javax.baja.ui.enums.BHalign) -->
<method name="setHalign"  public="true">
<description>
Set the &lt;code&gt;halign&lt;/code&gt; property.&#xa; Defines how to align the view box horizontally.
</description>
<tag name="@see">#halign</tag>
<parameter name="v">
<type class="javax.baja.ui.enums.BHalign"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.pane.BCanvasPane.getValign() -->
<method name="getValign"  public="true">
<description>
Get the &lt;code&gt;valign&lt;/code&gt; property.&#xa; Defines how to align the view box vertically.
</description>
<tag name="@see">#valign</tag>
<return>
<type class="javax.baja.ui.enums.BValign"/>
</return>
</method>

<!-- javax.baja.ui.pane.BCanvasPane.setValign(javax.baja.ui.enums.BValign) -->
<method name="setValign"  public="true">
<description>
Set the &lt;code&gt;valign&lt;/code&gt; property.&#xa; Defines how to align the view box vertically.
</description>
<tag name="@see">#valign</tag>
<parameter name="v">
<type class="javax.baja.ui.enums.BValign"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.pane.BCanvasPane.getBackground() -->
<method name="getBackground"  public="true">
<description>
Get the &lt;code&gt;background&lt;/code&gt; property.&#xa; Specifies how the pane&#x27;s background is painted.  Background&#xa; encompasses the pane&#x27;s bounds, not it&#x27;s view box.
</description>
<tag name="@see">#background</tag>
<return>
<type class="javax.baja.gx.BBrush"/>
</return>
</method>

<!-- javax.baja.ui.pane.BCanvasPane.setBackground(javax.baja.gx.BBrush) -->
<method name="setBackground"  public="true">
<description>
Set the &lt;code&gt;background&lt;/code&gt; property.&#xa; Specifies how the pane&#x27;s background is painted.  Background&#xa; encompasses the pane&#x27;s bounds, not it&#x27;s view box.
</description>
<tag name="@see">#background</tag>
<parameter name="v">
<type class="javax.baja.gx.BBrush"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.pane.BCanvasPane.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.ui.pane.BCanvasPane.computePreferredSize() -->
<method name="computePreferredSize"  public="true">
<description>
The preferred size is the viewSize scaled to the containing ScrollPane.&#xa; This scaling will be performed even if the shell manager disallows&#xa; scaling transforms (e.g. Hx). If not contained in a ScrollPane, the&#xa; preferred size is the size of the viewSize itself with no scaling&#xa; applied.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.pane.BCanvasPane.doLayout(javax.baja.ui.BWidget[]) -->
<method name="doLayout"  public="true">
<description>
Calculate the scaling and translation needed to have the view respect the&#xa; configured dimensions, alignment, and scale mode.
</description>
<parameter name="kids">
<type class="javax.baja.ui.BWidget" dimension="1"/>
<description>
child widgets
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.pane.BCanvasPane.childAt(javax.baja.gx.Point) -->
<method name="childAt"  public="true">
<description/>
<parameter name="pt">
<type class="javax.baja.gx.Point"/>
</parameter>
<return>
<type class="javax.baja.ui.BWidget"/>
</return>
</method>

<!-- javax.baja.ui.pane.BCanvasPane.childrenAt(javax.baja.gx.Point) -->
<method name="childrenAt"  public="true">
<description>
Get the immediate children of this widget which&#xa; are located at the specified coordinates relative&#xa; to this widget&#x27;s coordindate space.  This method&#xa; automatically excludes all children widgets which&#xa; are not visible regardless of their current bounds.
</description>
<parameter name="pt">
<type class="javax.baja.gx.Point"/>
<description>
point in this widget&#x27;s coordinate&#xa;    system.  The point is not guaranteed to&#xa;    remain immutable.
</description>
</parameter>
<return>
<type class="javax.baja.ui.BWidget" dimension="1"/>
<description>
null if no immediate children&#xa;    contain the specified point.
</description>
</return>
</method>

<!-- javax.baja.ui.pane.BCanvasPane.translateToChild(javax.baja.ui.BWidget, javax.baja.gx.Point) -->
<method name="translateToChild"  public="true">
<description/>
<parameter name="child">
<type class="javax.baja.ui.BWidget"/>
</parameter>
<parameter name="pt">
<type class="javax.baja.gx.Point"/>
</parameter>
<return>
<type class="javax.baja.gx.Point"/>
</return>
</method>

<!-- javax.baja.ui.pane.BCanvasPane.translateFromChild(javax.baja.ui.BWidget, javax.baja.gx.Point) -->
<method name="translateFromChild"  public="true">
<description/>
<parameter name="child">
<type class="javax.baja.ui.BWidget"/>
</parameter>
<parameter name="pt">
<type class="javax.baja.gx.Point"/>
</parameter>
<return>
<type class="javax.baja.gx.Point"/>
</return>
</method>

<!-- javax.baja.ui.pane.BCanvasPane.paint(javax.baja.gx.Graphics) -->
<method name="paint"  public="true">
<description/>
<parameter name="g">
<type class="javax.baja.gx.Graphics"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.pane.BCanvasPane.paintKids(javax.baja.gx.Graphics, boolean) -->
<method name="paintKids"  protected="true">
<annotation><type class="java.lang.SuppressWarnings"/>
<elementValue name="value">
<annotationValue kind="array">
<elementArray>
<annotationValue kind="expr">
<expression>&#x22;WeakerAccess&#x22;</expression>
</annotationValue>
</elementArray>
</annotationValue>
</elementValue>
</annotation>
<description>
paintKids
</description>
<parameter name="g">
<type class="javax.baja.gx.Graphics"/>
</parameter>
<parameter name="hatch">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.pane.BCanvasPane.fw(int, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object) -->
<method name="fw"  public="true">
<description>
Framework support access; this method should&#xa; never be used by developers.
</description>
<parameter name="x">
<type class="int"/>
</parameter>
<parameter name="a">
<type class="java.lang.Object"/>
</parameter>
<parameter name="b">
<type class="java.lang.Object"/>
</parameter>
<parameter name="c">
<type class="java.lang.Object"/>
</parameter>
<parameter name="d">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="java.lang.Object"/>
</return>
</method>

<!-- javax.baja.ui.pane.BCanvasPane.getIcon() -->
<method name="getIcon"  public="true">
<description/>
<return>
<type class="javax.baja.sys.BIcon"/>
</return>
</method>

<!-- javax.baja.ui.pane.BCanvasPane.getScaleTransform() -->
<method name="getScaleTransform"  public="true">
<description/>
<return>
<type class="javax.baja.gx.BTransform"/>
</return>
</method>

<!-- javax.baja.ui.pane.BCanvasPane.viewSize -->
<field name="viewSize"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;viewSize&lt;/code&gt; property.&#xa; View size specifies the logical size of the&#xa; pane&#x27;s coordinate system.
</description>
<tag name="@see">#getViewSize</tag>
<tag name="@see">#setViewSize</tag>
</field>

<!-- javax.baja.ui.pane.BCanvasPane.scale -->
<field name="scale"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;scale&lt;/code&gt; property.&#xa; Specifies if/how to scale the viewSize to fit the pane&#x27;s bounds.
</description>
<tag name="@see">#getScale</tag>
<tag name="@see">#setScale</tag>
</field>

<!-- javax.baja.ui.pane.BCanvasPane.minScaleFactor -->
<field name="minScaleFactor"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;minScaleFactor&lt;/code&gt; property.&#xa; When BScaleMode of fitRatio is used, a non-zero value specifies the limit for the zoom level.&#xa; Note that a ScrollPane must be be in the directly  ancestry of the BCanvasPane with only BBorderPanes allowed in between.
</description>
<tag name="@see">#getMinScaleFactor</tag>
<tag name="@see">#setMinScaleFactor</tag>
</field>

<!-- javax.baja.ui.pane.BCanvasPane.maxScaleFactor -->
<field name="maxScaleFactor"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;maxScaleFactor&lt;/code&gt; property.&#xa; When BScaleMode of fitRatio is used, a non-zero value specifies the limit for the zoom level.
</description>
<tag name="@see">#getMaxScaleFactor</tag>
<tag name="@see">#setMaxScaleFactor</tag>
</field>

<!-- javax.baja.ui.pane.BCanvasPane.halign -->
<field name="halign"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;halign&lt;/code&gt; property.&#xa; Defines how to align the view box horizontally.
</description>
<tag name="@see">#getHalign</tag>
<tag name="@see">#setHalign</tag>
</field>

<!-- javax.baja.ui.pane.BCanvasPane.valign -->
<field name="valign"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;valign&lt;/code&gt; property.&#xa; Defines how to align the view box vertically.
</description>
<tag name="@see">#getValign</tag>
<tag name="@see">#setValign</tag>
</field>

<!-- javax.baja.ui.pane.BCanvasPane.background -->
<field name="background"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;background&lt;/code&gt; property.&#xa; Specifies how the pane&#x27;s background is painted.  Background&#xa; encompasses the pane&#x27;s bounds, not it&#x27;s view box.
</description>
<tag name="@see">#getBackground</tag>
<tag name="@see">#setBackground</tag>
</field>

<!-- javax.baja.ui.pane.BCanvasPane.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

<!-- javax.baja.ui.pane.BCanvasPane.overrideClip -->
<field name="overrideClip"  public="true">
<type class="boolean"/>
<description/>
</field>

</class>
</bajadoc>
