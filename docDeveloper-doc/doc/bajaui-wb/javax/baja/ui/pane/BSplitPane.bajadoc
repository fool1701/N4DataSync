<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="bajaui" runtimeProfile="wb" qualifiedName="javax.baja.ui.pane.BSplitPane" name="BSplitPane" packageName="javax.baja.ui.pane" public="true">
<description>
BSplitPane is a pane with a divider between two child widgets.&#xa; The children can be laid out horizontally or vertically.
</description>
<tag name="@author">John Sublett</tag>
<tag name="@creation">11 Dec 2000</tag>
<tag name="@version">$Revision: 53$ $Date: 7/8/11 3:52:59 PM EDT$</tag>
<tag name="@since">Niagara 1.0</tag>
<extends>
<type class="javax.baja.ui.pane.BPane"/>
</extends>
<property name="widget1" flags="">
<type class="javax.baja.ui.BWidget"/>
<description>
Slot for the &lt;code&gt;widget1&lt;/code&gt; property.&#xa; the left or top
</description>
<tag name="@see">#getWidget1</tag>
<tag name="@see">#setWidget1</tag>
</property>

<property name="widget2" flags="">
<type class="javax.baja.ui.BWidget"/>
<description>
Slot for the &lt;code&gt;widget2&lt;/code&gt; property.&#xa; the right or bottom
</description>
<tag name="@see">#getWidget2</tag>
<tag name="@see">#setWidget2</tag>
</property>

<property name="dividerWidth" flags="">
<type class="double"/>
<description>
Slot for the &lt;code&gt;dividerWidth&lt;/code&gt; property.&#xa; the number of pixels which separate widget1 and widget2
</description>
<tag name="@see">#getDividerWidth</tag>
<tag name="@see">#setDividerWidth</tag>
</property>

<property name="moveableDivider" flags="">
<type class="boolean"/>
<description>
Slot for the &lt;code&gt;moveableDivider&lt;/code&gt; property.&#xa; If true, then the divider is moveable.  If false, then it&#xa; it is not.
</description>
<tag name="@see">#getMoveableDivider</tag>
<tag name="@see">#setMoveableDivider</tag>
</property>

<property name="dividerPosition" flags="">
<type class="double"/>
<description>
Slot for the &lt;code&gt;dividerPosition&lt;/code&gt; property.&#xa; The divider position as a percentage of the display area.&#xa; For example, a value of 50 places the divider in the&#xa; center of the display area.
</description>
<tag name="@see">#getDividerPosition</tag>
<tag name="@see">#setDividerPosition</tag>
</property>

<property name="orientation" flags="">
<type class="javax.baja.ui.enums.BOrientation"/>
<description>
Slot for the &lt;code&gt;orientation&lt;/code&gt; property.&#xa; If orientation is horizontal, widget1 will be on the left&#xa; and widget2 will be on the right.  If orientation is vertical,&#xa; widget1 will be on the top and widget2 will be on the bottom.
</description>
<tag name="@see">#getOrientation</tag>
<tag name="@see">#setOrientation</tag>
</property>

<property name="continuousLayout" flags="">
<type class="boolean"/>
<description>
Slot for the &lt;code&gt;continuousLayout&lt;/code&gt; property.&#xa; Indicates whether the child widget layouts should be updated&#xa; as the divider is moved or only after the move is complete.&#xa; If continuous, the child widgets are updated as the divider&#xa; is moved.
</description>
<tag name="@see">#getContinuousLayout</tag>
<tag name="@see">#setContinuousLayout</tag>
</property>

<topic name="dividerMoved" flags="">
<eventType>
<type class="javax.baja.ui.event.BWidgetEvent"/>
</eventType><description>
Slot for the &lt;code&gt;dividerMoved&lt;/code&gt; topic.&#xa; Fired when the divider is moved with the mouse.
</description>
<tag name="@see">#fireDividerMoved</tag>
</topic>

<!-- javax.baja.ui.pane.BSplitPane(javax.baja.ui.enums.BOrientation, double) -->
<constructor name="BSplitPane" public="true">
<parameter name="orientation">
<type class="javax.baja.ui.enums.BOrientation"/>
</parameter>
<parameter name="dividerPosition">
<type class="double"/>
</parameter>
<description>
Constructor with orientation.
</description>
</constructor>

<!-- javax.baja.ui.pane.BSplitPane(javax.baja.ui.BWidget, javax.baja.ui.BWidget) -->
<constructor name="BSplitPane" public="true">
<parameter name="widget1">
<type class="javax.baja.ui.BWidget"/>
</parameter>
<parameter name="widget2">
<type class="javax.baja.ui.BWidget"/>
</parameter>
<description>
Constructor with widgets.
</description>
</constructor>

<!-- javax.baja.ui.pane.BSplitPane() -->
<constructor name="BSplitPane" public="true">
<description>
No arg constructor.
</description>
</constructor>

<!-- javax.baja.ui.pane.BSplitPane.getWidget1() -->
<method name="getWidget1"  public="true">
<description>
Get the &lt;code&gt;widget1&lt;/code&gt; property.&#xa; the left or top
</description>
<tag name="@see">#widget1</tag>
<return>
<type class="javax.baja.ui.BWidget"/>
</return>
</method>

<!-- javax.baja.ui.pane.BSplitPane.setWidget1(javax.baja.ui.BWidget) -->
<method name="setWidget1"  public="true">
<description>
Set the &lt;code&gt;widget1&lt;/code&gt; property.&#xa; the left or top
</description>
<tag name="@see">#widget1</tag>
<parameter name="v">
<type class="javax.baja.ui.BWidget"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.pane.BSplitPane.getWidget2() -->
<method name="getWidget2"  public="true">
<description>
Get the &lt;code&gt;widget2&lt;/code&gt; property.&#xa; the right or bottom
</description>
<tag name="@see">#widget2</tag>
<return>
<type class="javax.baja.ui.BWidget"/>
</return>
</method>

<!-- javax.baja.ui.pane.BSplitPane.setWidget2(javax.baja.ui.BWidget) -->
<method name="setWidget2"  public="true">
<description>
Set the &lt;code&gt;widget2&lt;/code&gt; property.&#xa; the right or bottom
</description>
<tag name="@see">#widget2</tag>
<parameter name="v">
<type class="javax.baja.ui.BWidget"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.pane.BSplitPane.getDividerWidth() -->
<method name="getDividerWidth"  public="true">
<description>
Get the &lt;code&gt;dividerWidth&lt;/code&gt; property.&#xa; the number of pixels which separate widget1 and widget2
</description>
<tag name="@see">#dividerWidth</tag>
<return>
<type class="double"/>
</return>
</method>

<!-- javax.baja.ui.pane.BSplitPane.setDividerWidth(double) -->
<method name="setDividerWidth"  public="true">
<description>
Set the &lt;code&gt;dividerWidth&lt;/code&gt; property.&#xa; the number of pixels which separate widget1 and widget2
</description>
<tag name="@see">#dividerWidth</tag>
<parameter name="v">
<type class="double"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.pane.BSplitPane.getMoveableDivider() -->
<method name="getMoveableDivider"  public="true">
<description>
Get the &lt;code&gt;moveableDivider&lt;/code&gt; property.&#xa; If true, then the divider is moveable.  If false, then it&#xa; it is not.
</description>
<tag name="@see">#moveableDivider</tag>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.ui.pane.BSplitPane.setMoveableDivider(boolean) -->
<method name="setMoveableDivider"  public="true">
<description>
Set the &lt;code&gt;moveableDivider&lt;/code&gt; property.&#xa; If true, then the divider is moveable.  If false, then it&#xa; it is not.
</description>
<tag name="@see">#moveableDivider</tag>
<parameter name="v">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.pane.BSplitPane.getDividerPosition() -->
<method name="getDividerPosition"  public="true">
<description>
Get the &lt;code&gt;dividerPosition&lt;/code&gt; property.&#xa; The divider position as a percentage of the display area.&#xa; For example, a value of 50 places the divider in the&#xa; center of the display area.
</description>
<tag name="@see">#dividerPosition</tag>
<return>
<type class="double"/>
</return>
</method>

<!-- javax.baja.ui.pane.BSplitPane.setDividerPosition(double) -->
<method name="setDividerPosition"  public="true">
<description>
Set the &lt;code&gt;dividerPosition&lt;/code&gt; property.&#xa; The divider position as a percentage of the display area.&#xa; For example, a value of 50 places the divider in the&#xa; center of the display area.
</description>
<tag name="@see">#dividerPosition</tag>
<parameter name="v">
<type class="double"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.pane.BSplitPane.getOrientation() -->
<method name="getOrientation"  public="true">
<description>
Get the &lt;code&gt;orientation&lt;/code&gt; property.&#xa; If orientation is horizontal, widget1 will be on the left&#xa; and widget2 will be on the right.  If orientation is vertical,&#xa; widget1 will be on the top and widget2 will be on the bottom.
</description>
<tag name="@see">#orientation</tag>
<return>
<type class="javax.baja.ui.enums.BOrientation"/>
</return>
</method>

<!-- javax.baja.ui.pane.BSplitPane.setOrientation(javax.baja.ui.enums.BOrientation) -->
<method name="setOrientation"  public="true">
<description>
Set the &lt;code&gt;orientation&lt;/code&gt; property.&#xa; If orientation is horizontal, widget1 will be on the left&#xa; and widget2 will be on the right.  If orientation is vertical,&#xa; widget1 will be on the top and widget2 will be on the bottom.
</description>
<tag name="@see">#orientation</tag>
<parameter name="v">
<type class="javax.baja.ui.enums.BOrientation"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.pane.BSplitPane.getContinuousLayout() -->
<method name="getContinuousLayout"  public="true">
<description>
Get the &lt;code&gt;continuousLayout&lt;/code&gt; property.&#xa; Indicates whether the child widget layouts should be updated&#xa; as the divider is moved or only after the move is complete.&#xa; If continuous, the child widgets are updated as the divider&#xa; is moved.
</description>
<tag name="@see">#continuousLayout</tag>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.ui.pane.BSplitPane.setContinuousLayout(boolean) -->
<method name="setContinuousLayout"  public="true">
<description>
Set the &lt;code&gt;continuousLayout&lt;/code&gt; property.&#xa; Indicates whether the child widget layouts should be updated&#xa; as the divider is moved or only after the move is complete.&#xa; If continuous, the child widgets are updated as the divider&#xa; is moved.
</description>
<tag name="@see">#continuousLayout</tag>
<parameter name="v">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.pane.BSplitPane.fireDividerMoved(javax.baja.ui.event.BWidgetEvent) -->
<method name="fireDividerMoved"  public="true">
<description>
Fire an event for the &lt;code&gt;dividerMoved&lt;/code&gt; topic.&#xa; Fired when the divider is moved with the mouse.
</description>
<tag name="@see">#dividerMoved</tag>
<parameter name="event">
<type class="javax.baja.ui.event.BWidgetEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.pane.BSplitPane.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.ui.pane.BSplitPane.getAbsoluteDividerLocation() -->
<method name="getAbsoluteDividerLocation"  public="true">
<description>
Get the absolute divider location.  This method&#xa; is only valid after the pane has been laid out.
</description>
<return>
<type class="double"/>
</return>
</method>

<!-- javax.baja.ui.pane.BSplitPane.setAbsoluteDividerLocation(double) -->
<method name="setAbsoluteDividerLocation"  public="true">
<description>
Set the absolute divider location.  This method&#xa; is only valid after the pane has been laid out.
</description>
<parameter name="loc">
<type class="double"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.pane.BSplitPane.childCalledRelayout(javax.baja.ui.BWidget) -->
<method name="childCalledRelayout"  public="true">
<description>
Short circuit the relayout because the split pane&#xa; layout doesn&#x27;t depend on its children.
</description>
<parameter name="child">
<type class="javax.baja.ui.BWidget"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.pane.BSplitPane.computePreferredSize() -->
<method name="computePreferredSize"  public="true">
<description>
Compute the preferred size of the pane.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.pane.BSplitPane.doLayout(javax.baja.ui.BWidget[]) -->
<method name="doLayout"  public="true">
<description>
Layout the pane.
</description>
<parameter name="kids">
<type class="javax.baja.ui.BWidget" dimension="1"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.pane.BSplitPane.paint(javax.baja.gx.Graphics) -->
<method name="paint"  public="true">
<description/>
<parameter name="g">
<type class="javax.baja.gx.Graphics"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.pane.BSplitPane.childAt(javax.baja.gx.Point) -->
<method name="childAt"  public="true">
<description>
Get the child at the specified point.  Children are not&#xa; exposed during a drag.
</description>
<parameter name="pt">
<type class="javax.baja.gx.Point"/>
</parameter>
<return>
<type class="javax.baja.ui.BWidget"/>
</return>
</method>

<!-- javax.baja.ui.pane.BSplitPane.getStyleSelector() -->
<method name="getStyleSelector"  public="true">
<description/>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.ui.pane.BSplitPane.mouseEntered(javax.baja.ui.event.BMouseEvent) -->
<method name="mouseEntered"  public="true">
<description>
Handle a mouse entry.
</description>
<parameter name="evt">
<type class="javax.baja.ui.event.BMouseEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.pane.BSplitPane.mouseExited(javax.baja.ui.event.BMouseEvent) -->
<method name="mouseExited"  public="true">
<description>
Handle a mouse exit.
</description>
<parameter name="evt">
<type class="javax.baja.ui.event.BMouseEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.pane.BSplitPane.mousePressed(javax.baja.ui.event.BMouseEvent) -->
<method name="mousePressed"  public="true">
<description>
Handle a mouse press.
</description>
<parameter name="evt">
<type class="javax.baja.ui.event.BMouseEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.pane.BSplitPane.mouseReleased(javax.baja.ui.event.BMouseEvent) -->
<method name="mouseReleased"  public="true">
<description>
Handle a mouse release.
</description>
<parameter name="evt">
<type class="javax.baja.ui.event.BMouseEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.pane.BSplitPane.mouseMoved(javax.baja.ui.event.BMouseEvent) -->
<method name="mouseMoved"  public="true">
<description>
Handle a mouse move.
</description>
<parameter name="evt">
<type class="javax.baja.ui.event.BMouseEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.pane.BSplitPane.mouseDragged(javax.baja.ui.event.BMouseEvent) -->
<method name="mouseDragged"  public="true">
<description>
Handle a mouse drag.
</description>
<parameter name="evt">
<type class="javax.baja.ui.event.BMouseEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.pane.BSplitPane.fw(int, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object) -->
<method name="fw"  public="true">
<description>
Framework support access; this method should&#xa; never be used by developers.
</description>
<parameter name="x">
<type class="int"/>
</parameter>
<parameter name="a">
<type class="java.lang.Object"/>
</parameter>
<parameter name="b">
<type class="java.lang.Object"/>
</parameter>
<parameter name="c">
<type class="java.lang.Object"/>
</parameter>
<parameter name="d">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="java.lang.Object"/>
</return>
</method>

<!-- javax.baja.ui.pane.BSplitPane.getIcon() -->
<method name="getIcon"  public="true">
<description>
Get the icon.
</description>
<return>
<type class="javax.baja.sys.BIcon"/>
</return>
</method>

<!-- javax.baja.ui.pane.BSplitPane.widget1 -->
<field name="widget1"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;widget1&lt;/code&gt; property.&#xa; the left or top
</description>
<tag name="@see">#getWidget1</tag>
<tag name="@see">#setWidget1</tag>
</field>

<!-- javax.baja.ui.pane.BSplitPane.widget2 -->
<field name="widget2"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;widget2&lt;/code&gt; property.&#xa; the right or bottom
</description>
<tag name="@see">#getWidget2</tag>
<tag name="@see">#setWidget2</tag>
</field>

<!-- javax.baja.ui.pane.BSplitPane.dividerWidth -->
<field name="dividerWidth"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;dividerWidth&lt;/code&gt; property.&#xa; the number of pixels which separate widget1 and widget2
</description>
<tag name="@see">#getDividerWidth</tag>
<tag name="@see">#setDividerWidth</tag>
</field>

<!-- javax.baja.ui.pane.BSplitPane.moveableDivider -->
<field name="moveableDivider"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;moveableDivider&lt;/code&gt; property.&#xa; If true, then the divider is moveable.  If false, then it&#xa; it is not.
</description>
<tag name="@see">#getMoveableDivider</tag>
<tag name="@see">#setMoveableDivider</tag>
</field>

<!-- javax.baja.ui.pane.BSplitPane.dividerPosition -->
<field name="dividerPosition"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;dividerPosition&lt;/code&gt; property.&#xa; The divider position as a percentage of the display area.&#xa; For example, a value of 50 places the divider in the&#xa; center of the display area.
</description>
<tag name="@see">#getDividerPosition</tag>
<tag name="@see">#setDividerPosition</tag>
</field>

<!-- javax.baja.ui.pane.BSplitPane.orientation -->
<field name="orientation"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;orientation&lt;/code&gt; property.&#xa; If orientation is horizontal, widget1 will be on the left&#xa; and widget2 will be on the right.  If orientation is vertical,&#xa; widget1 will be on the top and widget2 will be on the bottom.
</description>
<tag name="@see">#getOrientation</tag>
<tag name="@see">#setOrientation</tag>
</field>

<!-- javax.baja.ui.pane.BSplitPane.continuousLayout -->
<field name="continuousLayout"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;continuousLayout&lt;/code&gt; property.&#xa; Indicates whether the child widget layouts should be updated&#xa; as the divider is moved or only after the move is complete.&#xa; If continuous, the child widgets are updated as the divider&#xa; is moved.
</description>
<tag name="@see">#getContinuousLayout</tag>
<tag name="@see">#setContinuousLayout</tag>
</field>

<!-- javax.baja.ui.pane.BSplitPane.dividerMoved -->
<field name="dividerMoved"  public="true" static="true" final="true">
<type class="javax.baja.sys.Topic"/>
<description>
Slot for the &lt;code&gt;dividerMoved&lt;/code&gt; topic.&#xa; Fired when the divider is moved with the mouse.
</description>
<tag name="@see">#fireDividerMoved</tag>
</field>

<!-- javax.baja.ui.pane.BSplitPane.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
