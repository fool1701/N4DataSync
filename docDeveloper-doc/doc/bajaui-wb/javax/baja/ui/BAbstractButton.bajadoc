<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="bajaui" runtimeProfile="wb" qualifiedName="javax.baja.ui.BAbstractButton" name="BAbstractButton" packageName="javax.baja.ui" public="true" abstract="true">
<description>
BAbstractButton provides common behavior for&#xa; the various button widgets.
</description>
<tag name="@author">Brian Frank</tag>
<tag name="@creation">17 Nov 00</tag>
<tag name="@version">$Revision: 66$ $Date: 6/21/11 11:28:52 AM EDT$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="javax.baja.ui.BLabel"/>
</extends>
<implements>
<type class="javax.baja.ui.BMenu$MenuCloseListener"/>
</implements>
<property name="focusTraversable" flags="">
<type class="boolean"/>
<description>
Slot for the &lt;code&gt;focusTraversable&lt;/code&gt; property.&#xa; This property determines if the button is&#xa; focus traversable.  By default it is true.
</description>
<tag name="@see">#getFocusTraversable</tag>
<tag name="@see">#setFocusTraversable</tag>
</property>

<property name="buttonStyle" flags="">
<type class="javax.baja.ui.enums.BButtonStyle"/>
<description>
Slot for the &lt;code&gt;buttonStyle&lt;/code&gt; property.&#xa; This property defines the style for how the&#xa; button should look and behave.
</description>
<tag name="@see">#getButtonStyle</tag>
<tag name="@see">#setButtonStyle</tag>
</property>

<action name="invokeAction" flags="">
<return>
<type class="void"/>
</return>
<description>
Slot for the &lt;code&gt;invokeAction&lt;/code&gt; action.&#xa; The programatic hook for invoking an action&#xa; which always results in the actionPerformed&#xa; topic being fired.
</description>
<tag name="@see">#invokeAction()</tag>
</action>

<!-- javax.baja.ui.BAbstractButton() -->
<constructor name="BAbstractButton" public="true">
<description/>
</constructor>

<!-- javax.baja.ui.BAbstractButton.getFocusTraversable() -->
<method name="getFocusTraversable"  public="true">
<description>
Get the &lt;code&gt;focusTraversable&lt;/code&gt; property.&#xa; This property determines if the button is&#xa; focus traversable.  By default it is true.
</description>
<tag name="@see">#focusTraversable</tag>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.ui.BAbstractButton.setFocusTraversable(boolean) -->
<method name="setFocusTraversable"  public="true">
<description>
Set the &lt;code&gt;focusTraversable&lt;/code&gt; property.&#xa; This property determines if the button is&#xa; focus traversable.  By default it is true.
</description>
<tag name="@see">#focusTraversable</tag>
<parameter name="v">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BAbstractButton.getButtonStyle() -->
<method name="getButtonStyle"  public="true">
<description>
Get the &lt;code&gt;buttonStyle&lt;/code&gt; property.&#xa; This property defines the style for how the&#xa; button should look and behave.
</description>
<tag name="@see">#buttonStyle</tag>
<return>
<type class="javax.baja.ui.enums.BButtonStyle"/>
</return>
</method>

<!-- javax.baja.ui.BAbstractButton.setButtonStyle(javax.baja.ui.enums.BButtonStyle) -->
<method name="setButtonStyle"  public="true">
<description>
Set the &lt;code&gt;buttonStyle&lt;/code&gt; property.&#xa; This property defines the style for how the&#xa; button should look and behave.
</description>
<tag name="@see">#buttonStyle</tag>
<parameter name="v">
<type class="javax.baja.ui.enums.BButtonStyle"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BAbstractButton.invokeAction() -->
<method name="invokeAction"  public="true">
<description>
Invoke the &lt;code&gt;invokeAction&lt;/code&gt; action.&#xa; The programatic hook for invoking an action&#xa; which always results in the actionPerformed&#xa; topic being fired.
</description>
<tag name="@see">#invokeAction</tag>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BAbstractButton.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.ui.BAbstractButton.make(javax.baja.ui.Command, boolean, boolean) -->
<method name="make"  public="true" static="true">
<description>
If cmd is a ToggleCommand then make a new BToggleButton&#xa; for it, otherwise make a new BButton.
</description>
<parameter name="cmd">
<type class="javax.baja.ui.Command"/>
</parameter>
<parameter name="useLabel">
<type class="boolean"/>
</parameter>
<parameter name="useIcon">
<type class="boolean"/>
</parameter>
<return>
<type class="javax.baja.ui.BAbstractButton"/>
</return>
</method>

<!-- javax.baja.ui.BAbstractButton.make(javax.baja.ui.Command) -->
<method name="make"  public="true" static="true">
<description>
Convenience for &lt;code&gt;make(cmd, true, true)&lt;/code&gt;
</description>
<parameter name="cmd">
<type class="javax.baja.ui.Command"/>
</parameter>
<return>
<type class="javax.baja.ui.BAbstractButton"/>
</return>
</method>

<!-- javax.baja.ui.BAbstractButton.isMouseOver() -->
<method name="isMouseOver"  public="true">
<description>
Return true if the mouse is currently over the button.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.ui.BAbstractButton.isPressed() -->
<method name="isPressed"  public="true">
<description>
Return true if the button is currently pressed down.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.ui.BAbstractButton.isMenuPressed() -->
<method name="isMenuPressed"  public="true">
<description>
Return true if the menu button is currently pressed down.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.ui.BAbstractButton.getLabelOffset() -->
<method name="getLabelOffset"  public="true">
<description>
Return the label offset.
</description>
<return>
<type class="javax.baja.gx.IPoint"/>
</return>
</method>

<!-- javax.baja.ui.BAbstractButton.getMenuWidth() -->
<method name="getMenuWidth"  public="true">
<description>
Reutrn the menu button width.
</description>
<return>
<type class="double"/>
</return>
</method>

<!-- javax.baja.ui.BAbstractButton.getPadding() -->
<method name="getPadding"  public="true">
<description>
Get the padding between the widget bounds&#xa; and the label bounds.
</description>
<return>
<type class="javax.baja.gx.BInsets"/>
</return>
</method>

<!-- javax.baja.ui.BAbstractButton.paintBackground(javax.baja.gx.Graphics) -->
<method name="paintBackground"  public="true">
<description>
Paint the background of the button.
</description>
<parameter name="g">
<type class="javax.baja.gx.Graphics"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BAbstractButton.getCommand() -->
<method name="getCommand"  public="true">
<description>
If the button has a command associated with &#xa; it, return the Command instance, otherwise&#xa; return null.
</description>
<return>
<type class="javax.baja.ui.Command"/>
</return>
</method>

<!-- javax.baja.ui.BAbstractButton.setCommand(javax.baja.ui.Command, boolean, boolean) -->
<method name="setCommand"  public="true">
<description>
Install the command object for this button.
</description>
<parameter name="command">
<type class="javax.baja.ui.Command"/>
</parameter>
<parameter name="useLabel">
<type class="boolean"/>
</parameter>
<parameter name="useIcon">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BAbstractButton.getMenuController() -->
<method name="getMenuController"  public="true">
<description>
Get the installed menu controller or return null.
</description>
<return>
<type class="javax.baja.ui.BAbstractButton$MenuController"/>
</return>
</method>

<!-- javax.baja.ui.BAbstractButton.setMenuController(javax.baja.ui.BAbstractButton.MenuController) -->
<method name="setMenuController"  public="true">
<description>
Set the menu controller or pass null for no menu.&#xa; When a menu controller is installed the button contains&#xa; a dropdown arrow.
</description>
<parameter name="menuController">
<type class="javax.baja.ui.BAbstractButton$MenuController"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BAbstractButton.openMenu() -->
<method name="openMenu"  public="true">
<description>
Open the menu using the menu returned from the menu controller.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BAbstractButton.openMenu(javax.baja.ui.BMenu) -->
<method name="openMenu"  public="true">
<description>
Open the menu as a drop down to this button.
</description>
<parameter name="menu">
<type class="javax.baja.ui.BMenu"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BAbstractButton.menuClosed(javax.baja.ui.BMenu) -->
<method name="menuClosed"  public="true">
<description>
If the BWidget passed to the open() method implements&#xa; this interface, then it will receive the menuClosed&#xa; callback when the BMenu is closed.
</description>
<parameter name="menu">
<type class="javax.baja.ui.BMenu"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BAbstractButton.doInvokeAction() -->
<method name="doInvokeAction"  public="true" final="true">
<description>
Convenience for &lt;code&gt;doInvokeAction(null)&lt;/code&gt;.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BAbstractButton.doInvokeAction(javax.baja.ui.CommandEvent) -->
<method name="doInvokeAction"  public="true">
<description>
This is the implementation which all action&#xa; invokes are routed to.  It can be used as a&#xa; consistent override point for catching all&#xa; programatic and user driven invocations.
</description>
<parameter name="event">
<type class="javax.baja.ui.CommandEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BAbstractButton.computePreferredSize() -->
<method name="computePreferredSize"  public="true">
<description>
Compute the preferred size of the button.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BAbstractButton.doLayout(javax.baja.ui.BWidget[]) -->
<method name="doLayout"  public="true">
<description>
Layout the button.
</description>
<parameter name="children">
<type class="javax.baja.ui.BWidget" dimension="1"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BAbstractButton.changed(javax.baja.sys.Property, javax.baja.sys.Context) -->
<method name="changed"  public="true">
<description/>
<parameter name="prop">
<type class="javax.baja.sys.Property"/>
</parameter>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BAbstractButton.paint(javax.baja.gx.Graphics) -->
<method name="paint"  public="true">
<description>
Paint the button.
</description>
<parameter name="g">
<type class="javax.baja.gx.Graphics"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BAbstractButton.getStyleSelector() -->
<method name="getStyleSelector"  public="true">
<description/>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.ui.BAbstractButton.isFocusTraversable() -->
<method name="isFocusTraversable"  public="true">
<description/>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.ui.BAbstractButton.receiveInputEvents() -->
<method name="receiveInputEvents"  public="true">
<description/>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.ui.BAbstractButton.keyPressed(javax.baja.ui.event.BKeyEvent) -->
<method name="keyPressed"  public="true">
<description/>
<parameter name="event">
<type class="javax.baja.ui.event.BKeyEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BAbstractButton.mousePressed(javax.baja.ui.event.BMouseEvent) -->
<method name="mousePressed"  public="true">
<description>
Handle mousePressed event.
</description>
<parameter name="event">
<type class="javax.baja.ui.event.BMouseEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BAbstractButton.mouseReleased(javax.baja.ui.event.BMouseEvent) -->
<method name="mouseReleased"  public="true">
<description>
Handle mouseReleased event.
</description>
<parameter name="event">
<type class="javax.baja.ui.event.BMouseEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BAbstractButton.mouseEntered(javax.baja.ui.event.BMouseEvent) -->
<method name="mouseEntered"  public="true">
<description>
Handle mouseEntered event.
</description>
<parameter name="event">
<type class="javax.baja.ui.event.BMouseEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BAbstractButton.mouseExited(javax.baja.ui.event.BMouseEvent) -->
<method name="mouseExited"  public="true">
<description>
Handle mouseExited event.
</description>
<parameter name="event">
<type class="javax.baja.ui.event.BMouseEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BAbstractButton.mouseHover(javax.baja.ui.event.BMouseEvent) -->
<method name="mouseHover"  public="true">
<description>
Handle mouseHover event.
</description>
<parameter name="event">
<type class="javax.baja.ui.event.BMouseEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.BAbstractButton.getToolTip() -->
<method name="getToolTip"  public="true">
<description>
Get the text to display for the tool tip.  By &#xa; default this is the command&#x27;s description.  If&#xa; no command is installed then return the button&#x27;s&#xa; text.  Return null if no tool tip should be &#xa; displayed.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.ui.BAbstractButton.getDebugString() -->
<method name="getDebugString"  public="true">
<description/>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.ui.BAbstractButton.focusTraversable -->
<field name="focusTraversable"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;focusTraversable&lt;/code&gt; property.&#xa; This property determines if the button is&#xa; focus traversable.  By default it is true.
</description>
<tag name="@see">#getFocusTraversable</tag>
<tag name="@see">#setFocusTraversable</tag>
</field>

<!-- javax.baja.ui.BAbstractButton.buttonStyle -->
<field name="buttonStyle"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;buttonStyle&lt;/code&gt; property.&#xa; This property defines the style for how the&#xa; button should look and behave.
</description>
<tag name="@see">#getButtonStyle</tag>
<tag name="@see">#setButtonStyle</tag>
</field>

<!-- javax.baja.ui.BAbstractButton.invokeAction -->
<field name="invokeAction"  public="true" static="true" final="true">
<type class="javax.baja.sys.Action"/>
<description>
Slot for the &lt;code&gt;invokeAction&lt;/code&gt; action.&#xa; The programatic hook for invoking an action&#xa; which always results in the actionPerformed&#xa; topic being fired.
</description>
<tag name="@see">#invokeAction()</tag>
</field>

<!-- javax.baja.ui.BAbstractButton.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
