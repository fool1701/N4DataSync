<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="bajaui" runtimeProfile="wb" qualifiedName="javax.baja.ui.Command" name="Command" packageName="javax.baja.ui" public="true">
<description>
Command wraps up all the information associated with&#xa; displaying a command including its label, icon, accelerator,&#xa; and description.  It also provides the callback for&#xa; processing the command when it is invoked.
</description>
<tag name="@author">Brian Frank</tag>
<tag name="@creation">4 Dec 00</tag>
<tag name="@version">$Revision: 39$ $Date: 6/27/11 12:44:40 PM EDT$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="java.lang.Object"/>
</extends>
<!-- javax.baja.ui.Command(javax.baja.ui.BWidget, javax.baja.sys.BModule, java.lang.String) -->
<constructor name="Command" public="true">
<parameter name="owner">
<type class="javax.baja.ui.BWidget"/>
</parameter>
<parameter name="module">
<type class="javax.baja.sys.BModule"/>
</parameter>
<parameter name="keyBase">
<type class="java.lang.String"/>
</parameter>
<description>
Create a new command by populating the command&#x27;s&#xa; visualization information from a module&#x27;s lexicon.  &#xa; The command is initialized by looking for the following&#xa; keys:  keyBase+&#x22;.label&#x22;, keyBase+&#x22;.icon&#x22;, &#xa; keyBase+&#x22;.accelerator&#x22;, and keyBase+&#x22;.description&#x22;.&#xa; The icon value should be an ord to a 16x16 png file.
</description>
</constructor>

<!-- javax.baja.ui.Command(javax.baja.ui.BWidget, javax.baja.util.Lexicon, java.lang.String) -->
<constructor name="Command" public="true">
<parameter name="owner">
<type class="javax.baja.ui.BWidget"/>
</parameter>
<parameter name="lexicon">
<type class="javax.baja.util.Lexicon"/>
</parameter>
<parameter name="keyBase">
<type class="java.lang.String"/>
</parameter>
<description>
Create a new command by populating the command&#x27;s&#xa; visualization information from a module&#x27;s lexicon.  &#xa; The command is initialized by looking for the following&#xa; keys:  keyBase+&#x22;.label&#x22;, keyBase+&#x22;.icon&#x22;, &#xa; keyBase+&#x22;.accelerator&#x22;, and keyBase+&#x22;.description&#x22;.&#xa; The icon value should be an ord to a 16x16 png file.
</description>
</constructor>

<!-- javax.baja.ui.Command(javax.baja.ui.BWidget, java.util.Properties, java.lang.String) -->
<constructor name="Command" public="true">
<parameter name="owner">
<type class="javax.baja.ui.BWidget"/>
</parameter>
<parameter name="props">
<type class="java.util.Properties"/>
</parameter>
<parameter name="keyBase">
<type class="java.lang.String"/>
</parameter>
<description>
Create a new command by populating the command&#x27;s&#xa; visualization information from a properties file.  &#xa; The command is initialized by looking for the following&#xa; keys:  keyBase+&#x22;.label&#x22;, keyBase+&#x22;.icon&#x22;, &#xa; keyBase+&#x22;.accelerator&#x22;, and keyBase+&#x22;.description&#x22;.&#xa; The icon value should be an ord to a 16x16 png file.
</description>
</constructor>

<!-- javax.baja.ui.Command(javax.baja.ui.BWidget, java.lang.String, javax.baja.gx.BImage, javax.baja.ui.BAccelerator, java.lang.String) -->
<constructor name="Command" public="true">
<parameter name="owner">
<type class="javax.baja.ui.BWidget"/>
</parameter>
<parameter name="label">
<type class="java.lang.String"/>
</parameter>
<parameter name="icon">
<type class="javax.baja.gx.BImage"/>
</parameter>
<parameter name="acc">
<type class="javax.baja.ui.BAccelerator"/>
</parameter>
<parameter name="description">
<type class="java.lang.String"/>
</parameter>
<description>
Create a new Command with the specified &#xa; visualization information.
</description>
</constructor>

<!-- javax.baja.ui.Command(javax.baja.ui.BWidget, java.lang.String) -->
<constructor name="Command" public="true">
<parameter name="owner">
<type class="javax.baja.ui.BWidget"/>
</parameter>
<parameter name="label">
<type class="java.lang.String"/>
</parameter>
<description>
Create a new Command with the specified label and &#xa; default all other fields to null.
</description>
</constructor>

<!-- javax.baja.ui.Command.getOwner() -->
<method name="getOwner"  public="true" final="true">
<description>
Return the widget owner.
</description>
<return>
<type class="javax.baja.ui.BWidget"/>
</return>
</method>

<!-- javax.baja.ui.Command.getShell() -->
<method name="getShell"  public="true" final="true">
<description>
Return the shell associated with this command,&#xa; which is the shell of the owner.
</description>
<return>
<type class="javax.baja.ui.BWidgetShell"/>
</return>
</method>

<!-- javax.baja.ui.Command.getLabel() -->
<method name="getLabel"  public="true">
<description>
Get a label to display for the command &#xa; on buttons and menu items, or return&#xa; null if there is no label.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.ui.Command.getKeyBase() -->
<method name="getKeyBase"  public="true">
<description>
Get the keyBase initially used to create this&#xa; command (e.g. &#x22;commands.home&#x22;). This will also be&#xa; used as a style ID for the button executing this command.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.ui.Command.getAccelerator() -->
<method name="getAccelerator"  public="true">
<description>
Get the accelerator for the command or&#xa; null if this command doesn&#x27;t support an&#xa; accelerator.
</description>
<return>
<type class="javax.baja.ui.BAccelerator"/>
</return>
</method>

<!-- javax.baja.ui.Command.getIcon() -->
<method name="getIcon"  public="true">
<description>
Get an BImage to use for drawing the command&#x27;s&#xa; icon or null if this command doesn&#x27;t have an icon.
</description>
<return>
<type class="javax.baja.gx.BImage"/>
</return>
</method>

<!-- javax.baja.ui.Command.getDescription() -->
<method name="getDescription"  public="true">
<description>
Get a short description of the command which can&#xa; be used in tooltips and displayed in the status &#xa; bar for rollovers, or null if no description is&#xa; available.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.ui.Command.isEnabled() -->
<method name="isEnabled"  public="true" synchronized="true">
<description>
Is this command currently enabled.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.ui.Command.setEnabled(boolean) -->
<method name="setEnabled"  public="true" synchronized="true">
<description>
Enable or disable the command and all&#xa; of its registered widgets.
</description>
<parameter name="enabled">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.Command.getRegistry() -->
<method name="getRegistry"  public="true" synchronized="true">
<description>
Get the list of BWidget&#x27;s that are currently&#xa; registered on this command.
</description>
<return>
<type class="javax.baja.ui.BWidget" dimension="1"/>
</return>
</method>

<!-- javax.baja.ui.Command.register(javax.baja.ui.BWidget) -->
<method name="register"  public="true" synchronized="true">
<description>
Register the specified widget to be enabled&#xa; and disabled based on the state of the command.
</description>
<parameter name="widget">
<type class="javax.baja.ui.BWidget"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.Command.unregister(javax.baja.ui.BWidget) -->
<method name="unregister"  public="true" synchronized="true">
<description>
Unregister the specified widget from this command&#xa; so that its enable and disable state is no longer&#xa; maintained by this command.
</description>
<parameter name="widget">
<type class="javax.baja.ui.BWidget"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.Command.invoke() -->
<method name="invoke"  public="true" final="true">
<description>
Convenience for &lt;code&gt;invoke(null)&lt;/code&gt;.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.Command.invoke(javax.baja.ui.CommandEvent) -->
<method name="invoke"  public="true" final="true">
<description>
Invoke the action and if undoable register the&#xa; CommandArtifact with the shell&#x27;s undo manager.
</description>
<parameter name="event">
<type class="javax.baja.ui.CommandEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.ui.Command.doInvoke(javax.baja.ui.CommandEvent) -->
<method name="doInvoke"  public="true">
<description>
Implementation of the invoke.  If the command &#xa; invocation is undoable (and redoable), then return&#xa; an new instance of CommandArtifact.  If the&#xa; command is not undoable, then return null.  This&#xa; method routes to &lt;code&gt;doInvoke()&lt;/code&gt;.
</description>
<parameter name="event">
<type class="javax.baja.ui.CommandEvent"/>
</parameter>
<return>
<type class="javax.baja.ui.CommandArtifact"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.ui.Command.doInvoke() -->
<method name="doInvoke"  public="true">
<description>
This is the default implementation of &lt;code&gt;doInvoke(CommandEvent)&lt;/code&gt;.
</description>
<return>
<type class="javax.baja.ui.CommandArtifact"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.ui.Command.isBusyForInvoke() -->
<method name="isBusyForInvoke"  protected="true">
<description>
By default whenever a command is invoked the shell is&#xa; set into the busy state.  This behavior may be changed&#xa; by overriding this method to return false.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.ui.Command.merge(javax.baja.ui.Command) -->
<method name="merge"  public="true">
<description>
If this command can be merged with the specified command&#xa; to produce a new command that does both tasks, then return &#xa; the new compound command.  If this command cannot be merged&#xa; with the given command return null.  Neither this command&#xa; nor the specified command should be modified or produce&#xa; side effects.  This method checks common basics, then routes&#xa; to doMerge().
</description>
<parameter name="c">
<type class="javax.baja.ui.Command"/>
</parameter>
<return>
<type class="javax.baja.ui.Command"/>
</return>
</method>

<!-- javax.baja.ui.Command.doMerge(javax.baja.ui.Command) -->
<method name="doMerge"  protected="true">
<description>
This is the implementation method for merge().  When this&#xa; method is called it has already been determined that the&#xa; given command has the same class and owner as myself.
</description>
<parameter name="c">
<type class="javax.baja.ui.Command"/>
</parameter>
<return>
<type class="javax.baja.ui.Command"/>
</return>
</method>

<!-- javax.baja.ui.Command.toString() -->
<method name="toString"  public="true">
<description/>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.ui.Command.label -->
<field name="label"  protected="true">
<type class="java.lang.String"/>
<description/>
</field>

<!-- javax.baja.ui.Command.icon -->
<field name="icon"  protected="true">
<type class="javax.baja.gx.BImage"/>
<description/>
</field>

<!-- javax.baja.ui.Command.accelerator -->
<field name="accelerator"  protected="true">
<type class="javax.baja.ui.BAccelerator"/>
<description/>
</field>

<!-- javax.baja.ui.Command.description -->
<field name="description"  protected="true">
<type class="java.lang.String"/>
<description/>
</field>

</class>
</bajadoc>
