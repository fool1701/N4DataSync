<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="bajaui" runtimeProfile="wb" qualifiedName="javax.baja.ui.menu.BIQuickSearch" name="BIQuickSearch" packageName="javax.baja.ui.menu" public="true" interface="true" abstract="true" category="interface">
<description>
BIQuickSearch is an interface implemented by global quick search BWidgets. It is&#xa; used to populate the global quick search box embedded to the right of the menu bar.&#xa;&#xa; BIQuickSearch is also a BIAgent implementation.  The reason is that the quick search&#xa; widget is pluggable for a BWbProfile or even a specific BWbView that is currently in&#xa; view in Workbench.  Implementations of BIQuickSearch should register as agents on&#xa; BWbProfile (or one of its subclasses) or a specific BWbView. BIQuickSearch agents on&#xa; BWbView take precedence over BIQuickSearch agents on BWbProfile.  Furthermore, agent&#xa; filtering is used to further refine the quick search implementation selected for use.&#xa; For example, a JavaFx implementation of quick search may be requested by filtering for&#xa; BFxWidget implementations of BIQuickSearch that are registered as agents on the&#xa; BWbProfile or BWbView.&#xa;&#xa; Also note that for the global quick search box, it is expected that when asGlobalWidget()&#xa; is called on a BIQuickSearch instance, it should return a single (reused) instance.&#xa; Thus the setView() callback can be used to notify the reused BIQuickSearch instance&#xa; about the new view for which it is currently being utilized.
</description>
<tag name="@author">Scott Hoye</tag>
<tag name="@creation">1/23/2014</tag>
<tag name="@since">Niagara 4.0</tag>
<implements>
<type class="javax.baja.agent.BIAgent"/>
</implements>
<!-- javax.baja.ui.menu.BIQuickSearch.isQuickSearchEnabled(javax.baja.ui.BWidget) -->
<method name="isQuickSearchEnabled"  public="true" abstract="true">
<description>
Return true if this global quick search should be visible/enabled&#xa; in the menu bar for the current view.  Returning false will remove&#xa; (hide) the quick search box from the menu bar unless another valid&#xa; BIQuickSearch implementation is found.  Note that this method could&#xa; be called frequently on the client (Workbench) side, so avoid or minimize&#xa; network calls when implementing this method (consider using caching to reduce&#xa; network calls).
</description>
<parameter name="view">
<type class="javax.baja.ui.BWidget"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.ui.menu.BIQuickSearch.asGlobalWidget(javax.baja.ui.BWidget, java.lang.String) -->
<method name="asGlobalWidget"  public="true" abstract="true">
<description>
Return the single, reused quick search as a BWidget for the current&#xa; view.  Make sure to initialize the view and id on the reused widget&#xa; before returning it from this method.
</description>
<parameter name="view">
<type class="javax.baja.ui.BWidget"/>
<description>
The current view in Workbench for the widget to reference
</description>
</parameter>
<parameter name="id">
<type class="java.lang.String"/>
<description>
The id to assign to the widget
</description>
</parameter>
<return>
<type class="javax.baja.ui.BWidget"/>
<description>
a reused BWidget implementation for the global quick search
</description>
</return>
</method>

<!-- javax.baja.ui.menu.BIQuickSearch.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
