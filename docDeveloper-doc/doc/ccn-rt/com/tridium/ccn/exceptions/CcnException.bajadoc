<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="ccn" runtimeProfile="rt" qualifiedName="com.tridium.ccn.exceptions.CcnException" name="CcnException" packageName="com.tridium.ccn.exceptions" public="true" category="exception">
<description>
A CcnException is thrown when an error occurs in the&#xa; ccn driver.&#xa; &#xa; NOTE: Any modifications to this class should also be made&#xa;   to the twin class CcnRuntimeException.
</description>
<extends>
<type class="javax.baja.sys.BajaException"/>
</extends>
<!-- com.tridium.ccn.exceptions.CcnException(int) -->
<constructor name="CcnException" public="true">
<parameter name="code">
<type class="int"/>
<description>
Error code defined in ErrorCodes.
</description>
</parameter>
<description>
Constructor.
</description>
</constructor>

<!-- com.tridium.ccn.exceptions.CcnException(int, java.lang.Object[]) -->
<constructor name="CcnException" public="true">
<parameter name="code">
<type class="int"/>
<description>
Error code defined in ErrorCodes.
</description>
</parameter>
<parameter name="args">
<type class="java.lang.Object" dimension="1"/>
<description>
Array of object arguments used&#xa;    to build error string.
</description>
</parameter>
<description>
Constructor.
</description>
</constructor>

<!-- com.tridium.ccn.exceptions.CcnException(int, java.lang.Object) -->
<constructor name="CcnException" public="true">
<parameter name="code">
<type class="int"/>
<description>
Error code defined in ErrorCodes.
</description>
</parameter>
<parameter name="arg">
<type class="java.lang.Object"/>
<description>
Convenience when there is only&#xa;    one argument.
</description>
</parameter>
<description>
Constructor.
</description>
</constructor>

<!-- com.tridium.ccn.exceptions.CcnException(int, int) -->
<constructor name="CcnException" public="true">
<parameter name="code">
<type class="int"/>
<description>
Error code defined in ErrorCodes.
</description>
</parameter>
<parameter name="arg">
<type class="int"/>
<description>
Convenience when there is only&#xa;    one argument and it is an int.
</description>
</parameter>
<description>
Constructor.
</description>
</constructor>

<!-- com.tridium.ccn.exceptions.CcnException(int, java.lang.Object[], java.lang.Exception) -->
<constructor name="CcnException" public="true">
<parameter name="code">
<type class="int"/>
<description>
Error code defined in ErrorCodes.
</description>
</parameter>
<parameter name="args">
<type class="java.lang.Object" dimension="1"/>
<description>
Array of object arguments used&#xa;    to build error string.
</description>
</parameter>
<parameter name="e">
<type class="java.lang.Exception"/>
<description>
Root cause exception
</description>
</parameter>
<description>
Constructor.
</description>
</constructor>

<!-- com.tridium.ccn.exceptions.CcnException.getCode() -->
<method name="getCode"  public="true">
<description>
Get the error code.
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- com.tridium.ccn.exceptions.CcnException.getArgs() -->
<method name="getArgs"  public="true">
<description>
Get the argument object array, or null if&#xa; there is not one.
</description>
<return>
<type class="java.lang.Object" dimension="1"/>
</return>
</method>

<!-- com.tridium.ccn.exceptions.CcnException.getRootException() -->
<method name="getRootException"  public="true">
<description>
Get the root cause exception, or null if&#xa; there is not one.
</description>
<return>
<type class="java.lang.Throwable"/>
</return>
</method>

<!-- com.tridium.ccn.exceptions.CcnException.hideStackTrace() -->
<method name="hideStackTrace"  public="true">
<description>
Should we hide the stack trace when&#xa; dumping this guy.
</description>
<return>
<type class="boolean"/>
</return>
</method>

</class>
</bajadoc>
