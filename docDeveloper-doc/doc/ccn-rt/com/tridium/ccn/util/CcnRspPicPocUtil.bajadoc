<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="ccn" runtimeProfile="rt" qualifiedName="com.tridium.ccn.util.CcnRspPicPocUtil" name="CcnRspPicPocUtil" packageName="com.tridium.ccn.util" public="true" abstract="true">
<description>
Utility to parse a table block for instance of pic tables&#xa; represented inside a given CcnResponseBuffer
</description>
<extends>
<type class="com.tridium.ccn.util.CcnRspTableUtil"/>
</extends>
<implements>
<type class="com.tridium.ccn.util.CcnErrorCodes"/>
</implements>
<!-- com.tridium.ccn.util.CcnRspPicPocUtil() -->
<constructor name="CcnRspPicPocUtil" public="true">
<description/>
</constructor>

<!-- com.tridium.ccn.util.CcnRspPicPocUtil.getFieldName(com.tridium.ccn.messages.CcnResponseMessage, int) -->
<method name="getFieldName"  public="true" static="true">
<description/>
<parameter name="rsp">
<type class="com.tridium.ccn.messages.CcnResponseMessage"/>
</parameter>
<parameter name="index">
<type class="int"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
<throws>
<type class="com.tridium.ccn.exceptions.CcnException"/>
</throws>
</method>

<!-- com.tridium.ccn.util.CcnRspPicPocUtil.getDataType(com.tridium.ccn.messages.CcnResponseMessage, int) -->
<method name="getDataType"  public="true" static="true">
<description/>
<parameter name="rsp">
<type class="com.tridium.ccn.messages.CcnResponseMessage"/>
</parameter>
<parameter name="index">
<type class="int"/>
</parameter>
<return>
<type class="byte"/>
</return>
<throws>
<type class="com.tridium.ccn.exceptions.CcnException"/>
</throws>
</method>

<!-- com.tridium.ccn.util.CcnRspPicPocUtil.getDisplayType(com.tridium.ccn.messages.CcnResponseMessage, int) -->
<method name="getDisplayType"  public="true" static="true">
<description/>
<parameter name="rsp">
<type class="com.tridium.ccn.messages.CcnResponseMessage"/>
</parameter>
<parameter name="index">
<type class="int"/>
</parameter>
<return>
<type class="boolean"/>
</return>
<throws>
<type class="com.tridium.ccn.exceptions.CcnException"/>
</throws>
</method>

<!-- com.tridium.ccn.util.CcnRspPicPocUtil.getDisplayDigits(com.tridium.ccn.messages.CcnResponseMessage, int, int) -->
<method name="getDisplayDigits"  public="true" static="true">
<description/>
<parameter name="rsp">
<type class="com.tridium.ccn.messages.CcnResponseMessage"/>
</parameter>
<parameter name="dataType">
<type class="int"/>
</parameter>
<parameter name="index">
<type class="int"/>
</parameter>
<return>
<type class="byte"/>
</return>
<throws>
<type class="com.tridium.ccn.exceptions.CcnException"/>
</throws>
</method>

<!-- com.tridium.ccn.util.CcnRspPicPocUtil.getFieldByteCount(com.tridium.ccn.messages.CcnResponseMessage, byte, int) -->
<method name="getFieldByteCount"  public="true" static="true">
<description/>
<parameter name="rsp">
<type class="com.tridium.ccn.messages.CcnResponseMessage"/>
</parameter>
<parameter name="dataType">
<type class="byte"/>
</parameter>
<parameter name="index">
<type class="int"/>
</parameter>
<return>
<type class="byte"/>
</return>
<throws>
<type class="com.tridium.ccn.exceptions.CcnException"/>
</throws>
</method>

<!-- com.tridium.ccn.util.CcnRspPicPocUtil.getDiscreteTextOffset(com.tridium.ccn.messages.CcnResponseMessage, int) -->
<method name="getDiscreteTextOffset"  public="true" static="true">
<description/>
<parameter name="rsp">
<type class="com.tridium.ccn.messages.CcnResponseMessage"/>
</parameter>
<parameter name="index">
<type class="int"/>
</parameter>
<return>
<type class="byte"/>
</return>
<throws>
<type class="com.tridium.ccn.exceptions.CcnException"/>
</throws>
</method>

<!-- com.tridium.ccn.util.CcnRspPicPocUtil.getConfigFlags(com.tridium.ccn.messages.CcnResponseMessage, int) -->
<method name="getConfigFlags"  public="true" static="true">
<description/>
<parameter name="rsp">
<type class="com.tridium.ccn.messages.CcnResponseMessage"/>
</parameter>
<parameter name="index">
<type class="int"/>
</parameter>
<return>
<type class="byte"/>
</return>
<throws>
<type class="com.tridium.ccn.exceptions.CcnException"/>
</throws>
</method>

<!-- com.tridium.ccn.util.CcnRspPicPocUtil.getUnits(com.tridium.ccn.messages.CcnResponseMessage, int) -->
<method name="getUnits"  public="true" static="true">
<description/>
<parameter name="rsp">
<type class="com.tridium.ccn.messages.CcnResponseMessage"/>
</parameter>
<parameter name="index">
<type class="int"/>
</parameter>
<return>
<type class="int"/>
</return>
<throws>
<type class="com.tridium.ccn.exceptions.CcnException"/>
</throws>
</method>

<!-- com.tridium.ccn.util.CcnRspPicPocUtil.getLimit(com.tridium.ccn.messages.CcnResponseMessage, int, com.tridium.ccn.components.BCcnPointEntry) -->
<method name="getLimit"  public="true" static="true">
<description/>
<parameter name="rsp">
<type class="com.tridium.ccn.messages.CcnResponseMessage"/>
</parameter>
<parameter name="index">
<type class="int"/>
</parameter>
<parameter name="entry">
<type class="com.tridium.ccn.components.BCcnPointEntry"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
<throws>
<type class="com.tridium.ccn.exceptions.CcnException"/>
</throws>
</method>

<!-- com.tridium.ccn.util.CcnRspPicPocUtil.getNextValue(byte[], int, com.tridium.ccn.components.BCcnPointEntry) -->
<method name="getNextValue"  public="true" static="true">
<description/>
<parameter name="buf">
<type class="byte" dimension="1"/>
</parameter>
<parameter name="index">
<type class="int"/>
</parameter>
<parameter name="entry">
<type class="com.tridium.ccn.components.BCcnPointEntry"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- com.tridium.ccn.util.CcnRspPicPocUtil.getNextValue(byte[], int, com.tridium.ccn.point.BCcnProxyExt) -->
<method name="getNextValue"  public="true" static="true">
<description/>
<parameter name="buf">
<type class="byte" dimension="1"/>
</parameter>
<parameter name="index">
<type class="int"/>
</parameter>
<parameter name="proxy">
<type class="com.tridium.ccn.point.BCcnProxyExt"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- com.tridium.ccn.util.CcnRspPicPocUtil.toMetric(int, int, java.lang.String) -->
<method name="toMetric"  public="true" static="true">
<description>
convert from Imperial to Metric
</description>
<parameter name="displayDigits">
<type class="int"/>
</parameter>
<parameter name="dataUnit">
<type class="int"/>
</parameter>
<parameter name="_value">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- com.tridium.ccn.util.CcnRspPicPocUtil.toImperial(int, int, java.lang.String) -->
<method name="toImperial"  public="true" static="true">
<description/>
<parameter name="displayDigits">
<type class="int"/>
</parameter>
<parameter name="dataUnit">
<type class="int"/>
</parameter>
<parameter name="_value">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- com.tridium.ccn.util.CcnRspPicPocUtil.convertToImperial(int, boolean, int, int, java.lang.String) -->
<method name="convertToImperial"  public="true" static="true">
<description/>
<parameter name="configFlags">
<type class="int"/>
</parameter>
<parameter name="displayType">
<type class="boolean"/>
</parameter>
<parameter name="displayDigits">
<type class="int"/>
</parameter>
<parameter name="units">
<type class="int"/>
</parameter>
<parameter name="_value">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- com.tridium.ccn.util.CcnRspPicPocUtil.convertToImperial(com.tridium.ccn.point.BCcnProxyExt) -->
<method name="convertToImperial"  public="true" static="true">
<description/>
<parameter name="entry">
<type class="com.tridium.ccn.point.BCcnProxyExt"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- com.tridium.ccn.util.CcnRspPicPocUtil.convertToImperial(com.tridium.ccn.components.BCcnPointEntry) -->
<method name="convertToImperial"  public="true" static="true">
<description/>
<parameter name="entry">
<type class="com.tridium.ccn.components.BCcnPointEntry"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- com.tridium.ccn.util.CcnRspPicPocUtil.checkRange(java.lang.String, com.tridium.ccn.point.BCcnProxyExt) -->
<method name="checkRange"  public="true" static="true">
<description/>
<parameter name="_val">
<type class="java.lang.String"/>
</parameter>
<parameter name="entry">
<type class="com.tridium.ccn.point.BCcnProxyExt"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- com.tridium.ccn.util.CcnRspPicPocUtil.getDescription(com.tridium.ccn.messages.CcnResponseMessage, int) -->
<method name="getDescription"  public="true" static="true">
<description/>
<parameter name="rsp">
<type class="com.tridium.ccn.messages.CcnResponseMessage"/>
</parameter>
<parameter name="index">
<type class="int"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
<throws>
<type class="com.tridium.ccn.exceptions.CcnException"/>
</throws>
</method>

<!-- com.tridium.ccn.util.CcnRspPicPocUtil.getStartOffset(int, int) -->
<method name="getStartOffset"  protected="true" static="true">
<description/>
<parameter name="index">
<type class="int"/>
</parameter>
<parameter name="size">
<type class="int"/>
</parameter>
<return>
<type class="int"/>
</return>
<throws>
<type class="com.tridium.ccn.exceptions.CcnException"/>
</throws>
</method>

<!-- com.tridium.ccn.util.CcnRspPicPocUtil.getActiveText(int) -->
<method name="getActiveText"  public="true" static="true">
<description>
get active text for discrete type
</description>
<parameter name="discreteTextOffset">
<type class="int"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- com.tridium.ccn.util.CcnRspPicPocUtil.getInActiveText(int) -->
<method name="getInActiveText"  public="true" static="true">
<description>
get inActive text for discrete type
</description>
<parameter name="discreteTextOffset">
<type class="int"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- com.tridium.ccn.util.CcnRspPicPocUtil.mergeNewValue(byte[], int, int, int, java.lang.String, byte[], com.tridium.ccn.components.BCcnPointEntry) -->
<method name="mergeNewValue"  public="true" static="true">
<description>
merge the new value byte to the block data
</description>
<parameter name="data">
<type class="byte" dimension="1"/>
</parameter>
<parameter name="offset">
<type class="int"/>
</parameter>
<parameter name="dataType">
<type class="int"/>
</parameter>
<parameter name="dataLength">
<type class="int"/>
</parameter>
<parameter name="newValue">
<type class="java.lang.String"/>
</parameter>
<parameter name="bArray">
<type class="byte" dimension="1"/>
</parameter>
<parameter name="tempPoint">
<type class="com.tridium.ccn.components.BCcnPointEntry"/>
</parameter>
<return>
<type class="byte" dimension="1"/>
</return>
</method>

<!-- com.tridium.ccn.util.CcnRspPicPocUtil.mergeNewValue(byte[], int, int, int, java.lang.String, byte[], com.tridium.ccn.point.BCcnProxyExt) -->
<method name="mergeNewValue"  public="true" static="true">
<description/>
<parameter name="data">
<type class="byte" dimension="1"/>
</parameter>
<parameter name="offset">
<type class="int"/>
</parameter>
<parameter name="dataType">
<type class="int"/>
</parameter>
<parameter name="dataLength">
<type class="int"/>
</parameter>
<parameter name="newValue">
<type class="java.lang.String"/>
</parameter>
<parameter name="bArray">
<type class="byte" dimension="1"/>
</parameter>
<parameter name="tempPoint">
<type class="com.tridium.ccn.point.BCcnProxyExt"/>
</parameter>
<return>
<type class="byte" dimension="1"/>
</return>
</method>

<!-- com.tridium.ccn.util.CcnRspPicPocUtil.getTableTypeString(int) -->
<method name="getTableTypeString"  public="true" static="true">
<description/>
<parameter name="tableType">
<type class="int"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- com.tridium.ccn.util.CcnRspPicPocUtil.EXPECTED_PICPOC_TBL_TYPES -->
<field name="EXPECTED_PICPOC_TBL_TYPES"  public="true" static="true">
<type class="int" dimension="1"/>
<description/>
</field>

</class>
</bajadoc>
