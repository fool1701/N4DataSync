<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="ccn" runtimeProfile="rt" qualifiedName="com.tridium.ccn.util.CcnStringNumberConverter" name="CcnStringNumberConverter" packageName="com.tridium.ccn.util" public="true" abstract="true">
<description>
This class defines static methods that convert a string object into&#xa; either a number primitive or number object. If the string does not&#xa; perfectly encode the desired number type, this class will work to&#xa; resolve it anyway.&#xa; &#xa; For example, the string 19 cannot be converted to a float because&#xa; java.lang.Float.valueOf method will throw NumberFormatException. The&#xa; corresponding method of this class, getFloat, will attempt the first&#xa; way but catch the number format exception and then do a java.lang.&#xa; Integer.parseInt and cast the result to a float. If that still doesn&#x27;t&#xa; work, then the NumberFormatException will be thrown.&#xa; &#xa; Conversely, the string 19.0 cannot be converted to an integer because&#xa; java.lang.Integer.parseInt method will throw NumberFormatException. The&#xa; corresponding method of this class, getInt, will attemp the first&#xa; way but catch the number format exception and then do a java.lang.Float.&#xa; valueOf, and then return an integer of the rounded float value. If that&#xa; still doesn&#x27;t work, then the NumberFormatException will be thrown.
</description>
<extends>
<type class="java.lang.Object"/>
</extends>
<!-- com.tridium.ccn.util.CcnStringNumberConverter() -->
<constructor name="CcnStringNumberConverter" public="true">
<description/>
</constructor>

<!-- com.tridium.ccn.util.CcnStringNumberConverter.getFloat(java.lang.String) -->
<method name="getFloat"  public="true" static="true">
<description>
Gets float conversion of the given string.
</description>
<parameter name="lHopeItsFloat">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="float"/>
</return>
</method>

<!-- com.tridium.ccn.util.CcnStringNumberConverter.getInt(java.lang.String) -->
<method name="getInt"  public="true" static="true">
<description/>
<parameter name="lHopeItsInt">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="int"/>
</return>
</method>

<!-- com.tridium.ccn.util.CcnStringNumberConverter.getDsFloat(java.lang.String, java.lang.Float) -->
<method name="getDsFloat"  public="true" static="true">
<description>
Gets DsFloat conversion of the given string.
</description>
<parameter name="lHopeItsFloat">
<type class="java.lang.String"/>
</parameter>
<parameter name="defaultDsFloat">
<type class="java.lang.Float"/>
</parameter>
<return>
<type class="java.lang.Float"/>
</return>
</method>

</class>
</bajadoc>
