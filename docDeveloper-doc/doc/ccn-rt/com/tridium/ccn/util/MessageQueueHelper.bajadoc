<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="ccn" runtimeProfile="rt" qualifiedName="com.tridium.ccn.util.MessageQueueHelper" name="MessageQueueHelper" packageName="com.tridium.ccn.util" public="true" abstract="true">
<description>
MessageQueueHelper provides the basic functionality required by&#xa; message-based service. It creates a message queue and a thread&#xa; to serve that queue. It handles initialization, starting and&#xa; stopping the service.&#xa;&#xa; Originally adopted from code written by Dan Giorgis on 2 Mar 98.
</description>
<tag name="@author">Ramadevi Telaprolu on 13-Mar-08</tag>
<extends>
<type class="java.lang.Object"/>
</extends>
<implements>
<type class="java.lang.Runnable"/>
</implements>
<!-- com.tridium.ccn.util.MessageQueueHelper() -->
<constructor name="MessageQueueHelper" public="true">
<description/>
</constructor>

<!-- com.tridium.ccn.util.MessageQueueHelper.init() -->
<method name="init"  public="true">
<description>
Initialize the service resources
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ccn.util.MessageQueueHelper.start() -->
<method name="start"  public="true">
<description>
Start the service
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ccn.util.MessageQueueHelper.stop() -->
<method name="stop"  public="true">
<description>
This method is called on a service when it&#xa; should stop itself.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ccn.util.MessageQueueHelper.cleanup() -->
<method name="cleanup"  public="true">
<description>
This method is called on a service when it&#xa; should clean up all its resources.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ccn.util.MessageQueueHelper.getName() -->
<method name="getName"  protected="true" abstract="true">
<description>
Returns a service name unique to subclass.&#xa; Used to create unique thread and queue names&#xa; (for debugging) and within errors message.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- com.tridium.ccn.util.MessageQueueHelper.processMsg(java.lang.Object) -->
<method name="processMsg"  protected="true" abstract="true">
<description>
Called when a message arrives on the queue.
</description>
<parameter name="msg">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ccn.util.MessageQueueHelper.getQueueSize() -->
<method name="getQueueSize"  protected="true">
<description>
Get the queue size used for this helper.&#xa; Allows override by classes needinga bigger&#xa; queue.
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- com.tridium.ccn.util.MessageQueueHelper.writeQueue(java.lang.Object) -->
<method name="writeQueue"  protected="true">
<description>
Write a message to the queue. This method&#xa; is protected so subclasses must provide a&#xa; wrapper method which accepts the appropriate&#xa; class of message to write to the queue.
</description>
<parameter name="msg">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ccn.util.MessageQueueHelper.run() -->
<method name="run"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Run the service in its own thread
</description>
<return>
<type class="void"/>
</return>
</method>

</class>
</bajadoc>
