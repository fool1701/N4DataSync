<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="ccn" runtimeProfile="rt" qualifiedName="com.tridium.ccn.comm.CcnComm" name="CcnComm" packageName="com.tridium.ccn.comm" public="true">
<description>
The CcnComm class is used to synchronize access to a BCcnNetwork&#xa; network and handles the synchronization of the serial communication.
</description>
<tag name="@author">Ramadevi Telaprolu on 13-Mar-08</tag>
<extends>
<type class="com.tridium.basicdriver.comm.Comm"/>
</extends>
<!-- com.tridium.ccn.comm.CcnComm(com.tridium.ccn.BCcnNetwork, com.tridium.basicdriver.comm.CommReceiver) -->
<constructor name="CcnComm" public="true">
<parameter name="network">
<type class="com.tridium.ccn.BCcnNetwork"/>
</parameter>
<parameter name="commReceiver">
<type class="com.tridium.basicdriver.comm.CommReceiver"/>
</parameter>
<description>
Constructor initializes the CcnComm with a specified BCcnNetwork&#xa; Uses the CcnCommReceiver + CommTransmitter + CommTransactionManager.
</description>
</constructor>

<!-- com.tridium.ccn.comm.CcnComm.started() -->
<method name="started"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="boolean"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- com.tridium.ccn.comm.CcnComm.stopped() -->
<method name="stopped"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- com.tridium.ccn.comm.CcnComm.getCcnNetwork() -->
<method name="getCcnNetwork"  public="true" final="true">
<description/>
<return>
<type class="com.tridium.ccn.BCcnNetwork"/>
</return>
</method>

<!-- com.tridium.ccn.comm.CcnComm.ccnAsyncRequest() -->
<method name="ccnAsyncRequest"  public="true">
<description>
ccnAsyncRequest returns the CCN async request handler intended to be used&#xa;  to serialize access to the CCN driver. The method asyncRequest, that returns&#xa;  SerialAsyncRequest, inherited from SerialService is also valid. However,&#xa;  it may not be used to perform CCN communication; instead, the SerialAsyncRequest&#xa;  (returned by asyncRequest()) is intended to be used to submit true async requests&#xa;  (objects with execute method).
</description>
<return>
<type class="com.tridium.ccn.messages.CcnAsyncRequest"/>
</return>
</method>

<!-- com.tridium.ccn.comm.CcnComm.sendCcnRequest(com.tridium.ccn.messages.CcnRequestMessage) -->
<method name="sendCcnRequest"  public="true" synchronized="true">
<description>
This method performs the dispatching necessary to send a CcnRequestMessage using the&#xa; native driver. This method will block for the response.
</description>
<parameter name="requestMessage">
<type class="com.tridium.ccn.messages.CcnRequestMessage"/>
</parameter>
<return>
<type class="com.tridium.platCcn.CcnResponseBuffer"/>
<description>
CcnResponseBuffer the response to the request. Since Ccn controllers respond to&#xa; all messages in a generic way (i.e. without a specific command type), there would be no easy&#xa; way to return a more precise type of response.
</description>
</return>
<throws>
<type class="com.tridium.ccn.exceptions.CcnException"/>
</throws>
</method>

</class>
</bajadoc>
