<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="ndriver" runtimeProfile="rt" qualifiedName="com.tridium.ndriver.comm.NMessage" name="NMessage" packageName="com.tridium.ndriver.comm" public="true">
<description>
NMessage is super class for all messages.
</description>
<tag name="@author">Robert A Adams</tag>
<tag name="@creation">May 24, 2011</tag>
<extends>
<type class="java.lang.Object"/>
</extends>
<implements>
<type class="com.tridium.ndriver.util.LinkedQueue$ILinkable"/>
</implements>
<!-- com.tridium.ndriver.comm.NMessage() -->
<constructor name="NMessage" public="true">
<description/>
</constructor>

<!-- com.tridium.ndriver.comm.NMessage(com.tridium.ndriver.datatypes.BAddress) -->
<constructor name="NMessage" public="true">
<parameter name="address">
<type class="com.tridium.ndriver.datatypes.BAddress"/>
</parameter>
<description/>
</constructor>

<!-- com.tridium.ndriver.comm.NMessage.toOutputStream(java.io.OutputStream) -->
<method name="toOutputStream"  public="true">
<description>
Write message fields to the specified output stream. Outgoing message types&#xa; must override this method.&lt;p&gt;
</description>
<parameter name="out">
<type class="java.io.OutputStream"/>
</parameter>
<return>
<type class="boolean"/>
<description>
true if fragmented message and more fragments
</description>
</return>
<throws>
<type class="java.lang.Exception"/>
<description/>
</throws>
</method>

<!-- com.tridium.ndriver.comm.NMessage.fromInputStream(java.io.InputStream) -->
<method name="fromInputStream"  public="true">
<description>
Fill message fields from the specified input stream. Incoming message types&#xa; may override this method.&lt;p&gt;
</description>
<parameter name="in">
<type class="java.io.InputStream"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
<description/>
</throws>
</method>

<!-- com.tridium.ndriver.comm.NMessage.getTag() -->
<method name="getTag"  public="true">
<description>
Override to return protocol specific message tag to match requests and&#xa; response messages. &lt;p&gt; Default will return nullTag to indicate protocol&#xa; does not have a tag. The nullTag is a static object so that request and&#xa; response messages that don&#x27;t override this method will always match.&lt;p&gt;
</description>
<return>
<type class="java.lang.Object"/>
<description>
protocol specific message tag
</description>
</return>
</method>

<!-- com.tridium.ndriver.comm.NMessage.isResponse() -->
<method name="isResponse"  public="true">
<description>
Override to return true for response message types. &lt;p&gt;
</description>
<return>
<type class="boolean"/>
<description>
true if this is a response message type
</description>
</return>
</method>

<!-- com.tridium.ndriver.comm.NMessage.validateResponse(com.tridium.ndriver.comm.NMessage) -->
<method name="validateResponse"  public="true">
<description>
Override point to validate response message. This is called on request&#xa; messages when an incoming messages has been match by tag as the response&#xa; message.  The return indicates if the transaction can be completed and in&#xa; what state (success/failure).&#xa; &lt;p&gt;
</description>
<parameter name="msg">
<type class="com.tridium.ndriver.comm.NMessage"/>
</parameter>
<return>
<type class="int"/>
<description>
one of: FAILED_RESPONSE - response message is error&#xa; SUCCESS_RESPONSE - response message is success ACK_SUCCESS_RESPONSE - ack&#xa; response to acknowledged messages DELAY_RESPONSE - delayed response (could&#xa; be delay or ack to be followed by response) default returns&#xa; SUCCESS_RESPONSE
</description>
</return>
<throws>
<type class="java.lang.Exception"/>
<description/>
</throws>
</method>

<!-- com.tridium.ndriver.comm.NMessage.modifyResponse(com.tridium.ndriver.comm.NMessage) -->
<method name="modifyResponse"  public="true">
<description>
Override point to allow a request message to perform modifications on an&#xa; associate response message. This api is called by &lt;code&gt;NComm.sendRequest()&lt;/code&gt;&#xa; after a successful response message has been matched to the request.  The&#xa; returned NMessage is the response returned by &lt;code&gt;NComm.sendRequest()&lt;/code&gt;.&lt;p&gt;&#xa; This api allows for either the creation of a new response type or the&#xa; modification of the original response message.&lt;p&gt;
</description>
<parameter name="resp">
<type class="com.tridium.ndriver.comm.NMessage"/>
<description>
the original response message created by &lt;code&gt;IMessageFactory&lt;/code&gt;&#xa;             for incoming response.
</description>
</parameter>
<return>
<type class="com.tridium.ndriver.comm.NMessage"/>
<description>
new or modified response message. Default implementation returns&#xa; original response.
</description>
</return>
</method>

<!-- com.tridium.ndriver.comm.NMessage.toTraceString() -->
<method name="toTraceString"  public="true">
<description/>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- com.tridium.ndriver.comm.NMessage.getString() -->
<method name="getString"  public="true">
<description/>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- com.tridium.ndriver.comm.NMessage.toString() -->
<method name="toString"  public="true">
<description/>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- com.tridium.ndriver.comm.NMessage.getResponseTimeOut() -->
<method name="getResponseTimeOut"  public="true">
<description>
Get response timeout in milliSeconds
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- com.tridium.ndriver.comm.NMessage.getRetryCount() -->
<method name="getRetryCount"  public="true">
<description>
Get max retry count
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- com.tridium.ndriver.comm.NMessage.getAddress() -->
<method name="getAddress"  public="true">
<description>
Get source or destination address
</description>
<return>
<type class="com.tridium.ndriver.datatypes.BAddress"/>
</return>
</method>

<!-- com.tridium.ndriver.comm.NMessage.getRespTimePadding() -->
<method name="getRespTimePadding"  public="true">
<description>
Additional response time padding to allow for system response time delay.&#xa; This time is added to the value returned in getResponseTimeOut() in&#xa; NCommTimer. Default returns 1000ms
</description>
<return>
<type class="int"/>
<description>
Time in milliseconds to add to getResponseTimeOut()
</description>
</return>
</method>

<!-- com.tridium.ndriver.comm.NMessage.setResponseTimeOut(int) -->
<method name="setResponseTimeOut"  public="true">
<description>
Set response timeout in milliseconds. If time is less than 0 it will be set&#xa; to 0.
</description>
<parameter name="time">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ndriver.comm.NMessage.setRetryCount(int) -->
<method name="setRetryCount"  public="true">
<description>
Set max retry count - 0 for no retries
</description>
<parameter name="retryCount">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ndriver.comm.NMessage.setAddress(com.tridium.ndriver.datatypes.BAddress) -->
<method name="setAddress"  public="true">
<description>
Set source or destination address
</description>
<parameter name="address">
<type class="com.tridium.ndriver.datatypes.BAddress"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ndriver.comm.NMessage.isFragmentable() -->
<method name="isFragmentable"  public="true">
<description>
Developers must override to return true in subclasses that implement&#xa; &lt;code&gt;IFragmentable&lt;/code&gt;. This default implementation returns false.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- com.tridium.ndriver.comm.NMessage.initFragmentation() -->
<method name="initFragmentation"  public="true">
<description>
Callback from NComm to indicate start of fragmentation. The next call of&#xa; toOutputStream() expects to receive first fragment. If an outgoing message&#xa; will be sent in fragments this callback should be overridden to reset any&#xa; attributes needed to track state of fragmentation.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ndriver.comm.NMessage.getAck() -->
<method name="getAck"  public="true">
<description>
Callback from NComm after receiving incoming message. Override point for&#xa; protocols that support a low level ack message to acknowledge receipt of&#xa; message.  This callback is made after application message type is created&#xa; from link layer message so integrity of message should be verify but before&#xa; application has opportunity to process actual message.  Developer may&#xa; decide to handle acknowledgement at application layer.&lt;p&gt; Default returns&#xa; null to indicate no ack to be sent.
</description>
<return>
<type class="com.tridium.ndriver.comm.NMessage"/>
</return>
</method>

<!-- com.tridium.ndriver.comm.NMessage.getNext() -->
<method name="getNext"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="com.tridium.ndriver.util.LinkedQueue$ILinkable"/>
</return>
</method>

<!-- com.tridium.ndriver.comm.NMessage.setNext(com.tridium.ndriver.util.LinkedQueue.ILinkable) -->
<method name="setNext"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="nxt">
<type class="com.tridium.ndriver.util.LinkedQueue$ILinkable"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ndriver.comm.NMessage.nullTag -->
<field name="nullTag"  public="true" static="true" final="true">
<type class="java.lang.Object"/>
<description/>
</field>

<!-- com.tridium.ndriver.comm.NMessage.FAILED_RESPONSE -->
<field name="FAILED_RESPONSE"  public="true" static="true" final="true">
<type class="int"/>
<description/>
</field>

<!-- com.tridium.ndriver.comm.NMessage.SUCCESS_RESPONSE -->
<field name="SUCCESS_RESPONSE"  public="true" static="true" final="true">
<type class="int"/>
<description/>
</field>

<!-- com.tridium.ndriver.comm.NMessage.ACK_SUCCESS_RESPONSE -->
<field name="ACK_SUCCESS_RESPONSE"  public="true" static="true" final="true">
<type class="int"/>
<description/>
</field>

<!-- com.tridium.ndriver.comm.NMessage.DELAY_RESPONSE -->
<field name="DELAY_RESPONSE"  public="true" static="true" final="true">
<type class="int"/>
<description/>
</field>

</class>
</bajadoc>
