<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="ndriver" runtimeProfile="rt" qualifiedName="com.tridium.ndriver.comm.LinkMessage" name="LinkMessage" packageName="com.tridium.ndriver.comm" public="true">
<description>
LinkMessage is a LinkLayer message class that provides mechanisms to stream&#xa; data to and from a byte array representation.&#xa; &lt;p&gt;&#xa; It is intended that LinkMessage instances are reusable to minimize object&#xa; creation and cleanup.  It wraps a maxMessageSize byte array with input and&#xa; output streams for efficient processing from/to NMessage representation and&#xa; low level driver input/output.
</description>
<tag name="@author">Robert A Adams</tag>
<tag name="@creation">Oct 24, 2011</tag>
<extends>
<type class="java.lang.Object"/>
</extends>
<implements>
<type class="com.tridium.ndriver.util.LinkedQueue$ILinkable"/>
</implements>
<!-- com.tridium.ndriver.comm.LinkMessage(int) -->
<constructor name="LinkMessage" public="true">
<parameter name="maxLength">
<type class="int"/>
</parameter>
<description>
LinkMessage message constructor creates a maxLength byte array which is&#xa; then wrapped with both and input and output stream. &lt;p&gt; LinkMessages are&#xa; pooled for later use and may be used for incoming or outgoing messages.&#xa; Subclasses should override this default constructor and call super().
</description>
</constructor>

<!-- com.tridium.ndriver.comm.LinkMessage.receive(java.io.InputStream) -->
<method name="receive"  public="true">
<description>
Get byte data from inputStream. Subclasses must override this method to&#xa; code beginning and ending checks for reading message from an inputStream.&#xa; return true if complete message received
</description>
<parameter name="in">
<type class="java.io.InputStream"/>
</parameter>
<return>
<type class="boolean"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- com.tridium.ndriver.comm.LinkMessage.setMessage(com.tridium.ndriver.comm.NMessage) -->
<method name="setMessage"  public="true">
<description>
Translate data from app message to link message representation
</description>
<parameter name="msg">
<type class="com.tridium.ndriver.comm.NMessage"/>
</parameter>
<return>
<type class="boolean"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- com.tridium.ndriver.comm.LinkMessage.getByteArray() -->
<method name="getByteArray"  public="true">
<description>
Access the underlying byte array
</description>
<return>
<type class="byte" dimension="1"/>
</return>
</method>

<!-- com.tridium.ndriver.comm.LinkMessage.getInputStream() -->
<method name="getInputStream"  public="true">
<description/>
<return>
<type class="java.io.InputStream"/>
</return>
</method>

<!-- com.tridium.ndriver.comm.LinkMessage.getOutputStream() -->
<method name="getOutputStream"  public="true">
<description/>
<return>
<type class="java.io.OutputStream"/>
</return>
</method>

<!-- com.tridium.ndriver.comm.LinkMessage.getLength() -->
<method name="getLength"  public="true">
<description>
Get the size in the output stream
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- com.tridium.ndriver.comm.LinkMessage.setLength(int) -->
<method name="setLength"  public="true">
<description>
Set the size of the input stream
</description>
<parameter name="len">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ndriver.comm.LinkMessage.initReceive(com.tridium.ndriver.comm.LinkMessage) -->
<method name="initReceive"  public="true">
<description>
This callback is made on incoming linkmessages to provide a mechanism to&#xa; constrain the receive message framing with info from the transmit message.&#xa; This call is made by streaming linklayers on the current receive link&#xa; message immediately before the request message is written to the outgoing&#xa; stream.  The msgToSend data can be accessed with getByteArray() and&#xa; getLength().
</description>
<tag name="@since">3.8.38.1</tag>
<parameter name="msgToSend">
<type class="com.tridium.ndriver.comm.LinkMessage"/>
<description>
- the outgoing link message
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ndriver.comm.LinkMessage.doInit() -->
<method name="doInit"  protected="true">
<description>
Override point for subclasses to initialize any state variables.  This is&#xa; called when a linkMessage is retrieved from the linkMessageFactory.
</description>
<tag name="@since">3.8.38.1</tag>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ndriver.comm.LinkMessage.getNext() -->
<method name="getNext"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="com.tridium.ndriver.util.LinkedQueue$ILinkable"/>
</return>
</method>

<!-- com.tridium.ndriver.comm.LinkMessage.setNext(com.tridium.ndriver.util.LinkedQueue.ILinkable) -->
<method name="setNext"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="nxt">
<type class="com.tridium.ndriver.util.LinkedQueue$ILinkable"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ndriver.comm.LinkMessage.address -->
<field name="address"  public="true">
<type class="java.lang.Object"/>
<description/>
</field>

<!-- com.tridium.ndriver.comm.LinkMessage.buffer -->
<field name="buffer"  protected="true">
<type class="byte" dimension="1"/>
<description/>
</field>

</class>
</bajadoc>
