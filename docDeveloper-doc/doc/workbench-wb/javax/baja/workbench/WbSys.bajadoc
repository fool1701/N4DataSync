<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="workbench" runtimeProfile="wb" qualifiedName="javax.baja.workbench.WbSys" name="WbSys" packageName="javax.baja.workbench" public="true" final="true">
<description>
WbSys provides static method APIs specific to a workbench VM.
</description>
<tag name="@author">Brian Frank on 16 Apr 01</tag>
<tag name="@version">$Revision: 10$ $Date: 8/25/09 11:36:24 AM EDT$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="java.lang.Object"/>
</extends>
<!-- javax.baja.workbench.WbSys() -->
<constructor name="WbSys" public="true">
<description/>
</constructor>

<!-- javax.baja.workbench.WbSys.getBaseViewsFilter() -->
<method name="getBaseViewsFilter"  public="true" static="true">
<description>
Returns an agent filter which retrieves all view agents for a target&#xa; regardless of current workbench profile.
</description>
<tag name="@since">Niagara 3.7</tag>
<return>
<type class="javax.baja.agent.AgentFilter"/>
<description>
&lt;code&gt;<see ref="javax.baja.agent.AgentFilter">AgentFilter</see>&lt;/code&gt;
</description>
</return>
</method>

<!-- javax.baja.workbench.WbSys.getFilteredViewList(javax.baja.ui.BWidget, javax.baja.sys.BObject, java.util.function.Predicate&lt;javax.baja.agent.AgentInfo&gt;) -->
<method name="getFilteredViewList"  public="true" static="true">
<description>
Returns a filtered list of views that can be used for the specified object.
</description>
<parameter name="owner">
<type class="javax.baja.ui.BWidget"/>
<description>
The Widget owner. This Widget is used to find the Workbench Profile for view filtering.
</description>
</parameter>
<parameter name="target">
<type class="javax.baja.sys.BObject"/>
<description>
The target object used for view filtering.
</description>
</parameter>
<parameter name="predicate">
<parameterizedType class="java.util.function.Predicate">
<args>
<type class="javax.baja.agent.AgentInfo"/>
</args>
</parameterizedType>
<description>
Additional filtering of agents.
</description>
</parameter>
<return>
<type class="javax.baja.agent.AgentList"/>
<description>
Returns a filtered list of views.
</description>
</return>
</method>

<!-- javax.baja.workbench.WbSys.isRemoteVersionTheSame(com.tridium.fox.session.FoxSession, java.lang.String) -->
<method name="isRemoteVersionTheSame"  public="true" static="true">
<annotation><type class="java.lang.Deprecated"/>
</annotation>
<description>
Check whether the all the remote ux modules are present in the client or not.
</description>
<tag name="@deprecated">since Niagara 4.6. The typeSpec is now ignored because all ux&#xa; versions are now checked.</tag>
<tag name="@see">javax.baja.workbench.WbSys#isRemoteVersionTheSame(FoxSession)</tag>
<parameter name="foxSession">
<type class="com.tridium.fox.session.FoxSession"/>
</parameter>
<parameter name="typeSpec">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.workbench.WbSys.isRemoteVersionTheSame(com.tridium.fox.session.FoxSession) -->
<method name="isRemoteVersionTheSame"  public="true" static="true">
<description>
Check whether the all the remote ux modules are present in the client or not.&#xa; This is only checked once per fox session and the result is cached.
</description>
<tag name="@since">Niagara 4.6</tag>
<parameter name="foxSession">
<type class="com.tridium.fox.session.FoxSession"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.workbench.WbSys.isVersionTheSame(java.util.Map&lt;java.lang.String, javax.baja.util.Version&gt;, java.lang.String) -->
<method name="isVersionTheSame"  public="true" static="true">
<description>
Given a map of module and version information, return true if that information is all present in the local client.
</description>
<tag name="@since">Niagara 4.6</tag>
<parameter name="remoteModuleVersions">
<parameterizedType class="java.util.Map">
<args>
<type class="java.lang.String"/>
<type class="javax.baja.util.Version"/>
</args>
</parameterizedType>
<description>
A Map with a key that is formatted as &#x22;moduleName runtimeProfile&#x22; and the value is the Vendor Version. If null the versions are unknown.
</description>
</parameter>
<parameter name="hostName">
<type class="java.lang.String"/>
<description>
The remote hostName.
</description>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

</class>
</bajadoc>
