<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="workbench" runtimeProfile="wb" qualifiedName="javax.baja.workbench.mgr.MgrModel" name="MgrModel" packageName="javax.baja.workbench.mgr" public="true">
<description>
MgrModel manages the logical model of the BComponents&#xa; in the station database (as opposed to the discovery&#xa; model managed by MgrLearn).
</description>
<tag name="@author">Brian Frank on 12 Jan 04</tag>
<tag name="@version">$Revision: 24$ $Date: 7/30/10 11:10:22 AM EDT$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="javax.baja.workbench.mgr.MgrSupport"/>
</extends>
<!-- javax.baja.workbench.mgr.MgrModel(javax.baja.workbench.mgr.BAbstractManager) -->
<constructor name="MgrModel" public="true">
<parameter name="manager">
<type class="javax.baja.workbench.mgr.BAbstractManager"/>
</parameter>
<description>
Constructor.
</description>
</constructor>

<!-- javax.baja.workbench.mgr.MgrModel.init() -->
<method name="init"  public="true">
<description>
Init is called once from &lt;code&gt;BAbstractManager.init()&lt;/code&gt;.&#xa; Must call &lt;code&gt;super.init()&lt;/code&gt; if overridden.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrModel.getTable() -->
<method name="getTable"  public="true" final="true">
<description>
Get the database table used to display the components in the &#xa; database.  This table is initialized via the makeTable() method.
</description>
<return>
<type class="javax.baja.workbench.mgr.BMgrTable"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrModel.getColumns() -->
<method name="getColumns"  public="true" final="true">
<description>
Get the columns to display for the database table.  These&#xa; columns are initialized from the makeColumns() method.
</description>
<return>
<type class="javax.baja.workbench.mgr.MgrColumn" dimension="1"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrModel.setColumns(javax.baja.workbench.mgr.MgrColumn[]) -->
<method name="setColumns"  public="true" final="true">
<description>
Set the columns to display for the database table.  These&#xa; columns replace the values initialized from the makeColumns() &#xa; method.
</description>
<tag name="@since">Niagara 3.6</tag>
<parameter name="cols">
<type class="javax.baja.workbench.mgr.MgrColumn" dimension="1"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrModel.getColumnCount() -->
<method name="getColumnCount"  public="true" final="true">
<description>
Get the number of columns.
</description>
<tag name="@since">Niagara 3.6</tag>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrModel.getColumn(int) -->
<method name="getColumn"  public="true" final="true">
<description>
Get the column at the specified index.
</description>
<parameter name="index">
<type class="int"/>
</parameter>
<return>
<type class="javax.baja.workbench.mgr.MgrColumn"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrModel.getEditableColumns() -->
<method name="getEditableColumns"  public="true" final="true">
<description>
Get the columns which are editable using the EditMgr APIs. &#xa; This list the subset of &lt;code&gt;getColumns()&lt;/code&gt; which&#xa; has the &lt;code&gt;MgrColumn.EDITABLE&lt;/code&gt; flag set.
</description>
<return>
<type class="javax.baja.workbench.mgr.MgrColumn" dimension="1"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrModel.columnsModified() -->
<method name="columnsModified"  public="true" final="true">
<description>
Must be called if the model&#x27;s columns are modified in order to &#xa; initialize the new columns and updated the MgrTable.
</description>
<tag name="@since">Niagara 3.6</tag>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrModel.getEditableTagColumns(java.lang.String) -->
<method name="getEditableTagColumns"  public="true">
<description/>
<parameter name="namespace">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.workbench.mgr.MgrColumn" dimension="1"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrModel.makePane() -->
<method name="makePane"  public="true">
<description>
Make the pane used to display the database components.  The&#xa; default implementation uses makeTable() and makeTableTitle().
</description>
<return>
<type class="javax.baja.ui.BWidget"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrModel.makeTable() -->
<method name="makeTable"  protected="true">
<description>
Make the table to use for the display of components &#xa; in the database.
</description>
<return>
<type class="javax.baja.workbench.mgr.BMgrTable"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrModel.makeTableTitle() -->
<method name="makeTableTitle"  protected="true">
<description>
Get the title to use for the database table.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrModel.initTable() -->
<method name="initTable"  protected="true">
<description/>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrModel.getMaxNewInstances() -->
<method name="getMaxNewInstances"  public="true">
<description>
Override this method if you need the ability&#xa; to add more than 100 objects at a time.
</description>
<tag name="@since">Niagara 4.2</tag>
<return>
<type class="int"/>
<description>
the maximum number of new objects to add at once
</description>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrModel.getNewTypes() -->
<method name="getNewTypes"  public="true">
<description>
Get the list of types supported by the new operation.  The&#xa; first entry in the list should be the default type.&#xa; &lt;pre&gt;                                     &#xa;    return MgrTypeInfo.makeArray(BFooDevice.TYPE);&#xa; &lt;/pre&gt;
</description>
<return>
<type class="javax.baja.workbench.mgr.MgrTypeInfo" dimension="1"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrModel.getBaseNewType() -->
<method name="getBaseNewType"  public="true">
<description>
Get the base type supported by the new operation.
</description>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrModel.toType(javax.baja.sys.BComponent) -->
<method name="toType"  public="true">
<description>
Given a BComponent, compute what its MgrTypeInfo is; this is&#xa; basically the reverse of newInstance().
</description>
<parameter name="c">
<type class="javax.baja.sys.BComponent"/>
</parameter>
<return>
<type class="javax.baja.workbench.mgr.MgrTypeInfo"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrModel.newInstance(javax.baja.workbench.mgr.MgrTypeInfo) -->
<method name="newInstance"  public="true">
<description>
Given a MgrTypeInfo create a new BComponent instance.  This is&#xa; used by the new and add commands to initialize components from&#xa; a user selected type.
</description>
<parameter name="type">
<type class="javax.baja.workbench.mgr.MgrTypeInfo"/>
</parameter>
<return>
<type class="javax.baja.sys.BComponent"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.workbench.mgr.MgrModel.addInstances(javax.baja.workbench.mgr.MgrEditRow[], javax.baja.sys.Context) -->
<method name="addInstances"  public="true">
<description>
This callback is made by MgrEdit when commit() requires &#xa; adding a new components into the database.  Subclasses may&#xa; override this method to control how the add is performed.  &#xa; The default implementation uses Mark.moveTo().
</description>
<parameter name="rows">
<type class="javax.baja.workbench.mgr.MgrEditRow" dimension="1"/>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="javax.baja.ui.CommandArtifact"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.workbench.mgr.MgrModel.makeColumns() -->
<method name="makeColumns"  protected="true">
<description>
This method is called once to initialize the columns.  &#xa; If you wish your manager to support MixIns, use the &#xa; &lt;code&gt;appendMixInColumns&lt;/code&gt; method.
</description>
<return>
<type class="javax.baja.workbench.mgr.MgrColumn" dimension="1"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrModel.appendMixInColumns(javax.baja.workbench.mgr.MgrColumn[], javax.baja.sys.Type) -->
<method name="appendMixInColumns"  public="true">
<description>
Given an original list of columns, append a MgrColumn.MixIn for &#xa; each MixIn registered on the specified parent type - usually this&#xa; the primary type returned by &lt;code&gt;getNewTypes()&lt;/code&gt;.
</description>
<parameter name="cols">
<type class="javax.baja.workbench.mgr.MgrColumn" dimension="1"/>
</parameter>
<parameter name="mixInParentType">
<type class="javax.baja.sys.Type"/>
</parameter>
<return>
<type class="javax.baja.workbench.mgr.MgrColumn" dimension="1"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrModel.load(javax.baja.sys.BComponent) -->
<method name="load"  public="true">
<description>
Call &lt;code&gt;getTable().reload()&lt;/code&gt;.
</description>
<parameter name="target">
<type class="javax.baja.sys.BComponent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrModel.getIncludeTypes() -->
<method name="getIncludeTypes"  public="true">
<description>
Get the list of types to include in this manager.
</description>
<return>
<type class="javax.baja.sys.Type" dimension="1"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrModel.accept(javax.baja.sys.BComponent) -->
<method name="accept"  public="true">
<description>
The &lt;code&gt;accept()&lt;/code&gt; method is used to provide an&#xa; additional level of filtering for the components displayed &#xa; by this manager.  This method is NOT a replacement for &#xa; &lt;code&gt;getIncludeTypes()&lt;/code&gt;, but augments it.
</description>
<parameter name="component">
<type class="javax.baja.sys.BComponent"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrModel.getSubscribeDepth() -->
<method name="getSubscribeDepth"  public="true">
<description>
Get the depth used to subscribe for component events&#xa; by this manager.  A depth of 1 means to subscribe to&#xa; components right under the target container. A depth&#xa; of 2 means to subscribe to child components and grandchild&#xa; components under the container.  Depth must never be&#xa; zero - that would be only the container itself.  If you&#xa; find yourself using a depth above 3 you probably need&#xa; to rethink your component structure.  The default is one.
</description>
<return>
<type class="int"/>
</return>
</method>

</class>
</bajadoc>
