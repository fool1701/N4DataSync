<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="workbench" runtimeProfile="wb" qualifiedName="javax.baja.workbench.mgr.MgrLearn" name="MgrLearn" packageName="javax.baja.workbench.mgr" public="true" abstract="true">
<description>
MgrLearn manages the logical model and visualization of the&#xa; discovery data as well as the add and match processing.
</description>
<tag name="@author">Brian Frank</tag>
<tag name="@creation">10 Jan 04</tag>
<tag name="@version">$Revision: 21$ $Date: 7/30/10 10:29:29 AM EDT$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="javax.baja.workbench.mgr.MgrSupport"/>
</extends>
<!-- javax.baja.workbench.mgr.MgrLearn(javax.baja.workbench.mgr.BAbstractManager) -->
<constructor name="MgrLearn" public="true">
<parameter name="manager">
<type class="javax.baja.workbench.mgr.BAbstractManager"/>
</parameter>
<description>
Constructor.
</description>
</constructor>

<!-- javax.baja.workbench.mgr.MgrLearn.init() -->
<method name="init"  public="true">
<description>
Init is called once from &lt;code&gt;BAbstractManager.init()&lt;/code&gt;&#xa; Must call &lt;code&gt;super.init()&lt;/code&gt; if overridden.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrLearn.getTable() -->
<method name="getTable"  public="true" final="true">
<description>
Get the TreeTable used to display the discovery data.
</description>
<return>
<type class="javax.baja.workbench.mgr.BLearnTable"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrLearn.getJobBar() -->
<method name="getJobBar"  public="true" final="true">
<description>
Get the widget created via makeJobBar().
</description>
<return>
<type class="javax.baja.ui.BWidget"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrLearn.getColumns() -->
<method name="getColumns"  public="true" final="true">
<description>
Get the columns to display for the discovery table.  These&#xa; columns are initialized by the makeColumns() method.
</description>
<return>
<type class="javax.baja.workbench.mgr.MgrColumn" dimension="1"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrLearn.updateTable() -->
<method name="updateTable"  public="true">
<description>
This method is called when the discovery table&#xa; should be updated against the logical model.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrLearn.getRootCount() -->
<method name="getRootCount"  public="true" final="true">
<description>
Get the current number of root objects.
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrLearn.getRoot(int) -->
<method name="getRoot"  public="true" final="true">
<description>
Get root object at the specified index.
</description>
<parameter name="index">
<type class="int"/>
</parameter>
<return>
<type class="java.lang.Object"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrLearn.getRoots() -->
<method name="getRoots"  public="true" final="true">
<description>
Get a copy of the current root objects.
</description>
<return>
<type class="java.lang.Object" dimension="1"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrLearn.updateRoots(java.lang.Object[]) -->
<method name="updateRoots"  public="true" final="true">
<description>
Update the root discovery objects and call &lt;code&gt;updateTable()&lt;/code&gt;.
</description>
<parameter name="roots">
<type class="java.lang.Object" dimension="1"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrLearn.makePane() -->
<method name="makePane"  public="true">
<description>
Make the pane used to display the discovery data.&#xa; The default implementation uses makeTableTitle(), &#xa; makeTable(), and makeJobBar().
</description>
<return>
<type class="javax.baja.ui.BWidget"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrLearn.makeTableTitle() -->
<method name="makeTableTitle"  public="true">
<description>
Get the title for the discovery table.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrLearn.makeTable() -->
<method name="makeTable"  protected="true">
<description>
This method is called once to initalize the discovery table.
</description>
<return>
<type class="javax.baja.workbench.mgr.BLearnTable"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrLearn.makeJobBar() -->
<method name="makeJobBar"  protected="true">
<description>
This is a hook used to initialize the discovery JobBar &#xa; for displaying progress of the discovery job.  If null &#xa; is returned then no JobBar is included.
</description>
<return>
<type class="javax.baja.ui.BWidget"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrLearn.hasDynamicColumns() -->
<method name="hasDynamicColumns"  protected="true">
<description>
Return if the discovery table&#x27;s columns should be &#xa; re-initialized when the discovery data is updated.
</description>
<tag name="@since">Niagara 3.4</tag>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrLearn.makeColumns() -->
<method name="makeColumns"  protected="true" abstract="true">
<description>
This is method is called to initialize the &#xa; columns used for the discovery table.  If &#xa; hasDynamicColumns() returns false, than makeColumns()&#xa; is only called once; otherwise it is called each time&#xa; the learn table is updated.
</description>
<return>
<type class="javax.baja.workbench.mgr.MgrColumn" dimension="1"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrLearn.isDepthExpandable(int) -->
<method name="isDepthExpandable"  public="true">
<description>
Return if the specified depth is expandable.  If the&#xa; discovery model supports expansion, this method must&#xa; be overridden to return true for applicable levels.&#xa; Default returns false.
</description>
<parameter name="depth">
<type class="int"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrLearn.isGroup(java.lang.Object) -->
<method name="isGroup"  public="true">
<description>
Return if the discovery object should be rendered&#xa; as group in the TreeTable.
</description>
<parameter name="discovery">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrLearn.hasChildren(java.lang.Object) -->
<method name="hasChildren"  public="true">
<description>
Return if the specified discovery object has children.  This &#xa; method is only applicable if &lt;code&gt;isDepthExpandable()&lt;/code&gt;&#xa; returns true for the given object&#x27;s depth.  Default returns true.
</description>
<parameter name="discovery">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrLearn.getChildren(java.lang.Object) -->
<method name="getChildren"  public="true">
<description>
If &lt;code&gt;isDepthExpandable()&lt;/code&gt; and &lt;code&gt;hasChildren()&lt;/code&gt; &#xa; return true for the specified object then this method is the&#xa; hook to get the expanded children.  Return an empty array if&#xa; no children available.
</description>
<parameter name="discovery">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="java.lang.Object" dimension="1"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrLearn.getIcon(java.lang.Object) -->
<method name="getIcon"  public="true">
<description>
Get the icon for the specified discovery object.
</description>
<parameter name="discovery">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="javax.baja.gx.BImage"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrLearn.getExisting(java.lang.Object) -->
<method name="getExisting"  public="true">
<description>
If the specified discovery object is already mapped into&#xa; the station database as an existing component then return&#xa; it, otherwise return null.  Subclasses should override&#xa; &lt;code&gt;isExisting(Object, BComponent)&lt;/code&gt;.
</description>
<parameter name="discovery">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="javax.baja.sys.BComponent"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrLearn.isExisting(java.lang.Object, javax.baja.sys.BComponent) -->
<method name="isExisting"  public="true">
<description>
Return if the specified component is an existing representation&#xa; of the discovery object which has already been mapped into the&#xa; station database.  The default implementation always returns false.
</description>
<parameter name="discovery">
<type class="java.lang.Object"/>
</parameter>
<parameter name="component">
<type class="javax.baja.sys.BComponent"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrLearn.getJob() -->
<method name="getJob"  public="true">
<description>
Return the job currently mapped via &lt;code&gt;setJob()&lt;/code&gt;.
</description>
<return>
<type class="javax.baja.job.BJob"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrLearn.setJob(javax.baja.job.BJob) -->
<method name="setJob"  public="true">
<description>
Learnable managers can provide a baja:Job which is&#xa; used to manage the discovery process.
</description>
<parameter name="job">
<type class="javax.baja.job.BJob"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrLearn.setJob(javax.baja.naming.BOrd) -->
<method name="setJob"  public="true">
<description>
Lookup a job by ord, and then call &lt;code&gt;setJob()&lt;/code&gt;.
</description>
<parameter name="jobOrd">
<type class="javax.baja.naming.BOrd"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.workbench.mgr.MgrLearn.jobComplete(javax.baja.job.BJob) -->
<method name="jobComplete"  public="true">
<description>
This callback is automatically invoked when the &#xa; current job set via &lt;code&gt;setJob()&lt;/code&gt; completes.
</description>
<parameter name="job">
<type class="javax.baja.job.BJob"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrLearn.isMatchable(java.lang.Object, javax.baja.sys.BComponent) -->
<method name="isMatchable"  public="true">
<description>
Return if the specified discovered object and the existing &#xa; component can be matched.  If so then this combination must &#xa; be supported by &lt;code&gt;toRow()&lt;/code&gt;.  The default implementation &#xa; returns true if any of the MgrTypeInfos from &lt;code&gt;toTypes()&lt;/code&gt; &#xa; return true for &lt;code&gt;isMatchable(database)&lt;/code&gt;.
</description>
<parameter name="discovery">
<type class="java.lang.Object"/>
</parameter>
<parameter name="database">
<type class="javax.baja.sys.BComponent"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrLearn.toTypes(java.lang.Object) -->
<method name="toTypes"  public="true" abstract="true">
<description>
Given a discovery row object, return a list of the types &#xa; which may be used to model it as a BComponent in the &#xa; station database.  This method is used by the add command.&#xa; The type at index 0 in the array should be the type which&#xa; provides the best mapping.  Return an empty array if the&#xa; discovery cannot be mapped.
</description>
<parameter name="discovery">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="javax.baja.workbench.mgr.MgrTypeInfo" dimension="1"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.workbench.mgr.MgrLearn.toRow(java.lang.Object, javax.baja.workbench.mgr.MgrEditRow) -->
<method name="toRow"  public="true" abstract="true">
<description>
Map the configuration of discovery object to the specified &#xa; MgrEditRow.  Configuration changes should be made to the row,&#xa; not the component (so that the changes aren&#x27;t applied until&#xa; the user commits).  &#xa; &lt;p&gt;&#xa; This method is used by the add and match commands.  For the &#xa; match command the row maps to the component already in the &#xa; database.  For the add command the component is not created &#xa; until commit time.
</description>
<parameter name="discovery">
<type class="java.lang.Object"/>
</parameter>
<parameter name="row">
<type class="javax.baja.workbench.mgr.MgrEditRow"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

</class>
</bajadoc>
