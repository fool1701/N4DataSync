<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="workbench" runtimeProfile="wb" qualifiedName="javax.baja.workbench.mgr.MgrColumn" name="MgrColumn" packageName="javax.baja.workbench.mgr" public="true" abstract="true">
<description>
MgrColumn is used to display a column of information &#xa; in a BAbstractManager table or to support get/set for batch &#xa; edits.                              &#xa;        &#xa; &lt;pre&gt;&lt;code&gt;&amp;#xa; Using MgrColumn with MgrEdit&amp;#xa;   target -&amp;gt; load() -&amp;gt; MgrEditRow.cell -&amp;gt; toFieldEditor() -&amp;gt; FieldEditor&amp;#xa;   FieldEditor -&amp;gt; fromFieldEditor() -&amp;gt; MgrEditRow.cell -&amp;gt; save() -&amp;gt; target&amp;#xa; &lt;/code&gt;&lt;/pre&gt;
</description>
<tag name="@author">Brian Frank</tag>
<tag name="@creation">15 Dec 03</tag>
<tag name="@version">$Revision: 51$ $Date: 7/1/11 1:58:07 PM EDT$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="java.lang.Object"/>
</extends>
<!-- javax.baja.workbench.mgr.MgrColumn(java.lang.String) -->
<constructor name="MgrColumn" protected="true">
<parameter name="displayName">
<type class="java.lang.String"/>
</parameter>
<description>
Convience for &lt;code&gt;MgrColumn(displayName, 0)&lt;/code&gt;.
</description>
</constructor>

<!-- javax.baja.workbench.mgr.MgrColumn(java.lang.String, int) -->
<constructor name="MgrColumn" protected="true">
<parameter name="displayName">
<type class="java.lang.String"/>
</parameter>
<parameter name="flags">
<type class="int"/>
</parameter>
<description>
Construct an MgrColumn.
</description>
</constructor>

<!-- javax.baja.workbench.mgr.MgrColumn(java.lang.String, int, javax.baja.gx.BImage) -->
<constructor name="MgrColumn" protected="true">
<parameter name="displayName">
<type class="java.lang.String"/>
</parameter>
<parameter name="flags">
<type class="int"/>
</parameter>
<parameter name="columnIcon">
<type class="javax.baja.gx.BImage"/>
</parameter>
<description>
Construct an MgrColumn.
</description>
</constructor>

<!-- javax.baja.workbench.mgr.MgrColumn.getManager() -->
<method name="getManager"  public="true">
<description>
Get the manager associated with this column.
</description>
<return>
<type class="javax.baja.workbench.mgr.BAbstractManager"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrColumn.getDisplayName() -->
<method name="getDisplayName"  public="true">
<description>
Get the display name for the current VM&#x27;s locale.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrColumn.get(java.lang.Object) -->
<method name="get"  public="true" abstract="true">
<description>
Given a row, extract the column value.  This method&#xa; is used to get a value to display in a table.  In the&#xa; MgrTable row is the BComponent being managed.  If used&#xa; with the LearnTable then row is a discovery object.
</description>
<parameter name="row">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="java.lang.Object"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrColumn.toSortKey(java.lang.Object) -->
<method name="toSortKey"  public="true">
<description>
Given a row, extract an Object to use for a sort&#xa; key.  The default is to return &lt;code&gt;get()&lt;/code&gt;.
</description>
<parameter name="row">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="java.lang.Object"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrColumn.toDisplayString(java.lang.Object, java.lang.Object, javax.baja.sys.Context) -->
<method name="toDisplayString"  public="true">
<description>
Given a row and it&#x27;s value return the string to display to the &#xa; user in a table cell.  The row is BComponent or learn object,&#xa; the value is the result of &lt;code&gt;get(row)&lt;/code&gt;, and context&#xa; is the view&#x27;s current context.
</description>
<parameter name="row">
<type class="java.lang.Object"/>
</parameter>
<parameter name="value">
<type class="java.lang.Object"/>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrColumn.getCellRenderer() -->
<method name="getCellRenderer"  public="true">
<description>
Return the renderer to use for painting the cells&#xa; of this column in a BTable.  Return null to use the&#xa; default renderering.
</description>
<return>
<type class="javax.baja.ui.table.TableCellRenderer"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrColumn.getFlags() -->
<method name="getFlags"  public="true">
<description>
Return the flags bit mask.
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrColumn.setFlags(int) -->
<method name="setFlags"  public="true">
<description>
Set the flags bit mask.
</description>
<tag name="@since">Niagara 3.6</tag>
<parameter name="flags">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrColumn.isEditable() -->
<method name="isEditable"  public="true">
<description>
Return if the EDITABLE flag is set.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrColumn.isUnseen() -->
<method name="isUnseen"  public="true">
<description>
Return if the UNSEEN flag is set.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrColumn.isReadonly() -->
<method name="isReadonly"  public="true">
<description>
Return if the READONLY flag is set.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrColumn.setHidden() -->
<method name="setHidden"  public="true">
<description>
Convenience method to modify the columns flags, removing&#xa; EDITABLE and setting UNSEEN.
</description>
<tag name="@since">Niagara 3.6</tag>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrColumn.setReadOnly() -->
<method name="setReadOnly"  public="true">
<description>
Convenience method to modify the columns flags, setting&#xa; READONLY.
</description>
<tag name="@since">Niagara 3.6</tag>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrColumn.isCellValid(javax.baja.workbench.mgr.MgrEditRow) -->
<method name="isCellValid"  public="true">
<description>
Given a row return true if this column cell is valid for the row.  Will cause the cell to be &#x22;gray&#x27; out.
</description>
<tag name="@since">Niagara 4.0</tag>
<parameter name="row">
<type class="javax.baja.workbench.mgr.MgrEditRow"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrColumn.setIcon(javax.baja.gx.BImage) -->
<method name="setIcon"  public="true">
<description>
Set column icon.&#xa;   Image must support disabled and highlighted images
</description>
<parameter name="columnIcon">
<type class="javax.baja.gx.BImage"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrColumn.getIcon() -->
<method name="getIcon"  public="true">
<description>
Get column icon.
</description>
<return>
<type class="javax.baja.gx.BImage"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrColumn.toString() -->
<method name="toString"  public="true">
<description>
Get debug string.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrColumn.load(javax.baja.workbench.mgr.MgrEditRow) -->
<method name="load"  public="true">
<description>
This method is called to load the value when working &#xa; with an MgrEditRow.  Load is used to initialize the &#xa; cell of a MgrEdit.
</description>
<parameter name="row">
<type class="javax.baja.workbench.mgr.MgrEditRow"/>
</parameter>
<return>
<type class="javax.baja.sys.BValue"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.workbench.mgr.MgrColumn.save(javax.baja.workbench.mgr.MgrEditRow, javax.baja.sys.BValue, javax.baja.sys.Context) -->
<method name="save"  public="true">
<description>
This method is called to save the value when working with &#xa; an MgrEditRow.  Save is used to save the cell of a MgrEditRow&#xa; to a target component.
</description>
<parameter name="row">
<type class="javax.baja.workbench.mgr.MgrEditRow"/>
</parameter>
<parameter name="value">
<type class="javax.baja.sys.BValue"/>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.workbench.mgr.MgrColumn.toEditor(javax.baja.workbench.mgr.MgrEditRow[], int, javax.baja.workbench.BWbEditor) -->
<method name="toEditor"  public="true">
<description>
During the user input phase of MgrEdit, each editable&#xa; column provides a widget for changing the cell of one&#xa; or more rows.  This method is called to return that widget &#xa; as a loaded editor.  If this column doesn&#x27;t support&#xa; concurrent editing of all the given rows then return null.   &#xa; If an editor has been allocated by a previous call to&#xa; this method, then it is passed as currentEditor.  The best&#xa; way to override this method is to check if the current&#xa; editor is non-null and suitable, if not allocate a new &#xa; one.  Then load the editor to reflect the current rows.
</description>
<parameter name="rows">
<type class="javax.baja.workbench.mgr.MgrEditRow" dimension="1"/>
</parameter>
<parameter name="colIndex">
<type class="int"/>
</parameter>
<parameter name="currentEditor">
<type class="javax.baja.workbench.BWbEditor"/>
</parameter>
<return>
<type class="javax.baja.workbench.BWbEditor"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.workbench.mgr.MgrColumn.fromEditor(javax.baja.workbench.mgr.MgrEditRow[], int, javax.baja.workbench.BWbEditor) -->
<method name="fromEditor"  public="true">
<description>
This method is called to store the value in the editor&#xa; back to the cells of this column for each of the specified&#xa; rows.  The widget passed with whatever widget was returned&#xa; by the toEditor method.
</description>
<parameter name="rows">
<type class="javax.baja.workbench.mgr.MgrEditRow" dimension="1"/>
</parameter>
<parameter name="colIndex">
<type class="int"/>
</parameter>
<parameter name="editor">
<type class="javax.baja.workbench.BWbEditor"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.workbench.mgr.MgrColumn.toFieldEditor(javax.baja.workbench.mgr.MgrEditRow[], int, javax.baja.workbench.BWbEditor, javax.baja.sys.Property[]) -->
<method name="toFieldEditor"  public="true" static="true">
<description>
This is a utility to map the rows to a common field editor.&#xa; If the rows don&#x27;t have a homogeneous type, then return null.
</description>
<parameter name="rows">
<type class="javax.baja.workbench.mgr.MgrEditRow" dimension="1"/>
</parameter>
<parameter name="colIndex">
<type class="int"/>
</parameter>
<parameter name="currentEditor">
<type class="javax.baja.workbench.BWbEditor"/>
</parameter>
<parameter name="propPath">
<type class="javax.baja.sys.Property" dimension="1"/>
</parameter>
<return>
<type class="javax.baja.workbench.fieldeditor.BWbFieldEditor"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrColumn.toFieldEditor(javax.baja.sys.Type, javax.baja.workbench.mgr.MgrEditRow[], int, javax.baja.workbench.BWbEditor, javax.baja.sys.Property[]) -->
<method name="toFieldEditor"  public="true" static="true">
<description>
This is a utility to map the rows to a common field editor.&#xa; If the rows don&#x27;t have a homogeneous type, then return null.
</description>
<parameter name="mixinType">
<type class="javax.baja.sys.Type"/>
</parameter>
<parameter name="rows">
<type class="javax.baja.workbench.mgr.MgrEditRow" dimension="1"/>
</parameter>
<parameter name="colIndex">
<type class="int"/>
</parameter>
<parameter name="currentEditor">
<type class="javax.baja.workbench.BWbEditor"/>
</parameter>
<parameter name="propPath">
<type class="javax.baja.sys.Property" dimension="1"/>
</parameter>
<return>
<type class="javax.baja.workbench.fieldeditor.BWbFieldEditor"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrColumn.fromFieldEditor(javax.baja.workbench.mgr.MgrEditRow[], int, javax.baja.workbench.BWbEditor, javax.baja.sys.Property[]) -->
<method name="fromFieldEditor"  public="true" static="true">
<description>
This is a utility to save back the results from a &#xa; field editor to a list of rows.
</description>
<parameter name="rows">
<type class="javax.baja.workbench.mgr.MgrEditRow" dimension="1"/>
</parameter>
<parameter name="colIndex">
<type class="int"/>
</parameter>
<parameter name="widget">
<type class="javax.baja.workbench.BWbEditor"/>
</parameter>
<parameter name="propPath">
<type class="javax.baja.sys.Property" dimension="1"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.workbench.mgr.MgrColumn.EDITABLE -->
<field name="EDITABLE"  public="true" static="true" final="true">
<type class="int"/>
<description>
Editable indicates a column which is included for edits&#xa;      via the MgrEdit APIs.
</description>
</field>

<!-- javax.baja.workbench.mgr.MgrColumn.UNSEEN -->
<field name="UNSEEN"  public="true" static="true" final="true">
<type class="int"/>
<description>
The unseen flag is used on columns which are not shown&#xa;      by default until the user turns them on via table options
</description>
</field>

<!-- javax.baja.workbench.mgr.MgrColumn.READONLY -->
<field name="READONLY"  public="true" static="true" final="true">
<type class="int"/>
<description>
The Readonly flag is used on editable columns which&#xa;      are displayed via the MgrEdit dialog, but not user modifiable
</description>
</field>

</class>
</bajadoc>
