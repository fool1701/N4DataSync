<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="workbench" runtimeProfile="wb" qualifiedName="javax.baja.workbench.mgr.MgrEdit" name="MgrEdit" packageName="javax.baja.workbench.mgr" public="true">
<description>
MgrEdit is used by BAbstractManager to add and change one &#xa; or more components in the station database.  MgrEdit is modeled&#xa; as a table using MgrEditRow for the rows and MgrColumn for&#xa; the columns.
</description>
<tag name="@author">Brian Frank</tag>
<tag name="@creation">17 Dec 03</tag>
<tag name="@version">$Revision: 30$ $Date: 8/16/10 4:52:36 PM EDT$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="javax.baja.ui.table.TableModel"/>
</extends>
<!-- javax.baja.workbench.mgr.MgrEdit(javax.baja.workbench.mgr.BAbstractManager, java.lang.String) -->
<constructor name="MgrEdit" public="true">
<parameter name="manager">
<type class="javax.baja.workbench.mgr.BAbstractManager"/>
</parameter>
<parameter name="title">
<type class="java.lang.String"/>
</parameter>
<description>
Constructor.
</description>
</constructor>

<!-- javax.baja.workbench.mgr.MgrEdit.getManager() -->
<method name="getManager"  public="true">
<description>
Get the associated BAbstractManager.
</description>
<return>
<type class="javax.baja.workbench.mgr.BAbstractManager"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrEdit.getTitle() -->
<method name="getTitle"  public="true">
<description>
Get the title passed to the constructor.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrEdit.getAddContainer() -->
<method name="getAddContainer"  public="true">
<description>
Get the container component which new components &#xa; will be added into by default.   The default assumes&#xa; the target of the BAbstractManager.
</description>
<return>
<type class="javax.baja.sys.BComponent"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrEdit.isAdd() -->
<method name="isAdd"  public="true">
<description>
boolean test for usage values (Add, Edit, Match, New)
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrEdit.isEdit() -->
<method name="isEdit"  public="true">
<description/>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrEdit.isMatch() -->
<method name="isMatch"  public="true">
<description/>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrEdit.isNew() -->
<method name="isNew"  public="true">
<description/>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrEdit.getColumns() -->
<method name="getColumns"  public="true" final="true">
<description>
Get the columns of the table.  These columns are &#xa; initialized by the makeColumns() method.
</description>
<return>
<type class="javax.baja.workbench.mgr.MgrColumn" dimension="1"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrEdit.makeColumns() -->
<method name="makeColumns"  protected="true">
<description>
Default returns &lt;code&gt;MgrModel.getEditableColumns()&lt;/code&gt;.
</description>
<return>
<type class="javax.baja.workbench.mgr.MgrColumn" dimension="1"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrEdit.getRowCount() -->
<method name="getRowCount"  public="true">
<description>
Get the number of rows.
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrEdit.getColumnCount() -->
<method name="getColumnCount"  public="true">
<description>
Get the number of columns.
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrEdit.getColumnName(int) -->
<method name="getColumnName"  public="true">
<description>
Get the display name of the column.
</description>
<parameter name="col">
<type class="int"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrEdit.getValueAt(int, int) -->
<method name="getValueAt"  public="true">
<description>
Get the value of the cell.
</description>
<parameter name="row">
<type class="int"/>
</parameter>
<parameter name="col">
<type class="int"/>
</parameter>
<return>
<type class="java.lang.Object"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrEdit.getSubject(int) -->
<method name="getSubject"  public="true">
<description>
Return &lt;code&gt;getRow(row)&lt;/code&gt;.
</description>
<parameter name="row">
<type class="int"/>
</parameter>
<return>
<type class="java.lang.Object"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrEdit.getRowIcon(int) -->
<method name="getRowIcon"  public="true">
<description>
Get the row icon.
</description>
<parameter name="row">
<type class="int"/>
</parameter>
<return>
<type class="javax.baja.gx.BImage"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrEdit.getRows() -->
<method name="getRows"  public="true">
<description>
Get the list of rows as an array of MgrEditRows.
</description>
<return>
<type class="javax.baja.workbench.mgr.MgrEditRow" dimension="1"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrEdit.getRow(int) -->
<method name="getRow"  public="true">
<description>
Get the MgrEditRow in the table at the specified index.
</description>
<parameter name="index">
<type class="int"/>
</parameter>
<return>
<type class="javax.baja.workbench.mgr.MgrEditRow"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrEdit.indexOf(javax.baja.workbench.mgr.MgrEditRow) -->
<method name="indexOf"  public="true">
<description>
Get the index of the specified MgrEditRow in the &#xa; list or return -1 if not found.
</description>
<parameter name="row">
<type class="javax.baja.workbench.mgr.MgrEditRow"/>
</parameter>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrEdit.addRow(int, javax.baja.workbench.mgr.MgrEditRow) -->
<method name="addRow"  public="true">
<description>
Add the MgrEditRow to the list at the specified index.
</description>
<parameter name="index">
<type class="int"/>
</parameter>
<parameter name="row">
<type class="javax.baja.workbench.mgr.MgrEditRow"/>
</parameter>
<return>
<type class="javax.baja.workbench.mgr.MgrEditRow"/>
<description>
the row passed as an argument.
</description>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.workbench.mgr.MgrEdit.addRow(javax.baja.workbench.mgr.MgrEditRow) -->
<method name="addRow"  public="true">
<description>
Convenience for &lt;code&gt;addRow(getRowCount(), row)&lt;/code&gt;.
</description>
<parameter name="row">
<type class="javax.baja.workbench.mgr.MgrEditRow"/>
</parameter>
<return>
<type class="javax.baja.workbench.mgr.MgrEditRow"/>
<description>
the row created for the target.
</description>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.workbench.mgr.MgrEdit.addRow(javax.baja.sys.BComponent) -->
<method name="addRow"  public="true">
<description>
Convenience for &lt;code&gt;addRow(makeRow(target, null, null))&lt;/code&gt;.
</description>
<parameter name="target">
<type class="javax.baja.sys.BComponent"/>
</parameter>
<return>
<type class="javax.baja.workbench.mgr.MgrEditRow"/>
<description>
the row created for the target.
</description>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.workbench.mgr.MgrEdit.addRow(java.lang.Object, javax.baja.workbench.mgr.MgrTypeInfo[]) -->
<method name="addRow"  public="true">
<description>
Convenience for &lt;code&gt;addRow(makeRow(getManager().getModel().newInstance(types[0]), discovery, types))&lt;/code&gt;.
</description>
<parameter name="discovery">
<type class="java.lang.Object"/>
</parameter>
<parameter name="types">
<type class="javax.baja.workbench.mgr.MgrTypeInfo" dimension="1"/>
</parameter>
<return>
<type class="javax.baja.workbench.mgr.MgrEditRow"/>
<description>
the row created for the target.
</description>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.workbench.mgr.MgrEdit.makeRow(javax.baja.sys.BComponent, java.lang.Object, javax.baja.workbench.mgr.MgrTypeInfo[]) -->
<method name="makeRow"  protected="true">
<description>
This is a callback for making an instance of a &#xa; MgrEditRow for the specified target.
</description>
<parameter name="target">
<type class="javax.baja.sys.BComponent"/>
</parameter>
<parameter name="discovery">
<type class="java.lang.Object"/>
</parameter>
<parameter name="types">
<type class="javax.baja.workbench.mgr.MgrTypeInfo" dimension="1"/>
</parameter>
<return>
<type class="javax.baja.workbench.mgr.MgrEditRow"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.workbench.mgr.MgrEdit.remove(javax.baja.workbench.mgr.MgrEditRow) -->
<method name="remove"  public="true">
<description>
Remove the specified MgrEditRow.
</description>
<parameter name="row">
<type class="javax.baja.workbench.mgr.MgrEditRow"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.workbench.mgr.MgrEdit.checkTargetNames() -->
<method name="checkTargetNames"  public="true">
<description>
Loop through all the rows and insure that each &#xa; target has a valid name.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrEdit.getUniqueName(javax.baja.workbench.mgr.MgrEditRow) -->
<method name="getUniqueName"  public="true">
<description>
Convenience for &lt;code&gt;getUniqueName(row, type.toSlotName())&lt;/code&gt;
</description>
<parameter name="row">
<type class="javax.baja.workbench.mgr.MgrEditRow"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrEdit.getUniqueName(javax.baja.workbench.mgr.MgrEditRow, java.lang.String) -->
<method name="getUniqueName"  public="true">
<description>
Generate a name for the specified row insuring that&#xa; it is unique both between the current database configuration&#xa; and the rows which may soon be committed.  The name returned&#xa; will be escaped.
</description>
<parameter name="row">
<type class="javax.baja.workbench.mgr.MgrEditRow"/>
</parameter>
<parameter name="defaultName">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrEdit.isNameUnique(javax.baja.workbench.mgr.MgrEditRow, java.lang.String) -->
<method name="isNameUnique"  public="true">
<description>
Return if the specified name for the row is unique.  This&#xa; method verifies the name is not already used in any of&#xa; the existing slots on the row&#x27;s parent, nor in any of rows&#xa; in this MgrEdit that have the same parent.
</description>
<parameter name="row">
<type class="javax.baja.workbench.mgr.MgrEditRow"/>
</parameter>
<parameter name="name">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrEdit.getTypeIntersection(javax.baja.workbench.mgr.MgrEditRow[]) -->
<method name="getTypeIntersection"  public="true" static="true">
<description>
This utility method creates a list of MgrTypeInfos which is &#xa; the intersection of each row&#x27;s &lt;code&gt;getAvailableTypes()&lt;/code&gt;.&#xa; Return array of length 0 if no common intersection.
</description>
<parameter name="rows">
<type class="javax.baja.workbench.mgr.MgrEditRow" dimension="1"/>
</parameter>
<return>
<type class="javax.baja.workbench.mgr.MgrTypeInfo" dimension="1"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrEdit.getSelectAll() -->
<method name="getSelectAll"  public="true">
<description>
Get the select all flag which is used by prompt() to &#xa; determine if all the MgrEditRows should be selected &#xa; by default.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrEdit.setSelectAll(boolean) -->
<method name="setSelectAll"  public="true">
<description>
Set or clear the select all flag which is used by&#xa; prompt() to determine if all the MgrEditRows should&#xa; be selected by default.
</description>
<parameter name="selectAll">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrEdit.invoke(javax.baja.sys.Context) -->
<method name="invoke"  public="true">
<description>
Prompt the user with a dialog to make the edits using&#xa; the prompt() method.  Then if the user applies, commit &#xa; the changes to the station database using the commit()&#xa; method.
</description>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="javax.baja.ui.CommandArtifact"/>
<description>
CommandArtifact to undo the operation.
</description>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.workbench.mgr.MgrEdit.prompt() -->
<method name="prompt"  public="true">
<description>
Prompt the user with a dialog to review/change &#xa; each of the MgrEditRows.
</description>
<return>
<type class="boolean"/>
<description>
false if cancel or true if user applies
</description>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.workbench.mgr.MgrEdit.validate(javax.baja.workbench.mgr.MgrEditRow[]) -->
<method name="validate"  public="true">
<description>
Give the MgrEdit a chance to validate any input before the dialog closes.
</description>
<parameter name="selection">
<type class="javax.baja.workbench.mgr.MgrEditRow" dimension="1"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.workbench.mgr.MgrEdit.validate(javax.baja.workbench.mgr.MgrEditRow) -->
<method name="validate"  public="true">
<description>
Give the MgrEdit a chance to validate any input before the dialog closes.
</description>
<parameter name="row">
<type class="javax.baja.workbench.mgr.MgrEditRow"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.workbench.mgr.MgrEdit.commit() -->
<method name="commit"  public="true">
<description>
This method commits each MgrEditRow to the station&#xa; database by calling MgrEditRow.commit() on each row.
</description>
<return>
<type class="javax.baja.ui.CommandArtifact"/>
<description>
CommandArtifact to undo the operation (not supported yet).
</description>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.workbench.mgr.MgrEdit.isReadonly(javax.baja.workbench.mgr.MgrEditRow[], javax.baja.workbench.mgr.MgrColumn) -->
<method name="isReadonly"  public="true">
<description>
Return whether the MgrColumn should be readonly&#xa; &lt;p&gt;&#xa; By default, the MgrColumn&#x27;s &#x27;readonly&#x27; flag is used&#xa; to determine whether it should be readonly or not
</description>
<tag name="@see">MgrEdit#getColumns()</tag>
<tag name="@see">MgrColumn#READONLY</tag>
<tag name="@since">Niagara 3.6</tag>
<parameter name="selectedRows">
<type class="javax.baja.workbench.mgr.MgrEditRow" dimension="1"/>
<description>
The currently selected rows
</description>
</parameter>
<parameter name="col">
<type class="javax.baja.workbench.mgr.MgrColumn"/>
<description>
The specified MgrColumn
</description>
</parameter>
<return>
<type class="boolean"/>
<description>
Return &#x27;true&#x27; if the column should be readonly
</description>
</return>
</method>

<!-- javax.baja.workbench.mgr.MgrEdit.DEFAULT -->
<field name="DEFAULT"  public="true" static="true" final="true">
<type class="int"/>
<description/>
</field>

<!-- javax.baja.workbench.mgr.MgrEdit.ADD -->
<field name="ADD"  public="true" static="true" final="true">
<type class="int"/>
<description/>
</field>

<!-- javax.baja.workbench.mgr.MgrEdit.EDIT -->
<field name="EDIT"  public="true" static="true" final="true">
<type class="int"/>
<description/>
</field>

<!-- javax.baja.workbench.mgr.MgrEdit.MATCH -->
<field name="MATCH"  public="true" static="true" final="true">
<type class="int"/>
<description/>
</field>

<!-- javax.baja.workbench.mgr.MgrEdit.NEW -->
<field name="NEW"  public="true" static="true" final="true">
<type class="int"/>
<description/>
</field>

</class>
</bajadoc>
