<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="workbench" runtimeProfile="wb" qualifiedName="javax.baja.workbench.bql.table.BqlTableColumn$Simple" name="BqlTableColumn.Simple" packageName="javax.baja.workbench.bql.table" public="true" static="true" innerClass="true">
<description>
A Simple column gets special handling because it&#xa; requests the string encoding of the target and then decodes&#xa; it to the original type.  So, getValueAt(row, col) on the table model&#xa; will always return the precise type when the column is a Simple column.&#xa; &lt;p&gt;&#xa; The limitation of using this column type is that all values in the&#xa; column MUST be of the same type.  For values that are not of the&#xa; correct type, the default value is returned.
</description>
<extends>
<type class="javax.baja.workbench.bql.table.BqlTableColumn"/>
</extends>
<!-- javax.baja.workbench.bql.table.BqlTableColumn.Simple(java.lang.String, javax.baja.sys.BSimple) -->
<constructor name="Simple" public="true">
<parameter name="name">
<type class="java.lang.String"/>
<description>
The name of the field or property to fetch.
</description>
</parameter>
<parameter name="def">
<type class="javax.baja.sys.BSimple"/>
<description>
The default value.  This cannot be null.
</description>
</parameter>
<description>
Create a new Simple column.
</description>
</constructor>

<!-- javax.baja.workbench.bql.table.BqlTableColumn.Simple(java.lang.String, java.lang.String, int, javax.baja.sys.BSimple) -->
<constructor name="Simple" public="true">
<parameter name="name">
<type class="java.lang.String"/>
<description>
The name of the field or property to fetch.
</description>
</parameter>
<parameter name="displayName">
<type class="java.lang.String"/>
<description>
The display name for the column.  This&#xa;   is what appears in the table header.
</description>
</parameter>
<parameter name="flags">
<type class="int"/>
<description>
Flags that specify the display behavior for&#xa;   this column.
</description>
</parameter>
<parameter name="def">
<type class="javax.baja.sys.BSimple"/>
<description>
The default value.  This cannot be null.
</description>
</parameter>
<description>
Create a new Simple column.
</description>
</constructor>

<!-- javax.baja.workbench.bql.table.BqlTableColumn.Simple.getProjection() -->
<method name="getProjection"  public="true">
<description>
Get the text to include in the projection for this&#xa; column.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.workbench.bql.table.BqlTableColumn.Simple.load(javax.baja.collection.BITable&lt;javax.baja.sys.BIObject&gt;, javax.baja.collection.Column) -->
<method name="load"  public="true">
<description>
Initialize this column to expose the specified column of the table.
</description>
<parameter name="t">
<parameterizedType class="javax.baja.collection.BITable">
<args>
<type class="javax.baja.sys.BIObject"/>
</args>
</parameterizedType>
</parameter>
<parameter name="column">
<type class="javax.baja.collection.Column"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.workbench.bql.table.BqlTableColumn.Simple.parse(java.lang.String) -->
<method name="parse"  protected="true">
<description>
Parse the simple.
</description>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.sys.BSimple"/>
</return>
</method>

<!-- javax.baja.workbench.bql.table.BqlTableColumn.Simple.getValueAt(int) -->
<method name="getValueAt"  public="true">
<description/>
<parameter name="row">
<type class="int"/>
</parameter>
<return>
<type class="java.lang.Object"/>
</return>
</method>

</class>
</bajadoc>
