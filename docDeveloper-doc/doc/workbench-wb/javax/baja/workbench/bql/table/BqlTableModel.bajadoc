<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="workbench" runtimeProfile="wb" qualifiedName="javax.baja.workbench.bql.table.BqlTableModel" name="BqlTableModel" packageName="javax.baja.workbench.bql.table" public="true">
<description>
BqlTableModel is a table model which provides a convenient interface for&#xa; presenting a BQL query result as a table.
</description>
<tag name="@author">John Sublett</tag>
<tag name="@creation">06 Dec 2004</tag>
<tag name="@version">$Revision: 6$ $Date: 4/20/06 9:27:34 AM EDT$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="javax.baja.ui.table.TableModel"/>
</extends>
<!-- javax.baja.workbench.bql.table.BqlTableModel() -->
<constructor name="BqlTableModel" public="true">
<description>
Default constructor.
</description>
</constructor>

<!-- javax.baja.workbench.bql.table.BqlTableModel(javax.baja.workbench.bql.table.BqlTableColumn[]) -->
<constructor name="BqlTableModel" public="true">
<parameter name="columns">
<type class="javax.baja.workbench.bql.table.BqlTableColumn" dimension="1"/>
</parameter>
<description>
Constructor with a column list.
</description>
</constructor>

<!-- javax.baja.workbench.bql.table.BqlTableModel.getBase() -->
<method name="getBase"  public="true">
<description>
Get the base object.
</description>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
</method>

<!-- javax.baja.workbench.bql.table.BqlTableModel.setBase(javax.baja.sys.BObject) -->
<method name="setBase"  public="true">
<description>
Set the base that the ord is resolved against.
</description>
<parameter name="base">
<type class="javax.baja.sys.BObject"/>
<description>
The base object that is passed to&#xa;   resolve() when the BQL ord is resolved.
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.workbench.bql.table.BqlTableModel.setBase(javax.baja.sys.BObject, javax.baja.naming.BOrd) -->
<method name="setBase"  public="true">
<description>
Set the base that the ord is resolved against.
</description>
<parameter name="base">
<type class="javax.baja.sys.BObject"/>
<description>
The base object that is passed to&#xa;   resolve() when the BQL ord is resolved.
</description>
</parameter>
<parameter name="prefix">
<type class="javax.baja.naming.BOrd"/>
<description>
The prefix that is added before the&#xa;   BQL ord before resolving it.  At resolve time this&#xa;   is equivalent to &lt;code&gt;BOrd.make(prefix, bql).resolve(base)&lt;/code&gt;&#xa;   where bql is the ord constructed from the columns, extent, etc.
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.workbench.bql.table.BqlTableModel.setBase(javax.baja.sys.BObject, java.lang.String) -->
<method name="setBase"  public="true">
<description>
Set the base that the ord is resolved against.
</description>
<parameter name="base">
<type class="javax.baja.sys.BObject"/>
<description>
The base object that is passed to&#xa;   resolve() when the BQL ord is resolved.
</description>
</parameter>
<parameter name="prefix">
<type class="java.lang.String"/>
<description>
The prefix that is added before the&#xa;   BQL ord before resolving it.  At resolve time this&#xa;   is equivalent to &lt;code&gt;BOrd.make(BOrd.make(prefix), bql).resolve(base)&lt;/code&gt;&#xa;   where bql is the ord constructed from the columns, extent, etc.
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.workbench.bql.table.BqlTableModel.getExtent() -->
<method name="getExtent"  public="true">
<description>
Get the extent.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.workbench.bql.table.BqlTableModel.setExtent(java.lang.String) -->
<method name="setExtent"  public="true">
<description>
Set the extent.  This is the &#x22;from&#x22; clause without&#xa; the &#x22;from&#x22;.
</description>
<parameter name="extent">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.workbench.bql.table.BqlTableModel.getPredicate() -->
<method name="getPredicate"  public="true">
<description>
Get the predicate.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.workbench.bql.table.BqlTableModel.setPredicate(java.lang.String) -->
<method name="setPredicate"  public="true">
<description>
Set the predicate for the query.  This is the &#x22;where&#x22; clause&#xa; without the &#x22;where&#x22;.
</description>
<parameter name="predicate">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.workbench.bql.table.BqlTableModel.getOrd() -->
<method name="getOrd"  public="true">
<description>
Get the ord that will be resolved to fetch the table data.
</description>
<return>
<type class="javax.baja.naming.BOrd"/>
</return>
</method>

<!-- javax.baja.workbench.bql.table.BqlTableModel.getStatusColumn() -->
<method name="getStatusColumn"  public="true">
<description>
Get the Status column.  If more than one Status column has been defined&#xa; it is undefined as to which one will be returned.
</description>
<return>
<type class="javax.baja.workbench.bql.table.BqlTableColumn$Status"/>
</return>
</method>

<!-- javax.baja.workbench.bql.table.BqlTableModel.getIconColumn() -->
<method name="getIconColumn"  public="true">
<description>
Get the Icon column.  If more than one Icon column has been defined&#xa; it is undefined as to which one will be returned.
</description>
<return>
<type class="javax.baja.workbench.bql.table.BqlTableColumn$Icon"/>
</return>
</method>

<!-- javax.baja.workbench.bql.table.BqlTableModel.getNavColumn() -->
<method name="getNavColumn"  public="true">
<description>
Get the Nav column.  If more than one Nav column has been defined&#xa; it is undefined as to which one will be returned.
</description>
<return>
<type class="javax.baja.workbench.bql.table.BqlTableColumn$Nav"/>
</return>
</method>

<!-- javax.baja.workbench.bql.table.BqlTableModel.setColumns(javax.baja.workbench.bql.table.BqlTableColumn[]) -->
<method name="setColumns"  public="true">
<description>
Set the columns for the query result.
</description>
<parameter name="columns">
<type class="javax.baja.workbench.bql.table.BqlTableColumn" dimension="1"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.workbench.bql.table.BqlTableModel.getBqlColumnCount() -->
<method name="getBqlColumnCount"  public="true">
<description>
Get the number of BQL table columns.  This doesn&#x27;t necessarily map&#xa; directly to the number of columns in the result.  Some columns&#xa; insert two columns into the query.
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.workbench.bql.table.BqlTableModel.getBqlColumn(int) -->
<method name="getBqlColumn"  public="true">
<description>
Get the BQL table column at the specified index.
</description>
<parameter name="index">
<type class="int"/>
</parameter>
<return>
<type class="javax.baja.workbench.bql.table.BqlTableColumn"/>
</return>
</method>

<!-- javax.baja.workbench.bql.table.BqlTableModel.getRowCount() -->
<method name="getRowCount"  public="true">
<description>
Get the number of rows in the table.
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.workbench.bql.table.BqlTableModel.getColumnCount() -->
<method name="getColumnCount"  public="true">
<description>
Get the column count.
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.workbench.bql.table.BqlTableModel.getColumnName(int) -->
<method name="getColumnName"  public="true">
<description>
Get the name of the column at the specified index.
</description>
<parameter name="index">
<type class="int"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.workbench.bql.table.BqlTableModel.getValueAt(int, int) -->
<method name="getValueAt"  public="true">
<description>
Get the value at the specified cell location.
</description>
<parameter name="row">
<type class="int"/>
</parameter>
<parameter name="col">
<type class="int"/>
</parameter>
<return>
<type class="java.lang.Object"/>
</return>
</method>

<!-- javax.baja.workbench.bql.table.BqlTableModel.getRowIcon(int) -->
<method name="getRowIcon"  public="true">
<description>
Get the icon for the specified row.
</description>
<parameter name="row">
<type class="int"/>
</parameter>
<return>
<type class="javax.baja.gx.BImage"/>
</return>
</method>

<!-- javax.baja.workbench.bql.table.BqlTableModel.isLoaded() -->
<method name="isLoaded"  public="true">
<description>
Has the model been loaded with a call to load().
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.workbench.bql.table.BqlTableModel.load() -->
<method name="load"  public="true">
<annotation><type class="java.lang.SuppressWarnings"/>
<elementValue name="value">
<annotationValue kind="array">
<elementArray>
<annotationValue kind="expr">
<expression>&#x22;unchecked&#x22;</expression>
</annotationValue>
</elementArray>
</annotationValue>
</elementValue>
</annotation>
<description>
Load the table data.  This method MUST be called before&#xa; any data will appear in the table.  If the BqlTable is&#xa; configured to auto-update, updates will not begin&#xa; until load() is called at least once directly.
</description>
<return>
<type class="void"/>
</return>
</method>

</class>
</bajadoc>
