<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="workbench" runtimeProfile="wb" qualifiedName="javax.baja.workbench.view.BWbView" name="BWbView" packageName="javax.baja.workbench.view" public="true" abstract="true">
<description>
BWbView is a plugin used to view and edit BObjects as the&#xa; main &#x22;working pane&#x22; of the workbench.
</description>
<tag name="@author">Brian Frank</tag>
<tag name="@creation">16 May 02</tag>
<tag name="@version">$Revision: 15$ $Date: 11/21/06 12:24:20 PM EST$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="javax.baja.workbench.BWbEditor"/>
</extends>
<!-- javax.baja.workbench.view.BWbView() -->
<constructor name="BWbView" public="true">
<description/>
</constructor>

<!-- javax.baja.workbench.view.BWbView.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.workbench.view.BWbView.getViewMenus() -->
<method name="getViewMenus"  public="true">
<description>
Get an array of BMenus that this plugin exposes.&#xa; These menus will be merged with the application&#xa; menus when this plugin is the active plugin in&#xa; its plugin context.
</description>
<return>
<type class="javax.baja.ui.menu.BIMenu" dimension="1"/>
<description>
array of menus to merge, or null if no&#xa;    menus are required.  The default is to&#xa;    return null.
</description>
</return>
</method>

<!-- javax.baja.workbench.view.BWbView.getViewToolBar() -->
<method name="getViewToolBar"  public="true">
<description>
Get the toolbar this plugin exposes.  This toolbar&#xa; will be merged with the application toolbar when this&#xa; plugin is the active plugin in its plugin context.
</description>
<return>
<type class="javax.baja.ui.toolbar.BIToolBar"/>
<description>
BToolBar to merge, or null if no&#xa;    toolbar is required.  The default is to&#xa;    return null.
</description>
</return>
</method>

<!-- javax.baja.workbench.view.BWbView.getViewStatusBarSupplement() -->
<method name="getViewStatusBarSupplement"  public="true">
<description>
Get a BWidget to display to the right of the status bar.&#xa; If there is no status bar in the shell then this method&#xa; is ignored.  The widget returned is displayed to the right&#xa; of the normal status bar and should have a preferred width&#xa; no wider than necessary.  The preferred height of the widget&#xa; is ignored and forced to the height of the normal status &#xa; bar.
</description>
<return>
<type class="javax.baja.ui.BWidget"/>
<description>
BWidget to append to the normal status bar,&#xa;   or null if no supplement is required.
</description>
</return>
</method>

<!-- javax.baja.workbench.view.BWbView.prime() -->
<method name="prime"  public="true">
<description>
Prime is called when the BPlugin should prepare &#xa; itself for focus.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.workbench.view.BWbView.activated() -->
<method name="activated"  public="true">
<description>
Activated is called when the view is first &#xa; loaded as the BWbShell&#x27;s active view.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.workbench.view.BWbView.deactivated() -->
<method name="deactivated"  public="true">
<description>
Deactivated is called when the view is &#xa; being unloaded from the BWbShell.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.workbench.view.BWbView.clearModified() -->
<method name="clearModified"  public="true">
<description>
Set the modified flag to false, then disable the&#xa; shell&#x27;s save button.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.workbench.view.BWbView.commandIdToString(int) -->
<method name="commandIdToString"  public="true" static="true">
<description>
Get a non-localized string for the specified command id.
</description>
<parameter name="id">
<type class="int"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.workbench.view.BWbView.isCommandEnabled(int) -->
<method name="isCommandEnabled"  public="true" final="true">
<description>
Is the specified plugin command enabled.
</description>
<parameter name="id">
<type class="int"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.workbench.view.BWbView.setCommandEnabled(int, boolean) -->
<method name="setCommandEnabled"  public="true" final="true">
<description>
Set the specified plugin command enabled state.
</description>
<parameter name="id">
<type class="int"/>
</parameter>
<parameter name="enabled">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.workbench.view.BWbView.invokeCommand(int) -->
<method name="invokeCommand"  public="true">
<description>
Invoke the specified command.
</description>
<parameter name="id">
<type class="int"/>
</parameter>
<return>
<type class="javax.baja.ui.CommandArtifact"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.workbench.view.BWbView.getTransferWidget() -->
<method name="getTransferWidget"  public="true" final="true">
<description>
Get the transfer widget which is used to map the&#xa; the cut, copy, paste, duplicate, delete calls.
</description>
<return>
<type class="javax.baja.ui.transfer.BTransferWidget"/>
</return>
</method>

<!-- javax.baja.workbench.view.BWbView.setTransferWidget(javax.baja.ui.transfer.BTransferWidget) -->
<method name="setTransferWidget"  public="true" final="true">
<description>
Set the transfer widget which is used to map the&#xa; the cut, copy, paste, duplicate, delete calls.
</description>
<parameter name="transferWidget">
<type class="javax.baja.ui.transfer.BTransferWidget"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.workbench.view.BWbView.updateTransferWidgetStates() -->
<method name="updateTransferWidgetStates"  public="true">
<description>
If a transfer widget is installed for this deluxe &#xa; plugin, then update the plugin command states based&#xa; on the transfer widget&#x27;s enable states.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.workbench.view.BWbView.getAgents(javax.baja.sys.Context) -->
<method name="getAgents"  public="true">
<description/>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="javax.baja.agent.AgentList"/>
</return>
</method>

<!-- javax.baja.workbench.view.BWbView.fw(int, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object) -->
<method name="fw"  public="true">
<description>
Framework support access; this method should&#xa; never be used by developers.
</description>
<parameter name="x">
<type class="int"/>
</parameter>
<parameter name="a">
<type class="java.lang.Object"/>
</parameter>
<parameter name="b">
<type class="java.lang.Object"/>
</parameter>
<parameter name="c">
<type class="java.lang.Object"/>
</parameter>
<parameter name="d">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="java.lang.Object"/>
</return>
</method>

<!-- javax.baja.workbench.view.BWbView.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

<!-- javax.baja.workbench.view.BWbView.CUT -->
<field name="CUT"  public="true" static="true" final="true">
<type class="int"/>
<description/>
</field>

<!-- javax.baja.workbench.view.BWbView.COPY -->
<field name="COPY"  public="true" static="true" final="true">
<type class="int"/>
<description/>
</field>

<!-- javax.baja.workbench.view.BWbView.PASTE -->
<field name="PASTE"  public="true" static="true" final="true">
<type class="int"/>
<description/>
</field>

<!-- javax.baja.workbench.view.BWbView.DUPLICATE -->
<field name="DUPLICATE"  public="true" static="true" final="true">
<type class="int"/>
<description/>
</field>

<!-- javax.baja.workbench.view.BWbView.DELETE -->
<field name="DELETE"  public="true" static="true" final="true">
<type class="int"/>
<description/>
</field>

<!-- javax.baja.workbench.view.BWbView.RENAME -->
<field name="RENAME"  public="true" static="true" final="true">
<type class="int"/>
<description/>
</field>

<!-- javax.baja.workbench.view.BWbView.FIND -->
<field name="FIND"  public="true" static="true" final="true">
<type class="int"/>
<description/>
</field>

<!-- javax.baja.workbench.view.BWbView.FIND_PREV -->
<field name="FIND_PREV"  public="true" static="true" final="true">
<type class="int"/>
<description/>
</field>

<!-- javax.baja.workbench.view.BWbView.FIND_NEXT -->
<field name="FIND_NEXT"  public="true" static="true" final="true">
<type class="int"/>
<description/>
</field>

<!-- javax.baja.workbench.view.BWbView.REPLACE -->
<field name="REPLACE"  public="true" static="true" final="true">
<type class="int"/>
<description/>
</field>

<!-- javax.baja.workbench.view.BWbView.GOTO -->
<field name="GOTO"  public="true" static="true" final="true">
<type class="int"/>
<description/>
</field>

<!-- javax.baja.workbench.view.BWbView.PASTE_SPECIAL -->
<field name="PASTE_SPECIAL"  public="true" static="true" final="true">
<type class="int"/>
<description/>
</field>

<!-- javax.baja.workbench.view.BWbView.binder -->
<field name="binder"  protected="true">
<type class="com.tridium.ui.Binder"/>
<description/>
</field>

</class>
</bajadoc>
