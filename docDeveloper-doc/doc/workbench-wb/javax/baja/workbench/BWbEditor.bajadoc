<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="workbench" runtimeProfile="wb" qualifiedName="javax.baja.workbench.BWbEditor" name="BWbEditor" packageName="javax.baja.workbench" public="true">
<description>
BWbEditor is a BWbPlugin used to view and/or edit a BObject&#xa; via the &lt;code&gt;loadValue()&lt;/code&gt; and &lt;code&gt;saveValue&lt;/code&gt; &#xa; methods.&#xa; &lt;p&gt;&#xa; All BWbEditors should support the &lt;code&gt;doLoadValue()&lt;/code&gt; &#xa; method.  Editors which are readonly should never fire the &#xa; pluginModified event and can use the default implementation of &#xa; &lt;code&gt;doSaveValue()&lt;/code&gt;.  Editors which can both view and edit&#xa; should fire the pluginModified event when the user makes a change,&#xa; and must provide an implementation of &lt;code&gt;doSaveValue()&lt;/code&gt;.&#xa; &lt;p&gt;&#xa; BComplex editors should support an edit-by-reference model which&#xa; saves their state directly back to the same instance which was&#xa; passed to the loadValue() method.  Since BSimple&#x27;s are immutable, &#xa; BSimple editors must use a edit-by-value model which loads &#xa; one value, then saves into a new instance which is then &#xa; returned from the saveValue() method.
</description>
<tag name="@author">Brian Frank</tag>
<tag name="@creation">7 Jan 01</tag>
<tag name="@version">$Revision: 23$ $Date: 6/28/11 1:23:39 PM EDT$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="javax.baja.workbench.BWbPlugin"/>
</extends>
<!-- javax.baja.workbench.BWbEditor() -->
<constructor name="BWbEditor" public="true">
<description/>
</constructor>

<!-- javax.baja.workbench.BWbEditor.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.workbench.BWbEditor.isReadonly() -->
<method name="isReadonly"  public="true" final="true">
<description>
Is this editor configured to be read only.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.workbench.BWbEditor.setReadonly(boolean) -->
<method name="setReadonly"  public="true" final="true">
<description>
Set the editor to be read only.  A read only&#xa; editor should not ever call setModified() or&#xa; require a save.
</description>
<parameter name="readonly">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.workbench.BWbEditor.doSetReadonly(boolean) -->
<method name="doSetReadonly"  protected="true">
<description>
Override point for setting the editor&#x27;s readonly&#xa; mode.  An editor should provide visual cues to the &#xa; user indicating if it is editable or readonly.&#xa; BTextFields inside the editor should map readonly&#xa; to the editable property.
</description>
<parameter name="readonly">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.workbench.BWbEditor.getCurrentValue() -->
<method name="getCurrentValue"  public="true" final="true">
<description>
Get the value which was last loaded.  This is&#xa; not necessarily the value which is reflected by&#xa; the current state of the editor until saveValue()&#xa; is called.
</description>
<tag name="@see">#saveValue</tag>
<tag name="@see">#loadValue</tag>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
</method>

<!-- javax.baja.workbench.BWbEditor.getCurrentContext() -->
<method name="getCurrentContext"  public="true" final="true">
<description>
Get the context that was passed to the&#xa; last call to loadValue().
</description>
<return>
<type class="javax.baja.sys.Context"/>
</return>
</method>

<!-- javax.baja.workbench.BWbEditor.getCurrentValueHost() -->
<method name="getCurrentValueHost"  public="true">
<description>
Get the Host of the current value.  The current &#xa; value is the value that was last loaded or saved.
</description>
<return>
<type class="javax.baja.naming.BHost"/>
</return>
</method>

<!-- javax.baja.workbench.BWbEditor.getCurrentValueSession() -->
<method name="getCurrentValueSession"  public="true">
<description>
Get the Session of the current value.  The current &#xa; value is the value that was last loaded or saved.
</description>
<return>
<type class="javax.baja.naming.BISession"/>
</return>
</method>

<!-- javax.baja.workbench.BWbEditor.getCurrentValueSpace() -->
<method name="getCurrentValueSpace"  public="true">
<description>
Get the Space of the current value.  The current &#xa; value is the value that was last loaded or saved.
</description>
<return>
<type class="javax.baja.space.BSpace"/>
</return>
</method>

<!-- javax.baja.workbench.BWbEditor.getLoadError() -->
<method name="getLoadError"  public="true">
<description>
If there was an error during load then return the &#xa; exception, otherwise return null.
</description>
<return>
<type class="java.lang.Throwable"/>
</return>
</method>

<!-- javax.baja.workbench.BWbEditor.loadValue(javax.baja.sys.BObject, javax.baja.sys.Context) -->
<method name="loadValue"  public="true" final="true">
<description>
Load the editor with a new value.  If the value is a BComplex&#xa; then edit-by-reference semantics apply and  the value instance &#xa; passed to this method will be the same one used to apply the &#xa; changes when saveValue() is called.  The implementation of this &#xa; method is to:&#xa; &lt;ol&gt;&#xa;   &lt;li&gt;lock the modified state&lt;/li&gt;&#xa;   &lt;li&gt;save away the value for access via getValue()&lt;/li&gt;&#xa;   &lt;li&gt;route to doLoadValue()&lt;/li&gt;&#xa;   &lt;li&gt;if the value is a BComponent then automatically&#xa;       create a link to receive component events&lt;/li&gt;&#xa;   &lt;li&gt;unlock the modified state&lt;/li&gt;&#xa; &lt;/ol&gt;&#xa; If the load fails, this method does not raise the offending&#xa; exception, but rather displays a load error message.  If you&#xa; wish to know if the load failed, then check getLoadError().
</description>
<tag name="@see">#saveValue</tag>
<parameter name="value">
<type class="javax.baja.sys.BObject"/>
</parameter>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.workbench.BWbEditor.loadValue(javax.baja.sys.BObject) -->
<method name="loadValue"  public="true" final="true">
<description>
Convenience for loadValue(value, null) with no context.
</description>
<parameter name="value">
<type class="javax.baja.sys.BObject"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.workbench.BWbEditor.doLoadValue(javax.baja.sys.BObject, javax.baja.sys.Context) -->
<method name="doLoadValue"  protected="true">
<description>
This the override method used to populate the &#xa; editor&#x27;s state based on the specified value.
</description>
<parameter name="value">
<type class="javax.baja.sys.BObject"/>
</parameter>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.workbench.BWbEditor.saveValue(javax.baja.sys.BObject, javax.baja.sys.Context) -->
<method name="saveValue"  public="true" final="true">
<description>
Save the value based on the current state of the editor. &#xa; In edit-by-reference editors (BComplex) the editor saves &#xa; it&#x27;s state back to the value instance passed.   In edit-by-value &#xa; editors (BSimple&#x27;s) then a new instance of the value is created &#xa; and returned.
</description>
<tag name="@see">#loadValue</tag>
<tag name="@see">javax.baja.util.BIValidator</tag>
<parameter name="value">
<type class="javax.baja.sys.BObject"/>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
<description>
If the object being saved is a BSimple then this&#xa;   value may be ignored, otherwise it should be passed to&#xa;   the set, add, remove, rename, or reorder methods as the&#xa;   context.
</description>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
<description>
The instance passed to loadValue() if the editor has&#xa;   not been modified or if this is an edit-by-reference editor.  &#xa;   The new value in a edit-by-value editor.
</description>
</return>
<throws>
<type class="javax.baja.workbench.CannotSaveException"/>
<description>
if the current state of the&#xa;   editor indicates an improper set of data which may not&#xa;   be used to reconstruct a valid value.
</description>
</throws>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.workbench.BWbEditor.saveValue(javax.baja.sys.Context) -->
<method name="saveValue"  public="true" final="true">
<description>
Convenience for saveValue(getCurrentValue(), cx).
</description>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="javax.baja.workbench.CannotSaveException"/>
</throws>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.workbench.BWbEditor.saveValue() -->
<method name="saveValue"  public="true" final="true">
<description>
Convenience for saveValue(getCurrentValue(), null) with no context.
</description>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="javax.baja.workbench.CannotSaveException"/>
</throws>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.workbench.BWbEditor.doSaveValue(javax.baja.sys.BObject, javax.baja.sys.Context) -->
<method name="doSaveValue"  protected="true">
<description>
This is the override method for saving the editor&#x27;s&#xa; state back into an BObject form.  If the editor is&#xa; a edit-by-reference editor (BComplex) then it should&#xa; save its state back to the specified value instance and &#xa; return that instance.  If the editor is edit-by-value &#xa; (BSimple) then it should create a new instance and &#xa; return it.&#xa; &lt;p&gt;&#xa; The default implementation assumes an editor which&#xa; is view only and does nothing but return the value.
</description>
<parameter name="value">
<type class="javax.baja.sys.BObject"/>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="javax.baja.workbench.CannotSaveException"/>
</throws>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.workbench.BWbEditor.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
