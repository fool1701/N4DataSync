<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="workbench" runtimeProfile="wb" qualifiedName="javax.baja.workbench.BWbProfile" name="BWbProfile" packageName="javax.baja.workbench" public="true">
<description>
BWbProfile is used to customize the workbench for a specific &#xa; application.  All BWbProfiles must support a public constructor&#xa; that takes one argument of type BWbShell.  You may launch the&#xa; workbench with a specific profile using the command line syntax&#xa; of &#x22;wb -profile:{typespec}&#x22;.
</description>
<tag name="@author">Brian Frank</tag>
<tag name="@creation">16 Mar 04</tag>
<tag name="@version">$Revision: 32$ $Date: 7/27/10 6:59:13 AM EDT$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="javax.baja.sys.BObject"/>
</extends>
<!-- javax.baja.workbench.BWbProfile(javax.baja.workbench.BWbShell) -->
<constructor name="BWbProfile" public="true">
<parameter name="shell">
<type class="javax.baja.workbench.BWbShell"/>
</parameter>
<description>
Constructor with all features enabled by default.
</description>
</constructor>

<!-- javax.baja.workbench.BWbProfile() -->
<constructor name="BWbProfile" public="true">
<description>
No argument constructor (should not be used directly)
</description>
</constructor>

<!-- javax.baja.workbench.BWbProfile.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.workbench.BWbProfile.make(javax.baja.workbench.BWbShell, javax.baja.sys.Type) -->
<method name="make"  public="true" static="true">
<description>
Create a new instance of workbench:WbProfile of the specified &#xa; type by calling the public constructor that takes one argument &#xa; of type BWbShell.
</description>
<parameter name="shell">
<type class="javax.baja.workbench.BWbShell"/>
</parameter>
<parameter name="type">
<type class="javax.baja.sys.Type"/>
</parameter>
<return>
<type class="javax.baja.workbench.BWbProfile"/>
</return>
</method>

<!-- javax.baja.workbench.BWbProfile.getShell() -->
<method name="getShell"  public="true" final="true">
<description>
Get the shell associated with this profile.  Each&#xa; profile is associated with exactly one WbShell.
</description>
<return>
<type class="javax.baja.workbench.BWbShell"/>
</return>
</method>

<!-- javax.baja.workbench.BWbProfile.makeMenuBar() -->
<method name="makeMenuBar"  public="true">
<description>
Make the menu bar for the shell or return null for no menu bar.  &#xa; Subclasses which wish to alter the default menu bar should call &#xa; super, then manipulate the default&#x27;s component tree.  Refer to  &#xa; utils available in bajaui:AbstractBar such as strip() and keep().  &#xa; Run main() to dump the default menu bar.&#xa; &lt;p&gt;&#xa; &lt;strong&gt;Note: Starting in Niagara 4, the signature for makeMenuBar() has been modified to return the&#xa; BIMenuBar interface. Subclasses of BWbProfile that support a custom menu bar will require the menu bar&#xa; to implement this interface.&lt;/strong&gt;&#xa; &lt;/p&gt;
</description>
<return>
<type class="javax.baja.ui.menu.BIMenuBar"/>
</return>
</method>

<!-- javax.baja.workbench.BWbProfile.makeToolBar() -->
<method name="makeToolBar"  public="true">
<description>
Make the tool bar for the shell or return null for no tool bar.&#xa; Subclasses which wish to alter the default tool bar should call &#xa; super, then manipulate the default&#x27;s component tree.  Refer to  &#xa; utils available in bajaui:AbstractBar such as strip() and keep().  &#xa; Run main() to dump the default tool bar.&#xa; &lt;p&gt;&#xa; &lt;strong&gt;Note: Starting in Niagara 4, the signature for makeToolBar() has been modified to return the&#xa; BIToolBar interface. Subclasses of BWbProfile that support a custom toolbar will require the toolbar&#xa; to implement this interface.&lt;/strong&gt;&#xa; &lt;/p&gt;
</description>
<return>
<type class="javax.baja.ui.toolbar.BIToolBar"/>
</return>
</method>

<!-- javax.baja.workbench.BWbProfile.makeLocatorBar() -->
<method name="makeLocatorBar"  public="true">
<description>
Make the locator bar for the shell or return &#xa; null for no locator bar.
</description>
<return>
<type class="javax.baja.workbench.BWbLocatorBar"/>
</return>
</method>

<!-- javax.baja.workbench.BWbProfile.makeStatusBar() -->
<method name="makeStatusBar"  public="true">
<description>
Make the status bar for the shell or return &#xa; null for no status bar.
</description>
<return>
<type class="javax.baja.workbench.BWbStatusBar"/>
</return>
</method>

<!-- javax.baja.workbench.BWbProfile.makeErrorDisplay(javax.baja.workbench.BWbShell, java.lang.String, javax.baja.naming.BOrd, java.lang.Throwable) -->
<method name="makeErrorDisplay"  public="true">
<description>
Make an error display for the specified error.
</description>
<parameter name="shell">
<type class="javax.baja.workbench.BWbShell"/>
<description>
The shell that contains the error.
</description>
</parameter>
<parameter name="msg">
<type class="java.lang.String"/>
<description>
A message describing the error.
</description>
</parameter>
<parameter name="ord">
<type class="javax.baja.naming.BOrd"/>
<description>
The ord of the object for the current view.
</description>
</parameter>
<parameter name="ex">
<type class="java.lang.Throwable"/>
<description>
The exception associated with the error if available.
</description>
</parameter>
<return>
<type class="javax.baja.ui.BWidget"/>
</return>
</method>

<!-- javax.baja.workbench.BWbProfile.getAppName() -->
<method name="getAppName"  public="true">
<description>
Return the application name for this profile. The appName&#xa; serves as a registry key to enable certain agents/views&#xa; that only make sense within a specific application.  See&#xa; AgentInfo.getAppName() for more details.  Default implementation &#xa; returns null which filters out all views with a non-null&#xa; appName.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.workbench.BWbProfile.getAppNames() -->
<method name="getAppNames"  public="true">
<description>
Return the application name(s) for this profile. The appName(s)&#xa; serve as registry keys to enable certain agents/views&#xa; that only make sense within a specific application.  See&#xa; AgentInfo.getAppName() for more details.  The default implementation &#xa; returns no app names if the getAppName is null. If the AppName is &#xa; non-null, the default implemenation is to return that single app name&#xa; in a one entry array.
</description>
<tag name="@since">Niagara 3.4</tag>
<return>
<type class="java.lang.String" dimension="1"/>
</return>
</method>

<!-- javax.baja.workbench.BWbProfile.hasView(javax.baja.sys.BObject, javax.baja.agent.AgentInfo) -->
<method name="hasView"  public="true">
<description>
Return if the workbench supports the specified WbView.
</description>
<parameter name="target">
<type class="javax.baja.sys.BObject"/>
</parameter>
<parameter name="agentInfo">
<type class="javax.baja.agent.AgentInfo"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.workbench.BWbProfile.getAgents(javax.baja.sys.BObject) -->
<method name="getAgents"  public="true">
<description>
Return views supported by workbench on the specified object.&#xa; The first agent in this list is the default.
</description>
<tag name="@since">Niagara 3.6</tag>
<parameter name="target">
<type class="javax.baja.sys.BObject"/>
</parameter>
<return>
<type class="javax.baja.agent.AgentList"/>
</return>
</method>

<!-- javax.baja.workbench.BWbProfile.customizeView(javax.baja.workbench.view.BWbView) -->
<method name="customizeView"  public="true">
<description>
Provides the opportunity to modify or replace a view&#xa; prior to it being displayed.
</description>
<tag name="@since">Niagara 3.6</tag>
<parameter name="view">
<type class="javax.baja.workbench.view.BWbView"/>
</parameter>
<return>
<type class="javax.baja.workbench.view.BWbView"/>
</return>
</method>

<!-- javax.baja.workbench.BWbProfile.hasSideBar() -->
<method name="hasSideBar"  public="true">
<description>
Return if the workbench supports WbSideBar.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.workbench.BWbProfile.hasSideBar(javax.baja.registry.TypeInfo) -->
<method name="hasSideBar"  public="true">
<description>
Return if the specified sidebar is available.  This &#xa; method is only applicable if hasSideBar() returns true.&#xa; Default implementation returns true if typeInfo has a&#xa; agent appName equal one of the profile appNames, or if typeInfo&#xa; does not have an appName and there are no profile appNames.&#xa; Run main() to dump the installed side bars.
</description>
<parameter name="typeInfo">
<type class="javax.baja.registry.TypeInfo"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.workbench.BWbProfile.getDefaultSideBars() -->
<method name="getDefaultSideBars"  public="true">
<description>
Get the list of sidebars to display by default.
</description>
<return>
<type class="javax.baja.workbench.sidebar.BIWbSideBar" dimension="1"/>
</return>
</method>

<!-- javax.baja.workbench.BWbProfile.hasTools() -->
<method name="hasTools"  public="true">
<description>
Return if the workbench supports WbTools.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.workbench.BWbProfile.hasTool(javax.baja.registry.TypeInfo) -->
<method name="hasTool"  public="true">
<description>
Return if the specified tool is available.  This &#xa; method is only applicable if hasTools() returns true.&#xa; Run main() to dump the installed side bars.
</description>
<parameter name="typeInfo">
<type class="javax.baja.registry.TypeInfo"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.workbench.BWbProfile.getQuickSearch(javax.baja.workbench.view.BWbView) -->
<method name="getQuickSearch"  public="true">
<description>
Return a BWidget instance for the global quick search next to the menu bar&#xa; if it should be visible/enabled for the current view.  This quick search&#xa; widget is based on finding a valid, registered BIQuickSearch&#xa; agent on the view or profile.  Returning null for this method will remove&#xa; (hide) the quick search box from the menu bar.  Note that this method could&#xa; be called frequently on the client (Workbench) side, so avoid or minimize&#xa; network calls when implementing this method (consider using caching to reduce&#xa; network calls).
</description>
<tag name="@since">Niagara 4.0</tag>
<parameter name="view">
<type class="javax.baja.workbench.view.BWbView"/>
<description>
The BWbView instance for which to retrieve a BIQuickSearch instance
</description>
</parameter>
<return>
<type class="javax.baja.ui.BWidget"/>
</return>
</method>

<!-- javax.baja.workbench.BWbProfile.hasQuickSearch(javax.baja.agent.AgentInfo, javax.baja.workbench.view.BWbView) -->
<method name="hasQuickSearch"  public="true">
<description>
Return if this workbench profile supports the specified quick search&#xa; on the specified WbView. By default, this is called when it is&#xa; discovered that the BWbView has a BIQuickSearch registered as an agent&#xa; on it, or the BWbProfile has a BIQuickSearch registered agent. Note that&#xa; this method could be called frequently on the client (Workbench) side, so&#xa; avoid or minimize network calls when implementing this method (consider&#xa; using caching to reduce network calls).
</description>
<tag name="@since">Niagara 4.0</tag>
<parameter name="quickSearchInfo">
<type class="javax.baja.agent.AgentInfo"/>
<description>
The AgentInfo for the BIQuickSearch type that is&#xa;                        registered as an agent on the BWbView or BWbProfile
</description>
</parameter>
<parameter name="view">
<type class="javax.baja.workbench.view.BWbView"/>
<description>
The BWbView instance for which to determine whether the&#xa;             quickSearchInfo is a valid BIQuickSearch implementation in&#xa;             this profile
</description>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.workbench.BWbProfile.getFrameIcon() -->
<method name="getFrameIcon"  public="true">
<description>
Return the icon which should be used for the shell&#x27;s&#xa; frame window (not applicable in applets).  The default&#xa; icon is configured in brand.properties via the key&#xa; &#x22;workbench.icon&#x22;.
</description>
<return>
<type class="javax.baja.gx.BImage"/>
</return>
</method>

<!-- javax.baja.workbench.BWbProfile.getFrameTitle() -->
<method name="getFrameTitle"  public="true">
<description>
Return the title which should be used for the shell&#x27;s&#xa; frame window (not applicable in applets).  The default&#xa; title text is configured in brand.properties via the &#xa; key &#x22;workbench.title&#x22;.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.workbench.BWbProfile.hasUserOptions(javax.baja.registry.TypeInfo) -->
<method name="hasUserOptions"  public="true">
<description>
Return if the specified UserOptions type is available.  &#xa; Run main() to dump the installed UserOptions.
</description>
<parameter name="typeInfo">
<type class="javax.baja.registry.TypeInfo"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.workbench.BWbProfile.getStartOrd() -->
<method name="getStartOrd"  public="true">
<description>
Get the ord to use for startup.
</description>
<return>
<type class="javax.baja.naming.BOrd"/>
</return>
</method>

<!-- javax.baja.workbench.BWbProfile.getOpenOrd(javax.baja.naming.BISession, javax.baja.naming.BOrd) -->
<method name="getOpenOrd"  public="true">
<description>
Get the ord to use when a new session is opened.&#xa; When the session is opened, the default&#xa; view for the returned ord will be displayed.
</description>
<parameter name="session">
<type class="javax.baja.naming.BISession"/>
<description>
A newly opened session.
</description>
</parameter>
<parameter name="def">
<type class="javax.baja.naming.BOrd"/>
<description>
The default ord for the session type.
</description>
</parameter>
<return>
<type class="javax.baja.naming.BOrd"/>
</return>
</method>

<!-- javax.baja.workbench.BWbProfile.getHomeOrd() -->
<method name="getHomeOrd"  public="true">
<description>
Get the ord to use for the home command.
</description>
<return>
<type class="javax.baja.naming.BOrd"/>
</return>
</method>

<!-- javax.baja.workbench.BWbProfile.getNavRootOrd() -->
<method name="getNavRootOrd"  public="true">
<description>
Get the ord used to root navigation.
</description>
<return>
<type class="javax.baja.naming.BOrd"/>
</return>
</method>

<!-- javax.baja.workbench.BWbProfile.canHyperlink(javax.baja.naming.BOrd) -->
<method name="canHyperlink"  public="true">
<description>
Return true if this ord can be hyperlinked to, or false&#xa; if it cannot.
</description>
<parameter name="ord">
<type class="javax.baja.naming.BOrd"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.workbench.BWbProfile.main(java.lang.String[]) -->
<method name="main"  public="true" static="true">
<description>
This main provides a console utility to dump the menu bar, &#xa; tool bar, sidebars, and tools installed on the local machine.
</description>
<parameter name="args">
<type class="java.lang.String" dimension="1"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.workbench.BWbProfile.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
