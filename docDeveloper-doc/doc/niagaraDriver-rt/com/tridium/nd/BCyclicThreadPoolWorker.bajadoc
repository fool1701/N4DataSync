<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="niagaraDriver" runtimeProfile="rt" qualifiedName="com.tridium.nd.BCyclicThreadPoolWorker" name="BCyclicThreadPoolWorker" packageName="com.tridium.nd" public="true">
<description>
BCyclicThreadPoolWorker allows Objects &#xa; to be registered with a cycle time (frequency), &#xa; and then each registered Object will be added to the queue&#xa; at that frequency.  Each cycle will be distributed on a free &#xa; worker thread in the pool.&#xa;&#xa; NOTE: While this class subclasses from BThreadPoolWorker,&#xa; it slightly breaks the normal rules for BWorkers due to &#xa; performance reasons.  BCyclicThreadPoolWorkers will start&#xa; and stop themselves at runtime as Objects&#xa; are registered and unregistered.  Thus the startWorker()&#xa; and stopWorker() callbacks are overridden to do nothing.
</description>
<tag name="@author">Scott Hoye</tag>
<tag name="@creation">9 Jul 07</tag>
<tag name="@version">$Revision: 10$ $Date: 6/4/10 2:07:34 PM EDT$</tag>
<tag name="@since">Niagara 3.3</tag>
<extends>
<type class="javax.baja.util.BThreadPoolWorker"/>
</extends>
<implements>
<type class="java.lang.Runnable"/>
</implements>
</class>
</bajadoc>
