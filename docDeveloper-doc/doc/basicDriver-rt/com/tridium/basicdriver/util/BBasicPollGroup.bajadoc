<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="basicDriver" runtimeProfile="rt" qualifiedName="com.tridium.basicdriver.util.BBasicPollGroup" name="BBasicPollGroup" packageName="com.tridium.basicdriver.util" public="true" abstract="true">
<description>
The BBasicPollGroup class is used to coalesce the polling of proxy extensions&#xa; whose values can all be retrieved in a single poll message. A driver can&#xa; extend BBasicPollGroup and implement a poll method that polls the data for a&#xa; group of proxy extensions. Then in the driver&#x27;s proxy extension (extending&#xa; BBasicProxyExt), it should override the appropriate method that returns&#xa; the Niagara AX type of the cusomized BBasicPollGroup for that proxy. All proxies&#xa; that share the same BBasicPollGroup instance should return the same poll group&#xa; code Object in the appropriate overridden method.
</description>
<extends>
<type class="javax.baja.sys.BStruct"/>
</extends>
<implements>
<type class="com.tridium.basicdriver.util.BIBasicPollable"/>
</implements>
<!-- com.tridium.basicdriver.util.BBasicPollGroup() -->
<constructor name="BBasicPollGroup" public="true">
<description>
Baja says we have to allow an empty constructor.
</description>
</constructor>

<!-- com.tridium.basicdriver.util.BBasicPollGroup.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- com.tridium.basicdriver.util.BBasicPollGroup.getCode() -->
<method name="getCode"  public="true">
<description>
Gets the poll group code that is unique amongst&#xa; all of the proxies that are part of the poll&#xa; group. This code will be equivalent to that which&#xa; is returned by the getPollGroupCode method on each&#xa; of the proxies that are in the group. The driver&#xa; developer should choose this code carefully, and&#xa; use it to help the descendant class of this PollGroup&#xa; to know specifically what to poll for.
</description>
<return>
<type class="java.lang.Object"/>
</return>
</method>

<!-- com.tridium.basicdriver.util.BBasicPollGroup.getProxyExts() -->
<method name="getProxyExts"  protected="true" final="true">
<description>
The descendant class may call this method to get a list of the&#xa; proxies for this poll group.
</description>
<return>
<type class="com.tridium.basicdriver.point.BBasicProxyExt" dimension="1"/>
</return>
</method>

<!-- com.tridium.basicdriver.util.BBasicPollGroup.getSubscribedProxyExts() -->
<method name="getSubscribedProxyExts"  protected="true" final="true">
<description>
The descendant class may call this method to get a list of the&#xa; proxies for this poll group that are presently subscribed for&#xa; polling.
</description>
<return>
<type class="com.tridium.basicdriver.point.BBasicProxyExt" dimension="1"/>
</return>
</method>

<!-- com.tridium.basicdriver.util.BBasicPollGroup.registerProxy(com.tridium.basicdriver.point.BBasicProxyExt) -->
<method name="registerProxy"  public="true">
<description>
Register a proxy point as a point interested in data from this group.&#xa;  Any points in this list will be updated on the poll cycle.&#xa;&#xa; This method should be called from the proxy&#x27;s started method.
</description>
<parameter name="proxy">
<type class="com.tridium.basicdriver.point.BBasicProxyExt"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.basicdriver.util.BBasicPollGroup.unregisterProxy(com.tridium.basicdriver.point.BBasicProxyExt) -->
<method name="unregisterProxy"  public="true">
<description>
Remove a proxy point as a point interested in data from a group.&#xa; Any points in this list will be updated on the poll cycle.&#xa;&#xa; If the given proxy was the last proxy registered to this group then&#xa; the group itself will unsubsribe from the poll scheduler&#xa;&#xa; This method should be called from the proxy&#x27;s stopped method
</description>
<parameter name="proxy">
<type class="com.tridium.basicdriver.point.BBasicProxyExt"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.basicdriver.util.BBasicPollGroup.readSubscribed(com.tridium.basicdriver.point.BBasicProxyExt) -->
<method name="readSubscribed"  public="true">
<description>
This callback is made when the point enters a subscribed&#xa; state based on the current status and tuning.  The driver&#xa; should register for changes or begin polling.  Any IO should&#xa; be done asynchronously on another thread - never block the&#xa; calling thread.  The result of reads should be to call the&#xa; readOk() or readFail() method.
</description>
<parameter name="proxy">
<type class="com.tridium.basicdriver.point.BBasicProxyExt"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- com.tridium.basicdriver.util.BBasicPollGroup.readUnsubscribed(com.tridium.basicdriver.point.BBasicProxyExt) -->
<method name="readUnsubscribed"  public="true">
<description>
This callback is made when the point exits the subscribed&#xa; state based on the current status and tuning.  The driver&#xa; should unregister for changes of cease polling.  Any IO should&#xa; be done asynchronously on another thread - never block the&#xa; calling thread.
</description>
<parameter name="proxy">
<type class="com.tridium.basicdriver.point.BBasicProxyExt"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- com.tridium.basicdriver.util.BBasicPollGroup.poll() -->
<method name="poll"  public="true" abstract="true">
<description>
The descendant class should perform fieldbus communication and poll&#xa; this group of proxy extension. It should call the getProxyExts method&#xa; and update each registered proxy extension with the new data.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.basicdriver.util.BBasicPollGroup.getPollFrequency() -->
<method name="getPollFrequency"  public="true">
<description>
Loops through all proxy extensions and returns the fastest poll frequency&#xa; Among them
</description>
<return>
<type class="javax.baja.driver.util.BPollFrequency"/>
</return>
</method>

<!-- com.tridium.basicdriver.util.BBasicPollGroup.getPollGroup(com.tridium.basicdriver.point.BBasicProxyExt) -->
<method name="getPollGroup"  public="true" static="true">
<description>
This method returns an instance of the customized BBasicPollGroup for the given&#xa; proxy extension. Only one instance of a customized BBasicPollGroup will exist for&#xa; all proxy extensions that return the same poll group code. If that one&#xa; instance does not yet exist, one will be created, hashed, and returned.&#xa; Otherwise the one instance will be retrieved from a table and returned.&#xa;&#xa; This static method can be used as a public lookup to retrieve the instance of&#xa; BBasicPollGroup that is related to the given proxy, regardless of what driver that&#xa; proxy is in and regardless of the ultimate BBasicPollGroup type.
</description>
<parameter name="proxy">
<type class="com.tridium.basicdriver.point.BBasicProxyExt"/>
</parameter>
<return>
<type class="com.tridium.basicdriver.util.BBasicPollGroup"/>
</return>
</method>

<!-- com.tridium.basicdriver.util.BBasicPollGroup.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
