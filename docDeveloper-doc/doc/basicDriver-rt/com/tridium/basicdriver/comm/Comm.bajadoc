<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="basicDriver" runtimeProfile="rt" qualifiedName="com.tridium.basicdriver.comm.Comm" name="Comm" packageName="com.tridium.basicdriver.comm" public="true" abstract="true">
<description>
The Comm class is used to manage message request/response&#xa; transactions on a basic network and handles the synchronization &#xa; of the communication.  It acts as a parent to handle&#xa; the interaction between the transmit and receive drivers.
</description>
<tag name="@author">Scott Hoye</tag>
<tag name="@creation">26 Mar 02</tag>
<tag name="@version">$Revision: 1$ $Date: 03/26/02 12:47:14 PM$</tag>
<tag name="@since">Niagara 3.0 basicdriver 1.0</tag>
<extends>
<type class="java.lang.Object"/>
</extends>
<!-- com.tridium.basicdriver.comm.Comm(com.tridium.basicdriver.BBasicNetwork, com.tridium.basicdriver.comm.CommReceiver) -->
<constructor name="Comm" public="true">
<parameter name="basicNetwork">
<type class="com.tridium.basicdriver.BBasicNetwork"/>
</parameter>
<parameter name="rDriver">
<type class="com.tridium.basicdriver.comm.CommReceiver"/>
</parameter>
<description>
Constructor - initializes the Comm with a specified BBasicNetwork&#xa; and CommReceiver (receive driver).  At a minimum, these two instances&#xa; must always be supplied.  Uses the default CommTransmitter &#xa; (transmit driver) and CommTransactionManager.
</description>
</constructor>

<!-- com.tridium.basicdriver.comm.Comm(com.tridium.basicdriver.BBasicNetwork, com.tridium.basicdriver.comm.CommReceiver, com.tridium.basicdriver.comm.CommTransmitter) -->
<constructor name="Comm" public="true">
<parameter name="basicNetwork">
<type class="com.tridium.basicdriver.BBasicNetwork"/>
</parameter>
<parameter name="rDriver">
<type class="com.tridium.basicdriver.comm.CommReceiver"/>
</parameter>
<parameter name="tDriver">
<type class="com.tridium.basicdriver.comm.CommTransmitter"/>
</parameter>
<description>
Constructor - initializes the Comm with a specified BBasicNetwork,&#xa; CommReceiver (receive driver), and CommTransmitter (transmit driver).&#xa; Uses the default CommTransactionManager.
</description>
</constructor>

<!-- com.tridium.basicdriver.comm.Comm(com.tridium.basicdriver.BBasicNetwork, com.tridium.basicdriver.comm.CommReceiver, com.tridium.basicdriver.comm.CommTransmitter, com.tridium.basicdriver.comm.CommTransactionManager) -->
<constructor name="Comm" public="true">
<parameter name="basicNetwork">
<type class="com.tridium.basicdriver.BBasicNetwork"/>
</parameter>
<parameter name="rDriver">
<type class="com.tridium.basicdriver.comm.CommReceiver"/>
</parameter>
<parameter name="tDriver">
<type class="com.tridium.basicdriver.comm.CommTransmitter"/>
</parameter>
<parameter name="manager">
<type class="com.tridium.basicdriver.comm.CommTransactionManager"/>
</parameter>
<description>
Constructor - initializes the Comm with a specified BBasicNetwork,&#xa; CommReceiver (receive driver), CommTransmitter (transmit driver), and&#xa; CommTransactionManager.
</description>
</constructor>

<!-- com.tridium.basicdriver.comm.Comm.setCommTransactionManager(com.tridium.basicdriver.comm.CommTransactionManager) -->
<method name="setCommTransactionManager"  public="true" final="true">
<description>
Set a transaction manager or override the default transaction manager
</description>
<parameter name="manager">
<type class="com.tridium.basicdriver.comm.CommTransactionManager"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.basicdriver.comm.Comm.setCommTransmitter(com.tridium.basicdriver.comm.CommTransmitter) -->
<method name="setCommTransmitter"  public="true" final="true">
<description>
Set a CommTransmitter (transmit driver)
</description>
<parameter name="tDriver">
<type class="com.tridium.basicdriver.comm.CommTransmitter"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.basicdriver.comm.Comm.setCommReceiver(com.tridium.basicdriver.comm.CommReceiver) -->
<method name="setCommReceiver"  public="true" final="true">
<description>
Set a CommReceiver (receive driver)
</description>
<parameter name="rDriver">
<type class="com.tridium.basicdriver.comm.CommReceiver"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.basicdriver.comm.Comm.getNetwork() -->
<method name="getNetwork"  public="true">
<description>
Retrieve a reference to the basic network&#xa; being used by this communications handler
</description>
<return>
<type class="com.tridium.basicdriver.BBasicNetwork"/>
</return>
</method>

<!-- com.tridium.basicdriver.comm.Comm.getCommTransactionManager() -->
<method name="getCommTransactionManager"  public="true">
<description>
Retrieve a reference to the transaction manager&#xa; being used by this communications handler
</description>
<return>
<type class="com.tridium.basicdriver.comm.CommTransactionManager"/>
</return>
</method>

<!-- com.tridium.basicdriver.comm.Comm.getCommTransmitter() -->
<method name="getCommTransmitter"  public="true">
<description>
Retrieve a reference to the CommTransmitter (transmit driver)&#xa; being used by this communications handler
</description>
<return>
<type class="com.tridium.basicdriver.comm.CommTransmitter"/>
</return>
</method>

<!-- com.tridium.basicdriver.comm.Comm.getCommReceiver() -->
<method name="getCommReceiver"  public="true">
<description>
Retrieve a reference to the CommReceiver (receive driver)&#xa; being used by this communications handler
</description>
<return>
<type class="com.tridium.basicdriver.comm.CommReceiver"/>
</return>
</method>

<!-- com.tridium.basicdriver.comm.Comm.isCommStarted() -->
<method name="isCommStarted"  public="true">
<description>
Returns true if this Communication handler&#xa; has been started and is running, false if not.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- com.tridium.basicdriver.comm.Comm.start() -->
<method name="start"  public="true" final="true">
<description>
Starts the Comm.  Called by BBasicNetwork&#xa; whenever this Comm handler should be enabled.&#xa; Calls the abstract method started().
</description>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- com.tridium.basicdriver.comm.Comm.stop() -->
<method name="stop"  public="true" final="true">
<description>
Stops the Comm.  Called by BBasicNetwork&#xa; whenever the Comm handler should be disabled.&#xa; Calls the abstract method stopped().
</description>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- com.tridium.basicdriver.comm.Comm.started() -->
<method name="started"  protected="true" abstract="true">
<description>
Starts the transmit/receive drivers. Returns true if successfully started, false otherwise.
</description>
<return>
<type class="boolean"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- com.tridium.basicdriver.comm.Comm.stopped() -->
<method name="stopped"  protected="true" abstract="true">
<description>
Stops the transmit/receive drivers.
</description>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- com.tridium.basicdriver.comm.Comm.transmit(com.tridium.basicdriver.message.Message) -->
<method name="transmit"  public="true" final="true">
<description>
Send a message using the message request/response service to&#xa; the communication medium. Block the calling thread&#xa; until the response is obtained or the transaction times out.&#xa; Uses the default response time out and retry count defined&#xa; at the network level.
</description>
<parameter name="msg">
<type class="com.tridium.basicdriver.message.Message"/>
<description>
a network request (in message form) to be&#xa;    sent to the output stream
</description>
</parameter>
<return>
<type class="com.tridium.basicdriver.message.Message"/>
<description>
a Message - the response received for the sent message&#xa;    if successful (or null if no response expected),&#xa;    otherwise an exception is thrown (i.e. timeout).
</description>
</return>
<throws>
<type class="com.tridium.basicdriver.util.BasicException"/>
</throws>
</method>

<!-- com.tridium.basicdriver.comm.Comm.transmit(com.tridium.basicdriver.message.Message, javax.baja.sys.BRelTime, int) -->
<method name="transmit"  public="true">
<description>
Send a message using the message request/response service to&#xa; the communication medium.  Block the calling thread&#xa; until the response is obtained or the transaction times out.
</description>
<parameter name="msg">
<type class="com.tridium.basicdriver.message.Message"/>
<description>
a network request (in message form) to be&#xa;    sent to the output stream
</description>
</parameter>
<parameter name="responseTimeout">
<type class="javax.baja.sys.BRelTime"/>
<description>
the timeout to wait for a response for&#xa;    this request.
</description>
</parameter>
<parameter name="retryCount">
<type class="int"/>
<description>
the number of retries to perform if the request&#xa;    fails (a timeout occurs).
</description>
</parameter>
<return>
<type class="com.tridium.basicdriver.message.Message"/>
<description>
Message the response received for the sent message&#xa;    if successful (or null if no response expected),&#xa;    otherwise an exception is thrown (i.e. timeout).
</description>
</return>
<throws>
<type class="com.tridium.basicdriver.util.BasicException"/>
</throws>
</method>

<!-- com.tridium.basicdriver.comm.Comm.transmitNoResponse(com.tridium.basicdriver.message.Message) -->
<method name="transmitNoResponse"  public="true">
<description>
Send a message to the transmit driver and do not expect or wait&#xa; for a response from the receive driver.
</description>
<parameter name="msg">
<type class="com.tridium.basicdriver.message.Message"/>
<description>
a message to be sent to the output stream
</description>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="com.tridium.basicdriver.util.BasicException"/>
</throws>
</method>

<!-- com.tridium.basicdriver.comm.Comm.processTransmit(com.tridium.basicdriver.message.Message, javax.baja.sys.BRelTime) -->
<method name="processTransmit"  protected="true">
<description>
Send a message to the transmit driver and wait for a response&#xa; from the receive driver. Block the calling thread&#xa; until the response is obtained or the transaction times out.
</description>
<parameter name="msg">
<type class="com.tridium.basicdriver.message.Message"/>
<description>
a message to be converted to bytes and&#xa;    sent to the output stream
</description>
</parameter>
<parameter name="responseTimeout">
<type class="javax.baja.sys.BRelTime"/>
<description>
the timeout to wait for a response for&#xa;    this request message.
</description>
</parameter>
<return>
<type class="com.tridium.basicdriver.message.Message"/>
<description>
Message the response received for the sent message&#xa;    if successful, otherwise an exception is thrown (i.e. timeout).
</description>
</return>
<throws>
<type class="com.tridium.basicdriver.util.BasicException"/>
</throws>
</method>

<!-- com.tridium.basicdriver.comm.Comm.receive(com.tridium.basicdriver.message.ReceivedMessage) -->
<method name="receive"  public="true">
<description>
This is the access point for the receive driver to&#xa; pass its received unsolicited messages and/or &#xa; response messages up to the communications handler for&#xa; processing.
</description>
<parameter name="msg">
<type class="com.tridium.basicdriver.message.ReceivedMessage"/>
<description>
the response/unsolicited message received &#xa;    from the input stream.
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.basicdriver.comm.Comm.receiveFinal() -->
<method name="receiveFinal"  public="true" synchronized="true">
<description>
Method called by receive driver during&#xa; shutdown to free any pending message requests.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.basicdriver.comm.Comm.handleFailedTransmit(com.tridium.basicdriver.message.Message, java.lang.Exception) -->
<method name="handleFailedTransmit"  public="true">
<description>
This is the access point for the CommTransmitter to&#xa; indicate a failure to transmit.  It is responsible&#xa; for cleaning up the pending transaction.
</description>
<parameter name="msg">
<type class="com.tridium.basicdriver.message.Message"/>
<description>
the message that failed to send.
</description>
</parameter>
<parameter name="e">
<type class="java.lang.Exception"/>
<description>
the exception explaining the reason for the failed send.
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.basicdriver.comm.Comm.handleReceivedMessage(com.tridium.basicdriver.message.ReceivedMessage) -->
<method name="handleReceivedMessage"  protected="true">
<description>
Handles processing of a received message &#xa; from the CommReceiver.&#xa; Attempts to find and notify the matching transaction.  &#xa; Returns true if the matching transaction is found, false &#xa; otherwise.
</description>
<parameter name="msg">
<type class="com.tridium.basicdriver.message.ReceivedMessage"/>
<description>
the message received from the input stream
</description>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- com.tridium.basicdriver.comm.Comm.registerListener(com.tridium.basicdriver.UnsolicitedMessageListener) -->
<method name="registerListener"  public="true">
<description>
Register an UnsolicitedMessageListener (i.e. for handling unsolicited&#xa; received messages).  Uses its unsolicited listener code to determine &#xa; which incoming messages should be routed to it (matches the unsolicited &#xa; listener code of the received message with the one registered for the&#xa; UnsolicitedMessageListener.
</description>
<parameter name="listener">
<type class="com.tridium.basicdriver.UnsolicitedMessageListener"/>
<description>
the unsolicited message listener to register
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.basicdriver.comm.Comm.unregisterListener(com.tridium.basicdriver.UnsolicitedMessageListener) -->
<method name="unregisterListener"  public="true">
<description>
Unregisters an UnsolicitedMessageListener (i.e. for handling unsolicited&#xa; received messages).
</description>
<parameter name="listener">
<type class="com.tridium.basicdriver.UnsolicitedMessageListener"/>
<description>
the unsolicited message listener to unregister
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.basicdriver.comm.Comm.routeToListeners(com.tridium.basicdriver.message.ReceivedMessage) -->
<method name="routeToListeners"  protected="true">
<description>
Routes a received message to each listener &#xa; registered for this message.  Uses the unsolicitedListenerCode &#xa; of the Message to determine which listeners should receive the message.
</description>
<parameter name="msg">
<type class="com.tridium.basicdriver.message.ReceivedMessage"/>
<description>
the message received from the input stream
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

</class>
</bajadoc>
