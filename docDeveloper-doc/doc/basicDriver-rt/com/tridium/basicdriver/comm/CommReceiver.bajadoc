<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="basicDriver" runtimeProfile="rt" qualifiedName="com.tridium.basicdriver.comm.CommReceiver" name="CommReceiver" packageName="com.tridium.basicdriver.comm" public="true" abstract="true">
<description>
CommReceiver is the base receive driver for the communication medium.&#xa; It should be subclassed to handle receiving complete messages from the &#xa; input stream.
</description>
<tag name="@author">Scott Hoye</tag>
<tag name="@creation">26 Mar 02</tag>
<tag name="@version">$Revision: 1$ $Date: 03/26/02 12:47:14 PM$</tag>
<tag name="@since">Niagara 3.0 basicdriver 1.0</tag>
<extends>
<type class="com.tridium.basicdriver.comm.Comm$CommSupport"/>
</extends>
<implements>
<type class="java.lang.Runnable"/>
</implements>
<!-- com.tridium.basicdriver.comm.CommReceiver() -->
<constructor name="CommReceiver" public="true">
<description/>
</constructor>

<!-- com.tridium.basicdriver.comm.CommReceiver.setInputStream(java.io.InputStream) -->
<method name="setInputStream"  public="true">
<description>
Sets the input stream associated with this&#xa; receive driver for reading byte[] messages.
</description>
<parameter name="in">
<type class="java.io.InputStream"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.basicdriver.comm.CommReceiver.getInputStream() -->
<method name="getInputStream"  protected="true">
<description>
Gets the input stream associated with this&#xa; receive driver for reading messages.
</description>
<return>
<type class="java.io.InputStream"/>
</return>
</method>

<!-- com.tridium.basicdriver.comm.CommReceiver.setAlive(boolean) -->
<method name="setAlive"  public="true">
<description>
Sets the flag to indicate the receive thread should&#xa; start running (alive = true) or stop running (alive = false).
</description>
<parameter name="alive">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.basicdriver.comm.CommReceiver.isAlive() -->
<method name="isAlive"  public="true">
<description>
Returns whether this receive thread is&#xa; running (true) or stopped (false).
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- com.tridium.basicdriver.comm.CommReceiver.initReceiveState(byte[]) -->
<method name="initReceiveState"  public="true">
<description>
Called just before a byte[] &#xa; is written to the output stream.  Subclasses should&#xa; override this method to initialize the receive&#xa; driver before each byte[] is sent.&#xa; The default implementation is no action.
</description>
<parameter name="msg">
<type class="byte" dimension="1"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.basicdriver.comm.CommReceiver.initReceiveState(com.tridium.basicdriver.message.Message) -->
<method name="initReceiveState"  public="true">
<description>
Called just before a Message&#xa; is written to the output stream.  Subclasses should&#xa; override this method to initialize the receive&#xa; driver before each Message request is sent.&#xa; The default implementation is no action.
</description>
<parameter name="msg">
<type class="com.tridium.basicdriver.message.Message"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.basicdriver.comm.CommReceiver.run() -->
<method name="run"  public="true">
<description>
The execution of the CommReceiver is to continuously&#xa; receive messages from the input stream.  This method loops&#xa; and calls receive() to allow subclasses to return complete&#xa; Messages.  It routes any received message to the Comm.  It&#xa; loops forever until isAlive() returns false.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.basicdriver.comm.CommReceiver.receive() -->
<method name="receive"  protected="true" abstract="true">
<description>
Should be overridden by subclasses to read bytes&#xa; from the input stream and form a complete ReceivedMessage&#xa; suitable to pass back up to the Comm.  Subclasses should&#xa; make sure that the ReceivedMessage returned contains all&#xa; necessary information to handle it (i.e. whether it should&#xa; be treated as unsolicited, any necessary data, tag information,&#xa; etc.).&#xa;&#xa; Important implementation note:  If the driver allows for received&#xa; messages that need special processing (i.e. unsolicited received&#xa; messages or out-of-order responses), then a new instance of a &#xa; ReceivedMessage should be generated and returned by this method.&#xa; Otherwise it may be safe to return the same instance of &#xa; ReceivedMessage as the result of this method.  Using the same&#xa; instance can save on memory allocation, but in the case where &#xa; the ReceivedMessage may need special processing by the caller&#xa; (i.e. the result gets passed and processed on a separate thread &#xa; from the calling thread), then it may not be safe to return the &#xa; same instance.
</description>
<return>
<type class="com.tridium.basicdriver.message.ReceivedMessage"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

</class>
</bajadoc>
