<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="basicDriver" runtimeProfile="rt" qualifiedName="com.tridium.basicdriver.serial.SerialComm" name="SerialComm" packageName="com.tridium.basicdriver.serial" public="true">
<description>
SerialComm is used to synchronize access to a&#xa; serial network and handles the synchronization of the serial&#xa; communication.
</description>
<tag name="@author">Scott Hoye</tag>
<tag name="@creation">26 Mar 02</tag>
<tag name="@version">$Revision: 1$ $Date: 03/26/02 12:47:14 PM$</tag>
<tag name="@since">Niagara 3.0 basicdriver 1.0</tag>
<extends>
<type class="com.tridium.basicdriver.comm.Comm"/>
</extends>
<!-- com.tridium.basicdriver.serial.SerialComm(com.tridium.basicdriver.serial.BSerialNetwork, com.tridium.basicdriver.comm.CommReceiver) -->
<constructor name="SerialComm" public="true">
<parameter name="serialNetwork">
<type class="com.tridium.basicdriver.serial.BSerialNetwork"/>
</parameter>
<parameter name="rDriver">
<type class="com.tridium.basicdriver.comm.CommReceiver"/>
</parameter>
<description>
Constructor - initializes the SerialComm with a specified BSerialNetwork&#xa; and CommReceiver (receive driver).  At a minimum, these two instances&#xa; must always be supplied.  Uses the default CommTransmitter &#xa; (transmit driver) and CommTransactionManager.
</description>
</constructor>

<!-- com.tridium.basicdriver.serial.SerialComm(com.tridium.basicdriver.serial.BSerialNetwork, com.tridium.basicdriver.comm.CommReceiver, com.tridium.basicdriver.comm.CommTransmitter) -->
<constructor name="SerialComm" public="true">
<parameter name="serialNetwork">
<type class="com.tridium.basicdriver.serial.BSerialNetwork"/>
</parameter>
<parameter name="rDriver">
<type class="com.tridium.basicdriver.comm.CommReceiver"/>
</parameter>
<parameter name="tDriver">
<type class="com.tridium.basicdriver.comm.CommTransmitter"/>
</parameter>
<description>
Constructor - initializes the SerialComm with a specified BSerialNetwork,&#xa; CommReceiver (receive driver), and CommTransmitter (transmit driver).&#xa; Uses the default CommTransactionManager.
</description>
</constructor>

<!-- com.tridium.basicdriver.serial.SerialComm(com.tridium.basicdriver.serial.BSerialNetwork, com.tridium.basicdriver.comm.CommReceiver, com.tridium.basicdriver.comm.CommTransmitter, com.tridium.basicdriver.comm.CommTransactionManager) -->
<constructor name="SerialComm" public="true">
<parameter name="serialNetwork">
<type class="com.tridium.basicdriver.serial.BSerialNetwork"/>
</parameter>
<parameter name="rDriver">
<type class="com.tridium.basicdriver.comm.CommReceiver"/>
</parameter>
<parameter name="tDriver">
<type class="com.tridium.basicdriver.comm.CommTransmitter"/>
</parameter>
<parameter name="manager">
<type class="com.tridium.basicdriver.comm.CommTransactionManager"/>
</parameter>
<description>
Constructor - initializes the SerialComm with a specified BSerialNetwork,&#xa; CommReceiver (receive driver), CommTransmitter (transmit driver), and&#xa; CommTransactionManager.
</description>
</constructor>

<!-- com.tridium.basicdriver.serial.SerialComm.started() -->
<method name="started"  protected="true">
<description>
Starts the serial transmit/receive drivers. Returns true if successfully started, false otherwise.&#xa; Opens the serial port and extracts the input and output streams,&#xa; and also starts the receive driver thread.
</description>
<return>
<type class="boolean"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- com.tridium.basicdriver.serial.SerialComm.stopped() -->
<method name="stopped"  protected="true">
<description>
Stops the serial transmit/receive drivers.&#xa; Closes the serial port and the input and output streams.
</description>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- com.tridium.basicdriver.serial.SerialComm.transmit(com.tridium.basicdriver.message.Message, javax.baja.sys.BRelTime, int) -->
<method name="transmit"  public="true">
<description>
Send a message using the message request/response service to&#xa; the communication medium.  Block the calling thread&#xa; until the response is obtained or the transaction times out.&#xa; Overridden here to enforce the inter message delay.
</description>
<parameter name="msg">
<type class="com.tridium.basicdriver.message.Message"/>
<description>
a network request (in message form) to be&#xa;    sent to the output stream
</description>
</parameter>
<parameter name="responseTimeout">
<type class="javax.baja.sys.BRelTime"/>
<description>
the timeout to wait for a response for&#xa;    this request.
</description>
</parameter>
<parameter name="retryCount">
<type class="int"/>
<description>
the number of retries to perform if the request&#xa;    fails (a timeout occurs).
</description>
</parameter>
<return>
<type class="com.tridium.basicdriver.message.Message"/>
<description>
Message the response received for the sent message&#xa;    if successful (or null if no response expected),&#xa;    otherwise an exception is thrown (i.e. timeout).
</description>
</return>
<throws>
<type class="com.tridium.basicdriver.util.BasicException"/>
</throws>
</method>

<!-- com.tridium.basicdriver.serial.SerialComm.transmitNoResponse(com.tridium.basicdriver.message.Message) -->
<method name="transmitNoResponse"  public="true">
<description>
Send a message to the transmit driver and do not expect or wait&#xa; for a response from the receive driver.&#xa; Overridden here to enforce the inter message delay.
</description>
<parameter name="msg">
<type class="com.tridium.basicdriver.message.Message"/>
<description>
a message to be sent to the output stream
</description>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="com.tridium.basicdriver.util.BasicException"/>
</throws>
</method>

<!-- com.tridium.basicdriver.serial.SerialComm.receive(com.tridium.basicdriver.message.ReceivedMessage) -->
<method name="receive"  public="true">
<description>
This is the access point for the receive driver to&#xa; pass its received unsolicited messages and/or &#xa; response messages up to the communications handler for&#xa; processing.  Overridden here to enforce the Inter Message&#xa; Delay.
</description>
<parameter name="msg">
<type class="com.tridium.basicdriver.message.ReceivedMessage"/>
<description>
the response/unsolicited message received &#xa;    from the input stream.
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.basicdriver.serial.SerialComm.performInterMessageDelay() -->
<method name="performInterMessageDelay"  protected="true">
<description>
This method is called just before a message transmit in order to &#xa; checks to see when the last time a message was received.&#xa; It waits the necessary inter message delay time if needed before returning.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.basicdriver.serial.SerialComm.setReceivedMessageTicks(long) -->
<method name="setReceivedMessageTicks"  protected="true">
<description>
Should be called with the current time ticks whenever a message&#xa; is received.
</description>
<parameter name="ticks">
<type class="long"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.basicdriver.serial.SerialComm.getSerialPort() -->
<method name="getSerialPort"  public="true">
<description>
Returns the serial port used by this SerialComm
</description>
<return>
<type class="javax.baja.serial.BISerialPort"/>
</return>
</method>

</class>
</bajadoc>
