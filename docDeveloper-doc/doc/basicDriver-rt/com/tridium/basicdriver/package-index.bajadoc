<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<package module="basicDriver" runtimeProfile="rt" name="com.tridium.basicdriver">
<description>
&lt;p&gt;&#xa;This package provides some basic classes that may be useful to developers building &#xa;a new driver (i.e. field bus driver).  These classes can be used (or subclassed) to&#xa;provide some basic driver functionality, such as worker (queue) management, basic&#xa;poll schedule handling, basic messages and management of these basic messages&#xa;through request/response transactions (as well as unsolicited message handling), etc.&#xa;It also provides a serial implementation (&lt;code&gt;com.tridium.basicdriver.serial&lt;/code&gt;) &#xa;which can be subclassed by drivers that use a serial port for communication.&#xa;Here is an overview of basicDriver&#x27;s structure:&#xa;&lt;/p&gt;&#xa;&#xa;&lt;p&gt;&#xa;&lt;pre&gt;&#xa;                BBasicNetwork&#xa;               /   /    |    \&#xa;              /   /     |     \&#xa;  BBasicDevices  /      |   Worker Queues (BBasicWorkers)&#xa;                /       |    - dispatcher (used for&#xa;               /        |      synchronizing access to Comm)&#xa;BBasicPollScheduler     |    - worker (for posting async&#xa;                        |      operations, such as learns)&#xa;                        |    - write worker (for posting&#xa;                        |      async coalescing operations,&#xa;                        |      such as writes)&#xa;                        |&#xa;                      Comm&#xa;                     /  |  \&#xa;                    /   |   \&#xa;       CommReceiver     |   CommTransactionManager&#xa;       CommTransmitter  |    - CommTransactions&#xa;                        |&#xa;                        |&#xa;             UnsolicitedMessageListeners&#xa;          (registered if needed by network)&#xa;&lt;/pre&gt;&#xa;&lt;/p&gt;&#xa;&#xa;&lt;p&gt;&#xa;The abstract class &lt;code&gt;BBasicNetwork&lt;/code&gt; is the root component of basicDriver.&#xa;It is the base container for &lt;code&gt;BBasicDevice&lt;/code&gt; objects, and it provides a &#xa;basic poll scheduler where objects implementing the &lt;code&gt;BIBasicPollable&lt;/code&gt; interface&#xa;can register to be polled (i.e. points, devices).  It also provides three worker&#xa;threads (queues) for handling asynchonous operations and synchronization of request messages&#xa;to the &lt;code&gt;Comm&lt;/code&gt; for transmission to the output stream (the following outlines the INTENDED&#xa;use of these worker queues):&#xa;&lt;/p&gt;&#xa;&#xa;&lt;p&gt;&#xa;Asynchronous operations should be posted onto either&#xa;the worker queue or write worker queue (coalescing).&#xa;Write operations should always go to the write&#xa;worker queue so they will be coalesced.  Most other&#xa;asynchronous operations, such as learns, should be&#xa;posted to the worker queue to keep the write worker&#xa;queue free for write operations.  As these async&#xa;operations are processed (dequeued), they should post&#xa;any necessary message requests to the dispatcher queue,&#xa;which synchronizes access to the &lt;code&gt;Comm&lt;/code&gt; (&lt;code&gt;Comm&lt;/code&gt; is&#xa;ultimately responsible for sending the request message&#xa;to the output stream via the &lt;code&gt;CommTransmitter&lt;/code&gt; and&#xa;receiving the response message from the input stream&#xa;via the &lt;code&gt;CommReceiver&lt;/code&gt;).  Other threads may also post&#xa;directly to the dispatcher queue (for example, the&#xa;poll thread can post poll message requests directly to&#xa;the dispatcher queue).&#xa;&lt;/p&gt;&#xa;&#xa;&lt;p&gt;&#xa;&lt;pre&gt; &#xa;    worker queue           write worker queue   &#xa;        ___                       ___&#xa;       |___|                     |___|&#xa;       |___|                     |___|&#xa;       |___|                     |___|&#xa;       |___|                     |___|&#xa;       |___|                     |___|&#xa;         |                         |&#xa;         |    dispatcher queue     |&#xa;         |          ___            |&#xa;         --------+ |___| +----------&#xa;   --------------+ |___|&#xa;   |               |___| (The dispatcher queue&#xa;  poll             |___|  is intended to handle&#xa;  requests         |___|  message requests only)&#xa;                     |&#xa;                     |&#xa;                     |&#xa;                     ---------+ send a request message&#xa;                                to Comm to transmit to&#xa;                                the output stream, and&#xa;                                wait for and return&#xa;                                any response from the&#xa;                                input stream.&#xa;&lt;/pre&gt;&#xa;&lt;/p&gt;&#xa;&#xa;&lt;p&gt;&#xa;&lt;code&gt;BBasicNetwork&lt;/code&gt; also handles initialization, starting, and stopping&#xa;the &lt;code&gt;Comm&lt;/code&gt;, or communication handler.  &lt;code&gt;Comm&lt;/code&gt;&#xa;is used to manage request/response message transactions for the network, handles the &#xa;interaction between the low-level transmitter and receiver, and routes any&#xa;unsolicited received messages to the appropriate listener.  &lt;code&gt;Comm&lt;/code&gt;&#xa;uses the following supporting classes to accomplish its tasks:&#xa;  &lt;ul&gt;&#xa;    &lt;li&gt;&lt;code&gt;com.tridium.basicdriver.comm.CommTransactionManager&lt;/code&gt;: provides a pool &#xa;    of &lt;code&gt;CommTransaction&lt;/code&gt; objects that are used for request/response message &#xa;    matching.  Matching a request message to a response message is determined through an &#xa;    &lt;code&gt;Object&lt;/code&gt; tag on the &lt;code&gt;Message&lt;/code&gt; (discussed below).&lt;/li&gt;&#xa;    &lt;li&gt;&lt;code&gt;com.tridium.basicdriver.comm.CommReceiver&lt;/code&gt;: an abstract class implementing &#xa;    &lt;code&gt;Runnable&lt;/code&gt; which handles receiving and forming &lt;code&gt;ReceivedMessage&lt;/code&gt;s from the &#xa;    input stream.  Subclasses must override the &lt;code&gt;receive()&lt;/code&gt; abstract method to read &#xa;    and return a complete &lt;code&gt;ReceivedMessage&lt;/code&gt;.  &lt;code&gt;CommReceiver&lt;/code&gt; will loop and&#xa;    continuously call &lt;code&gt;receive()&lt;/code&gt; in order to receive messages.  Once a complete &#xa;    &lt;code&gt;ReceivedMessage&lt;/code&gt; is received, this class routes the &lt;code&gt;ReceivedMessage&lt;/code&gt; &#xa;    back up to the &lt;code&gt;Comm&lt;/code&gt; for further processing.  The returned &lt;code&gt;ReceivedMessage&lt;/code&gt; &#xa;    may also need to contain data for request/response message matching (tag data) and unsolicited&#xa;    message listener processing (unsolicited listener code).&lt;/li&gt;&#xa;    &lt;li&gt;&lt;code&gt;com.tridium.basicdriver.comm.CommTransmitter&lt;/code&gt;: provides access and synchronization &#xa;    for writing &lt;code&gt;Message&lt;/code&gt;s (and/or bytes) to the output stream.&lt;/li&gt;&#xa;    &lt;li&gt;&lt;code&gt;com.tridium.basicdriver.UnsolicitedMessageListener&lt;/code&gt;: &lt;code&gt;Comm&lt;/code&gt; can store &#xa;    a list of objects implementing this interface in order to process unsolicited received messages.&#xa;    &lt;code&gt;UnsolicitedMessageListener&lt;/code&gt; objects can be registered to the &lt;code&gt;Comm&lt;/code&gt;&#xa;    with an unsolicited listener code key.  Then when a &lt;code&gt;ReceivedMessage&lt;/code&gt; is received and &#xa;    determined to be unsolicited, it can match the unsolicited listener code to determine which &#xa;    &lt;code&gt;UnsolicitedMessageListener&lt;/code&gt; instance should handle the &lt;code&gt;ReceivedMessage&lt;/code&gt;.&lt;/li&gt;&#xa;    &lt;li&gt;&lt;code&gt;com.tridium.basicdriver.MessageListener&lt;/code&gt;: This is a helper interface that should&#xa;    be implemented by objects that wish to receive a response &lt;code&gt;Message&lt;/code&gt;.  When using the&#xa;    &lt;code&gt;sendAsync()&lt;/code&gt; or &lt;code&gt;sendAsyncWrite()&lt;/code&gt; convenience methods of &lt;code&gt;BBasicNetwork&lt;/code&gt;,&#xa;    they require a parameter of type &lt;code&gt;MessageListener&lt;/code&gt; in order to determine where to route&#xa;    the response &lt;code&gt;Message&lt;/code&gt;.&lt;/li&gt;&#xa;  &lt;/ul&gt;&#xa;&lt;/p&gt;&#xa;&#xa;&lt;p&gt;&#xa;The &lt;code&gt;com.tridium.basicdriver.message&lt;/code&gt; package contains classes useful for&#xa;building driver messages (using the &lt;code&gt;Message&lt;/code&gt; abstract class), allowing&#xa;these &lt;code&gt;Message&lt;/code&gt;s to be written to the output stream, and formatting&#xa;a response received (&lt;code&gt;ReceivedMessage&lt;/code&gt;) into a proper &lt;code&gt;Message&lt;/code&gt;.&#xa;  &lt;ul&gt;&#xa;    &lt;li&gt;&lt;code&gt;Message&lt;/code&gt;: an abstract class for wrapping a driver message and providing&#xa;    some methods necessary for handling a response to this message.  At a minimum, subclasses&#xa;    will need to provide the implementation for writing the message to the output stream and &#xa;    determine how a response (&lt;code&gt;ReceivedMessage&lt;/code&gt;) should be interpreted and formed&#xa;    into a &lt;code&gt;Message&lt;/code&gt;.&lt;/li&gt;&#xa;    &lt;li&gt;&lt;code&gt;ReceivedMessage&lt;/code&gt;: an abstract class for wrapping a received driver message and providing&#xa;    some methods for determining if it is unsolicited and/or the unsolicited listener code to&#xa;    use for finding the correct &lt;code&gt;UnsolicitedMessageListener&lt;/code&gt; if the message is &#xa;    determined to be unsolicited.  Subclasses should provide a means to serve the appropriate&#xa;    data to form a complete &lt;code&gt;Message&lt;/code&gt;.&lt;/li&gt;&#xa;  &lt;/ul&gt;&#xa;&lt;/p&gt;&#xa;&#xa;&lt;p&gt;&#xa;The &lt;code&gt;com.tridium.basicdriver.util&lt;/code&gt; package contains utility classes useful to most&#xa;drivers.  &#xa;  &lt;ul&gt;&#xa;    &lt;li&gt;&lt;code&gt;BasicException&lt;/code&gt;:  an extension of &lt;code&gt;javax.baja.sys.BajaRuntimeException&lt;/code&gt;, a&#xa;    &lt;code&gt;BasicException&lt;/code&gt; can be thrown when an error occurs in the driver.&lt;/li&gt;&#xa;    &lt;li&gt;&lt;code&gt;BBasicWorker&lt;/code&gt;:  an extension of &lt;code&gt;javax.baja.util.BWorker&lt;/code&gt;, it manages &#xa;    a basic worker thread for a queue.  Used by the &lt;code&gt;BBasicNetwork&lt;/code&gt; for the asynchronous&#xa;    worker.&lt;/li&gt;&#xa;    &lt;li&gt;&lt;code&gt;BBasicCoalescingWorker&lt;/code&gt;:  an extension of &lt;code&gt;BBasicWorker&lt;/code&gt;, it manages &#xa;    a basic worker thread for a coalescing queue.  Used by the &lt;code&gt;BBasicNetwork&lt;/code&gt; for the asynchronous&#xa;    write worker.&lt;/li&gt;&#xa;    &lt;li&gt;&lt;code&gt;BBasicPollScheduler&lt;/code&gt;:  an extension of &lt;code&gt;javax.baja.driver.util.BPollScheduler&lt;/code&gt;,&#xa;    it handles subscribing, unsubscribing, and polling of &lt;code&gt;BIBasicPollable&lt;/code&gt; objects.&lt;/li&gt;&#xa;    &lt;li&gt;&lt;code&gt;BIBasicPollable&lt;/code&gt;:  an extension of &lt;code&gt;javax.baja.driver.util.BIPollable&lt;/code&gt;,&#xa;    this interface should be implemented by any objects that wish to register to receive poll requests&#xa;    from the &lt;code&gt;BBasicPollScheduler&lt;/code&gt;.  Subclasses of basicDriver can use this to poll any&#xa;    devices, points, etc. as needed.&lt;/li&gt;&#xa;  &lt;/ul&gt;&#xa;&lt;/p&gt;&#xa;&#xa;&lt;p&gt;&#xa;The &lt;code&gt;com.tridium.basicdriver.serial&lt;/code&gt; package contains classes useful to most&#xa;serial drivers (with the communication handler, &lt;code&gt;Comm&lt;/code&gt;, at the network level).  &#xa;  &lt;ul&gt;&#xa;    &lt;li&gt;&lt;code&gt;BSerialNetwork&lt;/code&gt;:  an extension of &lt;code&gt;BBasicNetwork&lt;/code&gt; that supports &#xa;    serial communication on a single configurable serial port.  This abstract class can be&#xa;    subclassed to provide a frozen property of type &lt;code&gt;javax.baja.serial.BSerialHelper&lt;/code&gt;.&#xa;    This property, called &#x27;Serial Port Config&#x27;, provides an end user the ability to configure&#xa;    a serial port and its settings (i.e. baud rate, data bits, etc.) to use for communication with devices&#xa;    on the serial network.&lt;/li&gt;&#xa;    &lt;li&gt;&lt;code&gt;SerialComm&lt;/code&gt;:  an extension of &lt;code&gt;Comm&lt;/code&gt; that handles opening&#xa;    the user selected serial port as well as the input and output streams to that port.  It is used by&#xa;    the &lt;code&gt;BSerialNetwork&lt;/code&gt; to handle synchronization of the serial communication.&lt;/li&gt;&#xa;  &lt;/ul&gt;&#xa;&lt;/p&gt;
</description>
<class packageName="com.tridium.basicdriver" name="BBasicDevice"><description>BBasicDevice is the base class for Basic devices.</description></class>
<class packageName="com.tridium.basicdriver" name="BBasicNetwork"><description>BBasicNetwork is the base container for Basic Devices.</description></class>
<class packageName="com.tridium.basicdriver" name="MessageListener" category="interface"><description>MessageListener is implemented by objects which can &#xa; receive a response Message.</description></class>
<class packageName="com.tridium.basicdriver" name="UnsolicitedMessageListener" category="interface"><description>The unsolicited message listener interface is implemented by objects that&#xa; wish to register to receive unsolicited messages from the Comm.</description></class>
</package>
</bajadoc>
