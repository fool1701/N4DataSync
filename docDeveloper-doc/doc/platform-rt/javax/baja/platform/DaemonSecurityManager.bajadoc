<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="platform" runtimeProfile="rt" qualifiedName="javax.baja.platform.DaemonSecurityManager" name="DaemonSecurityManager" packageName="javax.baja.platform" public="true" interface="true" abstract="true" category="interface">
<description>
Manages the authentication and access control for a PlatformDaemon
</description>
<!-- javax.baja.platform.DaemonSecurityManager.isAuthenticationReadonly() -->
<method name="isAuthenticationReadonly"  public="true" abstract="true">
<description>
Returns true if the platform daemon authentication settings are readonly for the connected platform.
</description>
<tag name="@since">Niagara 4.9</tag>
<return>
<type class="boolean"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.platform.DaemonSecurityManager.useSingleAdminAccount(java.lang.String, java.lang.String) -->
<method name="useSingleAdminAccount"  public="true" default="true">
<annotation><type class="java.lang.Deprecated"/>
</annotation>
<description/>
<tag name="@deprecated">use &lt;code&gt;<see ref="javax.baja.platform.DaemonSecurityManager#useSingleAdminAccount(java.lang.String, char[])">#useSingleAdminAccount(String, char[])</see>&lt;/code&gt;</tag>
<parameter name="adminUser">
<type class="java.lang.String"/>
</parameter>
<parameter name="adminPassword">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.platform.DaemonSecurityManager.isSingleUserAuthorizationSupported() -->
<method name="isSingleUserAuthorizationSupported"  public="true" abstract="true">
<description>
Returns true if single-user authentication and authorization function&#xa; &lt;code&gt;<see ref="javax.baja.platform.DaemonSecurityManager#useSingleAdminAccount(java.lang.String, char[])">#useSingleAdminAccount(String, char[])</see>&lt;/code&gt; is supported for the connected&#xa; platform.
</description>
<tag name="@since">Niagara 4.1</tag>
<return>
<type class="boolean"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.platform.DaemonSecurityManager.useSingleAdminAccount(java.lang.String, char[]) -->
<method name="useSingleAdminAccount"  public="true" abstract="true">
<description>
Update the platform daemon&#x27;s access control settings so that it uses&#xa; digest authentication (RFC 2617) to challenge clients, and uses&#xa; a single user name and password to check their credentials&#xa; against.&#xa;&#xa; Not supported for Niagara 4 hosts.
</description>
<tag name="@since">Niagara 4.1</tag>
<tag name="@see">#isSingleUserAuthorizationSupported()</tag>
<tag name="@see">&lt;a href=&#x27;https://www.ietf.org/rfc/rfc2617.txt&#x27;&gt;RFC 2617&lt;/a&gt;</tag>
<parameter name="adminUser">
<type class="java.lang.String"/>
<description>
user name for the platform daemon&#x27;s admin
</description>
</parameter>
<parameter name="adminPassword">
<type class="char" dimension="1"/>
<description>
password for the platform daemon&#x27;s admin
</description>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.platform.DaemonSecurityManager.isOsGroupAuthorizationSupported() -->
<method name="isOsGroupAuthorizationSupported"  public="true" abstract="true">
<description>
Returns true if OS group-based authorization checks are supported on&#xa; the connected platform:&#xa; &lt;ul&gt;&#xa;   &lt;li&gt;&lt;code&gt;<see ref="javax.baja.platform.DaemonSecurityManager#useAdminGroup(java.lang.String)">#useAdminGroup(String)</see>&lt;/code&gt; &lt;/li&gt;&#xa;   &lt;li&gt;&lt;code&gt;<see ref="javax.baja.platform.DaemonSecurityManager#useOsGroups(java.lang.String, java.lang.String)">#useOsGroups(String, String)</see>&lt;/code&gt; &lt;/li&gt;&#xa; &lt;/ul&gt;
</description>
<tag name="@since">Niagara 4.1</tag>
<return>
<type class="boolean"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.platform.DaemonSecurityManager.useAdminGroup(java.lang.String) -->
<method name="useAdminGroup"  public="true" abstract="true">
<description>
Update the platform daemon&#x27;s access control settings so that is uses&#xa; basic authentication (RFC 2617) to challenge clients, uses&#xa; the remote host&#x27;s OS security API to validate clients&#x27; credentials,&#xa; and uses authenticated users&#x27; group memberships to determine which&#xa; level of access to permit to platform daemon functions.
</description>
<tag name="@since">Niagara 4.1</tag>
<tag name="@see">#isOsGroupAuthorizationSupported()</tag>
<parameter name="adminGroupName">
<type class="java.lang.String"/>
<description>
OS group which should have privileges to do all operations with the&#xa;                       platform daemon.
</description>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.platform.DaemonSecurityManager.useOsGroups(java.lang.String, java.lang.String) -->
<method name="useOsGroups"  public="true" abstract="true">
<description>
Update the platform daemon&#x27;s access control settings so that is uses&#xa; basic authentication (RFC 2617) to challenge clients, uses&#xa; the remote host&#x27;s OS security API to validate clients&#x27; credentials,&#xa; and uses authenticated users&#x27; group memberships to determine which&#xa; level of access to permit to platform daemon functions.
</description>
<tag name="@see">#isOsGroupAuthorizationSupported()</tag>
<parameter name="userGroupName">
<type class="java.lang.String"/>
<description>
For supported Niagara AX platforms, OS group which should have&#xa;                      privileges to do most operations with the platform daemon, except&#xa;                      for rebooting, applying TCP/IP changes, and updating the system clock.&#xa;                      This parameter will be ignored for Niagara 4 platforms.
</description>
</parameter>
<parameter name="adminGroupName">
<type class="java.lang.String"/>
<description>
OS group which should have privileges to do all operations with the&#xa;                       platform daemon.
</description>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.platform.DaemonSecurityManager.addPlatformUser(java.lang.String, char[]) -->
<method name="addPlatformUser"  public="true" abstract="true">
<description>
For supported Niagara 4 platforms (Windows platforms are not supported), add a new OS user account&#xa; with administrative privileges and the given username and password.&#xa;&#xa; If the PlatformDaemon is currently using the factory default username and password to connect,&#xa; it will start using the given userName and password after this invocation is complete, and&#xa; the factory default user will be removed.
</description>
<tag name="@since">Niagara 4.1</tag>
<tag name="@see">#supportsPlatformAccountManagement()</tag>
<parameter name="userName">
<type class="java.lang.String"/>
<description>
The username is required, and may not be any of the following reserved names:&#xa; &lt;ul&gt;&#xa;   &lt;li&gt;root&lt;/li&gt;&#xa;   &lt;li&gt;sshd&lt;/li&gt;&#xa;   &lt;li&gt;daemon&lt;/li&gt;&#xa;   &lt;li&gt;niagarad&lt;/li&gt;&#xa;   &lt;li&gt;station&lt;/li&gt;&#xa;   &lt;li&gt;auth&lt;/li&gt;&#xa;   &lt;li&gt;niagarad_admin&lt;/li&gt;&#xa;   &lt;li&gt;niagarad_owners&lt;/li&gt;&#xa;   &lt;li&gt;station_owners&lt;/li&gt;&#xa;   &lt;li&gt;sshd&lt;/li&gt;&#xa; &lt;/ul&gt;
</description>
</parameter>
<parameter name="password">
<type class="char" dimension="1"/>
<description>
password for the new user. Must include only ASCII characters, be at most 64&#xa;                 characters in length, and comply with default&#xa;                 &lt;code&gt;<see ref="javax.baja.user.BPasswordStrength#DEFAULT">javax.baja.user.BPasswordStrength#DEFAULT</see>&lt;/code&gt; requirements
</description>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.platform.DaemonSecurityManager.supportsPlatformAccountManagement() -->
<method name="supportsPlatformAccountManagement"  public="true" abstract="true">
<description>
Return true if account management functions are supported on the connected platform:&#xa; &lt;ul&gt;&#xa;   &lt;li&gt;&lt;code&gt;<see ref="javax.baja.platform.DaemonSecurityManager#addPlatformUser(java.lang.String, char[])">#addPlatformUser(String, char[])</see>&lt;/code&gt;&lt;/li&gt;&#xa;   &lt;li&gt;&lt;code&gt;<see ref="javax.baja.platform.DaemonSecurityManager#updatePlatformUserPassword(java.lang.String, char[], char[])">#updatePlatformUserPassword(String, char[], char[])</see>&lt;/code&gt;&lt;/li&gt;&#xa;   &lt;li&gt;&lt;code&gt;<see ref="javax.baja.platform.DaemonSecurityManager#removePlatformUser(java.lang.String)">#removePlatformUser(String)</see>&lt;/code&gt; (String, char[], char[])}&lt;/li&gt;&#xa;   &lt;li&gt;&lt;code&gt;<see ref="javax.baja.platform.DaemonSecurityManager#listPlatformUsers()">#listPlatformUsers()</see>&lt;/code&gt; (String, char[], char[])}&lt;/li&gt;&#xa; &lt;/ul&gt;
</description>
<tag name="@since">Niagara 4.1</tag>
<return>
<type class="boolean"/>
</return>
<throws>
<type class="java.lang.Exception"/>
<description/>
</throws>
</method>

<!-- javax.baja.platform.DaemonSecurityManager.updatePlatformUserPassword(java.lang.String, char[], char[]) -->
<method name="updatePlatformUserPassword"  public="true" abstract="true">
<description>
For supported Niagara 4 platforms (Windows platforms are not supported), change the password&#xa; for the given userName from the given old password to the given new password.&#xa;&#xa; If the PlatformDaemon is connecting with the given user name, its session will be updated to&#xa; connect with the new password once the change is successful.
</description>
<tag name="@since">Niagara 4.1</tag>
<tag name="@see">#supportsPlatformAccountManagement()</tag>
<parameter name="userName">
<type class="java.lang.String"/>
</parameter>
<parameter name="oldPassword">
<type class="char" dimension="1"/>
</parameter>
<parameter name="newPassword">
<type class="char" dimension="1"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
<description>
if userName doesn&#x27;t exist, if the old password isn&#x27;t valid, if the new password&#xa;                   doesn&#x27;t meet strength requirements
</description>
</throws>
</method>

<!-- javax.baja.platform.DaemonSecurityManager.removePlatformUser(java.lang.String) -->
<method name="removePlatformUser"  public="true" abstract="true">
<description>
For supported Niagara 4 platforms (Windows platforms are not supported) remove the OS user account&#xa; with the given name.
</description>
<tag name="@since">Niagara 4.1</tag>
<tag name="@see">#supportsPlatformAccountManagement()</tag>
<parameter name="userName">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
<description>
if userName doesn&#x27;t exist or deleting it isn&#x27;t allowed
</description>
</throws>
</method>

<!-- javax.baja.platform.DaemonSecurityManager.isSystemPassphraseReadonly() -->
<method name="isSystemPassphraseReadonly"  public="true" abstract="true">
<description>
Returns true if the platform system passphrase is readonly for the connected platform.
</description>
<tag name="@since">Niagara 4.9</tag>
<return>
<type class="boolean"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.platform.DaemonSecurityManager.updateSystemPassphrase(char[], char[]) -->
<method name="updateSystemPassphrase"  public="true" abstract="true">
<description>
Update the system passphrase used by the remote Niagara 4 host
</description>
<tag name="@since">Niagara 4.1</tag>
<parameter name="currentPassphrase">
<type class="char" dimension="1"/>
</parameter>
<parameter name="newPassphrase">
<type class="char" dimension="1"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
<description>
if the current passphrase is incorrect, if the new passphrase doesn&#x27;t&#xa;                   meet strength requirements, if the passphrase values are the same, or&#xa;                   if the remote host does not run Niagara 4
</description>
</throws>
</method>

<!-- javax.baja.platform.DaemonSecurityManager.listPlatformUsers() -->
<method name="listPlatformUsers"  public="true" abstract="true">
<description>
For supported Niagara 4 platforms (Windows platforms are not supported) return a list of OS user&#xa; accounts visible to the authenticated user.
</description>
<tag name="@since">Niagara 4.1</tag>
<tag name="@see">#supportsPlatformAccountManagement()</tag>
<return>
<type class="java.lang.String" dimension="1"/>
</return>
</method>

</class>
</bajadoc>
