<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="devIpDriver" runtimeProfile="rt" qualifiedName="com.tridium.ddfIp.comm.BDdfIpAdapter" name="BDdfIpAdapter" packageName="com.tridium.ddfIp.comm" public="true">
<description>
Represents an Ethernet port on a platform that runs a station.
</description>
<extends>
<type class="javax.baja.sys.BStruct"/>
</extends>
<property name="adapterId" flags="">
<type class="java.lang.String"/>
<description>
Slot for the &lt;code&gt;adapterId&lt;/code&gt; property.&#xa; OS identifier for the network adapter (interface ID for *nix, guid for&#xa; win32, etc.)
</description>
<tag name="@see">#getAdapterId</tag>
<tag name="@see">#setAdapterId</tag>
</property>

<property name="description" flags="">
<type class="java.lang.String"/>
<description>
Slot for the &lt;code&gt;description&lt;/code&gt; property.&#xa; OS description for the adapter, if available
</description>
<tag name="@see">#getDescription</tag>
<tag name="@see">#setDescription</tag>
</property>

<property name="ipAddress" flags="">
<type class="java.lang.String"/>
<description>
Slot for the &lt;code&gt;ipAddress&lt;/code&gt; property.&#xa; The ip address configured for the adapter
</description>
<tag name="@see">#getIpAddress</tag>
<tag name="@see">#setIpAddress</tag>
</property>

<!-- com.tridium.ddfIp.comm.BDdfIpAdapter() -->
<constructor name="BDdfIpAdapter" public="true">
<description/>
</constructor>

<!-- com.tridium.ddfIp.comm.BDdfIpAdapter(java.lang.String, java.lang.String, java.lang.String) -->
<constructor name="BDdfIpAdapter" public="true">
<parameter name="id">
<type class="java.lang.String"/>
</parameter>
<parameter name="desc">
<type class="java.lang.String"/>
</parameter>
<parameter name="ip">
<type class="java.lang.String"/>
</parameter>
<description/>
</constructor>

<!-- com.tridium.ddfIp.comm.BDdfIpAdapter.getAdapterId() -->
<method name="getAdapterId"  public="true">
<description>
Get the &lt;code&gt;adapterId&lt;/code&gt; property.&#xa; OS identifier for the network adapter (interface ID for *nix, guid for&#xa; win32, etc.)
</description>
<tag name="@see">#adapterId</tag>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- com.tridium.ddfIp.comm.BDdfIpAdapter.setAdapterId(java.lang.String) -->
<method name="setAdapterId"  public="true">
<description>
Set the &lt;code&gt;adapterId&lt;/code&gt; property.&#xa; OS identifier for the network adapter (interface ID for *nix, guid for&#xa; win32, etc.)
</description>
<tag name="@see">#adapterId</tag>
<parameter name="v">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddfIp.comm.BDdfIpAdapter.getDescription() -->
<method name="getDescription"  public="true">
<description>
Get the &lt;code&gt;description&lt;/code&gt; property.&#xa; OS description for the adapter, if available
</description>
<tag name="@see">#description</tag>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- com.tridium.ddfIp.comm.BDdfIpAdapter.setDescription(java.lang.String) -->
<method name="setDescription"  public="true">
<description>
Set the &lt;code&gt;description&lt;/code&gt; property.&#xa; OS description for the adapter, if available
</description>
<tag name="@see">#description</tag>
<parameter name="v">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddfIp.comm.BDdfIpAdapter.getIpAddress() -->
<method name="getIpAddress"  public="true">
<description>
Get the &lt;code&gt;ipAddress&lt;/code&gt; property.&#xa; The ip address configured for the adapter
</description>
<tag name="@see">#ipAddress</tag>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- com.tridium.ddfIp.comm.BDdfIpAdapter.setIpAddress(java.lang.String) -->
<method name="setIpAddress"  public="true">
<description>
Set the &lt;code&gt;ipAddress&lt;/code&gt; property.&#xa; The ip address configured for the adapter
</description>
<tag name="@see">#ipAddress</tag>
<parameter name="v">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddfIp.comm.BDdfIpAdapter.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- com.tridium.ddfIp.comm.BDdfIpAdapter.makeDefaultLocalHost() -->
<method name="makeDefaultLocalHost"  public="true" static="true">
<description>
Makes an adpater that represents the host&#x27;s &#x22;default&#x22; adapter.&#xa; &#xa; When the DdfIpAdapter is the &#x22;default host&#x22; adapter, the ddf&#xa; asks Java to choose the &#x22;default&#x22; adapter. Since all operating&#xa; system vendors implement their own JVM, the Java &#x22;default&#x22;&#xa; adapter should be a good choice in a &#x22;don&#x27;t care&#x22; scenario when&#xa; someone just wants the driver to communicate over any available&#xa; network interface.
</description>
<return>
<type class="com.tridium.ddfIp.comm.BDdfIpAdapter"/>
</return>
</method>

<!-- com.tridium.ddfIp.comm.BDdfIpAdapter.isDefaultLocalHost() -->
<method name="isDefaultLocalHost"  public="true">
<description>
Determines if this instance is configured to identify the host&#x27;s&#xa; default adapter.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- com.tridium.ddfIp.comm.BDdfIpAdapter.becomeDescriptionOnlyAdapter(java.lang.String) -->
<method name="becomeDescriptionOnlyAdapter"  public="true">
<description>
This method is called by the BIpAdpaterEditor if the&#xa; user enters a description free-handedly. In this case,&#xa; the user is configuring the station in an offline&#xa; mode. The DDf Ip Communicator will attempt to match up&#xa; the &#x27;adapterId&#x27; and &#x27;ipAddress&#x27; when the station runs.
</description>
<parameter name="desc">
<type class="java.lang.String"/>
<description>
the description that the user entered&#xa; free-handedly into the BDDfIpAdapterEditor.
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddfIp.comm.BDdfIpAdapter.isDescriptionOnlyAdapter() -->
<method name="isDescriptionOnlyAdapter"  public="true">
<description>
Checks if this is configured such that a description has been specified&#xa; but nothing else. The BDdfIpAdapterEditor uses this scenario if the&#xa; user is editing the station offline.
</description>
<return>
<type class="boolean"/>
<description>
true if the description is not at default but the adapterId is at default.
</description>
</return>
</method>

<!-- com.tridium.ddfIp.comm.BDdfIpAdapter.becomeDefaultLocalHostAdapter() -->
<method name="becomeDefaultLocalHostAdapter"  public="true">
<description>
This method is called by the BDdfIpAdapterEditor if the&#xa; user selects the &#x22;[Default Local Host]&#x22; adapter. The&#xa; Ip Communicator will ask Java to choose the local host.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.ddfIp.comm.BDdfIpAdapter.getInetAddress() -->
<method name="getInetAddress"  public="true">
<description>
Gets the java.net.InetAddress representing this structure&#x27;s &#x22;Ip Address&#x22;
</description>
<return>
<type class="java.net.InetAddress"/>
<description>
the java.net.InetAddress object representing the ipAddress. If&#xa; the ip address is the adapter&#x27;s default then this returns Sys.getLocalHost().
</description>
</return>
<throws>
<type class="java.net.UnknownHostException"/>
<description>
If this is a &#x27;description&#x27; only adapter (meaning this&#xa; has not been resolved to a network interface on the host platform computer) then&#xa; this throws an UnknownHostException. This also throws any UnknownHostException&#xa; that the InetAddress.getByName mehtod throws as a result of calling it and passing&#xa; in the ipAddress for this adapter.
</description>
</throws>
</method>

<!-- com.tridium.ddfIp.comm.BDdfIpAdapter.adapterId -->
<field name="adapterId"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;adapterId&lt;/code&gt; property.&#xa; OS identifier for the network adapter (interface ID for *nix, guid for&#xa; win32, etc.)
</description>
<tag name="@see">#getAdapterId</tag>
<tag name="@see">#setAdapterId</tag>
</field>

<!-- com.tridium.ddfIp.comm.BDdfIpAdapter.description -->
<field name="description"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;description&lt;/code&gt; property.&#xa; OS description for the adapter, if available
</description>
<tag name="@see">#getDescription</tag>
<tag name="@see">#setDescription</tag>
</field>

<!-- com.tridium.ddfIp.comm.BDdfIpAdapter.ipAddress -->
<field name="ipAddress"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;ipAddress&lt;/code&gt; property.&#xa; The ip address configured for the adapter
</description>
<tag name="@see">#getIpAddress</tag>
<tag name="@see">#setIpAddress</tag>
</field>

<!-- com.tridium.ddfIp.comm.BDdfIpAdapter.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

<!-- com.tridium.ddfIp.comm.BDdfIpAdapter.DEFAULT_ADAPTER_ID -->
<field name="DEFAULT_ADAPTER_ID"  public="true" static="true" final="true">
<type class="java.lang.String"/>
<description/>
</field>

<!-- com.tridium.ddfIp.comm.BDdfIpAdapter.DEFAULT_IP_ADDR -->
<field name="DEFAULT_IP_ADDR"  public="true" static="true" final="true">
<type class="java.lang.String"/>
<description/>
</field>

<!-- com.tridium.ddfIp.comm.BDdfIpAdapter.DEFAULT_DESCRIPTION -->
<field name="DEFAULT_DESCRIPTION"  public="true" static="true" final="true">
<type class="java.lang.String"/>
<description/>
</field>

</class>
</bajadoc>
