<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="devIpDriver" runtimeProfile="rt" qualifiedName="com.tridium.ddfIp.udp.comm.BDdfUdpReceiver" name="BDdfUdpReceiver" packageName="com.tridium.ddfIp.udp.comm" public="true">
<description>
By default, the Udp/Ip receiver uses the same Udp/Ip address and Udp/Ip&#xa; port as the Udp communicator component&#x27;s transmitter. &#xa; &#xa; Note: Some protocols use a different Udp/Ip receive port. If that is the&#xa; case then the developer should extend this class, add a property of&#xa; type BDdfUdpIpAddress, override this method, and return the property&#x27;s&#xa; value from this method. That will cause this object to use its own Udp/Ip&#xa; adress and Udp/Ip port.&#xa; &#xa; This class extends BDdfNullReceiver so that it does not have to implement the &#xa; &#x27;isStartOfFrame&#x27;, etc. method.
</description>
<tag name="@author">lperkins</tag>
<extends>
<type class="com.tridium.ddf.comm.defaultComm.BDdfNullReceiver"/>
</extends>
<!-- com.tridium.ddfIp.udp.comm.BDdfUdpReceiver() -->
<constructor name="BDdfUdpReceiver" public="true">
<description/>
</constructor>

<!-- com.tridium.ddfIp.udp.comm.BDdfUdpReceiver.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- com.tridium.ddfIp.udp.comm.BDdfUdpReceiver.getReceivePort() -->
<method name="getReceivePort"  public="true">
<description>
Gets the Udp port that the receiver&#x27;s Udp DatagramSocket will be bound to on the host (Jace).
</description>
<return>
<type class="int"/>
<description>
this default implementation returns -1 which causes the BDdfUdpCommunicator&#xa; to allow Java to choose any available Udp port. If the developer&#x27;s driver requires&#xa; a particular Udp origination port for the receive socket then the developer may&#xa; override this method and supply a Udp Port as he or she sees fit.
</description>
</return>
</method>

<!-- com.tridium.ddfIp.udp.comm.BDdfUdpReceiver.getUdpCommunicator() -->
<method name="getUdpCommunicator"  public="true">
<description/>
<return>
<type class="com.tridium.ddfIp.udp.comm.BDdfUdpCommunicator"/>
</return>
</method>

<!-- com.tridium.ddfIp.udp.comm.BDdfUdpReceiver.checkFrame(com.tridium.ddf.comm.IDdfDataFrame) -->
<method name="checkFrame"  protected="true">
<description>
Overrides BDdfNullReceiver.checkFrame to always return true, instead of false,&#xa; as BDdfNullReceiver does. This method returns can safely return true because&#xa; checksum checking is not necessary since Udp/Ip already has data integrity checks built-in.
</description>
<parameter name="completeFrame">
<type class="com.tridium.ddf.comm.IDdfDataFrame"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- com.tridium.ddfIp.udp.comm.BDdfUdpReceiver.getUdpReceiveBufferSize() -->
<method name="getUdpReceiveBufferSize"  protected="true">
<description>
The developer may override this to declare a buffer size that is more suitable&#xa; to his or her protocol.&#xa; &#xa; This method is called from the constructor to initialize the internal Udp/Ip&#xa; receive buffer.
</description>
<return>
<type class="int"/>
<description>
by default, this returns 1024. I figure this is about the large that we&#xa; can get away with...since we do not know anything about any particular Udp/Ip&#xa; protocol at this layer.
</description>
</return>
</method>

<!-- com.tridium.ddfIp.udp.comm.BDdfUdpReceiver.doReceiveFrame() -->
<method name="doReceiveFrame"  protected="true">
<description>
This method must be implemented to recognize and receive a frame of data from the field-bus.&#xa; &#xa; If overridden then this method must block and only return once a frame of data is received.&#xa;&#xa; Hopefully, the default implementation of this method will suffice. It would allow the descendant&#xa; to simply implement the abstract isCompleteFrame and isStartOfFrame methods.
</description>
<return>
<type class="com.tridium.ddf.comm.IDdfDataFrame"/>
<description>
An object that implements the IDdfDataFrame interface that represents some data that was&#xa; just received from the field-bus.
</description>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- com.tridium.ddfIp.udp.comm.BDdfUdpReceiver.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

<!-- com.tridium.ddfIp.udp.comm.BDdfUdpReceiver.internalReceiveFrame -->
<field name="internalReceiveFrame"  protected="true">
<type class="com.tridium.ddfIp.udp.comm.BDdfUdpReceiver$UdpReceiveFrame"/>
<description/>
</field>

<!-- com.tridium.ddfIp.udp.comm.BDdfUdpReceiver.udpReceivePacket -->
<field name="udpReceivePacket"  protected="true">
<type class="java.net.DatagramPacket"/>
<description/>
</field>

<!-- com.tridium.ddfIp.udp.comm.BDdfUdpReceiver.udpReceiveBuffer -->
<field name="udpReceiveBuffer"  protected="true">
<type class="byte" dimension="1"/>
<description/>
</field>

<!-- com.tridium.ddfIp.udp.comm.BDdfUdpReceiver.availableUdpBytes -->
<field name="availableUdpBytes"  protected="true">
<type class="int"/>
<description/>
</field>

<!-- com.tridium.ddfIp.udp.comm.BDdfUdpReceiver.udpReceiveBufferOffset -->
<field name="udpReceiveBufferOffset"  protected="true">
<type class="int"/>
<description/>
</field>

</class>
</bajadoc>
