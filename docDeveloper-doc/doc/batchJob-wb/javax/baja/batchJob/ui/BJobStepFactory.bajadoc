<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="batchJob" runtimeProfile="wb" qualifiedName="javax.baja.batchJob.ui.BJobStepFactory" name="BJobStepFactory" packageName="javax.baja.batchJob.ui" public="true" abstract="true">
<description>
Subclasses provide UI tools which create and configure &#xa; BJobStep objects
</description>
<tag name="@author">Matt Boon</tag>
<tag name="@creation">6 Jan 06</tag>
<tag name="@version">$Revision$ $Date$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="javax.baja.sys.BSingleton"/>
</extends>
<implements>
<type class="javax.baja.agent.BIAgent"/>
</implements>
<!-- javax.baja.batchJob.ui.BJobStepFactory() -->
<constructor name="BJobStepFactory" public="true">
<description/>
</constructor>

<!-- javax.baja.batchJob.ui.BJobStepFactory.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.batchJob.ui.BJobStepFactory.getStageTypes() -->
<method name="getStageTypes"  public="true" abstract="true">
<description>
Return the types for all of the job stages this factory can make&#xa; steps for
</description>
<return>
<type class="javax.baja.sys.Type" dimension="1"/>
</return>
</method>

<!-- javax.baja.batchJob.ui.BJobStepFactory.getDescription(javax.baja.sys.Context) -->
<method name="getDescription"  public="true">
<description>
Returns a brief summary for this factory (should fit on a single&#xa; line)
</description>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.batchJob.ui.BJobStepFactory.getIcon() -->
<method name="getIcon"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.BIcon"/>
</return>
</method>

<!-- javax.baja.batchJob.ui.BJobStepFactory.isValidFor(javax.baja.batchJob.BBatchJob, javax.baja.sys.BObject, javax.baja.sys.Type, javax.baja.sys.BObject) -->
<method name="isValidFor"  public="true">
<description>
Return true if this factory can be used with the given editor, &#xa; stage type, and source object
</description>
<parameter name="currentBatchJob">
<type class="javax.baja.batchJob.BBatchJob"/>
<description>
batch job being edited that&#x27;s mounted in the same&#xa;   component space as the batch service that will run the job, or&#xa;   null if a mounted job isn&#x27;t available
</description>
</parameter>
<parameter name="jobTarget">
<type class="javax.baja.sys.BObject"/>
<description>
the object the target is working on - for example&#xa;   if the factory is for steps that work on a device network, is &#xa;   the specific network it would work on
</description>
</parameter>
<parameter name="stageType">
<type class="javax.baja.sys.Type"/>
<description>
type of BJobStage that the factory would create a step&#xa;   for
</description>
</parameter>
<parameter name="factoryArg">
<type class="javax.baja.sys.BObject"/>
<description>
object which may be used to choose or configure the &#xa;   job step
</description>
</parameter>
<return>
<type class="boolean"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.batchJob.ui.BJobStepFactory.makeStep(javax.baja.ui.BWidget, javax.baja.batchJob.BBatchJob, javax.baja.sys.BObject, javax.baja.sys.Context) -->
<method name="makeStep"  public="true">
<description>
Returns a fully configured BJobStep instance, or null&#xa; &#xa; Subclasses should set the factoryType property of the job step&#xa; object that is returned.
</description>
<parameter name="owner">
<type class="javax.baja.ui.BWidget"/>
<description>
widget owner for any windows to be created by the&#xa;   factory
</description>
</parameter>
<parameter name="currentBatchJob">
<type class="javax.baja.batchJob.BBatchJob"/>
<description>
batch job being edited that&#x27;s mounted in the same&#xa;   component space as the batch service that will run the job, or&#xa;   null if a mounted job isn&#x27;t available
</description>
</parameter>
<parameter name="jobTarget">
<type class="javax.baja.sys.BObject"/>
<description>
the object the target is working on - for example&#xa;   if the factory is for steps that work on a device network, is &#xa;   the specific network it would work on
</description>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
<description>
context
</description>
</parameter>
<return>
<type class="javax.baja.batchJob.BJobStep"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.batchJob.ui.BJobStepFactory.makeStep(javax.baja.ui.BWidget, javax.baja.batchJob.BBatchJob, javax.baja.sys.BObject, javax.baja.sys.BObject, javax.baja.sys.Context) -->
<method name="makeStep"  public="true" abstract="true">
<description>
Returns a fully configured BJobStep instance, or null&#xa; &#xa; Subclasses should set the factoryType property of the job step&#xa; object that is returned.
</description>
<parameter name="owner">
<type class="javax.baja.ui.BWidget"/>
<description>
widget owner for any windows to be created by the&#xa;   factory
</description>
</parameter>
<parameter name="currentBatchJob">
<type class="javax.baja.batchJob.BBatchJob"/>
<description>
batch job being edited that&#x27;s mounted in the same&#xa;   component space as the batch service that will run the job, or&#xa;   null if a mounted job isn&#x27;t available
</description>
</parameter>
<parameter name="jobTarget">
<type class="javax.baja.sys.BObject"/>
<description>
the object the target is working on - for example&#xa;   if the factory is for steps that work on a device network, is &#xa;   the specific network it would work on
</description>
</parameter>
<parameter name="factoryArg">
<type class="javax.baja.sys.BObject"/>
<description>
object which may be used to choose or configure the &#xa;   job step
</description>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
<description>
context
</description>
</parameter>
<return>
<type class="javax.baja.batchJob.BJobStep"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.batchJob.ui.BJobStepFactory.editStep(javax.baja.ui.BWidget, javax.baja.batchJob.BBatchJob, javax.baja.sys.BObject, javax.baja.sys.BObject, javax.baja.sys.Context) -->
<method name="editStep"  public="true" abstract="true">
<description>
Returns a fully configured BJobStep instance or null
</description>
<tag name="@since">Niagara 4.11</tag>
<parameter name="owner">
<type class="javax.baja.ui.BWidget"/>
<description>
widget owner for any windows to be created by the&#xa;   factory
</description>
</parameter>
<parameter name="currentBatchJob">
<type class="javax.baja.batchJob.BBatchJob"/>
<description>
batch job being edited that&#x27;s mounted in the same&#xa;   component space as the batch service that will run the job, or&#xa;   null if a mounted job isn&#x27;t available
</description>
</parameter>
<parameter name="jobTarget">
<type class="javax.baja.sys.BObject"/>
<description>
the object the target is working on - for example&#xa;   if the factory is for steps that work on a device network, is&#xa;   the specific network it would work on
</description>
</parameter>
<parameter name="factoryArg">
<type class="javax.baja.sys.BObject"/>
<description>
object which may be used to choose or configure the&#xa;   job step
</description>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
<description>
context
</description>
</parameter>
<return>
<type class="javax.baja.batchJob.BJobStep"/>
</return>
<throws>
<type class="java.lang.Exception"/>
<description>
when an implementation editStep throws an exception
</description>
</throws>
</method>

<!-- javax.baja.batchJob.ui.BJobStepFactory.lexKey(java.lang.String) -->
<method name="lexKey"  protected="true">
<description>
Convenience method to construct a lexicon key using the component type name&#xa; as the prefix of the key, and the specified suffix.&#xa;&#xa; e.g:&#xa;&#xa; &lt;code&gt;BFoo.lexKey(&amp;#x22;somekeyname&amp;#x22;) -&amp;gt; &amp;#x22;Foo.somekeyname&amp;#x22;&lt;/code&gt;
</description>
<parameter name="keySuffix">
<type class="java.lang.String"/>
<description>
the suffix to add to the key
</description>
</parameter>
<return>
<type class="java.lang.String"/>
<description>
a lexicon key with the component name + &#x22;.&#x22; + the suffix
</description>
</return>
</method>

<!-- javax.baja.batchJob.ui.BJobStepFactory.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

<!-- javax.baja.batchJob.ui.BJobStepFactory.BATCH_SERVICE_ORD -->
<field name="BATCH_SERVICE_ORD"  public="true" static="true" final="true">
<type class="javax.baja.naming.BOrd"/>
<description/>
</field>

</class>
</bajadoc>
