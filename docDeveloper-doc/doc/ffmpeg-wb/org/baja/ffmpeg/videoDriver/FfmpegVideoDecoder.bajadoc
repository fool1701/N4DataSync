<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="ffmpeg" runtimeProfile="wb" qualifiedName="org.baja.ffmpeg.videoDriver.FfmpegVideoDecoder" name="FfmpegVideoDecoder" packageName="org.baja.ffmpeg.videoDriver" public="true" abstract="true">
<description>
A VideoDecoder that feeds video packets to any specified FFmpeg decoder&#xa; codec and produces BImages as a result.&#xa; &#xa; This can be used in video drivers as an MPEG4 or H264 video decoder. Please see&#xa; the text files in the &#x27;docs&#x27; folder of this module for licensing details.&#xa; &#xa; To use this, descendant classes simply do as follows:&#xa; &#xa; &lt;ol&gt;&#xa; &lt;li&gt;From their constructor, call super(...) and pass in an instance of &lt;code&gt;BCodecIdEnum&lt;/code&gt;&#xa;     to indicate which decoder to use from the FFmpeg library. May alternately specify null or call super() to allow codec&#xa;     to be set after video stream is established. In that case initDecoder() must be called after decoderCodecToUse is set.&#xa; &lt;li&gt;Override the &lt;code&gt;readFrameData&lt;/code&gt; method and make it read the next video packet&#xa;     from the &lt;code&gt;videoStream&lt;/code&gt; (videoStream instance variable as defined on the &lt;code&gt;VideoDecoder&lt;/code&gt;&#xa;     grandparent and place the packet inside the ByteBuffer that is returned.&#xa; &lt;li&gt;While reading the next packet, per the previous step, call &lt;code&gt;setTimeIndex(javax.baja.sys.BAbsTime)&lt;/code&gt;&#xa;     and pass in the time index of the packet if at all possible to determine&#xa; &lt;/ol&gt;&#xa; &#xa; The native FFmpeg library is licensed under terms of GNU LGPL v2.1. &#xa; See the text files in the docs directory of the ffmpeg.jar module&#xa; for licensing details.
</description>
<tag name="@author">lperkins</tag>
<tag name="@creation">Aug 25, 2009</tag>
<extends>
<type class="com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder"/>
</extends>
<implements>
<type class="com.tridium.videoDriver.ui.videoStream.IVideoImagePainter"/>
</implements>
<!-- org.baja.ffmpeg.videoDriver.FfmpegVideoDecoder() -->
<constructor name="FfmpegVideoDecoder" protected="true">
<description>
Empty constructor for future compatibility. Note that any ancestor classes&#xa; that use this constructor will need to set the &lt;code&gt;decoderCodecToUse&lt;/code&gt;.
</description>
</constructor>

<!-- org.baja.ffmpeg.videoDriver.FfmpegVideoDecoder(org.baja.ffmpeg.enums.BCodecIdEnum) -->
<constructor name="FfmpegVideoDecoder" protected="true">
<parameter name="decoderCodecToUse">
<type class="org.baja.ffmpeg.enums.BCodecIdEnum"/>
<description>
- BCodecIdEnum - the FFmpeg decoder codec for&#xa; this instance. Null may be specified to allow codec to be set after video stream&#xa; is established.
</description>
</parameter>
<description>
Constructs an FfmpegVideoDecoder to decode frames using the specified&#xa; FFmpeg decoder codec.
</description>
</constructor>

<!-- org.baja.ffmpeg.videoDriver.FfmpegVideoDecoder.padBufferPerFfmpegDocumentationBeforeCallingAvCodecDecodeVideo(javax.baja.nre.util.ByteBuffer) -->
<method name="padBufferPerFfmpegDocumentationBeforeCallingAvCodecDecodeVideo"  protected="true">
<description>
Adds zeros to pad to the buffer that is passed to avcodec_decode_video.&#xa; per the FFmpeg documentation, there must be an extra sequence of&#xa; &#x27;FF_INPUT_BUFFER_PADDING_SIZE&#x27; zeros on the end of the buffer that&#xa; is fed to avcodec_decode_video &#xa; &#xa; &lt;br&gt;&#xa; Visit: &lt;a href=&#x22;http://www.dranger.com/ffmpeg/functions.html#avcodec_decode_audio&#x22;&gt;http://www.dranger.com/ffmpeg/functions.html#avcodec_decode_audio&lt;/a&gt;\&#xa; &#xa; &lt;br&gt;&#xa; Visit: &lt;a href=&#x22;http://www.dranger.com/ffmpeg/functions.html#avcodec_decode_video&#x22;&gt;http://www.dranger.com/ffmpeg/functions.html#avcodec_decode_video&lt;/a&gt;&#xa;&#xa; &lt;br&gt;&#xa; I am doing this in a protected override method just in case the end&#xa; developer needs to modify this buffering scheme.
</description>
<parameter name="frameBuffer">
<type class="javax.baja.nre.util.ByteBuffer"/>
<description/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- org.baja.ffmpeg.videoDriver.FfmpegVideoDecoder.autoDetermineVideoWidthAndHeight() -->
<method name="autoDetermineVideoWidthAndHeight"  protected="true">
<description>
This method is called by &lt;code&gt;finishInitializing&lt;/code&gt; just after decoding&#xa; the first frame. It asks FFmpeg for the with and height of frame that&#xa; was just decoded.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- org.baja.ffmpeg.videoDriver.FfmpegVideoDecoder.decodeFrame(com.tridium.videoDriver.videoStream.decoder.VidFrame) -->
<method name="decodeFrame"  public="true">
<description>
This is a callback from the VideoDecoder ancestor class within the&#xa; videoDriver API. Its job is to read packets from the video input&#xa; stream until the next frame can be determined.
</description>
<parameter name="vf">
<type class="com.tridium.videoDriver.videoStream.decoder.VidFrame"/>
</parameter>
<return>
<type class="void"/>
<description>
BImage the next frame
</description>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- org.baja.ffmpeg.videoDriver.FfmpegVideoDecoder.initDecoder() -->
<method name="initDecoder"  protected="true">
<description>
This method is called by &lt;code&gt;initVideoStream()&lt;/code&gt; to make the proper calls into&#xa; the underlying FFmpeg library to initialize the FFmpeg decoder codec for this object.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- org.baja.ffmpeg.videoDriver.FfmpegVideoDecoder.initSwsContext() -->
<method name="initSwsContext"  protected="true">
<description>
This method is called by &lt;code&gt;finishInitializing()&lt;/code&gt; to allocate an FFmpeg&#xa; SwsContext for converting from the raw output of the FFmpeg decoder to the&#xa; destination pixel format (RGB32 by default unless the descendant assigns a&#xa; different value to &lt;code&gt;destPixelFmt&lt;/code&gt;  ).
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- org.baja.ffmpeg.videoDriver.FfmpegVideoDecoder.initRawDecodedFfmpegFrame() -->
<method name="initRawDecodedFfmpegFrame"  protected="true">
<description>
This method is called by &lt;code&gt;init()&lt;/code&gt; to initialize the AVFrame structure&#xa; that we continually pass to the decode routine in the underlying FFmpeg library. That&#xa; is where it places the decoded frame.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- org.baja.ffmpeg.videoDriver.FfmpegVideoDecoder.initAVPacket() -->
<method name="initAVPacket"  protected="true">
<description/>
<return>
<type class="void"/>
</return>
</method>

<!-- org.baja.ffmpeg.videoDriver.FfmpegVideoDecoder.finishInitializing() -->
<method name="finishInitializing"  protected="true">
<description>
This method is called by &lt;code&gt;updateImageFromStream()&lt;/code&gt; after successfully using&#xa; the underlying FFmpeg library to decode the very first frame.&#xa; &#xa; This method calls the following:&#xa; &#xa;  &lt;ol&gt;&#xa;  &lt;li&gt;&lt;code&gt;autoDetermineVideoWidthAndHeight()&lt;/code&gt;&#xa;  &lt;li&gt;&lt;code&gt;initSwsContext()&lt;/code&gt;&#xa;  &lt;li&gt;&lt;code&gt;initPixelBuffer()&lt;/code&gt;&#xa;  &lt;/ol&gt;
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- org.baja.ffmpeg.videoDriver.FfmpegVideoDecoder.initPixelBuffer() -->
<method name="initPixelBuffer"  protected="true">
<description>
Allocates &lt;code&gt;pixelBufferData&lt;/code&gt; to &lt;code&gt;videoWidth&lt;/code&gt; X &lt;code&gt;videoHeight&lt;/code&gt;.&#xa; &#xa; Note that this method is called by &lt;code&gt;finishInitializing()&lt;/code&gt; after that&#xa; method calls &lt;code&gt;autoDetermineVideoWidthAndHeight()&lt;/code&gt;.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- org.baja.ffmpeg.videoDriver.FfmpegVideoDecoder.init(com.tridium.videoDriver.videoStream.BIVideoSource, com.tridium.videoDriver.BIVideoPlayer, javax.baja.sys.BRelTime, com.tridium.videoDriver.videoStream.IVideoSession) -->
<method name="init"  public="true">
<description>
This is a standard videoDriver core API callback to initialize this object.&#xa; &#xa; This method calls&#xa; &#xa; &lt;ol&gt;&#xa; &lt;li&gt;av_register_all() in the underlying FFmpeg library&#xa; &lt;li&gt;&lt;code&gt;initDecoder()&lt;/code&gt;&#xa; &lt;li&gt;&lt;code&gt;initRawDecodedFfmpegFrame()&lt;/code&gt;&#xa; &lt;/ol&gt;
</description>
<parameter name="videoSource">
<type class="com.tridium.videoDriver.videoStream.BIVideoSource"/>
</parameter>
<parameter name="videoPlayer">
<type class="com.tridium.videoDriver.BIVideoPlayer"/>
</parameter>
<parameter name="stopDecodingTimeout">
<type class="javax.baja.sys.BRelTime"/>
</parameter>
<parameter name="videoSession">
<type class="com.tridium.videoDriver.videoStream.IVideoSession"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- org.baja.ffmpeg.videoDriver.FfmpegVideoDecoder.stopDecoding(com.tridium.videoDriver.videoStream.WaitForStopDecoding) -->
<method name="stopDecoding"  public="true">
<description/>
<parameter name="stopMonitor">
<type class="com.tridium.videoDriver.videoStream.WaitForStopDecoding"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- org.baja.ffmpeg.videoDriver.FfmpegVideoDecoder.readBytesFromInputStream(java.util.logging.Logger, java.io.InputStream, byte[], int, java.lang.Object) -->
<method name="readBytesFromInputStream"  public="true" static="true">
<description>
This is a convenience method to help drivers.
</description>
<parameter name="log">
<type class="java.util.logging.Logger"/>
<description>
a Log to print fine info
</description>
</parameter>
<parameter name="input">
<type class="java.io.InputStream"/>
<description>
a stream to read from
</description>
</parameter>
<parameter name="intermediate">
<type class="byte" dimension="1"/>
<description>
a buffer to read chunks of bytes from&#xa; the input stream. These chunks are copied to the given&#xa; dest until &#x27;numBytes&#x27; have been read from the given input stream
</description>
</parameter>
<parameter name="numBytes">
<type class="int"/>
<description>
the number of bytes to read from the stream
</description>
</parameter>
<parameter name="dest">
<type class="java.lang.Object"/>
<description>
this is where to place the bytes that are read. This&#xa; can be a javax.baja.io.ByteBuffer, OutputStream, PrintWriter, or&#xa; null to not save the bytes (in other words, to skip them)
</description>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.io.IOException"/>
<description/>
</throws>
</method>

<!-- org.baja.ffmpeg.videoDriver.FfmpegVideoDecoder.paintImage(javax.baja.gx.Graphics, javax.baja.ui.BWidget) -->
<method name="paintImage"  public="true">
<description/>
<parameter name="g">
<type class="javax.baja.gx.Graphics"/>
</parameter>
<parameter name="videoPlayer">
<type class="javax.baja.ui.BWidget"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- org.baja.ffmpeg.videoDriver.FfmpegVideoDecoder.SHOW_FFMPEG_LOGO_WITHOUT_FADE_DURATION -->
<field name="SHOW_FFMPEG_LOGO_WITHOUT_FADE_DURATION"  public="true" static="true" final="true">
<type class="int"/>
<description/>
</field>

<!-- org.baja.ffmpeg.videoDriver.FfmpegVideoDecoder.SHOW_FFMPEG_LOGO_WITH_FADE_DURATION -->
<field name="SHOW_FFMPEG_LOGO_WITH_FADE_DURATION"  public="true" static="true" final="true">
<type class="int"/>
<description/>
</field>

<!-- org.baja.ffmpeg.videoDriver.FfmpegVideoDecoder.ticksWhenFfmpegLogoFirstShown -->
<field name="ticksWhenFfmpegLogoFirstShown"  protected="true">
<type class="long"/>
<description/>
</field>

<!-- org.baja.ffmpeg.videoDriver.FfmpegVideoDecoder.avDecoderContext -->
<field name="avDecoderContext"  protected="true">
<type class="org.baja.ffmpeg.libavcodec.FfmpegAVCodecContext"/>
<description>
Wraps the FFmpeg AVCodecContext structure for decoding.
</description>
</field>

<!-- org.baja.ffmpeg.videoDriver.FfmpegVideoDecoder.avDecoderCodec -->
<field name="avDecoderCodec"  protected="true">
<type class="org.baja.ffmpeg.libavcodec.FfmpegAVCodec"/>
<description>
Wraps the FFmpeg AVCodec structure for decoding.
</description>
</field>

<!-- org.baja.ffmpeg.videoDriver.FfmpegVideoDecoder.mostRecentRawDecodedFfmpegFrame -->
<field name="mostRecentRawDecodedFfmpegFrame"  protected="true">
<type class="org.baja.ffmpeg.libavcodec.FfmpegAVFrame"/>
<description>
We will &#x22;feed&#x22; FFmpeg the driver&#x27;s video (maybe MPEG4 format) stream and it will kindly&#xa;  give us back the current &#x22;picture&#x22; / &#x22;image&#x22;. That current picture/image&#xa;  is stored in this object. FFmpeg provides this in raw, YUV420 format.&#xa;  &#xa;  This isn&#x27;t good enough for us to use directly so we will convert it&#xa;  to a raw RGB32 pixel array and pass to BImage.setPixels(...). This&#xa;  conversion requires relatively low CPU usage.
</description>
</field>

<!-- org.baja.ffmpeg.videoDriver.FfmpegVideoDecoder.ffmpegAVPacket -->
<field name="ffmpegAVPacket"  protected="true">
<type class="org.baja.ffmpeg.libavcodec.FfmpegAVPacket"/>
<description/>
</field>

<!-- org.baja.ffmpeg.videoDriver.FfmpegVideoDecoder.swsContext -->
<field name="swsContext"  protected="true">
<type class="org.baja.ffmpeg.swscale.FfmpegSwsContext"/>
<description>
See comment for &lt;code&gt;mostRecentRawDecodedFfmpegFrame&lt;/code&gt;&#xa; &#xa; This is used to convert from YUV420 (raw decoder output&#xa; format to RGB32 &lt;code&gt;destPixelFmt&lt;/code&gt;.
</description>
</field>

<!-- org.baja.ffmpeg.videoDriver.FfmpegVideoDecoder.pixelBufferData -->
<field name="pixelBufferData"  protected="true">
<type class="int" dimension="1"/>
<description>
See comment for &lt;code&gt;mostRecentRawDecodedFfmpegFrame&lt;/code&gt;
</description>
</field>

<!-- org.baja.ffmpeg.videoDriver.FfmpegVideoDecoder.decoderCodecToUse -->
<field name="decoderCodecToUse"  protected="true">
<type class="org.baja.ffmpeg.enums.BCodecIdEnum"/>
<description>
Identifies the FFmpeg decoder to use. This is generally passed into&#xa; the constructor.
</description>
</field>

<!-- org.baja.ffmpeg.videoDriver.FfmpegVideoDecoder.destPixelFmt -->
<field name="destPixelFmt"  protected="true">
<type class="org.baja.ffmpeg.enums.BPixelFormatEnum"/>
<description>
Identifies the FFmpeg pixel format for RGB32 decoded frames.&#xa; &#xa; NOTE: For win32 this is PIX_FMT_BGRA. I hypothesize that this would&#xa; be PIX_FMT_ARGB on Macintosh.
</description>
</field>

<!-- org.baja.ffmpeg.videoDriver.FfmpegVideoDecoder.videoWidth -->
<field name="videoWidth"  protected="true">
<type class="int"/>
<description>
The width of decoded frames. This is automatically retrieved from FFmpeg.
</description>
</field>

<!-- org.baja.ffmpeg.videoDriver.FfmpegVideoDecoder.videoHeight -->
<field name="videoHeight"  protected="true">
<type class="int"/>
<description>
The height of decoded frames. This is automatically retrieved from FFmpeg.
</description>
</field>

<!-- org.baja.ffmpeg.videoDriver.FfmpegVideoDecoder.FF_INPUT_BUFFER_PADDING_SIZE -->
<field name="FF_INPUT_BUFFER_PADDING_SIZE"  public="true" static="true" final="true">
<type class="int"/>
<description>
The number of bytes to pad to the end of &lt;code&gt;mostRecentRawDecodedFfmpegFrame&lt;/code&gt;
</description>
</field>

<!-- org.baja.ffmpeg.videoDriver.FfmpegVideoDecoder.FF_INPUT_BUFFER_PADDING -->
<field name="FF_INPUT_BUFFER_PADDING"  public="true" static="true" final="true">
<type class="byte" dimension="1"/>
<description>
An array of zeros to pad to the end of &lt;code&gt;mostRecentRawDecodedFfmpegFrame&lt;/code&gt;
</description>
</field>

<!-- org.baja.ffmpeg.videoDriver.FfmpegVideoDecoder.log -->
<field name="log"  public="true" static="true" final="true">
<type class="java.util.logging.Logger"/>
<description>
For debugging.
</description>
</field>

<!-- org.baja.ffmpeg.videoDriver.FfmpegVideoDecoder.nativeLog -->
<field name="nativeLog"  public="true" static="true" final="true">
<type class="java.util.logging.Logger"/>
<description/>
</field>

<!-- org.baja.ffmpeg.videoDriver.FfmpegVideoDecoder.FFMPEG_DISCONNECTED_IMAGE -->
<field name="FFMPEG_DISCONNECTED_IMAGE"  public="true" static="true" final="true">
<type class="javax.baja.gx.BImage"/>
<description>
This is the image that will be displayed if the video decoder is not connected.
</description>
</field>

<!-- org.baja.ffmpeg.videoDriver.FfmpegVideoDecoder.FFMPEG_LOGO_BACKGROUND_RED -->
<field name="FFMPEG_LOGO_BACKGROUND_RED"  public="true" static="true" final="true">
<type class="int"/>
<description/>
</field>

<!-- org.baja.ffmpeg.videoDriver.FfmpegVideoDecoder.FFMPEG_LOGO_FOREGROUND_RED -->
<field name="FFMPEG_LOGO_FOREGROUND_RED"  public="true" static="true" final="true">
<type class="int"/>
<description/>
</field>

<!-- org.baja.ffmpeg.videoDriver.FfmpegVideoDecoder.FFMPEG_LOGO_BACKGROUND_GREEN -->
<field name="FFMPEG_LOGO_BACKGROUND_GREEN"  public="true" static="true" final="true">
<type class="int"/>
<description/>
</field>

<!-- org.baja.ffmpeg.videoDriver.FfmpegVideoDecoder.FFMPEG_LOGO_FOREGROUND_GREEN -->
<field name="FFMPEG_LOGO_FOREGROUND_GREEN"  public="true" static="true" final="true">
<type class="int"/>
<description/>
</field>

<!-- org.baja.ffmpeg.videoDriver.FfmpegVideoDecoder.FFMPEG_LOGO_BACKGROUND_BLUE -->
<field name="FFMPEG_LOGO_BACKGROUND_BLUE"  public="true" static="true" final="true">
<type class="int"/>
<description/>
</field>

<!-- org.baja.ffmpeg.videoDriver.FfmpegVideoDecoder.FFMPEG_LOGO_FOREGROUND_BLUE -->
<field name="FFMPEG_LOGO_FOREGROUND_BLUE"  public="true" static="true" final="true">
<type class="int"/>
<description/>
</field>

<!-- org.baja.ffmpeg.videoDriver.FfmpegVideoDecoder.FFMPEG_LOGO_INITIAL_BACKGROUND_ALPHA -->
<field name="FFMPEG_LOGO_INITIAL_BACKGROUND_ALPHA"  public="true" static="true" final="true">
<type class="int"/>
<description/>
</field>

<!-- org.baja.ffmpeg.videoDriver.FfmpegVideoDecoder.FFMPEG_LOGO_INITIAL_FOREGROUND_ALPHA -->
<field name="FFMPEG_LOGO_INITIAL_FOREGROUND_ALPHA"  public="true" static="true" final="true">
<type class="int"/>
<description/>
</field>

</class>
</bajadoc>
