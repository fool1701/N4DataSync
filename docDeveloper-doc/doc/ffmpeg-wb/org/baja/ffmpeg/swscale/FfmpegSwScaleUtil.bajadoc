<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="ffmpeg" runtimeProfile="wb" qualifiedName="org.baja.ffmpeg.swscale.FfmpegSwScaleUtil" name="FfmpegSwScaleUtil" packageName="org.baja.ffmpeg.swscale" public="true">
<description>
This is one of the main ways to access the underlying FFmpeg library. The&#xa; methods in this utility are typically used to convert an underlying AVFrame /&#xa; AVPicture into another AVFrame / AVPicture of a different raw pixel format&#xa; or size.&#xa; &#xa; FFmpeg is an amazing, open-source, LGPL-licensed library for converting video from&#xa; any format to any format. The initial use in Niagara 4 is to convert an&#xa; incoming stream from a video camera into raw frames of pixels that we will &#xa; paint on the screen using BajaUI.&#xa; &#xa; Unfortunately, since FFmpeg is so comprehensive, I do not understand it very&#xa; well at all!!! It seems to work best to convert video files on disk from one&#xa; format to another. Or, perhaps I should say, most examples on the WWW show how&#xa; to use FFmpeg to convert video files on the disk. However, I need FFmpeg for&#xa; converting streams in memory.&#xa; &#xa; This utility class is the result of my research into using the FFmpeg library.&#xa; It provides access to those methods that I required in order to support the&#xa; FfmpegVideoDecoder class, which, in theory can convert from any video camera&#x27;s&#xa; stream to a sequence of pixel arrays that a BVideoPlayer can paint on the screen.&#xa; &#xa; It is my intention that any third-party Niagara-4 developer interested in&#xa; modifying this library or adding extra support should be able to do so.&#xa; &#xa; The native FFmpeg library is licensed under terms of GNU LGPL v2.1. &#xa; See the text files in the docs directory of the ffmpeg.jar module&#xa; for licensing details.
</description>
<tag name="@author">lperkins</tag>
<tag name="@creation">Aug 20, 2009</tag>
<extends>
<type class="org.baja.ffmpeg.Ffmpeg"/>
</extends>
<!-- org.baja.ffmpeg.swscale.FfmpegSwScaleUtil() -->
<constructor name="FfmpegSwScaleUtil" public="true">
<description/>
</constructor>

<!-- org.baja.ffmpeg.swscale.FfmpegSwScaleUtil.sws_getContext(int, int, org.baja.ffmpeg.enums.BPixelFormatEnum, int, int, org.baja.ffmpeg.enums.BPixelFormatEnum) -->
<method name="sws_getContext"  public="true" static="true">
<description>
Allocates an sws_Context structure. The sws_Context structure is a special part&#xa; of the underlying FFmpeg library. If it helps you to understand, you can think&#xa; of it as being similar to a pre-compiled regular expression. &#xa; &#xa; The sws_Context structure represents the idea of converting an AVFrame/AVPicture&#xa; from one size of a particular pixel format to another size of possibly another&#xa; pixel format.&#xa; &#xa; For those that have expert knowledge of the FFmpeg library, this method passes&#xa; SWS_BICUBIC as the algorithm / flags, NULL as the srcFilter, NULL as the dstFilter,&#xa; and 0.0 as the &lt;i&gt;undocumented&lt;/i&gt; (as far as I can tell) double param.
</description>
<parameter name="srcW">
<type class="int"/>
<description>
the width (in pixels) of the AVFrame / AVPicture before conversion.
</description>
</parameter>
<parameter name="srcH">
<type class="int"/>
<description>
the height (in pixels) of the AVFrame / AVPicture before conversion.
</description>
</parameter>
<parameter name="srcFmt">
<type class="org.baja.ffmpeg.enums.BPixelFormatEnum"/>
<description>
the BPixelFormatEnum of the AVFrame / AVPicture before conversion.
</description>
</parameter>
<parameter name="dstW">
<type class="int"/>
<description>
the width (in pixels) of the AVFrame / AVPicture after conversion.
</description>
</parameter>
<parameter name="dstH">
<type class="int"/>
<description>
the height (in pixels) of the AVFrame / AVPicture after conversion.
</description>
</parameter>
<parameter name="dstFmt">
<type class="org.baja.ffmpeg.enums.BPixelFormatEnum"/>
<description>
the BPixelFormatEnum of the AVFrame / AVPicture after conversion.
</description>
</parameter>
<return>
<type class="org.baja.ffmpeg.swscale.FfmpegSwsContext"/>
<description>
a Java representation of the corresponding sws_Context structure.
</description>
</return>
</method>

<!-- org.baja.ffmpeg.swscale.FfmpegSwScaleUtil.sws_freeContext(org.baja.ffmpeg.swscale.FfmpegSwsContext) -->
<method name="sws_freeContext"  public="true" static="true">
<description/>
<parameter name="swsContext">
<type class="org.baja.ffmpeg.swscale.FfmpegSwsContext"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- org.baja.ffmpeg.swscale.FfmpegSwScaleUtil.sws_Scale(org.baja.ffmpeg.swscale.FfmpegSwsContext, org.baja.ffmpeg.libavcodec.FfmpegAVFrame, org.baja.ffmpeg.libavcodec.FfmpegAVFrame, int) -->
<method name="sws_Scale"  public="true" static="true">
<description>
Calls sws_Scale in the underlying FFmpeg library.
</description>
<parameter name="swsContext">
<type class="org.baja.ffmpeg.swscale.FfmpegSwsContext"/>
</parameter>
<parameter name="src">
<type class="org.baja.ffmpeg.libavcodec.FfmpegAVFrame"/>
<description>
the frame / picture to convert
</description>
</parameter>
<parameter name="dst">
<type class="org.baja.ffmpeg.libavcodec.FfmpegAVFrame"/>
<description>
the frame / picture to store the resulting conversion
</description>
</parameter>
<parameter name="srcHeight">
<type class="int"/>
<description>
the height (in pixels) of the src frame/picture to convert
</description>
</parameter>
<return>
<type class="int"/>
<description>
passes along the return value from the underlying call to sws_Scale. I believe&#xa; that this is the height (in pixels) of the dst frame / picture.
</description>
</return>
</method>

<!-- org.baja.ffmpeg.swscale.FfmpegSwScaleUtil.sws_Scale(org.baja.ffmpeg.swscale.FfmpegSwsContext, org.baja.ffmpeg.libavcodec.FfmpegAVFrame, int[], int, int, org.baja.ffmpeg.enums.BPixelFormatEnum) -->
<method name="sws_Scale"  public="true" static="true">
<description>
This is an optimized way to calls sws_Scale in the underlying FFmpeg library.&#xa; &#xa; This asks the underlying FFmpeg library to perform the conversion directly&#xa; into the given array of pixels.
</description>
<parameter name="swsContext">
<type class="org.baja.ffmpeg.swscale.FfmpegSwsContext"/>
</parameter>
<parameter name="src">
<type class="org.baja.ffmpeg.libavcodec.FfmpegAVFrame"/>
<description>
the frame / picture to convert
</description>
</parameter>
<parameter name="pixels">
<type class="int" dimension="1"/>
<description>
an array in whcih to store the pixels of the resulting conversion
</description>
</parameter>
<parameter name="srcWidth">
<type class="int"/>
<description>
the width (in pixels) of the src frame/picture to convert
</description>
</parameter>
<parameter name="srcHeight">
<type class="int"/>
<description>
the height (in pixels) of the src frame/picture to convert
</description>
</parameter>
<parameter name="dstFormat">
<type class="org.baja.ffmpeg.enums.BPixelFormatEnum"/>
<description>
the destination pixel format (this should be one of the 32&#xa;        bit pixels formats from  &lt;code&gt;BPixelFormatEnum.&lt;/code&gt;)
</description>
</parameter>
<return>
<type class="int"/>
<description>
passes along the return value from the underlying call to sws_Scale. I believe&#xa; that this is the height (in pixels) of the dst frame / picture.
</description>
</return>
</method>

</class>
</bajadoc>
