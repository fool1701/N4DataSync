<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="control" runtimeProfile="rt" qualifiedName="javax.baja.control.BControlPoint" name="BControlPoint" packageName="javax.baja.control" public="true" abstract="true">
<description>
BControlPoint is the base class for all point types in&#xa; the Baja control architecture.  A ControlPoint typically&#xa; maps to one value being read or written via a driver.&#xa; All ControlPoints have a BStatusValue property called &#x22;out&#x22;.&#xa; The most common types of ControlPoints are BBooleanPoint and&#xa; BNumericPoint which model a binary and analog value respectively.&#xa; &lt;p&gt;&#xa; Point extensions allow control point behavior to&#xa; be extended in a consistent manner.  Each property&#xa; of a BControlPoint which subclasses from BPointExtension&#xa; is considered an extension on the point.  Extensions allow&#xa; plug-in functionality such as alarming and historical&#xa; data collection via special hooks that BControlPoint&#xa; provides to BPointExtension.&#xa; &lt;p&gt;&#xa; If the predefined proxyExt is not a NullProxyExt then&#xa; the point is considered a proxy point which means that&#xa; it is a local representation of a point which actually&#xa; exists in an external device.  The driver framework is&#xa; is used to maintain synchronization.&#xa; &lt;p&gt;&#xa; Standard execution flow of ControlPoints:&#xa; &lt;pre&gt;&#xa;&#xa; 1) Input is changed (any property which isn&#x27;t out)&#xa;&#xa; 2) Execute action is invoked asynchronously&#xa;&#xa; 3) The doExecute method is called when point is scheduled&#xa;    for execution by framework runtime engine&#xa;&#xa; 4) Point itself updates working variable via ControlPoint.onExecute&#xa;&#xa; 5) Each extension updates working variable via PointExtension.onExecute;&#xa;    extensions are executed in slot declaration order&#xa;&#xa; 6) Working var is used to set the out property&#xa;&#xa;&lt;/pre&gt;
</description>
<tag name="@author">Brian Frank</tag>
<tag name="@creation">11 Oct 00</tag>
<tag name="@version">$Revision: 83$ $Date: 3/3/10 9:11:21 AM EST$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="javax.baja.sys.BComponent"/>
</extends>
<implements>
<type class="javax.baja.status.BIStatusValue"/>
</implements>
<property name="facets" flags="">
<type class="javax.baja.sys.BFacets"/>
<description>
Slot for the &lt;code&gt;facets&lt;/code&gt; property.&#xa; These facets are applied against the out property.
</description>
<tag name="@see">#getFacets</tag>
<tag name="@see">#setFacets</tag>
</property>

<property name="proxyExt" flags="">
<type class="javax.baja.control.ext.BAbstractProxyExt"/>
<description>
Slot for the &lt;code&gt;proxyExt&lt;/code&gt; property.&#xa; This frozen property always holds the proxy&#xa; extension, or an instance of BNullProxyExt&#xa; if this point is not a proxy point.
</description>
<tag name="@see">#getProxyExt</tag>
<tag name="@see">#setProxyExt</tag>
</property>

<action name="execute" flags="ah">
<return>
<type class="void"/>
</return>
<description>
Slot for the &lt;code&gt;execute&lt;/code&gt; action.
</description>
<tag name="@see">#execute()</tag>
</action>

<!-- javax.baja.control.BControlPoint() -->
<constructor name="BControlPoint" public="true">
<description/>
</constructor>

<!-- javax.baja.control.BControlPoint.getFacets() -->
<method name="getFacets"  public="true">
<description>
Get the &lt;code&gt;facets&lt;/code&gt; property.&#xa; These facets are applied against the out property.
</description>
<tag name="@see">#facets</tag>
<return>
<type class="javax.baja.sys.BFacets"/>
</return>
</method>

<!-- javax.baja.control.BControlPoint.setFacets(javax.baja.sys.BFacets) -->
<method name="setFacets"  public="true">
<description>
Set the &lt;code&gt;facets&lt;/code&gt; property.&#xa; These facets are applied against the out property.
</description>
<tag name="@see">#facets</tag>
<parameter name="v">
<type class="javax.baja.sys.BFacets"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.control.BControlPoint.getProxyExt() -->
<method name="getProxyExt"  public="true">
<description>
Get the &lt;code&gt;proxyExt&lt;/code&gt; property.&#xa; This frozen property always holds the proxy&#xa; extension, or an instance of BNullProxyExt&#xa; if this point is not a proxy point.
</description>
<tag name="@see">#proxyExt</tag>
<return>
<type class="javax.baja.control.ext.BAbstractProxyExt"/>
</return>
</method>

<!-- javax.baja.control.BControlPoint.setProxyExt(javax.baja.control.ext.BAbstractProxyExt) -->
<method name="setProxyExt"  public="true">
<description>
Set the &lt;code&gt;proxyExt&lt;/code&gt; property.&#xa; This frozen property always holds the proxy&#xa; extension, or an instance of BNullProxyExt&#xa; if this point is not a proxy point.
</description>
<tag name="@see">#proxyExt</tag>
<parameter name="v">
<type class="javax.baja.control.ext.BAbstractProxyExt"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.control.BControlPoint.execute() -->
<method name="execute"  public="true">
<description>
Invoke the &lt;code&gt;execute&lt;/code&gt; action.
</description>
<tag name="@see">#execute</tag>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.control.BControlPoint.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.control.BControlPoint.getStatusValue() -->
<method name="getStatusValue"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Return &lt;code&gt;getOutStatusValue()&lt;/code&gt;
</description>
<return>
<type class="javax.baja.status.BStatusValue"/>
</return>
</method>

<!-- javax.baja.control.BControlPoint.getStatusValueFacets() -->
<method name="getStatusValueFacets"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Return &lt;code&gt;getFacets()&lt;/code&gt;
</description>
<return>
<type class="javax.baja.sys.BFacets"/>
</return>
</method>

<!-- javax.baja.control.BControlPoint.getStatus() -->
<method name="getStatus"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Return &lt;code&gt;getOutStatusValue().getStatus()&lt;/code&gt;
</description>
<return>
<type class="javax.baja.status.BStatus"/>
</return>
</method>

<!-- javax.baja.control.BControlPoint.getValueWithFacets(javax.baja.sys.Context) -->
<method name="getValueWithFacets"  public="true" final="true">
<description>
Return &lt;code&gt;getStatusValue().getValueValue().toString(new BasicContext(cx, getFacets()))&lt;/code&gt;
</description>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.control.BControlPoint.getOutStatusValue() -->
<method name="getOutStatusValue"  public="true" abstract="true">
<description>
Get the output BStatusValue.
</description>
<return>
<type class="javax.baja.status.BStatusValue"/>
</return>
</method>

<!-- javax.baja.control.BControlPoint.getOutProperty() -->
<method name="getOutProperty"  public="true" final="true">
<description>
Get the output property.
</description>
<return>
<type class="javax.baja.sys.Property"/>
</return>
</method>

<!-- javax.baja.control.BControlPoint.getSlotFacets(javax.baja.sys.Slot) -->
<method name="getSlotFacets"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Apply the &#x22;facets&#x22; property to the &#x22;out&#x22; property.
</description>
<parameter name="slot">
<type class="javax.baja.sys.Slot"/>
</parameter>
<return>
<type class="javax.baja.sys.BFacets"/>
</return>
</method>

<!-- javax.baja.control.BControlPoint.isWritablePoint() -->
<method name="isWritablePoint"  public="true">
<description>
Is this a writable point, containing an inputs?&#xa; Writable subclasses must override this method.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.control.BControlPoint.doExecute() -->
<method name="doExecute"  public="true" final="true">
<description>
Do execute is the action which calculates output&#xa; values based on changes to the inputs.  This method&#xa; routes to onExecute() and executeExtensions();
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.control.BControlPoint.onExecute(javax.baja.status.BStatusValue, javax.baja.sys.Context) -->
<method name="onExecute"  public="true" abstract="true">
<description>
Control points should override this method to perform&#xa; whatever logic / operations necessary to update the output&#xa; based on inputs.  Never modify the out property directly,&#xa; rather update the working variable parameter.
</description>
<parameter name="out">
<type class="javax.baja.status.BStatusValue"/>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.control.BControlPoint.getExtensions() -->
<method name="getExtensions"  public="true" final="true">
<description>
Get the list of child extensions.
</description>
<return>
<type class="javax.baja.control.BPointExtension" dimension="1"/>
</return>
</method>

<!-- javax.baja.control.BControlPoint.getExtensionsRequireSubscription() -->
<method name="getExtensionsRequireSubscription"  public="true">
<description>
Return if any of the installed extensions require&#xa; a permanent subscription.  This is calculated by&#xa; walking through all the child BPointExtensions and&#xa; returning true if any one of them returns true for&#xa; the &lt;code&gt;requiresPointSubscription()&lt;/code&gt; method.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.control.BControlPoint.checkExtensionsRequireSubscription() -->
<method name="checkExtensionsRequireSubscription"  public="true">
<description>
Set the permanent subscription flag from the result of&#xa; &lt;code&gt;getExtensionsRequireSubscription()&lt;/code&gt;
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.control.BControlPoint.executeExtensions(javax.baja.status.BStatusValue, javax.baja.sys.Context) -->
<method name="executeExtensions"  public="true">
<description>
The method calls onExecute() on every extension&#xa; in the order they are declared.
</description>
<parameter name="out">
<type class="javax.baja.status.BStatusValue"/>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.control.BControlPoint.doCheckLink(javax.baja.sys.BComponent, javax.baja.sys.Slot, javax.baja.sys.Slot, javax.baja.sys.Context) -->
<method name="doCheckLink"  protected="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Calls doCheckParentLink on all extensions to allow&#xa; extensions to veto parent links
</description>
<parameter name="source">
<type class="javax.baja.sys.BComponent"/>
</parameter>
<parameter name="sourceSlot">
<type class="javax.baja.sys.Slot"/>
</parameter>
<parameter name="targetSlot">
<type class="javax.baja.sys.Slot"/>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="javax.baja.sys.LinkCheck"/>
</return>
</method>

<!-- javax.baja.control.BControlPoint.isChildLegal(javax.baja.sys.BComponent) -->
<method name="isChildLegal"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Is the specified child a legal child component for this&#xa; component.  BControlPoint allows BPointExtensions to restrict&#xa; creation of siblings via isSiblingLegal.
</description>
<parameter name="newChild">
<type class="javax.baja.sys.BComponent"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.control.BControlPoint.toString(javax.baja.sys.Context) -->
<method name="toString"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get the control point as a String.
</description>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.control.BControlPoint.getAgents(javax.baja.sys.Context) -->
<method name="getAgents"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="javax.baja.agent.AgentList"/>
</return>
</method>

<!-- javax.baja.control.BControlPoint.fw(int, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object) -->
<method name="fw"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Framework use only.
</description>
<parameter name="x">
<type class="int"/>
</parameter>
<parameter name="a">
<type class="java.lang.Object"/>
</parameter>
<parameter name="b">
<type class="java.lang.Object"/>
</parameter>
<parameter name="c">
<type class="java.lang.Object"/>
</parameter>
<parameter name="d">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="java.lang.Object"/>
</return>
</method>

<!-- javax.baja.control.BControlPoint.facets -->
<field name="facets"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;facets&lt;/code&gt; property.&#xa; These facets are applied against the out property.
</description>
<tag name="@see">#getFacets</tag>
<tag name="@see">#setFacets</tag>
</field>

<!-- javax.baja.control.BControlPoint.proxyExt -->
<field name="proxyExt"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;proxyExt&lt;/code&gt; property.&#xa; This frozen property always holds the proxy&#xa; extension, or an instance of BNullProxyExt&#xa; if this point is not a proxy point.
</description>
<tag name="@see">#getProxyExt</tag>
<tag name="@see">#setProxyExt</tag>
</field>

<!-- javax.baja.control.BControlPoint.execute -->
<field name="execute"  public="true" static="true" final="true">
<type class="javax.baja.sys.Action"/>
<description>
Slot for the &lt;code&gt;execute&lt;/code&gt; action.
</description>
<tag name="@see">#execute()</tag>
</field>

<!-- javax.baja.control.BControlPoint.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

<!-- javax.baja.control.BControlPoint.log -->
<field name="log"  public="true" static="true" final="true">
<type class="java.util.logging.Logger"/>
<description>
The &#x22;control&#x22; log.
</description>
</field>

</class>
</bajadoc>
