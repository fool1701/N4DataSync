<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="control" runtimeProfile="rt" qualifiedName="javax.baja.control.ext.BAbstractProxyExt" name="BAbstractProxyExt" packageName="javax.baja.control.ext" public="true" abstract="true">
<description>
BAbstractProxyExt is the base class for all proxy extensions&#xa; which give BControlPoint&#x27;s the behavior to model a point&#xa; external to the VM.
</description>
<tag name="@author">Brian Frank</tag>
<tag name="@creation">5 Dec 01</tag>
<tag name="@version">$Revision: 11$ $Date: 12/11/09 3:15:10 PM EST$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="javax.baja.control.BPointExtension"/>
</extends>
<!-- javax.baja.control.ext.BAbstractProxyExt() -->
<constructor name="BAbstractProxyExt" public="true">
<description/>
</constructor>

<!-- javax.baja.control.ext.BAbstractProxyExt.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.control.ext.BAbstractProxyExt.checkStatusValueTypes() -->
<method name="checkStatusValueTypes"  public="true">
<description>
Called to check that proxy extension&#x27;s status &#xa; value types match the parent point.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.control.ext.BAbstractProxyExt.onExecute(javax.baja.status.BStatusValue, javax.baja.sys.Context) -->
<method name="onExecute"  public="true">
<description>
The ProxyExt is always the first extension executed.&#xa; The working variable passed in is the result of the input&#xa; calculation (the value to write if applicable).  The working &#xa; variable returned from this method is the value to feed &#xa; thru the rest of the extensions and into out (usually the &#xa; value last read).
</description>
<parameter name="out">
<type class="javax.baja.status.BStatusValue"/>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.control.ext.BAbstractProxyExt.pointSubscribed() -->
<method name="pointSubscribed"  public="true">
<description>
Callback when containing point is subscribed.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.control.ext.BAbstractProxyExt.pointUnsubscribed() -->
<method name="pointUnsubscribed"  public="true">
<description>
Callback when containing point is unsubscribed.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.control.ext.BAbstractProxyExt.writablePointActionInvoked() -->
<method name="writablePointActionInvoked"  public="true">
<description>
Callback when any of the WritablePoint&#x27;s command&#xa; actions are invoked: emergencyOverride, emergencyAuto,&#xa; override, auto, or set.  This hook is used by&#xa; driver:ProxyExt to force a write to the external&#xa; device.  This callback is invoked before any changes&#xa; are made to the point which cause a re-execute.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.control.ext.BAbstractProxyExt.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
