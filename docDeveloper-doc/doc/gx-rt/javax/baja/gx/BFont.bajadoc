<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="gx" runtimeProfile="rt" qualifiedName="javax.baja.gx.BFont" name="BFont" packageName="javax.baja.gx" public="true" final="true">
<description>
Font encapsulates a text font and its associated metrics.&#xa; String format is &lt;code&gt;&amp;#x22;[bold] [italic] [underline] &amp;lt;size&amp;gt;pt &amp;lt;name&amp;gt;&amp;#x22;&lt;/code&gt;.&#xa; Examples include &lt;code&gt;&amp;#x22;10pt Arial&amp;#x22;&lt;/code&gt; or &lt;code&gt;&amp;#x22;bold italic 12pt Times New Roman&amp;#x22;&lt;/code&gt;.
</description>
<tag name="@author">Brian Frank</tag>
<tag name="@creation">30 Dec 02</tag>
<tag name="@version">$Revision: 14$ $Date: 11/13/08 4:34:59 PM EST$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="javax.baja.sys.BSimple"/>
</extends>
<annotation><type class="javax.baja.nre.annotations.NoSlotomatic"/>
</annotation>
<!-- javax.baja.gx.BFont.make(java.lang.String, double) -->
<method name="make"  public="true" static="true">
<description>
Make a font for the specified name and size with a normal style.
</description>
<parameter name="name">
<type class="java.lang.String"/>
</parameter>
<parameter name="size">
<type class="double"/>
</parameter>
<return>
<type class="javax.baja.gx.BFont"/>
</return>
</method>

<!-- javax.baja.gx.BFont.make(java.lang.String, double, int) -->
<method name="make"  public="true" static="true">
<description>
Make a font for the specified name, size, and style..
</description>
<parameter name="name">
<type class="java.lang.String"/>
</parameter>
<parameter name="size">
<type class="double"/>
</parameter>
<parameter name="style">
<type class="int"/>
</parameter>
<return>
<type class="javax.baja.gx.BFont"/>
</return>
</method>

<!-- javax.baja.gx.BFont.make(java.lang.String) -->
<method name="make"  public="true" static="true">
<description>
Make from a string encoding.  See class header for format.
</description>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.gx.BFont"/>
</return>
</method>

<!-- javax.baja.gx.BFont.make(javax.baja.gx.BFont, int) -->
<method name="make"  public="true" static="true">
<description>
Make from an existing font, defining a new style
</description>
<parameter name="font">
<type class="javax.baja.gx.BFont"/>
</parameter>
<parameter name="style">
<type class="int"/>
</parameter>
<return>
<type class="javax.baja.gx.BFont"/>
</return>
</method>

<!-- javax.baja.gx.BFont.make(javax.baja.gx.BFont, double) -->
<method name="make"  public="true" static="true">
<description>
Make from an existing font, defining a new size
</description>
<parameter name="font">
<type class="javax.baja.gx.BFont"/>
</parameter>
<parameter name="size">
<type class="double"/>
</parameter>
<return>
<type class="javax.baja.gx.BFont"/>
</return>
</method>

<!-- javax.baja.gx.BFont.getName() -->
<method name="getName"  public="true">
<description>
Return the font family name.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.gx.BFont.getSize() -->
<method name="getSize"  public="true">
<description>
Return the font size.
</description>
<return>
<type class="double"/>
</return>
</method>

<!-- javax.baja.gx.BFont.getStyle() -->
<method name="getStyle"  public="true">
<description>
Return the style bitmask.
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.gx.BFont.isBold() -->
<method name="isBold"  public="true">
<description>
Return the bold style bit.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.gx.BFont.isItalic() -->
<method name="isItalic"  public="true">
<description>
Return the italic style bit.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.gx.BFont.isUnderline() -->
<method name="isUnderline"  public="true">
<description>
Return the underline style bit.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.gx.BFont.isAntiAliased() -->
<method name="isAntiAliased"  public="true">
<description/>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.gx.BFont.getLeading() -->
<method name="getLeading"  public="true">
<description>
The standard leading, or interline spacing, is the logical &#xa; amount of space to be reserved between the descent of one &#xa; line of text and the ascent of the next line. The height metric &#xa; is calculated to include this extra space.
</description>
<return>
<type class="double"/>
</return>
</method>

<!-- javax.baja.gx.BFont.getAscent() -->
<method name="getAscent"  public="true">
<description>
The ascent is the distance from the font&#x27;s baseline to the top &#xa; of most alphanumeric characters. Some characters in the Font &#xa; might extend above the font ascent line.
</description>
<return>
<type class="double"/>
</return>
</method>

<!-- javax.baja.gx.BFont.getDescent() -->
<method name="getDescent"  public="true">
<description>
The font descent is the distance from the font&#x27;s baseline to &#xa; the bottom of most alphanumeric characters with descenders. &#xa; Some characters in the Font might extend below the font &#xa; descent line.
</description>
<return>
<type class="double"/>
</return>
</method>

<!-- javax.baja.gx.BFont.getHeight() -->
<method name="getHeight"  public="true">
<description>
This is the distance between the baseline of adjacent lines of &#xa; text. It is the sum of the leading + ascent + descent. Due to &#xa; rounding this may not be the same as getAscent() + getDescent() + &#xa; getLeading(). There is no guarantee that lines of text spaced &#xa; at this distance are disjoint; such lines may overlap if some &#xa; characters overshoot either the standard ascent or the standard &#xa; descent metric.
</description>
<return>
<type class="double"/>
</return>
</method>

<!-- javax.baja.gx.BFont.getMaxAscent() -->
<method name="getMaxAscent"  public="true">
<description>
No character extends further above the font&#x27;s baseline &#xa; than this height.
</description>
<return>
<type class="double"/>
</return>
</method>

<!-- javax.baja.gx.BFont.getMaxDescent() -->
<method name="getMaxDescent"  public="true">
<description>
No character extends further below the font&#x27;s baseline than &#xa; this height.
</description>
<return>
<type class="double"/>
</return>
</method>

<!-- javax.baja.gx.BFont.width(int) -->
<method name="width"  public="true">
<description>
Returns the advance width of the specified character in &#xa; this Font. The advance is the distance from the leftmost &#xa; point to the rightmost point on the character&#x27;s baseline. &#xa; Note that the advance of a String is not necessarily the &#xa; sum of the advances of its characters.
</description>
<parameter name="c">
<type class="int"/>
</parameter>
<return>
<type class="double"/>
</return>
</method>

<!-- javax.baja.gx.BFont.fractionalWidth(int) -->
<method name="fractionalWidth"  public="true">
<description>
Returns the width of the specified character when it is intended to be&#xa; displayed using fractional font metrics. When measuring a character for&#xa; display, ensure you set the &lt;code&gt;<see ref="javax.baja.gx.Graphics">Graphics</see>&lt;/code&gt; instance to use fractional&#xa; font metrics as well - otherwise it may not paint to the measured width.&#xa; &lt;p&gt;&#xa; If fractional font metrics are not enabled in the system, this will return&#xa; the same value as &lt;code&gt;<see ref="javax.baja.gx.BFont#width(int)">#width(int)</see>&lt;/code&gt;.
</description>
<tag name="@see">Graphics#useFractionalFontMetrics(boolean)</tag>
<tag name="@since">Niagara 4.12</tag>
<parameter name="c">
<type class="int"/>
<description>
the character to measure
</description>
</parameter>
<return>
<type class="double"/>
<description>
the advance width of the character with fractional precision
</description>
</return>
</method>

<!-- javax.baja.gx.BFont.width(java.lang.String) -->
<method name="width"  public="true">
<description>
Returns the total advance width for showing the specified&#xa; String in this Font. The advance is the distance from the&#xa; leftmost point to the rightmost point on the string&#x27;s baseline.
</description>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="double"/>
</return>
</method>

<!-- javax.baja.gx.BFont.fractionalWidth(java.lang.String) -->
<method name="fractionalWidth"  public="true">
<description>
Returns the width of the specified string when it is intended to be&#xa; displayed using fractional font metrics. When measuring a string for&#xa; display, ensure you set the &lt;code&gt;<see ref="javax.baja.gx.Graphics">Graphics</see>&lt;/code&gt; instance to use fractional&#xa; font metrics as well - otherwise it may not paint to the measured width.&#xa; &lt;p&gt;&#xa; If fractional font metrics are not enabled in the system, this will return&#xa; the same value as &lt;code&gt;<see ref="javax.baja.gx.BFont#width(java.lang.String)">#width(String)</see>&lt;/code&gt;.
</description>
<tag name="@see">Graphics#useFractionalFontMetrics(boolean)</tag>
<tag name="@since">Niagara 4.12</tag>
<parameter name="s">
<type class="java.lang.String"/>
<description>
the string to measure
</description>
</parameter>
<return>
<type class="double"/>
<description>
the advance width of the string with fractional precision
</description>
</return>
</method>

<!-- javax.baja.gx.BFont.width(char[], int, int) -->
<method name="width"  public="true">
<description>
Returns the total advance width for showing the specified &#xa; String in this Font. The advance is the distance from the &#xa; leftmost point to the rightmost point on the string&#x27;s baseline.
</description>
<parameter name="data">
<type class="char" dimension="1"/>
</parameter>
<parameter name="off">
<type class="int"/>
</parameter>
<parameter name="len">
<type class="int"/>
</parameter>
<return>
<type class="double"/>
</return>
</method>

<!-- javax.baja.gx.BFont.fractionalWidth(char[], int, int) -->
<method name="fractionalWidth"  public="true">
<description>
Returns the width of the specified character array when it is intended to be&#xa; displayed using fractional font metrics. When measuring a character array for&#xa; display, ensure you set the &lt;code&gt;<see ref="javax.baja.gx.Graphics">Graphics</see>&lt;/code&gt; instance to use fractional&#xa; font metrics as well - otherwise it may not paint to the measured width.&#xa; &lt;p&gt;&#xa; If fractional font metrics are not enabled in the system, this will return&#xa; the same value as &lt;code&gt;<see ref="javax.baja.gx.BFont#width(char[], int, int)">#width(char[], int, int)</see>&lt;/code&gt;.
</description>
<tag name="@see">Graphics#useFractionalFontMetrics(boolean)</tag>
<tag name="@since">Niagara 4.12</tag>
<parameter name="data">
<type class="char" dimension="1"/>
<description>
the characters to measure
</description>
</parameter>
<parameter name="off">
<type class="int"/>
<description>
the index of the first character to measure
</description>
</parameter>
<parameter name="len">
<type class="int"/>
<description>
the number of characters to measure
</description>
</parameter>
<return>
<type class="double"/>
<description>
the advance width of the characters with fractional precision
</description>
</return>
</method>

<!-- javax.baja.gx.BFont.isNull() -->
<method name="isNull"  public="true">
<description>
Return if this instance == NULL
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.gx.BFont.hashCode() -->
<method name="hashCode"  public="true">
<description>
Get a hashcode for the font.
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.gx.BFont.equals(java.lang.Object) -->
<method name="equals"  public="true">
<description>
Return if the specified object is an equivalent BFont.
</description>
<parameter name="obj">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.gx.BFont.encode(java.io.DataOutput) -->
<method name="encode"  public="true">
<description>
Serialized using writeUTF() of string encoding.
</description>
<parameter name="out">
<type class="java.io.DataOutput"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.gx.BFont.decode(java.io.DataInput) -->
<method name="decode"  public="true">
<description>
Unserialized using readUTF() of string encoding.
</description>
<parameter name="in">
<type class="java.io.DataInput"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.gx.BFont.encodeToString() -->
<method name="encodeToString"  public="true">
<description>
Encode to string format.  See class header for format.
</description>
<return>
<type class="java.lang.String"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.gx.BFont.decodeFromString(java.lang.String) -->
<method name="decodeFromString"  public="true">
<description>
Encode from string format.  See class header for format.
</description>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.gx.BFont.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.gx.BFont.fw(int, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object) -->
<method name="fw"  public="true">
<description>
Framework use only.
</description>
<parameter name="x">
<type class="int"/>
</parameter>
<parameter name="a">
<type class="java.lang.Object"/>
</parameter>
<parameter name="b">
<type class="java.lang.Object"/>
</parameter>
<parameter name="c">
<type class="java.lang.Object"/>
</parameter>
<parameter name="d">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="java.lang.Object"/>
</return>
</method>

<!-- javax.baja.gx.BFont.BOLD -->
<field name="BOLD"  public="true" static="true" final="true">
<type class="int"/>
<description/>
</field>

<!-- javax.baja.gx.BFont.ITALIC -->
<field name="ITALIC"  public="true" static="true" final="true">
<type class="int"/>
<description/>
</field>

<!-- javax.baja.gx.BFont.UNDERLINE -->
<field name="UNDERLINE"  public="true" static="true" final="true">
<type class="int"/>
<description/>
</field>

<!-- javax.baja.gx.BFont.DEFAULT -->
<field name="DEFAULT"  public="true" static="true" final="true">
<type class="javax.baja.gx.BFont"/>
<description>
The default font is a plain 12 point sans-serif.
</description>
</field>

<!-- javax.baja.gx.BFont.NULL -->
<field name="NULL"  public="true" static="true" final="true">
<type class="javax.baja.gx.BFont"/>
<description>
The null font.
</description>
</field>

<!-- javax.baja.gx.BFont.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
