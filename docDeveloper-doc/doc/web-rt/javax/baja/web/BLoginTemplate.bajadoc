<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="web" runtimeProfile="rt" qualifiedName="javax.baja.web.BLoginTemplate" name="BLoginTemplate" packageName="javax.baja.web" public="true" abstract="true">
<description>
LoginTemplate is the hook for defining a custom login page for a web&#xa; application. The job of the template is to write the full HTML content&#xa; required to display the login form.  In order to use the Niagara&#xa; standard cookie based authentication you need to follow a few rules.&#xa; &lt;p&gt;&#xa; The form body must contain at minimum the following code.  The elements&#xa; may be arranged however you want, but all must exist.  Attributes may&#xa; be added (such as style and class attributes), but none may be changed or&#xa; removed.&#xa; &lt;pre&gt;&lt;code&gt;&#xa;   &amp;lt;form method=&#x27;post&#x27; action=&#x27;/j_security_check&#x27;&amp;gt;&#xa;     &amp;lt;input type=&#x27;text&#x27; name=&#x27;j_username&#x27; /&amp;gt;&#xa;     &amp;lt;input type=&#x27;text&#x27; name=&#x27;j_password&#x27; /&amp;gt;&#xa;     &amp;lt;input type=&#x27;submit&#x27; name=&#x27;submit&#x27; /&amp;gt;&#xa;   &amp;lt;/form&amp;gt;&#xa;&lt;/code&gt;&lt;/pre&gt;&#xa; It should be noted that in a lot of cases, it&#x27;s unnecessary to &#xa; override BLoginTemplate directly. When using the default log in template,&#xa; Properties can be added to a Station&#x27;s WebService to customize the log in &#xa; screen...&#xa; &lt;ul&gt;&#xa;   &lt;li&gt;&#xa;     &lt;strong&gt;logo&lt;/strong&gt;: an ORD that maps to a logo that&#x27;s used in the log in template.&#xa;   &lt;/li&gt;&#xa;   &lt;li&gt;&#xa;     &lt;strong&gt;loginCss&lt;/strong&gt;: an ORD that maps to a CSS file.&#xa;   &lt;/li&gt;&#xa; &lt;/ul&gt;&#xa; &lt;p&gt;
</description>
<tag name="@author">John Sublett and Gareth Johnson</tag>
<tag name="@creation">30 Aug 2006</tag>
<tag name="@version">$Revision: 8$ $Date: 12/30/10 11:14:06 AM EST$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="javax.baja.sys.BSingleton"/>
</extends>
<!-- javax.baja.web.BLoginTemplate() -->
<constructor name="BLoginTemplate" protected="true">
<description/>
</constructor>

<!-- javax.baja.web.BLoginTemplate.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.web.BLoginTemplate.write(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) -->
<method name="write"  public="true" abstract="true">
<description>
Write the full HTML login page.
</description>
<parameter name="req">
<type class="javax.servlet.http.HttpServletRequest"/>
<description>
The request object.
</description>
</parameter>
<parameter name="resp">
<type class="javax.servlet.http.HttpServletResponse"/>
<description>
The response object.
</description>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
<throws>
<type class="javax.servlet.ServletException"/>
</throws>
</method>

<!-- javax.baja.web.BLoginTemplate.resourceToOrd(java.lang.String) -->
<method name="resourceToOrd"  public="true" abstract="true">
<description>
Convert a resource path to an ord that can be resolved to locate&#xa; the resource.  This can be used to included images, etc. on the&#xa; login page.  The actual path for accessing a resource is&#xa; /login/path.  The path that is passed to this method has &#x22;/login/&#x22;&#xa; stripped off.&#xa; &lt;p&gt;&#xa; Please note, the resolved file types are restricted to web resources&#xa; (JavaScript, CSS and images).&#xa;&#xa; For example: /login/a/b/c =&amp;gt; a/b/c
</description>
<parameter name="path">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.naming.BOrd"/>
</return>
</method>

<!-- javax.baja.web.BLoginTemplate.getLoginTemplate() -->
<method name="getLoginTemplate"  public="true" static="true" final="true">
<description>
Returns the existing log in template. Please note, this should only &#xa; be called from the Station VM.
</description>
<return>
<type class="javax.baja.web.BLoginTemplate"/>
<description>
The current template.
</description>
</return>
</method>

<!-- javax.baja.web.BLoginTemplate.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

<!-- javax.baja.web.BLoginTemplate.log -->
<field name="log"  public="true" static="true" final="true">
<type class="java.util.logging.Logger"/>
<description/>
</field>

<!-- javax.baja.web.BLoginTemplate.defaultWebRc -->
<field name="defaultWebRc"  public="true" static="true" final="true">
<type class="java.lang.String"/>
<description/>
</field>

</class>
</bajadoc>
