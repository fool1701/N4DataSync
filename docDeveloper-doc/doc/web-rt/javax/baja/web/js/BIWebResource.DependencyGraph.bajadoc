<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="web" runtimeProfile="rt" qualifiedName="javax.baja.web.js.BIWebResource$DependencyGraph" name="BIWebResource.DependencyGraph" packageName="javax.baja.web.js" public="true" static="true" innerClass="true">
<description>
A dependency graph for a collection of web resources.
</description>
<extends>
<type class="java.lang.Object"/>
</extends>
<!-- javax.baja.web.js.BIWebResource.DependencyGraph.isEmpty() -->
<method name="isEmpty"  public="true">
<description/>
<return>
<type class="boolean"/>
<description>
true if there are no resources to resolve
</description>
</return>
</method>

<!-- javax.baja.web.js.BIWebResource.DependencyGraph.solve() -->
<method name="solve"  public="true">
<description>
Return a list of sets of dependencies, arranged in such a way that all the dependencies in&#xa; each layer (starting with index 0) can be resolved concurrently without any unsatisfied&#xa; dependencies. These will be filtered using the standard &lt;code&gt;<see ref="javax.baja.web.js.BIWebResource">BIWebResource</see>&lt;/code&gt; filter&#xa; behavior: if it is a &lt;code&gt;<see ref="javax.baja.web.js.BJsBuild">BJsBuild</see>&lt;/code&gt; and WebDev is enabled for that build, it will be&#xa; omitted.
</description>
<return>
<parameterizedType class="java.util.List">
<args>
<parameterizedType class="java.util.Set">
<args>
<type class="javax.baja.web.js.BIWebResource"/>
</args>
</parameterizedType>
</args>
</parameterizedType>
<description>
solved dependency graph
</description>
</return>
</method>

<!-- javax.baja.web.js.BIWebResource.DependencyGraph.solve(java.util.function.Predicate&lt;javax.baja.web.js.BIWebResource&gt;) -->
<method name="solve"  public="true">
<description/>
<tag name="@see">#solve()</tag>
<parameter name="filter">
<parameterizedType class="java.util.function.Predicate">
<args>
<type class="javax.baja.web.js.BIWebResource"/>
</args>
</parameterizedType>
</parameter>
<return>
<parameterizedType class="java.util.List">
<args>
<parameterizedType class="java.util.Set">
<args>
<type class="javax.baja.web.js.BIWebResource"/>
</args>
</parameterizedType>
</args>
</parameterizedType>
<description>
the fully solved graph, but with individual resources filtered out. That is:&#xa; filtering out one resource will _not_ filter out its dependencies.
</description>
</return>
</method>

<!-- javax.baja.web.js.BIWebResource.DependencyGraph.toJSON() -->
<method name="toJSON"  public="true">
<description>
Convert to JSON. The standard BIWebResource filtering behavior, where any &lt;code&gt;<see ref="javax.baja.web.js.BJsBuild">BJsBuild</see>&lt;/code&gt;s&#xa; with WebDev enabled are omitted, will be applied.
</description>
<return>
<type class="com.tridium.json.JSONArray"/>
<description>
a JSON representation of the dependencies (an array of arrays of strings), with each&#xa; resource converted to the RequireJS IDs that comprise it.
</description>
</return>
</method>

</class>
</bajadoc>
