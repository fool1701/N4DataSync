<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="web" runtimeProfile="rt" qualifiedName="javax.baja.web.BWebService" name="BWebService" packageName="javax.baja.web" public="true" final="true">
<description>
BWebService encapsulates access to the HTTP &lt;code&gt;<see ref="javax.baja.web.BWebServer">web server</see>&lt;/code&gt;.&#xa; &lt;p&gt;&#xa; Beginning in Niagara4, the web service is simply a general configuration container. The actual&#xa; web server implementation is now pluggable. See &lt;code&gt;<see ref="javax.baja.web.BWebServer">BWebServer</see>&lt;/code&gt; for details.
</description>
<tag name="@author">Matthew Giannini</tag>
<extends>
<type class="javax.baja.sys.BAbstractService"/>
</extends>
<implements>
<type class="javax.baja.util.BIRestrictedComponent"/>
</implements>
<implements>
<type class="com.tridium.security.BISecurityInfoSource"/>
</implements>
<implements>
<type class="javax.baja.security.dashboard.BISecurityDashboardProvider"/>
</implements>
<annotation><type class="java.lang.SuppressWarnings"/>
<elementValue name="value">
<annotationValue kind="array">
<elementArray>
<annotationValue kind="expr">
<expression>&#x22;deprecation&#x22;</expression>
</annotationValue>
</elementArray>
</annotationValue>
</elementValue>
</annotation>
<property name="httpPort" flags="">
<type class="javax.baja.firewall.BServerPort"/>
<description>
Slot for the &lt;code&gt;httpPort&lt;/code&gt; property.&#xa; Unsecured HTTP port.
</description>
<tag name="@see">#getHttpPort</tag>
<tag name="@see">#setHttpPort</tag>
</property>

<property name="httpEnabled" flags="">
<type class="boolean"/>
<description>
Slot for the &lt;code&gt;httpEnabled&lt;/code&gt; property.&#xa; Enable unsecured connections to the web server on the http port?
</description>
<tag name="@see">#getHttpEnabled</tag>
<tag name="@see">#setHttpEnabled</tag>
</property>

<property name="httpsPort" flags="">
<type class="javax.baja.firewall.BServerPort"/>
<description>
Slot for the &lt;code&gt;httpsPort&lt;/code&gt; property.&#xa; Secured HTTPS port.
</description>
<tag name="@see">#getHttpsPort</tag>
<tag name="@see">#setHttpsPort</tag>
</property>

<property name="httpsEnabled" flags="">
<type class="boolean"/>
<description>
Slot for the &lt;code&gt;httpsEnabled&lt;/code&gt; property.&#xa; Enable secure connections to the web server on the https port?
</description>
<tag name="@see">#getHttpsEnabled</tag>
<tag name="@see">#setHttpsEnabled</tag>
</property>

<property name="httpsOnly" flags="">
<type class="boolean"/>
<description>
Slot for the &lt;code&gt;httpsOnly&lt;/code&gt; property.&#xa; Redirect all http requests to the secure https port?
</description>
<tag name="@see">#getHttpsOnly</tag>
<tag name="@see">#setHttpsOnly</tag>
</property>

<property name="httpsMinProtocol" flags="">
<type class="javax.baja.security.crypto.BSslTlsEnum"/>
<description>
Slot for the &lt;code&gt;httpsMinProtocol&lt;/code&gt; property.&#xa; The minimum security protocol to use for SSL.
</description>
<tag name="@see">#getHttpsMinProtocol</tag>
<tag name="@see">#setHttpsMinProtocol</tag>
</property>

<property name="cipherSuiteGroup" flags="">
<type class="javax.baja.security.crypto.BTlsCipherSuiteGroup"/>
<description>
Slot for the &lt;code&gt;cipherSuiteGroup&lt;/code&gt; property.&#xa; The cipher suite group to use for the tls connections.
</description>
<tag name="@see">#getCipherSuiteGroup</tag>
<tag name="@see">#setCipherSuiteGroup</tag>
</property>

<property name="httpsCert" flags="">
<type class="java.lang.String"/>
<description>
Slot for the &lt;code&gt;httpsCert&lt;/code&gt; property.&#xa; The alias of the cert to use. This property is no longer used and migrates to the&#xa; certAliasAndPassword slot starting with Niagara 4.13
</description>
<tag name="@see">#getHttpsCert</tag>
<tag name="@see">#setHttpsCert</tag>
</property>

<property name="mainCertAliasAndPassword" flags="h">
<type class="javax.baja.security.BCertificateAliasAndPassword"/>
<description>
Slot for the &lt;code&gt;mainCertAliasAndPassword&lt;/code&gt; property.&#xa; The certificate and optional password to use for tls connections
</description>
<tag name="@since">Niagara 4.13</tag>
<tag name="@see">#getMainCertAliasAndPassword</tag>
<tag name="@see">#setMainCertAliasAndPassword</tag>
</property>

<property name="serverCertificateHealth" flags="htr">
<type class="com.tridium.security.BServerCertificateHealth"/>
<description>
Slot for the &lt;code&gt;serverCertificateHealth&lt;/code&gt; property.&#xa; Provide a status regarding the cert in case it can&#x27;t use the configured one
</description>
<tag name="@since">Niagara 4.13</tag>
<tag name="@see">#getServerCertificateHealth</tag>
<tag name="@see">#setServerCertificateHealth</tag>
</property>

<property name="requireHttpsForPasswords" flags="">
<type class="boolean"/>
<description>
Slot for the &lt;code&gt;requireHttpsForPasswords&lt;/code&gt; property.&#xa; Require an HTTPS connection when setting passwords
</description>
<tag name="@see">#getRequireHttpsForPasswords</tag>
<tag name="@see">#setRequireHttpsForPasswords</tag>
</property>

<property name="xFrameOptions" flags="hr">
<type class="javax.baja.web.BXFrameOptionsEnum"/>
<description>
Slot for the &lt;code&gt;xFrameOptions&lt;/code&gt; property.&#xa; The xframe option for preventing XFS attacks.
</description>
<tag name="@see">#getXFrameOptions</tag>
<tag name="@see">#setXFrameOptions</tag>
</property>

<property name="rememberUserIdCookie" flags="">
<type class="boolean"/>
<description>
Slot for the &lt;code&gt;rememberUserIdCookie&lt;/code&gt; property.&#xa; Makes the user id cookie persistent
</description>
<tag name="@see">#getRememberUserIdCookie</tag>
<tag name="@see">#setRememberUserIdCookie</tag>
</property>

<property name="sameSite" flags="">
<type class="com.tridium.web.BSameSiteEnum"/>
<description>
Slot for the &lt;code&gt;sameSite&lt;/code&gt; property.&#xa; Configure SameSite attribute for cookies
</description>
<tag name="@see">#getSameSite</tag>
<tag name="@see">#setSameSite</tag>
</property>

<property name="allowUsernameAutocomplete" flags="">
<type class="boolean"/>
<description>
Slot for the &lt;code&gt;allowUsernameAutocomplete&lt;/code&gt; property.&#xa; Disables autocomplete on the username field of the login page if false
</description>
<tag name="@see">#getAllowUsernameAutocomplete</tag>
<tag name="@see">#setAllowUsernameAutocomplete</tag>
</property>

<property name="loginTemplate" flags="">
<type class="javax.baja.util.BTypeSpec"/>
<description>
Slot for the &lt;code&gt;loginTemplate&lt;/code&gt; property.&#xa; The template for the browser login page.  If null, the default template is used.
</description>
<tag name="@see">#getLoginTemplate</tag>
<tag name="@see">#setLoginTemplate</tag>
</property>

<property name="gzipEnabled" flags="h">
<type class="boolean"/>
<description>
Slot for the &lt;code&gt;gzipEnabled&lt;/code&gt; property.&#xa; Enable gzip compression?
</description>
<tag name="@see">#getGzipEnabled</tag>
<tag name="@see">#setGzipEnabled</tag>
</property>

<property name="logFileDirectory" flags="r">
<type class="javax.baja.naming.BOrd"/>
<description>
Slot for the &lt;code&gt;logFileDirectory&lt;/code&gt; property.&#xa; If the web server supports request logging, then it should write logs to this directory.
</description>
<tag name="@see">#getLogFileDirectory</tag>
<tag name="@see">#setLogFileDirectory</tag>
</property>

<property name="clientEnvironments" flags="">
<type class="javax.baja.web.BClientEnvironments"/>
<description>
Slot for the &lt;code&gt;clientEnvironments&lt;/code&gt; property.&#xa; Supported client environments.
</description>
<tag name="@see">#getClientEnvironments</tag>
<tag name="@see">#setClientEnvironments</tag>
</property>

<property name="showStackTrace" flags="">
<type class="boolean"/>
<description>
Slot for the &lt;code&gt;showStackTrace&lt;/code&gt; property.&#xa; Will show exception stack traces in error responses when available if set to true.
</description>
<tag name="@see">#getShowStackTrace</tag>
<tag name="@see">#setShowStackTrace</tag>
</property>

<property name="appletModuleCachingType" flags="">
<type class="javax.baja.web.BAppletModuleCachingType"/>
<description>
Slot for the &lt;code&gt;appletModuleCachingType&lt;/code&gt; property.&#xa; If files aren&#x27;t available locally, enable jx browser JAR files to be loaded from an external URI.
</description>
<tag name="@deprecated">since Niagara 4.13 - will be removed in Niagara 5.0</tag>
<tag name="@see">#getAppletModuleCachingType</tag>
<tag name="@see">#setAppletModuleCachingType</tag>
</property>

<property name="webStartConfig" flags="">
<type class="javax.baja.web.BWebStartConfig"/>
<description>
Slot for the &lt;code&gt;webStartConfig&lt;/code&gt; property.&#xa; Configuration properties for clients using Java Web Start.
</description>
<tag name="@deprecated">since Niagara 4.13 - will be removed in Niagara 5.0</tag>
<tag name="@see">#getWebStartConfig</tag>
<tag name="@see">#setWebStartConfig</tag>
</property>

<property name="cacheConfig" flags="">
<type class="javax.baja.web.BCacheConfig"/>
<description>
Slot for the &lt;code&gt;cacheConfig&lt;/code&gt; property.&#xa; Configuration properties for clients using file resources that want additional caching.
</description>
<tag name="@see">#getCacheConfig</tag>
<tag name="@see">#setCacheConfig</tag>
</property>

<property name="warmupConfig" flags="N">
<type class="com.tridium.web.warmup.BWebWarmupConfig"/>
<description>
Slot for the &lt;code&gt;warmupConfig&lt;/code&gt; property.&#xa; Configuration for Web Warmup
</description>
<tag name="@see">#getWarmupConfig</tag>
<tag name="@see">#setWarmupConfig</tag>
</property>

<property name="hostnameRedirectSettings" flags="">
<type class="com.tridium.web.BHostnameRedirectSettings"/>
<description>
Slot for the &lt;code&gt;hostnameRedirectSettings&lt;/code&gt; property.&#xa; Configuration for hostname redirection
</description>
<tag name="@see">#getHostnameRedirectSettings</tag>
<tag name="@see">#setHostnameRedirectSettings</tag>
</property>

<property name="httpHeaderProviders" flags="">
<type class="javax.baja.web.http.BHttpHeaderProviders"/>
<description>
Slot for the &lt;code&gt;httpHeaderProviders&lt;/code&gt; property.&#xa; HTTP header configuration
</description>
<tag name="@see">#getHttpHeaderProviders</tag>
<tag name="@see">#setHttpHeaderProviders</tag>
</property>

<property name="hostHeaderValidationSettings" flags="">
<type class="com.tridium.web.BHostHeaderValidationSettings"/>
<description>
Slot for the &lt;code&gt;hostHeaderValidationSettings&lt;/code&gt; property.
</description>
<tag name="@see">#getHostHeaderValidationSettings</tag>
<tag name="@see">#setHostHeaderValidationSettings</tag>
</property>

<action name="resetAllConnections" flags="c">
<return>
<type class="void"/>
</return>
<description>
Slot for the &lt;code&gt;resetAllConnections&lt;/code&gt; action.
</description>
<tag name="@see">#resetAllConnections()</tag>
</action>

<!-- javax.baja.web.BWebService() -->
<constructor name="BWebService" public="true">
<description/>
</constructor>

<!-- javax.baja.web.BWebService.getHttpPort() -->
<method name="getHttpPort"  public="true">
<description>
Get the &lt;code&gt;httpPort&lt;/code&gt; property.&#xa; Unsecured HTTP port.
</description>
<tag name="@see">#httpPort</tag>
<return>
<type class="javax.baja.firewall.BServerPort"/>
</return>
</method>

<!-- javax.baja.web.BWebService.setHttpPort(javax.baja.firewall.BServerPort) -->
<method name="setHttpPort"  public="true">
<description>
Set the &lt;code&gt;httpPort&lt;/code&gt; property.&#xa; Unsecured HTTP port.
</description>
<tag name="@see">#httpPort</tag>
<parameter name="v">
<type class="javax.baja.firewall.BServerPort"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.web.BWebService.getHttpEnabled() -->
<method name="getHttpEnabled"  public="true">
<description>
Get the &lt;code&gt;httpEnabled&lt;/code&gt; property.&#xa; Enable unsecured connections to the web server on the http port?
</description>
<tag name="@see">#httpEnabled</tag>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.web.BWebService.setHttpEnabled(boolean) -->
<method name="setHttpEnabled"  public="true">
<description>
Set the &lt;code&gt;httpEnabled&lt;/code&gt; property.&#xa; Enable unsecured connections to the web server on the http port?
</description>
<tag name="@see">#httpEnabled</tag>
<parameter name="v">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.web.BWebService.getHttpsPort() -->
<method name="getHttpsPort"  public="true">
<description>
Get the &lt;code&gt;httpsPort&lt;/code&gt; property.&#xa; Secured HTTPS port.
</description>
<tag name="@see">#httpsPort</tag>
<return>
<type class="javax.baja.firewall.BServerPort"/>
</return>
</method>

<!-- javax.baja.web.BWebService.setHttpsPort(javax.baja.firewall.BServerPort) -->
<method name="setHttpsPort"  public="true">
<description>
Set the &lt;code&gt;httpsPort&lt;/code&gt; property.&#xa; Secured HTTPS port.
</description>
<tag name="@see">#httpsPort</tag>
<parameter name="v">
<type class="javax.baja.firewall.BServerPort"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.web.BWebService.getHttpsEnabled() -->
<method name="getHttpsEnabled"  public="true">
<description>
Get the &lt;code&gt;httpsEnabled&lt;/code&gt; property.&#xa; Enable secure connections to the web server on the https port?
</description>
<tag name="@see">#httpsEnabled</tag>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.web.BWebService.setHttpsEnabled(boolean) -->
<method name="setHttpsEnabled"  public="true">
<description>
Set the &lt;code&gt;httpsEnabled&lt;/code&gt; property.&#xa; Enable secure connections to the web server on the https port?
</description>
<tag name="@see">#httpsEnabled</tag>
<parameter name="v">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.web.BWebService.getHttpsOnly() -->
<method name="getHttpsOnly"  public="true">
<description>
Get the &lt;code&gt;httpsOnly&lt;/code&gt; property.&#xa; Redirect all http requests to the secure https port?
</description>
<tag name="@see">#httpsOnly</tag>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.web.BWebService.setHttpsOnly(boolean) -->
<method name="setHttpsOnly"  public="true">
<description>
Set the &lt;code&gt;httpsOnly&lt;/code&gt; property.&#xa; Redirect all http requests to the secure https port?
</description>
<tag name="@see">#httpsOnly</tag>
<parameter name="v">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.web.BWebService.getHttpsMinProtocol() -->
<method name="getHttpsMinProtocol"  public="true">
<description>
Get the &lt;code&gt;httpsMinProtocol&lt;/code&gt; property.&#xa; The minimum security protocol to use for SSL.
</description>
<tag name="@see">#httpsMinProtocol</tag>
<return>
<type class="javax.baja.security.crypto.BSslTlsEnum"/>
</return>
</method>

<!-- javax.baja.web.BWebService.setHttpsMinProtocol(javax.baja.security.crypto.BSslTlsEnum) -->
<method name="setHttpsMinProtocol"  public="true">
<description>
Set the &lt;code&gt;httpsMinProtocol&lt;/code&gt; property.&#xa; The minimum security protocol to use for SSL.
</description>
<tag name="@see">#httpsMinProtocol</tag>
<parameter name="v">
<type class="javax.baja.security.crypto.BSslTlsEnum"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.web.BWebService.getCipherSuiteGroup() -->
<method name="getCipherSuiteGroup"  public="true">
<description>
Get the &lt;code&gt;cipherSuiteGroup&lt;/code&gt; property.&#xa; The cipher suite group to use for the tls connections.
</description>
<tag name="@see">#cipherSuiteGroup</tag>
<return>
<type class="javax.baja.security.crypto.BTlsCipherSuiteGroup"/>
</return>
</method>

<!-- javax.baja.web.BWebService.setCipherSuiteGroup(javax.baja.security.crypto.BTlsCipherSuiteGroup) -->
<method name="setCipherSuiteGroup"  public="true">
<description>
Set the &lt;code&gt;cipherSuiteGroup&lt;/code&gt; property.&#xa; The cipher suite group to use for the tls connections.
</description>
<tag name="@see">#cipherSuiteGroup</tag>
<parameter name="v">
<type class="javax.baja.security.crypto.BTlsCipherSuiteGroup"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.web.BWebService.getHttpsCert() -->
<method name="getHttpsCert"  public="true">
<annotation><type class="java.lang.Deprecated"/>
</annotation>
<description>
Get the &lt;code&gt;httpsCert&lt;/code&gt; property.&#xa; The alias of the cert to use. This property is no longer used and migrates to the&#xa; certAliasAndPassword slot starting with Niagara 4.13
</description>
<tag name="@see">#httpsCert</tag>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.web.BWebService.setHttpsCert(java.lang.String) -->
<method name="setHttpsCert"  public="true">
<annotation><type class="java.lang.Deprecated"/>
</annotation>
<description>
Set the &lt;code&gt;httpsCert&lt;/code&gt; property.&#xa; The alias of the cert to use. This property is no longer used and migrates to the&#xa; certAliasAndPassword slot starting with Niagara 4.13
</description>
<tag name="@see">#httpsCert</tag>
<parameter name="v">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.web.BWebService.getMainCertAliasAndPassword() -->
<method name="getMainCertAliasAndPassword"  public="true">
<description>
Get the &lt;code&gt;mainCertAliasAndPassword&lt;/code&gt; property.&#xa; The certificate and optional password to use for tls connections
</description>
<tag name="@since">Niagara 4.13</tag>
<tag name="@see">#mainCertAliasAndPassword</tag>
<return>
<type class="javax.baja.security.BCertificateAliasAndPassword"/>
</return>
</method>

<!-- javax.baja.web.BWebService.setMainCertAliasAndPassword(javax.baja.security.BCertificateAliasAndPassword) -->
<method name="setMainCertAliasAndPassword"  public="true">
<description>
Set the &lt;code&gt;mainCertAliasAndPassword&lt;/code&gt; property.&#xa; The certificate and optional password to use for tls connections
</description>
<tag name="@since">Niagara 4.13</tag>
<tag name="@see">#mainCertAliasAndPassword</tag>
<parameter name="v">
<type class="javax.baja.security.BCertificateAliasAndPassword"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.web.BWebService.getServerCertificateHealth() -->
<method name="getServerCertificateHealth"  public="true">
<description>
Get the &lt;code&gt;serverCertificateHealth&lt;/code&gt; property.&#xa; Provide a status regarding the cert in case it can&#x27;t use the configured one
</description>
<tag name="@since">Niagara 4.13</tag>
<tag name="@see">#serverCertificateHealth</tag>
<return>
<type class="com.tridium.security.BServerCertificateHealth"/>
</return>
</method>

<!-- javax.baja.web.BWebService.setServerCertificateHealth(com.tridium.security.BServerCertificateHealth) -->
<method name="setServerCertificateHealth"  public="true">
<description>
Set the &lt;code&gt;serverCertificateHealth&lt;/code&gt; property.&#xa; Provide a status regarding the cert in case it can&#x27;t use the configured one
</description>
<tag name="@since">Niagara 4.13</tag>
<tag name="@see">#serverCertificateHealth</tag>
<parameter name="v">
<type class="com.tridium.security.BServerCertificateHealth"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.web.BWebService.getRequireHttpsForPasswords() -->
<method name="getRequireHttpsForPasswords"  public="true">
<description>
Get the &lt;code&gt;requireHttpsForPasswords&lt;/code&gt; property.&#xa; Require an HTTPS connection when setting passwords
</description>
<tag name="@see">#requireHttpsForPasswords</tag>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.web.BWebService.setRequireHttpsForPasswords(boolean) -->
<method name="setRequireHttpsForPasswords"  public="true">
<description>
Set the &lt;code&gt;requireHttpsForPasswords&lt;/code&gt; property.&#xa; Require an HTTPS connection when setting passwords
</description>
<tag name="@see">#requireHttpsForPasswords</tag>
<parameter name="v">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.web.BWebService.getXFrameOptions() -->
<method name="getXFrameOptions"  public="true">
<description>
Get the &lt;code&gt;xFrameOptions&lt;/code&gt; property.&#xa; The xframe option for preventing XFS attacks.
</description>
<tag name="@see">#xFrameOptions</tag>
<return>
<type class="javax.baja.web.BXFrameOptionsEnum"/>
</return>
</method>

<!-- javax.baja.web.BWebService.setXFrameOptions(javax.baja.web.BXFrameOptionsEnum) -->
<method name="setXFrameOptions"  public="true">
<description>
Set the &lt;code&gt;xFrameOptions&lt;/code&gt; property.&#xa; The xframe option for preventing XFS attacks.
</description>
<tag name="@see">#xFrameOptions</tag>
<parameter name="v">
<type class="javax.baja.web.BXFrameOptionsEnum"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.web.BWebService.getRememberUserIdCookie() -->
<method name="getRememberUserIdCookie"  public="true">
<description>
Get the &lt;code&gt;rememberUserIdCookie&lt;/code&gt; property.&#xa; Makes the user id cookie persistent
</description>
<tag name="@see">#rememberUserIdCookie</tag>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.web.BWebService.setRememberUserIdCookie(boolean) -->
<method name="setRememberUserIdCookie"  public="true">
<description>
Set the &lt;code&gt;rememberUserIdCookie&lt;/code&gt; property.&#xa; Makes the user id cookie persistent
</description>
<tag name="@see">#rememberUserIdCookie</tag>
<parameter name="v">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.web.BWebService.getSameSite() -->
<method name="getSameSite"  public="true">
<description>
Get the &lt;code&gt;sameSite&lt;/code&gt; property.&#xa; Configure SameSite attribute for cookies
</description>
<tag name="@see">#sameSite</tag>
<return>
<type class="com.tridium.web.BSameSiteEnum"/>
</return>
</method>

<!-- javax.baja.web.BWebService.setSameSite(com.tridium.web.BSameSiteEnum) -->
<method name="setSameSite"  public="true">
<description>
Set the &lt;code&gt;sameSite&lt;/code&gt; property.&#xa; Configure SameSite attribute for cookies
</description>
<tag name="@see">#sameSite</tag>
<parameter name="v">
<type class="com.tridium.web.BSameSiteEnum"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.web.BWebService.getAllowUsernameAutocomplete() -->
<method name="getAllowUsernameAutocomplete"  public="true">
<description>
Get the &lt;code&gt;allowUsernameAutocomplete&lt;/code&gt; property.&#xa; Disables autocomplete on the username field of the login page if false
</description>
<tag name="@see">#allowUsernameAutocomplete</tag>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.web.BWebService.setAllowUsernameAutocomplete(boolean) -->
<method name="setAllowUsernameAutocomplete"  public="true">
<description>
Set the &lt;code&gt;allowUsernameAutocomplete&lt;/code&gt; property.&#xa; Disables autocomplete on the username field of the login page if false
</description>
<tag name="@see">#allowUsernameAutocomplete</tag>
<parameter name="v">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.web.BWebService.getLoginTemplate() -->
<method name="getLoginTemplate"  public="true">
<description>
Get the &lt;code&gt;loginTemplate&lt;/code&gt; property.&#xa; The template for the browser login page.  If null, the default template is used.
</description>
<tag name="@see">#loginTemplate</tag>
<return>
<type class="javax.baja.util.BTypeSpec"/>
</return>
</method>

<!-- javax.baja.web.BWebService.setLoginTemplate(javax.baja.util.BTypeSpec) -->
<method name="setLoginTemplate"  public="true">
<description>
Set the &lt;code&gt;loginTemplate&lt;/code&gt; property.&#xa; The template for the browser login page.  If null, the default template is used.
</description>
<tag name="@see">#loginTemplate</tag>
<parameter name="v">
<type class="javax.baja.util.BTypeSpec"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.web.BWebService.getGzipEnabled() -->
<method name="getGzipEnabled"  public="true">
<description>
Get the &lt;code&gt;gzipEnabled&lt;/code&gt; property.&#xa; Enable gzip compression?
</description>
<tag name="@see">#gzipEnabled</tag>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.web.BWebService.setGzipEnabled(boolean) -->
<method name="setGzipEnabled"  public="true">
<description>
Set the &lt;code&gt;gzipEnabled&lt;/code&gt; property.&#xa; Enable gzip compression?
</description>
<tag name="@see">#gzipEnabled</tag>
<parameter name="v">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.web.BWebService.getLogFileDirectory() -->
<method name="getLogFileDirectory"  public="true">
<description>
Get the &lt;code&gt;logFileDirectory&lt;/code&gt; property.&#xa; If the web server supports request logging, then it should write logs to this directory.
</description>
<tag name="@see">#logFileDirectory</tag>
<return>
<type class="javax.baja.naming.BOrd"/>
</return>
</method>

<!-- javax.baja.web.BWebService.setLogFileDirectory(javax.baja.naming.BOrd) -->
<method name="setLogFileDirectory"  public="true">
<description>
Set the &lt;code&gt;logFileDirectory&lt;/code&gt; property.&#xa; If the web server supports request logging, then it should write logs to this directory.
</description>
<tag name="@see">#logFileDirectory</tag>
<parameter name="v">
<type class="javax.baja.naming.BOrd"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.web.BWebService.getClientEnvironments() -->
<method name="getClientEnvironments"  public="true">
<description>
Get the &lt;code&gt;clientEnvironments&lt;/code&gt; property.&#xa; Supported client environments.
</description>
<tag name="@see">#clientEnvironments</tag>
<return>
<type class="javax.baja.web.BClientEnvironments"/>
</return>
</method>

<!-- javax.baja.web.BWebService.setClientEnvironments(javax.baja.web.BClientEnvironments) -->
<method name="setClientEnvironments"  public="true">
<description>
Set the &lt;code&gt;clientEnvironments&lt;/code&gt; property.&#xa; Supported client environments.
</description>
<tag name="@see">#clientEnvironments</tag>
<parameter name="v">
<type class="javax.baja.web.BClientEnvironments"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.web.BWebService.getShowStackTrace() -->
<method name="getShowStackTrace"  public="true">
<description>
Get the &lt;code&gt;showStackTrace&lt;/code&gt; property.&#xa; Will show exception stack traces in error responses when available if set to true.
</description>
<tag name="@see">#showStackTrace</tag>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.web.BWebService.setShowStackTrace(boolean) -->
<method name="setShowStackTrace"  public="true">
<description>
Set the &lt;code&gt;showStackTrace&lt;/code&gt; property.&#xa; Will show exception stack traces in error responses when available if set to true.
</description>
<tag name="@see">#showStackTrace</tag>
<parameter name="v">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.web.BWebService.getAppletModuleCachingType() -->
<method name="getAppletModuleCachingType"  public="true">
<annotation><type class="java.lang.Deprecated"/>
</annotation>
<description>
Get the &lt;code&gt;appletModuleCachingType&lt;/code&gt; property.&#xa; If files aren&#x27;t available locally, enable jx browser JAR files to be loaded from an external URI.
</description>
<tag name="@deprecated">since Niagara 4.13 - will be removed in Niagara 5.0</tag>
<tag name="@see">#appletModuleCachingType</tag>
<return>
<type class="javax.baja.web.BAppletModuleCachingType"/>
</return>
</method>

<!-- javax.baja.web.BWebService.setAppletModuleCachingType(javax.baja.web.BAppletModuleCachingType) -->
<method name="setAppletModuleCachingType"  public="true">
<annotation><type class="java.lang.Deprecated"/>
</annotation>
<description>
Set the &lt;code&gt;appletModuleCachingType&lt;/code&gt; property.&#xa; If files aren&#x27;t available locally, enable jx browser JAR files to be loaded from an external URI.
</description>
<tag name="@deprecated">since Niagara 4.13 - will be removed in Niagara 5.0</tag>
<tag name="@see">#appletModuleCachingType</tag>
<parameter name="v">
<type class="javax.baja.web.BAppletModuleCachingType"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.web.BWebService.getWebStartConfig() -->
<method name="getWebStartConfig"  public="true">
<annotation><type class="java.lang.Deprecated"/>
</annotation>
<description>
Get the &lt;code&gt;webStartConfig&lt;/code&gt; property.&#xa; Configuration properties for clients using Java Web Start.
</description>
<tag name="@deprecated">since Niagara 4.13 - will be removed in Niagara 5.0</tag>
<tag name="@see">#webStartConfig</tag>
<return>
<type class="javax.baja.web.BWebStartConfig"/>
</return>
</method>

<!-- javax.baja.web.BWebService.setWebStartConfig(javax.baja.web.BWebStartConfig) -->
<method name="setWebStartConfig"  public="true">
<annotation><type class="java.lang.Deprecated"/>
</annotation>
<description>
Set the &lt;code&gt;webStartConfig&lt;/code&gt; property.&#xa; Configuration properties for clients using Java Web Start.
</description>
<tag name="@deprecated">since Niagara 4.13 - will be removed in Niagara 5.0</tag>
<tag name="@see">#webStartConfig</tag>
<parameter name="v">
<type class="javax.baja.web.BWebStartConfig"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.web.BWebService.getCacheConfig() -->
<method name="getCacheConfig"  public="true">
<description>
Get the &lt;code&gt;cacheConfig&lt;/code&gt; property.&#xa; Configuration properties for clients using file resources that want additional caching.
</description>
<tag name="@see">#cacheConfig</tag>
<return>
<type class="javax.baja.web.BCacheConfig"/>
</return>
</method>

<!-- javax.baja.web.BWebService.setCacheConfig(javax.baja.web.BCacheConfig) -->
<method name="setCacheConfig"  public="true">
<description>
Set the &lt;code&gt;cacheConfig&lt;/code&gt; property.&#xa; Configuration properties for clients using file resources that want additional caching.
</description>
<tag name="@see">#cacheConfig</tag>
<parameter name="v">
<type class="javax.baja.web.BCacheConfig"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.web.BWebService.getWarmupConfig() -->
<method name="getWarmupConfig"  public="true">
<description>
Get the &lt;code&gt;warmupConfig&lt;/code&gt; property.&#xa; Configuration for Web Warmup
</description>
<tag name="@see">#warmupConfig</tag>
<return>
<type class="com.tridium.web.warmup.BWebWarmupConfig"/>
</return>
</method>

<!-- javax.baja.web.BWebService.setWarmupConfig(com.tridium.web.warmup.BWebWarmupConfig) -->
<method name="setWarmupConfig"  public="true">
<description>
Set the &lt;code&gt;warmupConfig&lt;/code&gt; property.&#xa; Configuration for Web Warmup
</description>
<tag name="@see">#warmupConfig</tag>
<parameter name="v">
<type class="com.tridium.web.warmup.BWebWarmupConfig"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.web.BWebService.getHostnameRedirectSettings() -->
<method name="getHostnameRedirectSettings"  public="true">
<description>
Get the &lt;code&gt;hostnameRedirectSettings&lt;/code&gt; property.&#xa; Configuration for hostname redirection
</description>
<tag name="@see">#hostnameRedirectSettings</tag>
<return>
<type class="com.tridium.web.BHostnameRedirectSettings"/>
</return>
</method>

<!-- javax.baja.web.BWebService.setHostnameRedirectSettings(com.tridium.web.BHostnameRedirectSettings) -->
<method name="setHostnameRedirectSettings"  public="true">
<description>
Set the &lt;code&gt;hostnameRedirectSettings&lt;/code&gt; property.&#xa; Configuration for hostname redirection
</description>
<tag name="@see">#hostnameRedirectSettings</tag>
<parameter name="v">
<type class="com.tridium.web.BHostnameRedirectSettings"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.web.BWebService.getHttpHeaderProviders() -->
<method name="getHttpHeaderProviders"  public="true">
<description>
Get the &lt;code&gt;httpHeaderProviders&lt;/code&gt; property.&#xa; HTTP header configuration
</description>
<tag name="@see">#httpHeaderProviders</tag>
<return>
<type class="javax.baja.web.http.BHttpHeaderProviders"/>
</return>
</method>

<!-- javax.baja.web.BWebService.setHttpHeaderProviders(javax.baja.web.http.BHttpHeaderProviders) -->
<method name="setHttpHeaderProviders"  public="true">
<description>
Set the &lt;code&gt;httpHeaderProviders&lt;/code&gt; property.&#xa; HTTP header configuration
</description>
<tag name="@see">#httpHeaderProviders</tag>
<parameter name="v">
<type class="javax.baja.web.http.BHttpHeaderProviders"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.web.BWebService.getHostHeaderValidationSettings() -->
<method name="getHostHeaderValidationSettings"  public="true">
<description>
Get the &lt;code&gt;hostHeaderValidationSettings&lt;/code&gt; property.
</description>
<tag name="@see">#hostHeaderValidationSettings</tag>
<return>
<type class="com.tridium.web.BHostHeaderValidationSettings"/>
</return>
</method>

<!-- javax.baja.web.BWebService.setHostHeaderValidationSettings(com.tridium.web.BHostHeaderValidationSettings) -->
<method name="setHostHeaderValidationSettings"  public="true">
<description>
Set the &lt;code&gt;hostHeaderValidationSettings&lt;/code&gt; property.
</description>
<tag name="@see">#hostHeaderValidationSettings</tag>
<parameter name="v">
<type class="com.tridium.web.BHostHeaderValidationSettings"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.web.BWebService.resetAllConnections() -->
<method name="resetAllConnections"  public="true">
<description>
Invoke the &lt;code&gt;resetAllConnections&lt;/code&gt; action.
</description>
<tag name="@see">#resetAllConnections</tag>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.web.BWebService.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.web.BWebService.getServiceTypes() -->
<method name="getServiceTypes"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type" dimension="1"/>
</return>
</method>

<!-- javax.baja.web.BWebService.getLicenseFeature() -->
<method name="getLicenseFeature"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.license.Feature"/>
</return>
</method>

<!-- javax.baja.web.BWebService.getWebEnv(javax.baja.web.WebOp) -->
<method name="getWebEnv"  public="true">
<description/>
<parameter name="op">
<type class="javax.baja.web.WebOp"/>
</parameter>
<return>
<type class="javax.baja.web.IWebEnv"/>
</return>
</method>

<!-- javax.baja.web.BWebService.getWebServer() -->
<method name="getWebServer"  public="true">
<description>
Get the web server.
</description>
<return>
<type class="javax.baja.web.BWebServer"/>
<description>
the web server or &lt;code&gt;null&lt;/code&gt; if there is no web server child.
</description>
</return>
</method>

<!-- javax.baja.web.BWebService.getMainService() -->
<method name="getMainService"  public="true" static="true">
<description>
Get the first Web Service or throw ServiceNotFoundException.
</description>
<tag name="@since">Niagara 4.10u2</tag>
<return>
<type class="javax.baja.web.BWebService"/>
</return>
</method>

<!-- javax.baja.web.BWebService.stationStarted() -->
<method name="stationStarted"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.web.BWebService.serviceStarted() -->
<method name="serviceStarted"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.web.BWebService.serviceStopped() -->
<method name="serviceStopped"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.web.BWebService.enabled() -->
<method name="enabled"  protected="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.web.BWebService.disabled() -->
<method name="disabled"  protected="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.web.BWebService.checkParentForRestrictedComponent(javax.baja.sys.BComponent, javax.baja.sys.Context) -->
<method name="checkParentForRestrictedComponent"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
This service type is only allowed to live under the&#xa; station&#x27;s frozen ServiceContainer, but multiple instances are allowed.
</description>
<parameter name="parent">
<type class="javax.baja.sys.BComponent"/>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.web.BWebService.getSecurityInfo() -->
<method name="getSecurityInfo"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="com.tridium.security.BSecurityInfo"/>
</return>
</method>

<!-- javax.baja.web.BWebService.changed(javax.baja.sys.Property, javax.baja.sys.Context) -->
<method name="changed"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="property">
<type class="javax.baja.sys.Property"/>
</parameter>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.web.BWebService.added(javax.baja.sys.Property, javax.baja.sys.Context) -->
<method name="added"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Overrides &lt;code&gt;<see ref="javax.baja.sys.BComponent">BComponent</see>&lt;/code&gt; added method to restart web server if &lt;code&gt;<see ref="com.tridium.web.BAdditionalHttpsCerts">BAdditionalHttpsCerts</see>&lt;/code&gt;&#xa; property is added.
</description>
<tag name="@since">Niagara 4.11</tag>
<parameter name="property">
<type class="javax.baja.sys.Property"/>
</parameter>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.web.BWebService.removed(javax.baja.sys.Property, javax.baja.sys.BValue, javax.baja.sys.Context) -->
<method name="removed"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Overrides &lt;code&gt;<see ref="javax.baja.sys.BComponent">BComponent</see>&lt;/code&gt; removed method to restart web server if &lt;code&gt;<see ref="com.tridium.web.BAdditionalHttpsCerts">BAdditionalHttpsCerts</see>&lt;/code&gt;&#xa; property is removed.
</description>
<tag name="@since">Niagara 4.11</tag>
<parameter name="property">
<type class="javax.baja.sys.Property"/>
</parameter>
<parameter name="oldValue">
<type class="javax.baja.sys.BValue"/>
</parameter>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.web.BWebService.checkAdd(java.lang.String, javax.baja.sys.BValue, int, javax.baja.sys.BFacets, javax.baja.sys.Context) -->
<method name="checkAdd"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="name">
<type class="java.lang.String"/>
</parameter>
<parameter name="value">
<type class="javax.baja.sys.BValue"/>
</parameter>
<parameter name="flags">
<type class="int"/>
</parameter>
<parameter name="facets">
<type class="javax.baja.sys.BFacets"/>
</parameter>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.web.BWebService.descendantsStarted() -->
<method name="descendantsStarted"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.web.BWebService.childParented(javax.baja.sys.Property, javax.baja.sys.BValue, javax.baja.sys.Context) -->
<method name="childParented"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="property">
<type class="javax.baja.sys.Property"/>
</parameter>
<parameter name="newChild">
<type class="javax.baja.sys.BValue"/>
</parameter>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.web.BWebService.childUnparented(javax.baja.sys.Property, javax.baja.sys.BValue, javax.baja.sys.Context) -->
<method name="childUnparented"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="property">
<type class="javax.baja.sys.Property"/>
</parameter>
<parameter name="oldChild">
<type class="javax.baja.sys.BValue"/>
</parameter>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.web.BWebService.fw(int, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object) -->
<method name="fw"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="x">
<type class="int"/>
</parameter>
<parameter name="a">
<type class="java.lang.Object"/>
</parameter>
<parameter name="b">
<type class="java.lang.Object"/>
</parameter>
<parameter name="c">
<type class="java.lang.Object"/>
</parameter>
<parameter name="d">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="java.lang.Object"/>
</return>
</method>

<!-- javax.baja.web.BWebService.getHttpConnectionDetails(javax.baja.sys.Context) -->
<method name="getHttpConnectionDetails"  public="true">
<annotation><type class="java.lang.SuppressWarnings"/>
<elementValue name="value">
<annotationValue kind="array">
<elementArray>
<annotationValue kind="expr">
<expression>&#x22;unused&#x22;</expression>
</annotationValue>
</elementArray>
</annotationValue>
</elementValue>
</annotation>
<description>
Return the HTTP Connection details for the given Context.&#xa; &lt;p&gt;&#xa; This method is invoked through Fox when a BWbWebView needs to make&#xa; a connection to the Station through the Web Server.&#xa; &lt;p&gt;&#xa; This method is reflectively invoked from the Fox Broker Channel&#xa; (BBrokerChannel#getHttpConnectionDetails(Context)).
</description>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
<description>
The Context used in the remote call.
</description>
</parameter>
<return>
<type class="javax.baja.sys.BComponent"/>
<description>
BComponent HTTP Connection Details
</description>
</return>
</method>

<!-- javax.baja.web.BWebService.doResetAllConnections(javax.baja.sys.Context) -->
<method name="doResetAllConnections"  public="true">
<description/>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.web.BWebService.getIcon() -->
<method name="getIcon"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.BIcon"/>
</return>
</method>

<!-- javax.baja.web.BWebService.getSecurityDashboardSectionHeader(javax.baja.sys.Context) -->
<method name="getSecurityDashboardSectionHeader"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="javax.baja.security.dashboard.LexiconFormatInfo"/>
</return>
</method>

<!-- javax.baja.web.BWebService.getSecurityDashboardSectionHyperlinkOrd() -->
<method name="getSecurityDashboardSectionHyperlinkOrd"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.naming.BOrd"/>
</return>
</method>

<!-- javax.baja.web.BWebService.getSecurityDashboardItemsVersion() -->
<method name="getSecurityDashboardItemsVersion"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.web.BWebService.getSecurityDashboardItems(javax.baja.sys.Context) -->
<method name="getSecurityDashboardItems"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<parameterizedType class="java.util.List">
<args>
<type class="javax.baja.security.dashboard.SecurityDashboardItem"/>
</args>
</parameterizedType>
</return>
</method>

<!-- javax.baja.web.BWebService.getPropertyValidator(javax.baja.sys.Property[], javax.baja.sys.Context) -->
<method name="getPropertyValidator"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="properties">
<type class="javax.baja.sys.Property" dimension="1"/>
</parameter>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="javax.baja.sys.IPropertyValidator"/>
</return>
</method>

<!-- javax.baja.web.BWebService.getPropertyValidator(javax.baja.sys.Property, javax.baja.sys.Context) -->
<method name="getPropertyValidator"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="property">
<type class="javax.baja.sys.Property"/>
</parameter>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="javax.baja.sys.IPropertyValidator"/>
</return>
</method>

<!-- javax.baja.web.BWebService.httpPort -->
<field name="httpPort"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;httpPort&lt;/code&gt; property.&#xa; Unsecured HTTP port.
</description>
<tag name="@see">#getHttpPort</tag>
<tag name="@see">#setHttpPort</tag>
</field>

<!-- javax.baja.web.BWebService.httpEnabled -->
<field name="httpEnabled"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;httpEnabled&lt;/code&gt; property.&#xa; Enable unsecured connections to the web server on the http port?
</description>
<tag name="@see">#getHttpEnabled</tag>
<tag name="@see">#setHttpEnabled</tag>
</field>

<!-- javax.baja.web.BWebService.httpsPort -->
<field name="httpsPort"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;httpsPort&lt;/code&gt; property.&#xa; Secured HTTPS port.
</description>
<tag name="@see">#getHttpsPort</tag>
<tag name="@see">#setHttpsPort</tag>
</field>

<!-- javax.baja.web.BWebService.httpsEnabled -->
<field name="httpsEnabled"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;httpsEnabled&lt;/code&gt; property.&#xa; Enable secure connections to the web server on the https port?
</description>
<tag name="@see">#getHttpsEnabled</tag>
<tag name="@see">#setHttpsEnabled</tag>
</field>

<!-- javax.baja.web.BWebService.httpsOnly -->
<field name="httpsOnly"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;httpsOnly&lt;/code&gt; property.&#xa; Redirect all http requests to the secure https port?
</description>
<tag name="@see">#getHttpsOnly</tag>
<tag name="@see">#setHttpsOnly</tag>
</field>

<!-- javax.baja.web.BWebService.httpsMinProtocol -->
<field name="httpsMinProtocol"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;httpsMinProtocol&lt;/code&gt; property.&#xa; The minimum security protocol to use for SSL.
</description>
<tag name="@see">#getHttpsMinProtocol</tag>
<tag name="@see">#setHttpsMinProtocol</tag>
</field>

<!-- javax.baja.web.BWebService.cipherSuiteGroup -->
<field name="cipherSuiteGroup"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;cipherSuiteGroup&lt;/code&gt; property.&#xa; The cipher suite group to use for the tls connections.
</description>
<tag name="@see">#getCipherSuiteGroup</tag>
<tag name="@see">#setCipherSuiteGroup</tag>
</field>

<!-- javax.baja.web.BWebService.httpsCert -->
<field name="httpsCert"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<annotation><type class="java.lang.Deprecated"/>
</annotation>
<description>
Slot for the &lt;code&gt;httpsCert&lt;/code&gt; property.&#xa; The alias of the cert to use. This property is no longer used and migrates to the&#xa; certAliasAndPassword slot starting with Niagara 4.13
</description>
<tag name="@see">#getHttpsCert</tag>
<tag name="@see">#setHttpsCert</tag>
</field>

<!-- javax.baja.web.BWebService.mainCertAliasAndPassword -->
<field name="mainCertAliasAndPassword"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;mainCertAliasAndPassword&lt;/code&gt; property.&#xa; The certificate and optional password to use for tls connections
</description>
<tag name="@since">Niagara 4.13</tag>
<tag name="@see">#getMainCertAliasAndPassword</tag>
<tag name="@see">#setMainCertAliasAndPassword</tag>
</field>

<!-- javax.baja.web.BWebService.serverCertificateHealth -->
<field name="serverCertificateHealth"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;serverCertificateHealth&lt;/code&gt; property.&#xa; Provide a status regarding the cert in case it can&#x27;t use the configured one
</description>
<tag name="@since">Niagara 4.13</tag>
<tag name="@see">#getServerCertificateHealth</tag>
<tag name="@see">#setServerCertificateHealth</tag>
</field>

<!-- javax.baja.web.BWebService.requireHttpsForPasswords -->
<field name="requireHttpsForPasswords"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;requireHttpsForPasswords&lt;/code&gt; property.&#xa; Require an HTTPS connection when setting passwords
</description>
<tag name="@see">#getRequireHttpsForPasswords</tag>
<tag name="@see">#setRequireHttpsForPasswords</tag>
</field>

<!-- javax.baja.web.BWebService.xFrameOptions -->
<field name="xFrameOptions"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;xFrameOptions&lt;/code&gt; property.&#xa; The xframe option for preventing XFS attacks.
</description>
<tag name="@see">#getXFrameOptions</tag>
<tag name="@see">#setXFrameOptions</tag>
</field>

<!-- javax.baja.web.BWebService.rememberUserIdCookie -->
<field name="rememberUserIdCookie"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;rememberUserIdCookie&lt;/code&gt; property.&#xa; Makes the user id cookie persistent
</description>
<tag name="@see">#getRememberUserIdCookie</tag>
<tag name="@see">#setRememberUserIdCookie</tag>
</field>

<!-- javax.baja.web.BWebService.sameSite -->
<field name="sameSite"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;sameSite&lt;/code&gt; property.&#xa; Configure SameSite attribute for cookies
</description>
<tag name="@see">#getSameSite</tag>
<tag name="@see">#setSameSite</tag>
</field>

<!-- javax.baja.web.BWebService.allowUsernameAutocomplete -->
<field name="allowUsernameAutocomplete"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;allowUsernameAutocomplete&lt;/code&gt; property.&#xa; Disables autocomplete on the username field of the login page if false
</description>
<tag name="@see">#getAllowUsernameAutocomplete</tag>
<tag name="@see">#setAllowUsernameAutocomplete</tag>
</field>

<!-- javax.baja.web.BWebService.loginTemplate -->
<field name="loginTemplate"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;loginTemplate&lt;/code&gt; property.&#xa; The template for the browser login page.  If null, the default template is used.
</description>
<tag name="@see">#getLoginTemplate</tag>
<tag name="@see">#setLoginTemplate</tag>
</field>

<!-- javax.baja.web.BWebService.gzipEnabled -->
<field name="gzipEnabled"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;gzipEnabled&lt;/code&gt; property.&#xa; Enable gzip compression?
</description>
<tag name="@see">#getGzipEnabled</tag>
<tag name="@see">#setGzipEnabled</tag>
</field>

<!-- javax.baja.web.BWebService.logFileDirectory -->
<field name="logFileDirectory"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;logFileDirectory&lt;/code&gt; property.&#xa; If the web server supports request logging, then it should write logs to this directory.
</description>
<tag name="@see">#getLogFileDirectory</tag>
<tag name="@see">#setLogFileDirectory</tag>
</field>

<!-- javax.baja.web.BWebService.clientEnvironments -->
<field name="clientEnvironments"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;clientEnvironments&lt;/code&gt; property.&#xa; Supported client environments.
</description>
<tag name="@see">#getClientEnvironments</tag>
<tag name="@see">#setClientEnvironments</tag>
</field>

<!-- javax.baja.web.BWebService.showStackTrace -->
<field name="showStackTrace"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;showStackTrace&lt;/code&gt; property.&#xa; Will show exception stack traces in error responses when available if set to true.
</description>
<tag name="@see">#getShowStackTrace</tag>
<tag name="@see">#setShowStackTrace</tag>
</field>

<!-- javax.baja.web.BWebService.appletModuleCachingType -->
<field name="appletModuleCachingType"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<annotation><type class="java.lang.Deprecated"/>
</annotation>
<description>
Slot for the &lt;code&gt;appletModuleCachingType&lt;/code&gt; property.&#xa; If files aren&#x27;t available locally, enable jx browser JAR files to be loaded from an external URI.
</description>
<tag name="@deprecated">since Niagara 4.13 - will be removed in Niagara 5.0</tag>
<tag name="@see">#getAppletModuleCachingType</tag>
<tag name="@see">#setAppletModuleCachingType</tag>
</field>

<!-- javax.baja.web.BWebService.webStartConfig -->
<field name="webStartConfig"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<annotation><type class="java.lang.Deprecated"/>
</annotation>
<description>
Slot for the &lt;code&gt;webStartConfig&lt;/code&gt; property.&#xa; Configuration properties for clients using Java Web Start.
</description>
<tag name="@deprecated">since Niagara 4.13 - will be removed in Niagara 5.0</tag>
<tag name="@see">#getWebStartConfig</tag>
<tag name="@see">#setWebStartConfig</tag>
</field>

<!-- javax.baja.web.BWebService.cacheConfig -->
<field name="cacheConfig"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;cacheConfig&lt;/code&gt; property.&#xa; Configuration properties for clients using file resources that want additional caching.
</description>
<tag name="@see">#getCacheConfig</tag>
<tag name="@see">#setCacheConfig</tag>
</field>

<!-- javax.baja.web.BWebService.warmupConfig -->
<field name="warmupConfig"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;warmupConfig&lt;/code&gt; property.&#xa; Configuration for Web Warmup
</description>
<tag name="@see">#getWarmupConfig</tag>
<tag name="@see">#setWarmupConfig</tag>
</field>

<!-- javax.baja.web.BWebService.hostnameRedirectSettings -->
<field name="hostnameRedirectSettings"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;hostnameRedirectSettings&lt;/code&gt; property.&#xa; Configuration for hostname redirection
</description>
<tag name="@see">#getHostnameRedirectSettings</tag>
<tag name="@see">#setHostnameRedirectSettings</tag>
</field>

<!-- javax.baja.web.BWebService.httpHeaderProviders -->
<field name="httpHeaderProviders"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;httpHeaderProviders&lt;/code&gt; property.&#xa; HTTP header configuration
</description>
<tag name="@see">#getHttpHeaderProviders</tag>
<tag name="@see">#setHttpHeaderProviders</tag>
</field>

<!-- javax.baja.web.BWebService.hostHeaderValidationSettings -->
<field name="hostHeaderValidationSettings"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;hostHeaderValidationSettings&lt;/code&gt; property.
</description>
<tag name="@see">#getHostHeaderValidationSettings</tag>
<tag name="@see">#setHostHeaderValidationSettings</tag>
</field>

<!-- javax.baja.web.BWebService.resetAllConnections -->
<field name="resetAllConnections"  public="true" static="true" final="true">
<type class="javax.baja.sys.Action"/>
<description>
Slot for the &lt;code&gt;resetAllConnections&lt;/code&gt; action.
</description>
<tag name="@see">#resetAllConnections()</tag>
</field>

<!-- javax.baja.web.BWebService.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

<!-- javax.baja.web.BWebService.log -->
<field name="log"  public="true" static="true" final="true">
<type class="java.util.logging.Logger"/>
<description/>
</field>

</class>
</bajadoc>
