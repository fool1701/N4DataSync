<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="provisioningNiagara" runtimeProfile="wb" qualifiedName="com.tridium.provisioningNiagara.ProvisioningConnectionUtil" name="ProvisioningConnectionUtil" packageName="com.tridium.provisioningNiagara" public="true">
<description>
ProvisioningConnectionUtil - After investigating a few defects pertaining to provisioning and NPEs it&#xa; was determined that many of the classes do not perform proper null and connection state checking&#xa; as well as not properly handling the logging of these errors. This class simplifies connection&#xa; related functionality as well as takes care of common provisioning connection related logging.&#xa; This class can be used with or without logging functionality.&#xa;&#xa; Behaviors:&#xa;  LOG_ON_ERROR - If an error/exception occurs the function will catch and log it as a message and&#xa;    return null. The job state will not be updated. Return value will be null.&#xa;&#xa;  FAIL_ON_ERROR - If an error/exception occurs the function will catch and log it as a failure and&#xa;    return null. The job state will be set to FAILED. Return value will be null.&#xa;&#xa; All functions that can throw an error have a convenience function that defaults to this:&#xa;  THROW_ON_ERROR - If an error/exception occurs the function will throw a user readable exception.&#xa;    Logging and setting the job state is left to caller.&#xa;&#xa; The log and fail behaviors allow the user to check for an error without the use of extra try&#xa; catches. If the return value is null then there was an error and the user can call&#xa; getLastException to get the cause and do anything else they need before returning.
</description>
<tag name="@author">Jason Jones on 05/16/2018</tag>
<tag name="@since">Niagara 4.6</tag>
<extends>
<type class="java.lang.Object"/>
</extends>
<implements>
<type class="java.lang.AutoCloseable"/>
</implements>
<!-- com.tridium.provisioningNiagara.ProvisioningConnectionUtil(javax.baja.driver.BDevice, javax.baja.batchJob.driver.BDeviceStepDetails) -->
<constructor name="ProvisioningConnectionUtil" public="true">
<parameter name="device">
<type class="javax.baja.driver.BDevice"/>
<description>
- BNiagaraStation
</description>
</parameter>
<parameter name="details">
<type class="javax.baja.batchJob.driver.BDeviceStepDetails"/>
<description>
- This allows us to log errors and set job state.
</description>
</parameter>
<throws>
<type class="java.lang.Exception"/>
<description>
- BPlatformConnection is unavailable, likely due to incorrect credentials set&#xa;    in the Niagara Network.
</description>
</throws>
<description>
This will construct the class with logging enabled.
</description>
</constructor>

<!-- com.tridium.provisioningNiagara.ProvisioningConnectionUtil(javax.baja.driver.BDevice, javax.baja.batchJob.driver.BDeviceStepDetails, java.lang.String) -->
<constructor name="ProvisioningConnectionUtil" public="true">
<parameter name="device">
<type class="javax.baja.driver.BDevice"/>
<description>
- a BNiagaraStation
</description>
</parameter>
<parameter name="details">
<type class="javax.baja.batchJob.driver.BDeviceStepDetails"/>
<description>
- this allows us to automatically log exceptions
</description>
</parameter>
<parameter name="interestName">
<type class="java.lang.String"/>
<description>
- used if a specific interest name is desired
</description>
</parameter>
<throws>
<type class="java.lang.Exception"/>
<description>
- BPlatformConnection is unavailable, likely due to incorrect credentials set&#xa;    in the Niagara Network.
</description>
</throws>
<description>
This will construct the class with logging enabled
</description>
</constructor>

<!-- com.tridium.provisioningNiagara.ProvisioningConnectionUtil.getPlatformConnection() -->
<method name="getPlatformConnection"  public="true">
<description>
Used to retrieve a the BPlatformConnection with the niagara station.
</description>
<return>
<type class="com.tridium.provisioningNiagara.BPlatformConnection"/>
<description>
BPlatformConnection - If connection successful, the BPlatformConnection to the engaged station.
</description>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- com.tridium.provisioningNiagara.ProvisioningConnectionUtil.getPlatformConnection(com.tridium.provisioningNiagara.ProvisioningConnectionUtil.Behavior) -->
<method name="getPlatformConnection"  public="true">
<description>
Used to retrieve a the BPlatformConnection with the niagara station.
</description>
<parameter name="option">
<type class="com.tridium.provisioningNiagara.ProvisioningConnectionUtil$Behavior"/>
<description>
- Used to determine the behavior when an error occurs - see class description.
</description>
</parameter>
<return>
<type class="com.tridium.provisioningNiagara.BPlatformConnection"/>
<description>
BPlatformConnection - If this is null then an exception has occurred.
</description>
</return>
<throws>
<type class="java.lang.Exception"/>
<description>
- Thrown if the connection is not available or is unoperational.
</description>
</throws>
</method>

<!-- com.tridium.provisioningNiagara.ProvisioningConnectionUtil.getDaemonSession() -->
<method name="getDaemonSession"  public="true">
<description>
Used to retrieve a the BDaemonSession with the niagara station.
</description>
<return>
<type class="com.tridium.platform.daemon.BDaemonSession"/>
<description>
BDaemonSession - If successful, the BDaemonSession instance to the station.
</description>
</return>
<throws>
<type class="java.lang.Exception"/>
<description>
- Thrown if daemon session or platform connection cannot be retrieved or are&#xa;    unusable (eg not connected or in failure).
</description>
</throws>
</method>

<!-- com.tridium.provisioningNiagara.ProvisioningConnectionUtil.getEngagedFoxSession() -->
<method name="getEngagedFoxSession"  public="true">
<description>
Used to retrieve an engaged BFoxSession with the niagara station.
</description>
<return>
<type class="com.tridium.fox.sys.BFoxSession"/>
<description>
BFoxSession - If this is null then an exception has occurred.
</description>
</return>
<throws>
<type class="java.lang.Exception"/>
<description>
- Throws connection failure reason if an error occurred.
</description>
</throws>
</method>

<!-- com.tridium.provisioningNiagara.ProvisioningConnectionUtil.getEngagedFoxSession(com.tridium.provisioningNiagara.ProvisioningConnectionUtil.Behavior) -->
<method name="getEngagedFoxSession"  public="true">
<description>
Used to retrieve an engaged BFoxSession with the niagara station.
</description>
<parameter name="option">
<type class="com.tridium.provisioningNiagara.ProvisioningConnectionUtil$Behavior"/>
<description>
- Used to determine the behavior when an error occurs - see class description.
</description>
</parameter>
<return>
<type class="com.tridium.fox.sys.BFoxSession"/>
<description>
BFoxSession - If successful, the BFoxSession to the remote station.
</description>
</return>
<throws>
<type class="java.lang.Exception"/>
<description>
- Throws if Behavior is THROW_ON_ERR, throws connection failure reason
</description>
</throws>
</method>

<!-- com.tridium.provisioningNiagara.ProvisioningConnectionUtil.disengageFoxSession() -->
<method name="disengageFoxSession"  public="true">
<description>
This will disengage a connected and engaged fox session.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.provisioningNiagara.ProvisioningConnectionUtil.sendDaemonMessage(com.tridium.platform.daemon.message.DaemonMessage) -->
<method name="sendDaemonMessage"  public="true">
<description>
This is used to send a daemon message that does not have a return value.
</description>
<parameter name="message">
<type class="com.tridium.platform.daemon.message.DaemonMessage"/>
<description>
- a daemon message
</description>
</parameter>
<return>
<type class="boolean"/>
<description>
boolean - true if the request was successful.
</description>
</return>
<throws>
<type class="java.lang.Exception"/>
<description>
- Throws connection failure reason if not successful.
</description>
</throws>
</method>

<!-- com.tridium.provisioningNiagara.ProvisioningConnectionUtil.getDaemonResponse(com.tridium.platform.daemon.message.DaemonMessage) -->
<method name="getDaemonResponse"  public="true">
<description>
This is used to send a daemon message that has a return value.
</description>
<parameter name="message">
<type class="com.tridium.platform.daemon.message.DaemonMessage"/>
<description>
- a daemon message
</description>
</parameter>
<return>
<type class="javax.baja.xml.XElem"/>
<description>
XElem - This contains the information requested.
</description>
</return>
<throws>
<type class="java.lang.Exception"/>
<description>
- Throws connection failure reason if not successful.
</description>
</throws>
</method>

<!-- com.tridium.provisioningNiagara.ProvisioningConnectionUtil.generateDaemonSessionSharedSecretKey(java.lang.String) -->
<method name="generateDaemonSessionSharedSecretKey"  public="true">
<description>
This is used to generate a shared secret key for the current daemon session.
</description>
<parameter name="name">
<type class="java.lang.String"/>
<description>
- A string containing the name of the shared secret key.
</description>
</parameter>
<return>
<type class="javax.baja.nre.security.SharedSecretKey"/>
<description>
SharedSecretKey - The client side instance of the SharedSecretKey generated.
</description>
</return>
<throws>
<type class="java.lang.Exception"/>
<description>
- Throws connection failure reason if not successful.
</description>
</throws>
</method>

<!-- com.tridium.provisioningNiagara.ProvisioningConnectionUtil.hasRunningStation() -->
<method name="hasRunningStation"  public="true">
<description>
This function allows the user to see if there is a running station on the connected platform.
</description>
<return>
<type class="java.lang.Boolean"/>
<description>
Boolean - This is true if there is a running station, false if there is not.
</description>
</return>
<throws>
<type class="java.lang.Exception"/>
<description>
- Throws connection failure reason if not successful.
</description>
</throws>
</method>

<!-- com.tridium.provisioningNiagara.ProvisioningConnectionUtil.getRemoteStation(java.lang.String) -->
<method name="getRemoteStation"  public="true">
<description>
This is used to get a specific remote station from the current platform connection.
</description>
<parameter name="name">
<type class="java.lang.String"/>
<description>
- A string containing the name of the station.
</description>
</parameter>
<return>
<type class="javax.baja.platform.RemoteStation"/>
<description>
RemoteStation - The RemoteStation instance that models the station running on platform.
</description>
</return>
<throws>
<type class="java.lang.Exception"/>
<description>
- Throws connection failure reason if not successful.
</description>
</throws>
</method>

<!-- com.tridium.provisioningNiagara.ProvisioningConnectionUtil.getRemoteStationList() -->
<method name="getRemoteStationList"  public="true">
<description>
This function allows the user to get a list of stations from a daemon session.
</description>
<return>
<type class="javax.baja.platform.RemoteStation" dimension="1"/>
<description>
RemoteStation[] - A list of stations
</description>
</return>
<throws>
<type class="java.lang.Exception"/>
<description>
- Throws connection failure reason if not successful.
</description>
</throws>
</method>

<!-- com.tridium.provisioningNiagara.ProvisioningConnectionUtil.getPlatformDaemon() -->
<method name="getPlatformDaemon"  public="true">
<description>
This function allows the user to get the platform daemon associated with a platform connection.
</description>
<return>
<type class="javax.baja.platform.PlatformDaemon"/>
<description>
PlatformDaemon - A PlatformDaemon instance as modeled by the platform connection.
</description>
</return>
<throws>
<type class="java.lang.Exception"/>
<description>
- Throws connection failure reason if not successful.
</description>
</throws>
</method>

<!-- com.tridium.provisioningNiagara.ProvisioningConnectionUtil.getRemoteDaemonPlatform() -->
<method name="getRemoteDaemonPlatform"  public="true">
<description>
This function allows the user to get the remote daemon platform associated with a connected&#xa;    daemon session.
</description>
<return>
<type class="com.tridium.install.BRemoteDaemonPlatform"/>
<description>
BRemoteDaemonPlatform - BRemoteDaemonPlatform instance as modeled by the remove daemon session.
</description>
</return>
<throws>
<type class="java.lang.Exception"/>
<description>
- Throws connection failure reason if not successful.
</description>
</throws>
</method>

<!-- com.tridium.provisioningNiagara.ProvisioningConnectionUtil.getLastException() -->
<method name="getLastException"  public="true">
<description>
This function can be used to retrieve the last caught exception.
</description>
<return>
<type class="java.lang.Exception"/>
<description>
Exception - the last caught exception.
</description>
</return>
</method>

<!-- com.tridium.provisioningNiagara.ProvisioningConnectionUtil.reset() -->
<method name="reset"  public="true">
<description>
This acts primarily to ensure that an engaged fox session is disengaged.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.provisioningNiagara.ProvisioningConnectionUtil.close() -->
<method name="close"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Disengages any fox sessions created by this utility.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.provisioningNiagara.ProvisioningConnectionUtil.FOX_SESSION_RETRY_DECAY -->
<field name="FOX_SESSION_RETRY_DECAY"  public="true" static="true" final="true">
<parameterizedType class="java.util.function.Function">
<args>
<type class="java.lang.Integer"/>
<type class="java.lang.Integer"/>
</args>
</parameterizedType>
<description/>
</field>

</class>
</bajadoc>
