<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="provisioningNiagara" runtimeProfile="wb" qualifiedName="javax.baja.provisioningNiagara.station.ProvisioningStationManager" name="ProvisioningStationManager" packageName="javax.baja.provisioningNiagara.station" public="true" interface="true" abstract="true" category="interface">
<description>
Represents the state of a single provisioning-managed station in a supervisor&#x27;s Niagara&#xa; Network, and provides a simple control interface for it.
</description>
<tag name="@author">Matt Boon</tag>
<tag name="@creation">8 Feb 08</tag>
<tag name="@version">$Revision$ $Date$</tag>
<tag name="@since">Baja 1.0</tag>
<!-- javax.baja.provisioningNiagara.station.ProvisioningStationManager.poll(javax.baja.platform.ICancelHint, javax.baja.sys.Context) -->
<method name="poll"  public="true" abstract="true">
<description>
Poll the station&#x27;s platform daemon and update the status property, blocking until the poll&#xa; has completed or until the invocation is canceled by the cancelHint.
</description>
<parameter name="cancelHint">
<type class="javax.baja.platform.ICancelHint"/>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.provisioningNiagara.station.ProvisioningStationManager.getStationStatus() -->
<method name="getStationStatus"  public="true" abstract="true">
<description>
Return the life cycle status of the station.
</description>
<return>
<type class="javax.baja.platform.BStationStatus"/>
</return>
</method>

<!-- javax.baja.provisioningNiagara.station.ProvisioningStationManager.canStart() -->
<method name="canStart"  public="true" abstract="true">
<description>
Return true if the station can be started.  &#xa; &#xa; If false is returned, the host must be rebooted before the station can&#xa; be started.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.provisioningNiagara.station.ProvisioningStationManager.canRestart() -->
<method name="canRestart"  public="true" abstract="true">
<description>
Return true if the station can be restarted.   If false, once the station&#xa; is stopped the host must be rebooted before it can be started again.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.provisioningNiagara.station.ProvisioningStationManager.canReboot() -->
<method name="canReboot"  public="true" abstract="true">
<description>
Return true if the station&#x27;s host can be rebooted from the supervisor.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.provisioningNiagara.station.ProvisioningStationManager.rebootHost() -->
<method name="rebootHost"  public="true" abstract="true">
<description>
Instruct the station&#x27;s host to start rebooting, and return immediately.
</description>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.provisioningNiagara.station.ProvisioningStationManager.startStation(javax.baja.platform.IPlatformOperationListener) -->
<method name="startStation"  public="true" abstract="true">
<description>
Start the remote station and wait until it its startup sequence completes&#xa; successfully
</description>
<parameter name="listener">
<type class="javax.baja.platform.IPlatformOperationListener"/>
<description>
receives status updates and allows the caller to cancel the&#xa; wait for startup to finish.   Cancelling does not interrupt the station startup;&#xa; that must be done explicitly with a stop or kill method.
</description>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.provisioningNiagara.station.ProvisioningStationManager.startStationAsync() -->
<method name="startStationAsync"  public="true" abstract="true">
<description>
Instruct the remote station to start and return control to the caller immediately.
</description>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.provisioningNiagara.station.ProvisioningStationManager.restartStationAsync() -->
<method name="restartStationAsync"  public="true" abstract="true">
<description>
Request that the running station restart itself.   An exception will be thrown if the &#xa; station is not running, or if restart is not allowed.
</description>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.provisioningNiagara.station.ProvisioningStationManager.saveStation(javax.baja.platform.IPlatformOperationListener) -->
<method name="saveStation"  public="true" abstract="true">
<description>
Request that the running station save its state and block until &#xa; the save has completed or failed, or is canceled.
</description>
<parameter name="listener">
<type class="javax.baja.platform.IPlatformOperationListener"/>
<description>
receives status updates and allows the caller to cancel the&#xa; wait for the save to finish.  Cancelling does not affect the station&#x27;s save &#xa; operation.
</description>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.provisioningNiagara.station.ProvisioningStationManager.saveStationAsync() -->
<method name="saveStationAsync"  public="true" abstract="true">
<description>
Request that the running station save it state, then return control immediately&#xa; to the caller.
</description>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.provisioningNiagara.station.ProvisioningStationManager.stopStation(javax.baja.platform.IPlatformOperationListener) -->
<method name="stopStation"  public="true" abstract="true">
<description>
Request that the running station stop gracefully and block &#xa; until the station is idle or the operation is canceled.
</description>
<parameter name="listener">
<type class="javax.baja.platform.IPlatformOperationListener"/>
<description>
receives status updates and allows the caller to cancel the&#xa; wait for the station to be fully stopped.   Cancelling affects only the wait, &#xa; and will not cause the shutdown to abort.
</description>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.provisioningNiagara.station.ProvisioningStationManager.stopStationAsync() -->
<method name="stopStationAsync"  public="true" abstract="true">
<description>
Request that the running station stop gracefully, then return control &#xa; immediately to the caller.
</description>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.provisioningNiagara.station.ProvisioningStationManager.killStation(javax.baja.platform.IPlatformOperationListener) -->
<method name="killStation"  public="true" abstract="true">
<description>
Request that the running station terminate immediately without saving or other&#xa; graceful shutdown actions, and block until the station is idle or the &#xa; operation is canceled.
</description>
<parameter name="listener">
<type class="javax.baja.platform.IPlatformOperationListener"/>
<description>
receives status updates and allows the caller to cancel the&#xa; wait for the station to be fully stopped.   Cancelling affects only the wait, &#xa; and will not cause the shutdown to abort.
</description>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.provisioningNiagara.station.ProvisioningStationManager.killStationAsync() -->
<method name="killStationAsync"  public="true" abstract="true">
<description>
Request that the running station terminate immediately without saving or&#xa; other graceful shutdown actions, then return control immediately to the caller.
</description>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.provisioningNiagara.station.ProvisioningStationManager.getPlatformDaemon() -->
<method name="getPlatformDaemon"  public="true" abstract="true">
<description>
&lt;p&gt;&#xa; Return a PlatformDaemon which the supervisor may use to communicate with the &#xa; Niagara station&#x27;s platform daemon.   &#xa; &lt;/p&gt;&#xa; &lt;p&gt;&#xa; An exception will be thrown if invoked from somewhere other than a supervisor&#xa; running a provisioning service, such as from a remote client.&#xa; &lt;/p&gt;
</description>
<return>
<type class="javax.baja.platform.PlatformDaemon"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

</class>
</bajadoc>
