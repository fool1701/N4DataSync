<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="rdb" runtimeProfile="rt" qualifiedName="javax.baja.rdb.history.BRdbmsHistoryDeviceExt" name="BRdbmsHistoryDeviceExt" packageName="javax.baja.rdb.history" public="true" abstract="true">
<description>
BRdbmsHistoryDeviceExt maps historical data into a relational database.
</description>
<tag name="@author">Mike Jarmy</tag>
<tag name="@creation">24 Jul 03</tag>
<tag name="@version">$Revision: 13$ $Date: 1/12/11 9:20:53 AM EST$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="javax.baja.driver.history.BHistoryDeviceExt"/>
</extends>
<property name="useLastTimestamp" flags="">
<type class="boolean"/>
<description>
Slot for the &lt;code&gt;useLastTimestamp&lt;/code&gt; property.&#xa; Whether or not to make use of the value of the maxTimestamp property on each&#xa; BRdbmsHistoryExport object.&#xa; If useLastTimestamp is false, then queries will be issued on the database&#xa; to find the last export time.  In addition, database timestamp indexes will&#xa; be created at the time that the database tables are created.&#xa; If useLastTimestamp is true, then the value of the maxTimestamp property on each&#xa; BRdbmsHistoryExport object will be used during the history export process&#xa; to find the last export time.  In addition, database indexes will &lt;i&gt;&lt;b&gt;NOT&lt;/b&gt;&lt;/i&gt;&#xa; be created at the time that the database tables are created.
</description>
<tag name="@see">#getUseLastTimestamp</tag>
<tag name="@see">#setUseLastTimestamp</tag>
</property>

<property name="useHistoryConfigTimeZone" flags="">
<type class="boolean"/>
<description>
Slot for the &lt;code&gt;useHistoryConfigTimeZone&lt;/code&gt; property.&#xa; Whether or not to use the timezone property of a history&#x27;s historyConfig&#xa; when exported records.&#xa; If useHistoryConfigTimeZone is false, then the timezone of the supervisor&#xa; that is actually doing the export will be used when timestamps are exported.&#xa; If useHistoryConfigTimeZone is true, then the timezone property of the&#xa; historyConfig object will be used when timestamps are exported.&#xa; NOTE: if the parent database, namely MySQL, does not support timestamps&#xa; natively, then the value of this property will be ignored.
</description>
<tag name="@see">#getUseHistoryConfigTimeZone</tag>
<tag name="@see">#setUseHistoryConfigTimeZone</tag>
</property>

<property name="alwaysCreateIndexForNewTables" flags="">
<type class="boolean"/>
<description>
Slot for the &lt;code&gt;alwaysCreateIndexForNewTables&lt;/code&gt; property.&#xa; Create optimized indexes for the new history export record tables.
</description>
<tag name="@since">Niagara 4.11</tag>
<tag name="@see">#getAlwaysCreateIndexForNewTables</tag>
<tag name="@see">#setAlwaysCreateIndexForNewTables</tag>
</property>

<action name="submitRdbTableDiscoveryJob" flags="h">
<return>
<type class="javax.baja.naming.BOrd"/>
</return>
<description>
Slot for the &lt;code&gt;submitRdbTableDiscoveryJob&lt;/code&gt; action.&#xa; This action is called programmatically to invoke the job&#xa; for discovering the rdb tables available for import.
</description>
<tag name="@see">#submitRdbTableDiscoveryJob()</tag>
</action>

<action name="updateLastTimestamp" flags="hc">
<return>
<type class="void"/>
</return>
<description>
Slot for the &lt;code&gt;updateLastTimestamp&lt;/code&gt; action.&#xa; Updates the lastTimestamp field on all the BRdbmsHistoryExport objects,&#xa; by querying the database.
</description>
<tag name="@see">#updateLastTimestamp()</tag>
</action>

<action name="clearLastTimestamp" flags="hc">
<return>
<type class="void"/>
</return>
<description>
Slot for the &lt;code&gt;clearLastTimestamp&lt;/code&gt; action.&#xa; Set the lastTimestamp field on all the BRdbmsHistoryExport objects&#xa; to NULL.
</description>
<tag name="@see">#clearLastTimestamp()</tag>
</action>

<action name="migrateToOptimizedTableIndexes" flags="c">
<return>
<type class="javax.baja.naming.BOrd"/>
</return>
<description>
Slot for the &lt;code&gt;migrateToOptimizedTableIndexes&lt;/code&gt; action.&#xa; Create optimized index on the history exports under the device depending on the export mode.&#xa; In case the export mode is by HistoryId, an index is created on the Timestamp column.&#xa; In case the export mode is by HistoryType, a composite index is created on the&#xa; HistoryId and the Timestamp column which makes it quicker to do searches over the table.&#xa; It drops the existing index (based on just TIMESTAMP OR HISTORY_ID) if any&#xa; before creating the new index on the table.
</description>
<tag name="@since">Niagara 4.11</tag>
<tag name="@see">#migrateToOptimizedTableIndexes()</tag>
</action>

<!-- javax.baja.rdb.history.BRdbmsHistoryDeviceExt() -->
<constructor name="BRdbmsHistoryDeviceExt" public="true">
<description/>
</constructor>

<!-- javax.baja.rdb.history.BRdbmsHistoryDeviceExt.getUseLastTimestamp() -->
<method name="getUseLastTimestamp"  public="true">
<description>
Get the &lt;code&gt;useLastTimestamp&lt;/code&gt; property.&#xa; Whether or not to make use of the value of the maxTimestamp property on each&#xa; BRdbmsHistoryExport object.&#xa; If useLastTimestamp is false, then queries will be issued on the database&#xa; to find the last export time.  In addition, database timestamp indexes will&#xa; be created at the time that the database tables are created.&#xa; If useLastTimestamp is true, then the value of the maxTimestamp property on each&#xa; BRdbmsHistoryExport object will be used during the history export process&#xa; to find the last export time.  In addition, database indexes will &lt;i&gt;&lt;b&gt;NOT&lt;/b&gt;&lt;/i&gt;&#xa; be created at the time that the database tables are created.
</description>
<tag name="@see">#useLastTimestamp</tag>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.rdb.history.BRdbmsHistoryDeviceExt.setUseLastTimestamp(boolean) -->
<method name="setUseLastTimestamp"  public="true">
<description>
Set the &lt;code&gt;useLastTimestamp&lt;/code&gt; property.&#xa; Whether or not to make use of the value of the maxTimestamp property on each&#xa; BRdbmsHistoryExport object.&#xa; If useLastTimestamp is false, then queries will be issued on the database&#xa; to find the last export time.  In addition, database timestamp indexes will&#xa; be created at the time that the database tables are created.&#xa; If useLastTimestamp is true, then the value of the maxTimestamp property on each&#xa; BRdbmsHistoryExport object will be used during the history export process&#xa; to find the last export time.  In addition, database indexes will &lt;i&gt;&lt;b&gt;NOT&lt;/b&gt;&lt;/i&gt;&#xa; be created at the time that the database tables are created.
</description>
<tag name="@see">#useLastTimestamp</tag>
<parameter name="v">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.rdb.history.BRdbmsHistoryDeviceExt.getUseHistoryConfigTimeZone() -->
<method name="getUseHistoryConfigTimeZone"  public="true">
<description>
Get the &lt;code&gt;useHistoryConfigTimeZone&lt;/code&gt; property.&#xa; Whether or not to use the timezone property of a history&#x27;s historyConfig&#xa; when exported records.&#xa; If useHistoryConfigTimeZone is false, then the timezone of the supervisor&#xa; that is actually doing the export will be used when timestamps are exported.&#xa; If useHistoryConfigTimeZone is true, then the timezone property of the&#xa; historyConfig object will be used when timestamps are exported.&#xa; NOTE: if the parent database, namely MySQL, does not support timestamps&#xa; natively, then the value of this property will be ignored.
</description>
<tag name="@see">#useHistoryConfigTimeZone</tag>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.rdb.history.BRdbmsHistoryDeviceExt.setUseHistoryConfigTimeZone(boolean) -->
<method name="setUseHistoryConfigTimeZone"  public="true">
<description>
Set the &lt;code&gt;useHistoryConfigTimeZone&lt;/code&gt; property.&#xa; Whether or not to use the timezone property of a history&#x27;s historyConfig&#xa; when exported records.&#xa; If useHistoryConfigTimeZone is false, then the timezone of the supervisor&#xa; that is actually doing the export will be used when timestamps are exported.&#xa; If useHistoryConfigTimeZone is true, then the timezone property of the&#xa; historyConfig object will be used when timestamps are exported.&#xa; NOTE: if the parent database, namely MySQL, does not support timestamps&#xa; natively, then the value of this property will be ignored.
</description>
<tag name="@see">#useHistoryConfigTimeZone</tag>
<parameter name="v">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.rdb.history.BRdbmsHistoryDeviceExt.getAlwaysCreateIndexForNewTables() -->
<method name="getAlwaysCreateIndexForNewTables"  public="true">
<description>
Get the &lt;code&gt;alwaysCreateIndexForNewTables&lt;/code&gt; property.&#xa; Create optimized indexes for the new history export record tables.
</description>
<tag name="@since">Niagara 4.11</tag>
<tag name="@see">#alwaysCreateIndexForNewTables</tag>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.rdb.history.BRdbmsHistoryDeviceExt.setAlwaysCreateIndexForNewTables(boolean) -->
<method name="setAlwaysCreateIndexForNewTables"  public="true">
<description>
Set the &lt;code&gt;alwaysCreateIndexForNewTables&lt;/code&gt; property.&#xa; Create optimized indexes for the new history export record tables.
</description>
<tag name="@since">Niagara 4.11</tag>
<tag name="@see">#alwaysCreateIndexForNewTables</tag>
<parameter name="v">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.rdb.history.BRdbmsHistoryDeviceExt.submitRdbTableDiscoveryJob() -->
<method name="submitRdbTableDiscoveryJob"  public="true">
<description>
Invoke the &lt;code&gt;submitRdbTableDiscoveryJob&lt;/code&gt; action.&#xa; This action is called programmatically to invoke the job&#xa; for discovering the rdb tables available for import.
</description>
<tag name="@see">#submitRdbTableDiscoveryJob</tag>
<return>
<type class="javax.baja.naming.BOrd"/>
</return>
</method>

<!-- javax.baja.rdb.history.BRdbmsHistoryDeviceExt.updateLastTimestamp() -->
<method name="updateLastTimestamp"  public="true">
<description>
Invoke the &lt;code&gt;updateLastTimestamp&lt;/code&gt; action.&#xa; Updates the lastTimestamp field on all the BRdbmsHistoryExport objects,&#xa; by querying the database.
</description>
<tag name="@see">#updateLastTimestamp</tag>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.rdb.history.BRdbmsHistoryDeviceExt.clearLastTimestamp() -->
<method name="clearLastTimestamp"  public="true">
<description>
Invoke the &lt;code&gt;clearLastTimestamp&lt;/code&gt; action.&#xa; Set the lastTimestamp field on all the BRdbmsHistoryExport objects&#xa; to NULL.
</description>
<tag name="@see">#clearLastTimestamp</tag>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.rdb.history.BRdbmsHistoryDeviceExt.migrateToOptimizedTableIndexes() -->
<method name="migrateToOptimizedTableIndexes"  public="true">
<description>
Invoke the &lt;code&gt;migrateToOptimizedTableIndexes&lt;/code&gt; action.&#xa; Create optimized index on the history exports under the device depending on the export mode.&#xa; In case the export mode is by HistoryId, an index is created on the Timestamp column.&#xa; In case the export mode is by HistoryType, a composite index is created on the&#xa; HistoryId and the Timestamp column which makes it quicker to do searches over the table.&#xa; It drops the existing index (based on just TIMESTAMP OR HISTORY_ID) if any&#xa; before creating the new index on the table.
</description>
<tag name="@since">Niagara 4.11</tag>
<tag name="@see">#migrateToOptimizedTableIndexes</tag>
<return>
<type class="javax.baja.naming.BOrd"/>
</return>
</method>

<!-- javax.baja.rdb.history.BRdbmsHistoryDeviceExt.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.rdb.history.BRdbmsHistoryDeviceExt.getImportDescriptorType() -->
<method name="getImportDescriptorType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get the Type for import descriptors managed by this devicelet.&#xa; If null, then the devicelet does not support imports.
</description>
<return>
<type class="javax.baja.sys.Type"/>
<description>
Returns the protocol specific import descriptor type&#xa;   or null if this devicelet does not support history imports.
</description>
</return>
</method>

<!-- javax.baja.rdb.history.BRdbmsHistoryDeviceExt.supportsGenericArchiveFolder() -->
<method name="supportsGenericArchiveFolder"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
The BRdbmsHistoryDeviceExt returns true for this method by default,&#xa; indicating it supports the generic BArchiveFolder, and its agent&#xa; views can be safely applied to the generic BArchiveFolder.  If this&#xa; is not true for a subclass, this method should be overridden to false.
</description>
<tag name="@since">Niagara 3.5</tag>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.rdb.history.BRdbmsHistoryDeviceExt.doSubmitRdbTableDiscoveryJob(javax.baja.sys.Context) -->
<method name="doSubmitRdbTableDiscoveryJob"  public="true">
<description>
Submits the job to discover the rdb tables available for&#xa; import.
</description>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="javax.baja.naming.BOrd"/>
<description>
Returns the Ord to the RdbmsDiscoverTablesJob instance.
</description>
</return>
</method>

<!-- javax.baja.rdb.history.BRdbmsHistoryDeviceExt.doUpdateLastTimestamp() -->
<method name="doUpdateLastTimestamp"  public="true">
<description>
Updates the lastTimestamp field on all the BRdbmsHistoryExport objects,&#xa; by querying the database.&#xa; Note that this method always uses the username and password on the rdbms,&#xa; rather than the ones on each descriptor.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.rdb.history.BRdbmsHistoryDeviceExt.doClearLastTimestamp() -->
<method name="doClearLastTimestamp"  public="true">
<description>
Set the lastTimestamp field on all the BRdbmsHistoryExport objects&#xa; to NULL.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.rdb.history.BRdbmsHistoryDeviceExt.doMigrateToOptimizedTableIndexes(javax.baja.sys.Context) -->
<method name="doMigrateToOptimizedTableIndexes"  public="true">
<description>
Invoke the job to create the composite indexes on the history export tables
</description>
<tag name="@since">Niagara 4.11</tag>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
<description>
the context for this job submission.
</description>
</parameter>
<return>
<type class="javax.baja.naming.BOrd"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.rdb.history.BRdbmsHistoryDeviceExt.getUserName(javax.baja.rdb.BRdbms, javax.baja.rdb.history.BRdbmsHistoryExport) -->
<method name="getUserName"  public="true">
<description>
getUserName
</description>
<parameter name="database">
<type class="javax.baja.rdb.BRdbms"/>
</parameter>
<parameter name="descriptor">
<type class="javax.baja.rdb.history.BRdbmsHistoryExport"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.rdb.history.BRdbmsHistoryDeviceExt.getPassword(javax.baja.rdb.BRdbms, javax.baja.rdb.history.BRdbmsHistoryExport) -->
<method name="getPassword"  public="true">
<description>
getPassword
</description>
<parameter name="database">
<type class="javax.baja.rdb.BRdbms"/>
</parameter>
<parameter name="descriptor">
<type class="javax.baja.rdb.history.BRdbmsHistoryExport"/>
</parameter>
<return>
<type class="javax.baja.security.BPassword"/>
</return>
</method>

<!-- javax.baja.rdb.history.BRdbmsHistoryDeviceExt.useLastTimestamp -->
<field name="useLastTimestamp"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;useLastTimestamp&lt;/code&gt; property.&#xa; Whether or not to make use of the value of the maxTimestamp property on each&#xa; BRdbmsHistoryExport object.&#xa; If useLastTimestamp is false, then queries will be issued on the database&#xa; to find the last export time.  In addition, database timestamp indexes will&#xa; be created at the time that the database tables are created.&#xa; If useLastTimestamp is true, then the value of the maxTimestamp property on each&#xa; BRdbmsHistoryExport object will be used during the history export process&#xa; to find the last export time.  In addition, database indexes will &lt;i&gt;&lt;b&gt;NOT&lt;/b&gt;&lt;/i&gt;&#xa; be created at the time that the database tables are created.
</description>
<tag name="@see">#getUseLastTimestamp</tag>
<tag name="@see">#setUseLastTimestamp</tag>
</field>

<!-- javax.baja.rdb.history.BRdbmsHistoryDeviceExt.useHistoryConfigTimeZone -->
<field name="useHistoryConfigTimeZone"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;useHistoryConfigTimeZone&lt;/code&gt; property.&#xa; Whether or not to use the timezone property of a history&#x27;s historyConfig&#xa; when exported records.&#xa; If useHistoryConfigTimeZone is false, then the timezone of the supervisor&#xa; that is actually doing the export will be used when timestamps are exported.&#xa; If useHistoryConfigTimeZone is true, then the timezone property of the&#xa; historyConfig object will be used when timestamps are exported.&#xa; NOTE: if the parent database, namely MySQL, does not support timestamps&#xa; natively, then the value of this property will be ignored.
</description>
<tag name="@see">#getUseHistoryConfigTimeZone</tag>
<tag name="@see">#setUseHistoryConfigTimeZone</tag>
</field>

<!-- javax.baja.rdb.history.BRdbmsHistoryDeviceExt.alwaysCreateIndexForNewTables -->
<field name="alwaysCreateIndexForNewTables"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;alwaysCreateIndexForNewTables&lt;/code&gt; property.&#xa; Create optimized indexes for the new history export record tables.
</description>
<tag name="@since">Niagara 4.11</tag>
<tag name="@see">#getAlwaysCreateIndexForNewTables</tag>
<tag name="@see">#setAlwaysCreateIndexForNewTables</tag>
</field>

<!-- javax.baja.rdb.history.BRdbmsHistoryDeviceExt.submitRdbTableDiscoveryJob -->
<field name="submitRdbTableDiscoveryJob"  public="true" static="true" final="true">
<type class="javax.baja.sys.Action"/>
<description>
Slot for the &lt;code&gt;submitRdbTableDiscoveryJob&lt;/code&gt; action.&#xa; This action is called programmatically to invoke the job&#xa; for discovering the rdb tables available for import.
</description>
<tag name="@see">#submitRdbTableDiscoveryJob()</tag>
</field>

<!-- javax.baja.rdb.history.BRdbmsHistoryDeviceExt.updateLastTimestamp -->
<field name="updateLastTimestamp"  public="true" static="true" final="true">
<type class="javax.baja.sys.Action"/>
<description>
Slot for the &lt;code&gt;updateLastTimestamp&lt;/code&gt; action.&#xa; Updates the lastTimestamp field on all the BRdbmsHistoryExport objects,&#xa; by querying the database.
</description>
<tag name="@see">#updateLastTimestamp()</tag>
</field>

<!-- javax.baja.rdb.history.BRdbmsHistoryDeviceExt.clearLastTimestamp -->
<field name="clearLastTimestamp"  public="true" static="true" final="true">
<type class="javax.baja.sys.Action"/>
<description>
Slot for the &lt;code&gt;clearLastTimestamp&lt;/code&gt; action.&#xa; Set the lastTimestamp field on all the BRdbmsHistoryExport objects&#xa; to NULL.
</description>
<tag name="@see">#clearLastTimestamp()</tag>
</field>

<!-- javax.baja.rdb.history.BRdbmsHistoryDeviceExt.migrateToOptimizedTableIndexes -->
<field name="migrateToOptimizedTableIndexes"  public="true" static="true" final="true">
<type class="javax.baja.sys.Action"/>
<description>
Slot for the &lt;code&gt;migrateToOptimizedTableIndexes&lt;/code&gt; action.&#xa; Create optimized index on the history exports under the device depending on the export mode.&#xa; In case the export mode is by HistoryId, an index is created on the Timestamp column.&#xa; In case the export mode is by HistoryType, a composite index is created on the&#xa; HistoryId and the Timestamp column which makes it quicker to do searches over the table.&#xa; It drops the existing index (based on just TIMESTAMP OR HISTORY_ID) if any&#xa; before creating the new index on the table.
</description>
<tag name="@since">Niagara 4.11</tag>
<tag name="@see">#migrateToOptimizedTableIndexes()</tag>
</field>

<!-- javax.baja.rdb.history.BRdbmsHistoryDeviceExt.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
