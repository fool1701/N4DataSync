<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="chart" runtimeProfile="wb" qualifiedName="javax.baja.chart.BAxis" name="BAxis" packageName="javax.baja.chart" public="true" abstract="true">
<description>
BAxis is the model for a chart axis. The rendering of an axis is handled by an AxisRenderer. It&#xa; it manages one dimension of the chart. It defines the value range for its dimension.
</description>
<tag name="@author">John Sublett</tag>
<tag name="@creation">10 Jun 2004</tag>
<tag name="@version">$Revision: 15$ $Date: 6/18/13 11:07:50 AM EST$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="javax.baja.sys.BObject"/>
</extends>
<implements>
<type class="javax.baja.agent.BIAgent"/>
</implements>
<!-- javax.baja.chart.BAxis() -->
<constructor name="BAxis" public="true">
<description/>
</constructor>

<!-- javax.baja.chart.BAxis.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.chart.BAxis.getValueType() -->
<method name="getValueType"  public="true" abstract="true">
<description>
Get the type of value that is translated by this axis.
</description>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.chart.BAxis.getDimension() -->
<method name="getDimension"  public="true">
<description>
Get the dimension for this axis.
</description>
<return>
<type class="javax.baja.chart.BAxisDimension"/>
</return>
</method>

<!-- javax.baja.chart.BAxis.setDimension(javax.baja.chart.BAxisDimension) -->
<method name="setDimension"  public="true">
<description>
Set the dimension for this axis.
</description>
<parameter name="dim">
<type class="javax.baja.chart.BAxisDimension"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.chart.BAxis.getLocation() -->
<method name="getLocation"  public="true">
<description>
Get the location of the axis.
</description>
<return>
<type class="javax.baja.chart.BAxisLocation"/>
</return>
</method>

<!-- javax.baja.chart.BAxis.setLocation(javax.baja.chart.BAxisLocation) -->
<method name="setLocation"  public="true">
<description>
Set the location of the axis.
</description>
<parameter name="loc">
<type class="javax.baja.chart.BAxisLocation"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.chart.BAxis.getTitle() -->
<method name="getTitle"  public="true">
<description>
Get the axis title.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.chart.BAxis.setTitle(java.lang.String) -->
<method name="setTitle"  public="true">
<description>
Set the axis title.
</description>
<parameter name="title">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.chart.BAxis.getUnitLabel() -->
<method name="getUnitLabel"  public="true">
<description>
Get the label that displays the axis units.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.chart.BAxis.setShowSwatches(boolean) -->
<method name="setShowSwatches"  public="true">
<description/>
<parameter name="showSwatches">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.chart.BAxis.getShowSwatches() -->
<method name="getShowSwatches"  public="true">
<description/>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.chart.BAxis.computePreferredSize() -->
<method name="computePreferredSize"  public="true">
<description>
Compute the preferred size of the axis.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.chart.BAxis.setPreferredSize(double, double) -->
<method name="setPreferredSize"  protected="true">
<description>
Set the preferred size of the axis. This must be called from computePreferredSize().
</description>
<parameter name="prefWidth">
<type class="double"/>
</parameter>
<parameter name="prefHeight">
<type class="double"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.chart.BAxis.getPreferredWidth() -->
<method name="getPreferredWidth"  public="true">
<description>
Get the preferred width of the axis.
</description>
<return>
<type class="double"/>
</return>
</method>

<!-- javax.baja.chart.BAxis.getPreferredHeight() -->
<method name="getPreferredHeight"  public="true">
<description>
Get the preferred height of the axis.
</description>
<return>
<type class="double"/>
</return>
</method>

<!-- javax.baja.chart.BAxis.setBounds(double, double, double, double) -->
<method name="setBounds"  public="true">
<description>
Set the size of the axis in display space. This allows the axis to translate between value&#xa; space and display space.
</description>
<parameter name="x">
<type class="double"/>
</parameter>
<parameter name="y">
<type class="double"/>
</parameter>
<parameter name="w">
<type class="double"/>
</parameter>
<parameter name="h">
<type class="double"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.chart.BAxis.doLayout() -->
<method name="doLayout"  public="true">
<description/>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.chart.BAxis.getX() -->
<method name="getX"  public="true">
<description>
Get the x location of the upper left corner of the axis within its parent container.
</description>
<return>
<type class="double"/>
</return>
</method>

<!-- javax.baja.chart.BAxis.getY() -->
<method name="getY"  public="true">
<description>
Get the y location of the upper left corner of the axis within its parent container.
</description>
<return>
<type class="double"/>
</return>
</method>

<!-- javax.baja.chart.BAxis.getWidth() -->
<method name="getWidth"  public="true">
<description>
Get the width of the axis in display space. The width is the length of the horizontal side of&#xa; the bounding box.
</description>
<return>
<type class="double"/>
</return>
</method>

<!-- javax.baja.chart.BAxis.getHeight() -->
<method name="getHeight"  public="true">
<description>
Get the height of the axis in display space. The height is the length of the vertical side of&#xa; the bounding box.
</description>
<return>
<type class="double"/>
</return>
</method>

<!-- javax.baja.chart.BAxis.getLength() -->
<method name="getLength"  public="true">
<description>
Get the length of the axis. The returns the either the width or the height depending on the&#xa; dimension. The returned length is not the full display length. It does not include the margins.
</description>
<return>
<type class="double"/>
</return>
</method>

<!-- javax.baja.chart.BAxis.getFullLength() -->
<method name="getFullLength"  public="true">
<description>
Get the full length of the axis including the margins.
</description>
<return>
<type class="double"/>
</return>
</method>

<!-- javax.baja.chart.BAxis.setMinAuto(boolean) -->
<method name="setMinAuto"  public="true">
<description>
Set whether the minimum value for this axis should be computed automatically from the series&#xa; that use it.
</description>
<parameter name="auto">
<type class="boolean"/>
<description>
If true, the minimum value will be adjusted appropriately during calls to&#xa;          updateRange(). If false, updateRange() has no effect.
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.chart.BAxis.isMinAuto() -->
<method name="isMinAuto"  public="true">
<description>
Is the minimum value for this axis computed automatically? If not, it must be set with a call&#xa; to setAxisMin().
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.chart.BAxis.updateAutoMin(java.lang.Object) -->
<method name="updateAutoMin"  public="true">
<description>
This is called during a build to allow auto calculation of the minimum value. If newMin is less&#xa; than the current min, then the min should be set to newMin. Otherwise this method has no&#xa; effect.
</description>
<parameter name="newMin">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.chart.BAxis.getAxisMin() -->
<method name="getAxisMin"  public="true" abstract="true">
<description>
Get the minimum value for the axis.
</description>
<return>
<type class="java.lang.Object"/>
</return>
</method>

<!-- javax.baja.chart.BAxis.setAxisMin(java.lang.Object) -->
<method name="setAxisMin"  public="true" abstract="true">
<description>
Set the minimum axis value.
</description>
<parameter name="newMin">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.chart.BAxis.getMinMargin() -->
<method name="getMinMargin"  public="true">
<description>
Get the margin inside the canvas at the minimum end. This is the space between the minimum&#xa; value and the edge of the canvas.
</description>
<return>
<type class="double"/>
</return>
</method>

<!-- javax.baja.chart.BAxis.setMinMargin(double) -->
<method name="setMinMargin"  public="true">
<description>
Set the margin inside the canvas as the minimum end. This is the space between the minimum&#xa; value and the edge of the canvas.
</description>
<tag name="@since">Niagara 3.6</tag>
<parameter name="margin">
<type class="double"/>
<description>
- double
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.chart.BAxis.setMaxAuto(boolean) -->
<method name="setMaxAuto"  public="true">
<description>
Set whether the maximum value for this axis should be computed automatically from the series&#xa; that use it.
</description>
<parameter name="auto">
<type class="boolean"/>
<description>
If true, the maximum value will be adjusted appropriately during calls to&#xa;          updateRange(). If false, updateRange() has no effect.
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.chart.BAxis.isMaxAuto() -->
<method name="isMaxAuto"  public="true">
<description>
Is the maximum value for this axis computed automatically? If not, it must be set with a call&#xa; to setAxisMax().
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.chart.BAxis.updateAutoMax(java.lang.Object) -->
<method name="updateAutoMax"  public="true">
<description>
This is called during a build to allow auto calculation of the maximum value. If newMax is less&#xa; than the current max, then the max should be set to newMax. Otherwise this method has no&#xa; effect.
</description>
<parameter name="newMax">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.chart.BAxis.getAxisMax() -->
<method name="getAxisMax"  public="true" abstract="true">
<description>
Get the maximum value for the axis.
</description>
<return>
<type class="java.lang.Object"/>
</return>
</method>

<!-- javax.baja.chart.BAxis.setAxisMax(java.lang.Object) -->
<method name="setAxisMax"  public="true" abstract="true">
<description>
Set the maximum axis value.
</description>
<parameter name="newMax">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.chart.BAxis.getMaxMargin() -->
<method name="getMaxMargin"  public="true">
<description>
Get the margin inside the canvas at the maximum end. This is the space between the maximum&#xa; value and the edge of the canvas.
</description>
<return>
<type class="double"/>
</return>
</method>

<!-- javax.baja.chart.BAxis.setMaxMargin(double) -->
<method name="setMaxMargin"  public="true">
<description>
Sets the margin inside the canvas as the maximum end. This is the space between the maximum&#xa; value and the edge.
</description>
<tag name="@since">Niagara 3.6</tag>
<parameter name="margin">
<type class="double"/>
<description>
- double
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.chart.BAxis.reset() -->
<method name="reset"  public="true">
<description>
Reset this axis so that the chart can be reconstructed. This should undo any setup performed&#xa; during calls to addSeries(). If the range is auto computed, this should reset the range so that&#xa; it can be recomputed during calls to addSeries().
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.chart.BAxis.updateFacets(javax.baja.sys.BFacets) -->
<method name="updateFacets"  public="true">
<description>
Update the facets for this axis.
</description>
<parameter name="newFacets">
<type class="javax.baja.sys.BFacets"/>
</parameter>
<return>
<type class="javax.baja.sys.BFacets"/>
</return>
</method>

<!-- javax.baja.chart.BAxis.getFacets() -->
<method name="getFacets"  public="true">
<description/>
<return>
<type class="javax.baja.sys.BFacets"/>
</return>
</method>

<!-- javax.baja.chart.BAxis.updateSeries(javax.baja.chart.Series) -->
<method name="updateSeries"  public="true">
<description>
Update the series for this axis.
</description>
<parameter name="s">
<type class="javax.baja.chart.Series"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.chart.BAxis.getSeries() -->
<method name="getSeries"  public="true">
<description/>
<return>
<type class="javax.baja.chart.Series" dimension="1"/>
</return>
</method>

<!-- javax.baja.chart.BAxis.isZoomEnabled() -->
<method name="isZoomEnabled"  public="true">
<description>
Is zoom enabled for this axis?
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.chart.BAxis.validateZoom(java.lang.Object, java.lang.Object) -->
<method name="validateZoom"  public="true">
<description>
Check whether a zoom to the specified range is valid.
</description>
<parameter name="zoomMin">
<type class="java.lang.Object"/>
</parameter>
<parameter name="zoomMax">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.chart.BAxis.getTickValues() -->
<method name="getTickValues"  public="true" abstract="true">
<description>
Get the list of tick values ordered from lowest value to highest.
</description>
<return>
<type class="java.lang.Object" dimension="1"/>
</return>
</method>

<!-- javax.baja.chart.BAxis.valueToString(java.lang.Object) -->
<method name="valueToString"  public="true" abstract="true">
<description>
Convert the specified value to a string.
</description>
<parameter name="value">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.chart.BAxis.toDisplaySpace(java.lang.Object) -->
<method name="toDisplaySpace"  public="true" abstract="true">
<description>
Translate the specified value to a display space location.
</description>
<parameter name="value">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="double"/>
</return>
</method>

<!-- javax.baja.chart.BAxis.fromDisplaySpace(double) -->
<method name="fromDisplaySpace"  public="true" abstract="true">
<description>
Convert from a location in display space to a value.
</description>
<parameter name="loc">
<type class="double"/>
</parameter>
<return>
<type class="java.lang.Object"/>
</return>
</method>

<!-- javax.baja.chart.BAxis.getDefaultRenderer() -->
<method name="getDefaultRenderer"  public="true" static="true">
<description>
Get the default renderer for all axes.
</description>
<return>
<type class="javax.baja.chart.AxisRenderer"/>
</return>
</method>

<!-- javax.baja.chart.BAxis.setDefaultRenderer(javax.baja.chart.AxisRenderer) -->
<method name="setDefaultRenderer"  public="true" static="true">
<description>
Set the default renderer for all axes.
</description>
<parameter name="renderer">
<type class="javax.baja.chart.AxisRenderer"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.chart.BAxis.setRenderer(javax.baja.chart.AxisRenderer) -->
<method name="setRenderer"  public="true">
<description>
Set the renderer for this axis.
</description>
<parameter name="renderer">
<type class="javax.baja.chart.AxisRenderer"/>
<description>
The renderer that draws this axis. If null, the default renderer is used.
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.chart.BAxis.getRenderer() -->
<method name="getRenderer"  public="true">
<description>
Get the renderer for this axis. If the renderer has never been set, this is the same as&#xa; getDefaultRenderer().
</description>
<return>
<type class="javax.baja.chart.AxisRenderer"/>
</return>
</method>

<!-- javax.baja.chart.BAxis.isCompatible(javax.baja.chart.BAxis) -->
<method name="isCompatible"  public="true">
<description>
This method determines whether the given axis can be shared with the axis represented by this&#xa; object instance.
</description>
<tag name="@since">Niagara 3.6</tag>
<parameter name="axis">
<type class="javax.baja.chart.BAxis"/>
<description>
- &lt;code&gt;<see ref="javax.baja.chart.BAxis">BAxis</see>&lt;/code&gt;
</description>
</parameter>
<return>
<type class="boolean"/>
<description>
true if the given axis argument is compatible and can be shared with the existing axis;&#xa;         else false.
</description>
</return>
</method>

<!-- javax.baja.chart.BAxis.equals(java.lang.Object) -->
<method name="equals"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="o">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.chart.BAxis.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

<!-- javax.baja.chart.BAxis.log -->
<field name="log"  public="true" static="true" final="true">
<type class="java.util.logging.Logger"/>
<description/>
</field>

<!-- javax.baja.chart.BAxis.DEFAULT_MARGIN_SIZE -->
<field name="DEFAULT_MARGIN_SIZE"  public="true" static="true" final="true">
<type class="double"/>
<description/>
</field>

</class>
</bajadoc>
