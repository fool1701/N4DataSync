<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="orion" runtimeProfile="rt" qualifiedName="com.tridium.orion.BSchemaVersion" name="BSchemaVersion" packageName="com.tridium.orion" public="true" final="true">
<description>
BSchemaVersion represents the current version&#xa; of a BIOrionApp.  BSchemaVersion is essentially&#xa; a wrapper for &lt;code&gt;javax.baja.util.Version&lt;/code&gt;.
</description>
<tag name="@author">Mike Jarmy</tag>
<tag name="@creation">23 Jul 08</tag>
<tag name="@version">$Revision: 8$ $Date: 2/27/2006 3:11:00 PM$</tag>
<tag name="@since">Niagara 3.0</tag>
<extends>
<type class="javax.baja.sys.BSimple"/>
</extends>
<implements>
<type class="javax.baja.sys.BIComparable"/>
</implements>
<annotation><type class="javax.baja.nre.annotations.NoSlotomatic"/>
</annotation>
<!-- com.tridium.orion.BSchemaVersion.getType() -->
<method name="getType"  public="true">
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- com.tridium.orion.BSchemaVersion.make(java.lang.String) -->
<method name="make"  public="true" static="true">
<description>
Parse a version string.
</description>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="com.tridium.orion.BSchemaVersion"/>
</return>
</method>

<!-- com.tridium.orion.BSchemaVersion.major() -->
<method name="major"  public="true">
<description>
Get version at index 0 or -1
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- com.tridium.orion.BSchemaVersion.minor() -->
<method name="minor"  public="true">
<description>
Get version at index 1 or -1
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- com.tridium.orion.BSchemaVersion.build() -->
<method name="build"  public="true">
<description>
Get version at index 2 or -1
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- com.tridium.orion.BSchemaVersion.patch() -->
<method name="patch"  public="true">
<description>
Get version at index 3 or -1
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- com.tridium.orion.BSchemaVersion.get(int) -->
<method name="get"  public="true">
<description>
Get the version at index.
</description>
<parameter name="index">
<type class="int"/>
</parameter>
<return>
<type class="int"/>
</return>
</method>

<!-- com.tridium.orion.BSchemaVersion.size() -->
<method name="size"  public="true">
<description>
Get the number of numbers in this Version.
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- com.tridium.orion.BSchemaVersion.isNull() -->
<method name="isNull"  public="true">
<description>
The null version is &#x22;0&#x22;.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- com.tridium.orion.BSchemaVersion.compareTo(java.lang.Object) -->
<method name="compareTo"  public="true">
<description>
Return a negative integer, zero, or a positive &#xa; integer as this Version is less than, equal to, &#xa; or greater than the specified Version.  If the two &#xa; versions are equal in the number of digits they &#xa; contain, but one version has additional digits then &#xa; that one is considered greater (ie, 1.0.1 &gt; 1.0).
</description>
<parameter name="obj">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="int"/>
</return>
</method>

<!-- com.tridium.orion.BSchemaVersion.equals(java.lang.Object) -->
<method name="equals"  public="true">
<description>
Return true if the versions equal.
</description>
<parameter name="obj">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- com.tridium.orion.BSchemaVersion.toString(javax.baja.sys.Context) -->
<method name="toString"  public="true">
<description>
To string method.
</description>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- com.tridium.orion.BSchemaVersion.encode(java.io.DataOutput) -->
<method name="encode"  public="true">
<description>
BString is encoded using writeUTF().
</description>
<parameter name="out">
<type class="java.io.DataOutput"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- com.tridium.orion.BSchemaVersion.decode(java.io.DataInput) -->
<method name="decode"  public="true">
<description>
BString is decoded using readUTF().
</description>
<parameter name="in">
<type class="java.io.DataInput"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- com.tridium.orion.BSchemaVersion.encodeToString() -->
<method name="encodeToString"  public="true">
<description>
Write the simple in text format.
</description>
<return>
<type class="java.lang.String"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- com.tridium.orion.BSchemaVersion.decodeFromString(java.lang.String) -->
<method name="decodeFromString"  public="true">
<description>
Read the simple from text format.
</description>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- com.tridium.orion.BSchemaVersion.DEFAULT -->
<field name="DEFAULT"  public="true" static="true" final="true">
<type class="com.tridium.orion.BSchemaVersion"/>
<description>
Version of &#x22;0&#x22;
</description>
</field>

<!-- com.tridium.orion.BSchemaVersion.NULL -->
<field name="NULL"  public="true" static="true" final="true">
<type class="com.tridium.orion.BSchemaVersion"/>
<description>
Version of &#x22;0&#x22;
</description>
</field>

<!-- com.tridium.orion.BSchemaVersion.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
