<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="orion" runtimeProfile="rt" qualifiedName="com.tridium.orion.sql.BSqlCase" name="BSqlCase" packageName="com.tridium.orion.sql" public="true">
<description>
Models a standard SQL CASE expression.&#xa; &lt;p&gt;&#xa; For the purposes of the documentation, a CASE statement that has a &#xa; &#x22;case expression&#x22; is called a &#x22;simple&#x22; case statement.  Otherwise,&#xa; it is a &#x22;searched&#x22; case statement.&#xa; &lt;ul&gt;&#xa; &lt;li&gt;Simple: &lt;code&gt;CASE id WHEN 0 THEN NULL ...&lt;/code&gt;&#xa; &lt;li&gt;Searched: &lt;code&gt;CASE WHEN id = 0 THEN NULL ...&lt;/code&gt;&#xa; &lt;/ul&gt;
</description>
<tag name="@author">Matthew Giannini</tag>
<tag name="@creation">Aug 25, 2009</tag>
<extends>
<type class="javax.baja.query.BExpression"/>
</extends>
<!-- com.tridium.orion.sql.BSqlCase() -->
<constructor name="BSqlCase" public="true">
<description>
Make a new searched case expression.&#xa; &lt;p&gt;&#xa; &lt;code&gt;CASE WHEN...&lt;/code&gt;
</description>
<tag name="@see">#BSqlCase(BExpression)</tag>
</constructor>

<!-- com.tridium.orion.sql.BSqlCase(javax.baja.query.BExpression) -->
<constructor name="BSqlCase" public="true">
<parameter name="caseExpr">
<type class="javax.baja.query.BExpression"/>
</parameter>
<description>
Create a new simple case expression.&#xa; &lt;p&gt;&#xa; &lt;code&gt;CASE &amp;lt;caseExpr&amp;gt; WHEN...&lt;/code&gt;
</description>
<tag name="@see">#setCase(BExpression)</tag>
</constructor>

<!-- com.tridium.orion.sql.BSqlCase.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- com.tridium.orion.sql.BSqlCase.setCase(javax.baja.query.BExpression) -->
<method name="setCase"  public="true">
<description>
Set the case expression for this CASE statement. Overwrites any existing&#xa; case expression.&#xa; &lt;p&gt;&#xa; &lt;code&gt;CASE &amp;lt;caseExpr&amp;gt; WHEN...&lt;/code&gt;
</description>
<parameter name="caseExpr">
<type class="javax.baja.query.BExpression"/>
<description>
The expression to set for the case expression. If it is &lt;code&gt;null&lt;/code&gt;, the case expression is removed.
</description>
</parameter>
<return>
<type class="com.tridium.orion.sql.BSqlCase"/>
<description>
this
</description>
</return>
</method>

<!-- com.tridium.orion.sql.BSqlCase.getCase() -->
<method name="getCase"  public="true">
<description/>
<return>
<type class="javax.baja.query.BExpression"/>
<description>
the case expression or &lt;code&gt;null&lt;/code&gt; if one is not set.
</description>
</return>
</method>

<!-- com.tridium.orion.sql.BSqlCase.hasCase() -->
<method name="hasCase"  public="true">
<description/>
<return>
<type class="boolean"/>
<description>
true if there is a case expression, false otherwise.
</description>
</return>
</method>

<!-- com.tridium.orion.sql.BSqlCase.setElse(javax.baja.query.BExpression) -->
<method name="setElse"  public="true">
<description>
Set the ELSE expression. Overwrites any existing ELSE expression.
</description>
<parameter name="elseExpr">
<type class="javax.baja.query.BExpression"/>
<description>
The ELSE expression. If it is &lt;code&gt;null&lt;/code&gt;, the ELSE expression is&#xa;          removed.
</description>
</parameter>
<return>
<type class="com.tridium.orion.sql.BSqlCase"/>
<description>
this
</description>
</return>
</method>

<!-- com.tridium.orion.sql.BSqlCase.getElse() -->
<method name="getElse"  public="true">
<description/>
<return>
<type class="javax.baja.query.BExpression"/>
<description>
the ELSE expression or &lt;code&gt;null&lt;/code&gt; if one is not set.
</description>
</return>
</method>

<!-- com.tridium.orion.sql.BSqlCase.hasElse() -->
<method name="hasElse"  public="true">
<description/>
<return>
<type class="boolean"/>
<description>
true if there is an ELSE expression, false otherwise.
</description>
</return>
</method>

<!-- com.tridium.orion.sql.BSqlCase.whenThen(com.tridium.orion.sql.BSqlCase.WhenTuple) -->
<method name="whenThen"  public="true">
<description>
Convenience for &lt;code&gt;whenThen(tuple.whenExpr, tuple.thenExpr)&lt;/code&gt;
</description>
<tag name="@see">#whenThen(BExpression, BExpression)</tag>
<parameter name="tuple">
<type class="com.tridium.orion.sql.BSqlCase$WhenTuple"/>
</parameter>
<return>
<type class="com.tridium.orion.sql.BSqlCase"/>
</return>
</method>

<!-- com.tridium.orion.sql.BSqlCase.whenThen(javax.baja.query.BExpression, javax.baja.query.BExpression) -->
<method name="whenThen"  public="true">
<description>
Add a WHEN expression with its corresponding THEN expression. Neither&#xa; expression may be null.
</description>
<parameter name="whenExpr">
<type class="javax.baja.query.BExpression"/>
</parameter>
<parameter name="thenExpr">
<type class="javax.baja.query.BExpression"/>
</parameter>
<return>
<type class="com.tridium.orion.sql.BSqlCase"/>
<description>
this
</description>
</return>
</method>

<!-- com.tridium.orion.sql.BSqlCase.getWhenTuples() -->
<method name="getWhenTuples"  public="true">
<description/>
<return>
<type class="com.tridium.orion.sql.BSqlCase$WhenTuple" dimension="1"/>
<description>
an array of WhenTuples. The tuples will be returned in the same&#xa; order that they were added.
</description>
</return>
</method>

<!-- com.tridium.orion.sql.BSqlCase.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
