<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="orion" runtimeProfile="rt" qualifiedName="com.tridium.orion.sql.BSqlField" name="BSqlField" packageName="com.tridium.orion.sql" public="true" final="true">
<description>
An SQL specific BFieldExpression implementation that represents a specific&#xa; property for a specific ORION_TYPE.  BSqlFields may also be aliased. The Orion&#xa; SQL generator will prefix the propertyName with the table name corresponding&#xa; to the extent type spec; however, if there is an extentAlias, the Orion SQL&#xa; generator will prefix the property with the extentAlias string.
</description>
<tag name="@author">Mike Jarmy</tag>
<tag name="@creation">19 Jun 08</tag>
<tag name="@version">$Revision$Date: 6/22/2007 11:17:32 AM$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="javax.baja.query.expression.BFieldExpression"/>
</extends>
<property name="extent" flags="">
<type class="javax.baja.util.BTypeSpec"/>
<description>
Slot for the &lt;code&gt;extent&lt;/code&gt; property.
</description>
<tag name="@see">#getExtent</tag>
<tag name="@see">#setExtent</tag>
</property>

<property name="extentAlias" flags="">
<type class="java.lang.String"/>
<description>
Slot for the &lt;code&gt;extentAlias&lt;/code&gt; property.&#xa; An optional alias for the extent. When constructing SQL query&#xa; strings, the extent alias will be used instead of the table name for&#xa; the extent type when qualifying the propertyName.  If the value is the&#xa; empty string (&#x22;&#x22;), then no table aliasing will be used.
</description>
<tag name="@see">#getExtentAlias</tag>
<tag name="@see">#setExtentAlias</tag>
</property>

<property name="propertyName" flags="">
<type class="java.lang.String"/>
<description>
Slot for the &lt;code&gt;propertyName&lt;/code&gt; property.
</description>
<tag name="@see">#getPropertyName</tag>
<tag name="@see">#setPropertyName</tag>
</property>

<!-- com.tridium.orion.sql.BSqlField() -->
<constructor name="BSqlField" public="true">
<description/>
</constructor>

<!-- com.tridium.orion.sql.BSqlField(com.tridium.orion.sql.BSqlExtent, java.lang.String) -->
<constructor name="BSqlField" public="true">
<parameter name="sqlExtent">
<type class="com.tridium.orion.sql.BSqlExtent"/>
</parameter>
<parameter name="field">
<type class="java.lang.String"/>
</parameter>
<description>
Construct a BSqlField.  The extent and extentAlias will be set basd on the&#xa; corresponding values from the given sqlExtent.
</description>
</constructor>

<!-- com.tridium.orion.sql.BSqlField(com.tridium.orion.sql.BSqlExtent, javax.baja.sys.Property) -->
<constructor name="BSqlField" public="true">
<parameter name="sqlExtent">
<type class="com.tridium.orion.sql.BSqlExtent"/>
</parameter>
<parameter name="prop">
<type class="javax.baja.sys.Property"/>
</parameter>
<description>
Convenience for &lt;code&gt;this(sqlExtent, prop.getName())&lt;/code&gt;
</description>
</constructor>

<!-- com.tridium.orion.sql.BSqlField(javax.baja.util.BTypeSpec, java.lang.String) -->
<constructor name="BSqlField" public="true">
<parameter name="extent">
<type class="javax.baja.util.BTypeSpec"/>
</parameter>
<parameter name="field">
<type class="java.lang.String"/>
</parameter>
<description/>
</constructor>

<!-- com.tridium.orion.sql.BSqlField(com.tridium.orion.OrionType, java.lang.String) -->
<constructor name="BSqlField" public="true">
<parameter name="type">
<type class="com.tridium.orion.OrionType"/>
</parameter>
<parameter name="field">
<type class="java.lang.String"/>
</parameter>
<description/>
</constructor>

<!-- com.tridium.orion.sql.BSqlField(com.tridium.orion.OrionType, javax.baja.sys.Property) -->
<constructor name="BSqlField" public="true">
<parameter name="type">
<type class="com.tridium.orion.OrionType"/>
</parameter>
<parameter name="prop">
<type class="javax.baja.sys.Property"/>
</parameter>
<description/>
</constructor>

<!-- com.tridium.orion.sql.BSqlField.getExtent() -->
<method name="getExtent"  public="true">
<description>
Get the &lt;code&gt;extent&lt;/code&gt; property.
</description>
<tag name="@see">#extent</tag>
<return>
<type class="javax.baja.util.BTypeSpec"/>
</return>
</method>

<!-- com.tridium.orion.sql.BSqlField.setExtent(javax.baja.util.BTypeSpec) -->
<method name="setExtent"  public="true">
<description>
Set the &lt;code&gt;extent&lt;/code&gt; property.
</description>
<tag name="@see">#extent</tag>
<parameter name="v">
<type class="javax.baja.util.BTypeSpec"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.orion.sql.BSqlField.getExtentAlias() -->
<method name="getExtentAlias"  public="true">
<description>
Get the &lt;code&gt;extentAlias&lt;/code&gt; property.&#xa; An optional alias for the extent. When constructing SQL query&#xa; strings, the extent alias will be used instead of the table name for&#xa; the extent type when qualifying the propertyName.  If the value is the&#xa; empty string (&#x22;&#x22;), then no table aliasing will be used.
</description>
<tag name="@see">#extentAlias</tag>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- com.tridium.orion.sql.BSqlField.setExtentAlias(java.lang.String) -->
<method name="setExtentAlias"  public="true">
<description>
Set the &lt;code&gt;extentAlias&lt;/code&gt; property.&#xa; An optional alias for the extent. When constructing SQL query&#xa; strings, the extent alias will be used instead of the table name for&#xa; the extent type when qualifying the propertyName.  If the value is the&#xa; empty string (&#x22;&#x22;), then no table aliasing will be used.
</description>
<tag name="@see">#extentAlias</tag>
<parameter name="v">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.orion.sql.BSqlField.getPropertyName() -->
<method name="getPropertyName"  public="true">
<description>
Get the &lt;code&gt;propertyName&lt;/code&gt; property.
</description>
<tag name="@see">#propertyName</tag>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- com.tridium.orion.sql.BSqlField.setPropertyName(java.lang.String) -->
<method name="setPropertyName"  public="true">
<description>
Set the &lt;code&gt;propertyName&lt;/code&gt; property.
</description>
<tag name="@see">#propertyName</tag>
<parameter name="v">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.orion.sql.BSqlField.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- com.tridium.orion.sql.BSqlField.alias(java.lang.String) -->
<method name="alias"  public="true">
<description>
Set the extentAlias and return this.
</description>
<parameter name="alias">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="com.tridium.orion.sql.BSqlField"/>
</return>
</method>

<!-- com.tridium.orion.sql.BSqlField.getTableAlias(com.tridium.orion.BOrionDatabase) -->
<method name="getTableAlias"  public="true" final="true">
<description/>
<parameter name="db">
<type class="com.tridium.orion.BOrionDatabase"/>
</parameter>
<return>
<type class="java.lang.String"/>
<description>
a String that is the table alias to use when constructing an&#xa; SQL representation of this field.  If an extentAlias was set, then that&#xa; is returned, otherwise the table name for the extentType is returned.
</description>
</return>
</method>

<!-- com.tridium.orion.sql.BSqlField.getExtentType() -->
<method name="getExtentType"  public="true" final="true">
<description>
Convenience for &#xa; &lt;code&gt;(OrionType) getExtent().getResolvedType()&lt;/code&gt;.
</description>
<return>
<type class="com.tridium.orion.OrionType"/>
</return>
</method>

<!-- com.tridium.orion.sql.BSqlField.getField() -->
<method name="getField"  public="true">
<description>
getField
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- com.tridium.orion.sql.BSqlField.getAliasedField(com.tridium.orion.BOrionDatabase) -->
<method name="getAliasedField"  public="true" final="true">
<description>
getAliasedField
</description>
<parameter name="db">
<type class="com.tridium.orion.BOrionDatabase"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- com.tridium.orion.sql.BSqlField.isExtentAliased() -->
<method name="isExtentAliased"  public="true">
<description/>
<return>
<type class="boolean"/>
</return>
</method>

<!-- com.tridium.orion.sql.BSqlField.extent -->
<field name="extent"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;extent&lt;/code&gt; property.
</description>
<tag name="@see">#getExtent</tag>
<tag name="@see">#setExtent</tag>
</field>

<!-- com.tridium.orion.sql.BSqlField.extentAlias -->
<field name="extentAlias"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;extentAlias&lt;/code&gt; property.&#xa; An optional alias for the extent. When constructing SQL query&#xa; strings, the extent alias will be used instead of the table name for&#xa; the extent type when qualifying the propertyName.  If the value is the&#xa; empty string (&#x22;&#x22;), then no table aliasing will be used.
</description>
<tag name="@see">#getExtentAlias</tag>
<tag name="@see">#setExtentAlias</tag>
</field>

<!-- com.tridium.orion.sql.BSqlField.propertyName -->
<field name="propertyName"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;propertyName&lt;/code&gt; property.
</description>
<tag name="@see">#getPropertyName</tag>
<tag name="@see">#setPropertyName</tag>
</field>

<!-- com.tridium.orion.sql.BSqlField.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
