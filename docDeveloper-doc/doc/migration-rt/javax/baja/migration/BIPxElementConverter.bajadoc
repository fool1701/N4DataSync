<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="migration" runtimeProfile="rt" qualifiedName="javax.baja.migration.BIPxElementConverter" name="BIPxElementConverter" packageName="javax.baja.migration" public="true" interface="true" abstract="true" category="interface">
<description>
BIPxElementConverter&#xa;&#xa; This interface is implemented by classes that handle the migration of a&#xa; particular Niagara AX PxElement to Niagara 4.  This may entail removal&#xa; of the PxElement or changing the AX type to an N4 new type, possibly in a&#xa; new module.&#xa; &lt;p&gt;&#xa; Subclasses of BIPxElementConverter should include log entries which will&#xa; be included in feedback to users of migration tools.  Use the log object from&#xa; this interface.  Add log.info() entries to indicate items that were changed.&#xa; Add log.warning() entries to indicate items which will require special user&#xa; attention.
</description>
<tag name="@author">Erik Test</tag>
<tag name="@since">4.4</tag>
<implements>
<type class="javax.baja.sys.BInterface"/>
</implements>
<!-- javax.baja.migration.BIPxElementConverter.getConvertTypeSpecs() -->
<method name="getConvertTypeSpecs"  public="true" default="true">
<description>
The default implementation returns an empty list, indicating no type specs&#xa; are handled.
</description>
<return>
<parameterizedType class="java.util.List">
<args>
<type class="java.lang.String"/>
</args>
</parameterizedType>
<description>
a &lt;code&gt;<see ref="java.util.List">java.util.List</see>&lt;/code&gt; of Strings of types and modules handled by this converter.
</description>
</return>
</method>

<!-- javax.baja.migration.BIPxElementConverter.getPackageConversions() -->
<method name="getPackageConversions"  public="true" default="true">
<description>
Return a list of package conversions strings. Entries shall have the form&#xa; &#x22;origMod:origPackage,newMod:newPackage&#x22;.&#xa; (i.e. &#x22;historyFunc:com.tridium.historyFunc,history:com.tridium.history&#x22; )
</description>
<return>
<parameterizedType class="java.util.List">
<args>
<type class="java.lang.String"/>
</args>
</parameterizedType>
<description>
list of package conversion Strings
</description>
</return>
</method>

<!-- javax.baja.migration.BIPxElementConverter.convertXElem(javax.baja.xml.XElem, java.lang.String, javax.baja.util.Version) -->
<method name="convertXElem"  public="true" default="true">
<description>
Convert the given XElem to the new type.&#xa; &lt;p&gt;&#xa; This is used in the offline conversion of a Px file.&#xa; The default implementation simply returns the original element.&#xa; Subclasses can override to remove a Px element, or modify its type or&#xa; properties to something else.
</description>
<parameter name="x">
<type class="javax.baja.xml.XElem"/>
<description>
XElem representing a Px element to be converted.
</description>
</parameter>
<parameter name="typeName">
<type class="java.lang.String"/>
<description>
the typespec name.
</description>
</parameter>
<parameter name="sourceVersion">
<type class="javax.baja.util.Version"/>
<description>
the &lt;code&gt;<see ref="javax.baja.util.Version">javax.baja.util.Version</see>&lt;/code&gt; of the source being converted.
</description>
</parameter>
<return>
<type class="javax.baja.xml.XElem"/>
<description>
null if the element should be removed, or the XElem with the new element.
</description>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.migration.BIPxElementConverter.newInstance(java.lang.String) -->
<method name="newInstance"  public="true" default="true">
<description>
This is used during Px decoding when an obsoleted or removed type has&#xa; been replaced by a new type, and the handler needs to provide an on-the-fly&#xa; updated type.
</description>
<parameter name="typeName">
<type class="java.lang.String"/>
<description>
the type name
</description>
</parameter>
<return>
<type class="javax.baja.sys.BValue"/>
<description>
a new instance of the type specified by the module and type names
</description>
</return>
</method>

<!-- javax.baja.migration.BIPxElementConverter.newTypeName(java.lang.String) -->
<method name="newTypeName"  public="true" default="true">
<description>
Given the original type, return modified type if the original type changed or&#xa; it was moved to new module or module was renamed.
</description>
<parameter name="typeName">
<type class="java.lang.String"/>
<description>
the original typeSpec name
</description>
</parameter>
<return>
<parameterizedType class="java.util.Optional">
<args>
<type class="java.lang.String"/>
</args>
</parameterizedType>
<description>
a new typeSpec
</description>
</return>
</method>

<!-- javax.baja.migration.BIPxElementConverter.newTypeSpec(java.lang.String) -->
<method name="newTypeSpec"  public="true" default="true">
<description>
Given the original type name, return the modified typeSpec if the original type changed or&#xa; it was moved to new module or module was renamed.
</description>
<parameter name="typeName">
<type class="java.lang.String"/>
<description>
the original typeSpec name
</description>
</parameter>
<return>
<parameterizedType class="java.util.Optional">
<args>
<type class="java.lang.String"/>
</args>
</parameterizedType>
<description>
a new typeSpec
</description>
</return>
</method>

<!-- javax.baja.migration.BIPxElementConverter.newModule(java.lang.String) -->
<method name="newModule"  public="true" default="true">
<description>
Given the original module return modified module if the original changed or&#xa; module was renamed.
</description>
<parameter name="moduleName">
<type class="java.lang.String"/>
<description>
the original module name
</description>
</parameter>
<return>
<parameterizedType class="java.util.Optional">
<args>
<type class="java.lang.String"/>
</args>
</parameterizedType>
<description>
a new module name
</description>
</return>
</method>

<!-- javax.baja.migration.BIPxElementConverter.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

<!-- javax.baja.migration.BIPxElementConverter.log -->
<field name="log"  public="true" static="true" final="true">
<type class="java.util.logging.Logger"/>
<description/>
</field>

</class>
</bajadoc>
