<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="migration" runtimeProfile="rt" qualifiedName="javax.baja.migration.ConverterRegistry" name="ConverterRegistry" packageName="javax.baja.migration" public="true">
<description>
ConverterRegistry&#xa;&#xa; This class manages a registry of &lt;code&gt;<see ref="javax.baja.migration.BIBogElementConverter">javax.baja.migration.BIBogElementConverter</see>&lt;/code&gt;s, which are registered&#xa; on Niagara AX types to convert them to Niagara 4.
</description>
<tag name="@author">&lt;a href=&#x22;mailto:craig.gemmill@tridium.com&#x22;&gt;Craig Gemmill&lt;/a&gt;</tag>
<extends>
<type class="java.lang.Object"/>
</extends>
<!-- javax.baja.migration.ConverterRegistry() -->
<constructor name="ConverterRegistry" public="true">
<description/>
</constructor>

<!-- javax.baja.migration.ConverterRegistry.initialize() -->
<method name="initialize"  public="true" static="true">
<description>
Initialize our registry of bogConverters.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.migration.ConverterRegistry.lookUpPackageConversion(java.lang.String) -->
<method name="lookUpPackageConversion"  public="true" static="true">
<description>
Check for a registered package conversion for the specified package.
</description>
<parameter name="packageName">
<type class="java.lang.String"/>
<description>
specify a java package name
</description>
</parameter>
<return>
<type class="java.lang.String"/>
<description>
a modified package name or null if no conversion needed
</description>
</return>
</method>

<!-- javax.baja.migration.ConverterRegistry.lookupPxConverters(java.lang.String) -->
<method name="lookupPxConverters"  public="true" static="true">
<annotation><type class="java.lang.SuppressWarnings"/>
<elementValue name="value">
<annotationValue kind="array">
<elementArray>
<annotationValue kind="expr">
<expression>&#x22;unchecked&#x22;</expression>
</annotationValue>
</elementArray>
</annotationValue>
</elementValue>
</annotation>
<description>
Lookup the &lt;code&gt;<see ref="javax.baja.migration.BIPxElementConverter">javax.baja.migration.BIPxElementConverter</see>&lt;/code&gt;s that can handle a given typespec or module by name&#xa; from a Px file.&#xa; &lt;p&gt;&#xa; This returns the list of pxConverters it finds that can convert all of the various classes in the&#xa; hierarchy of a particular Niagara &lt;code&gt;<see ref="javax.baja.sys.Type">javax.baja.sys.Type</see>&lt;/code&gt;. The list is ordered from superclass to subclass,&#xa; and &lt;b&gt;MUST&lt;/b&gt; be applied in that order.
</description>
<parameter name="moduleOrTypeName">
<type class="java.lang.String"/>
<description>
a typespec name
</description>
</parameter>
<return>
<parameterizedType class="java.util.List">
<args>
<type class="javax.baja.migration.BIPxElementConverter"/>
</args>
</parameterizedType>
<description>
the ordered list of bogConverters to apply for that type.
</description>
</return>
</method>

<!-- javax.baja.migration.ConverterRegistry.lookupConverters(java.lang.String) -->
<method name="lookupConverters"  public="true" static="true">
<annotation><type class="java.lang.SuppressWarnings"/>
<elementValue name="value">
<annotationValue kind="array">
<elementArray>
<annotationValue kind="expr">
<expression>&#x22;unchecked&#x22;</expression>
</annotationValue>
</elementArray>
</annotationValue>
</elementValue>
</annotation>
<description>
Lookup the &lt;code&gt;<see ref="javax.baja.migration.BIBogElementConverter">javax.baja.migration.BIBogElementConverter</see>&lt;/code&gt;s that can handle a given typespec or module by&#xa; name from a bog file.&#xa; &lt;p&gt;&#xa; This returns the list of bogConverters it finds that can convert all of the various classes in the&#xa; hierarchy of a particular Niagara &lt;code&gt;<see ref="javax.baja.sys.Type">javax.baja.sys.Type</see>&lt;/code&gt;.  The list is ordered from superclass&#xa; to subclass, and &lt;b&gt;MUST&lt;/b&gt; be applied in that order.
</description>
<parameter name="moduleOrTypeName">
<type class="java.lang.String"/>
<description>
a typespec or module name
</description>
</parameter>
<return>
<parameterizedType class="java.util.List">
<args>
<type class="javax.baja.migration.BIBogElementConverter"/>
</args>
</parameterizedType>
<description>
the ordered list of bogConverters to apply for that type.
</description>
</return>
</method>

<!-- javax.baja.migration.ConverterRegistry.main(java.lang.String...) -->
<method name="main"  public="true" static="true" isVarargs="true">
<description>
Command line check for the list of available bogConverters, and to identify the converter&#xa; for a particular type.&#xa; If invoked with no arguments, this will list all the bogConverters registered along with the&#xa; types they claim to convert.&#xa; If invoked with one or more arguments, each argument is interpreted as a module or type name&#xa; to be used to lookup a converter, and the converter for that name is displayed.
</description>
<parameter name="args">
<type class="java.lang.String" dimension="1"/>
<description>
list of module/type names.
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.migration.ConverterRegistry.log -->
<field name="log"  public="true" static="true" final="true">
<type class="java.util.logging.Logger"/>
<description/>
</field>

</class>
</bajadoc>
