<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="driver" runtimeProfile="wb" qualifiedName="javax.baja.driver.ui.device.DeviceExtsColumn" name="DeviceExtsColumn" packageName="javax.baja.driver.ui.device" public="true">
<description>
DeviceExtColumns is used to provide a table column with quick&#xa; links to the device&#x27;s BDeviceExt.  Each extension is displayed&#xa; as an icon.  By convention the DeviceExtsColumn should go right&#xa; after the type column.  Starting in 3.4, it won&#x27;t display &#xa; device exts marked as hidden.
</description>
<tag name="@author">Brian Frank</tag>
<tag name="@creation">15 Dec 03</tag>
<tag name="@version">$Revision: 3$ $Date: 7/22/08 3:11:49 PM EDT$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="javax.baja.workbench.mgr.MgrColumn"/>
</extends>
<!-- javax.baja.driver.ui.device.DeviceExtsColumn(javax.baja.driver.BDevice) -->
<constructor name="DeviceExtsColumn" public="true">
<parameter name="protoType">
<type class="javax.baja.driver.BDevice"/>
</parameter>
<description>
Constructor with flags set to zero.
</description>
</constructor>

<!-- javax.baja.driver.ui.device.DeviceExtsColumn(javax.baja.driver.BDevice, int) -->
<constructor name="DeviceExtsColumn" public="true">
<parameter name="protoType">
<type class="javax.baja.driver.BDevice"/>
</parameter>
<parameter name="flags">
<type class="int"/>
</parameter>
<description>
Constructor with specified flags.
</description>
</constructor>

<!-- javax.baja.driver.ui.device.DeviceExtsColumn(javax.baja.driver.BDevice, boolean) -->
<constructor name="DeviceExtsColumn" public="true">
<parameter name="protoType">
<type class="javax.baja.driver.BDevice"/>
</parameter>
<parameter name="dynamicExts">
<type class="boolean"/>
<description>
When set to true, this causes each row to compute its own&#xa; selection of available device exts.  This comes at the expense&#xa; of performance, however.  If you know that all rows in your&#xa; table support the same device exts, you should leave the default&#xa; (false).
</description>
</parameter>
<description>
Constructor with flags set to zero and dynamic specifier.
</description>
<tag name="@since">Niagara 3.4</tag>
</constructor>

<!-- javax.baja.driver.ui.device.DeviceExtsColumn(javax.baja.driver.BDevice, int, boolean) -->
<constructor name="DeviceExtsColumn" public="true">
<parameter name="protoType">
<type class="javax.baja.driver.BDevice"/>
</parameter>
<parameter name="flags">
<type class="int"/>
</parameter>
<parameter name="dynamicExts">
<type class="boolean"/>
<description>
When set to true, this causes each row to compute its own&#xa; selection of available device exts.  This comes at the expense&#xa; of performance, however.  If you know that all rows in your&#xa; table support the same device exts, you should leave the default&#xa; (false).
</description>
</parameter>
<description>
Constructor with specified flags and dynamic specifier.
</description>
<tag name="@since">Niagara 3.4</tag>
</constructor>

<!-- javax.baja.driver.ui.device.DeviceExtsColumn.setDynamicExts(boolean) -->
<method name="setDynamicExts"  public="true">
<description>
When set to true, this causes each row to compute its own&#xa; selection of available device exts.  This comes at the expense&#xa; of performance, however.  If you know that all rows in your&#xa; table support the same device exts, you should leave the default&#xa; (false).
</description>
<tag name="@since">Niagara 3.4</tag>
<parameter name="dynamicExts">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.driver.ui.device.DeviceExtsColumn.get(java.lang.Object) -->
<method name="get"  public="true">
<description/>
<parameter name="row">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="java.lang.Object"/>
</return>
</method>

<!-- javax.baja.driver.ui.device.DeviceExtsColumn.getCellRenderer() -->
<method name="getCellRenderer"  public="true">
<description/>
<return>
<type class="javax.baja.ui.table.TableCellRenderer"/>
</return>
</method>

</class>
</bajadoc>
