<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="obixDriver" runtimeProfile="rt" qualifiedName="javax.baja.obix.io.BIObixWatchable" name="BIObixWatchable" packageName="javax.baja.obix.io" public="true" interface="true" abstract="true" category="interface">
<description>
For objects wishing to control behavior in watches (subscriptions).  &#xa; Can be implemented by either agents on objects or by objects directly.
</description>
<tag name="@author">Aaron Hansen</tag>
<tag name="@creation">May 2006</tag>
<tag name="@since">Niagara 3.1</tag>
<tag name="@version">$Revision: $ $Date: $</tag>
<implements>
<type class="javax.baja.sys.BInterface"/>
</implements>
<!-- javax.baja.obix.io.BIObixWatchable.getWatchHref() -->
<method name="getWatchHref"  public="true" abstract="true">
<description>
Should return the href as specified in watchInit.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.obix.io.BIObixWatchable.getWatchTarget(javax.baja.sys.Context) -->
<method name="getWatchTarget"  public="true" abstract="true">
<description>
Should return the target specified in initWatch.
</description>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="javax.baja.naming.OrdTarget"/>
</return>
</method>

<!-- javax.baja.obix.io.BIObixWatchable.watchCleanup() -->
<method name="watchCleanup"  public="true" abstract="true">
<description>
The object is being removed from a watch.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.obix.io.BIObixWatchable.watchInit(javax.baja.xml.XElem, javax.baja.naming.OrdTarget) -->
<method name="watchInit"  public="true" abstract="true">
<description>
Cache the arguments and prepare for calls to changes and&#xa; refresh.  The uri argument is the oBIX uri object from the&#xa; add operation on the watch.
</description>
<parameter name="uri">
<type class="javax.baja.xml.XElem"/>
</parameter>
<parameter name="target">
<type class="javax.baja.naming.OrdTarget"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.obix.io.BIObixWatchable.watchChanges(javax.baja.obix.io.ObixEncoder, javax.baja.sys.Context) -->
<method name="watchChanges"  public="true" abstract="true">
<description>
Should encode changes since the last call to changes or refresh.  If&#xa; there have been no changes, nothing should be encoded.
</description>
<parameter name="out">
<type class="javax.baja.obix.io.ObixEncoder"/>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.obix.io.BIObixWatchable.watchRefresh(javax.baja.obix.io.ObixEncoder, javax.baja.sys.Context) -->
<method name="watchRefresh"  public="true" abstract="true">
<description>
Should encode the state of the target regardless if there have&#xa; been changes or not.
</description>
<parameter name="out">
<type class="javax.baja.obix.io.ObixEncoder"/>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.obix.io.BIObixWatchable.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
