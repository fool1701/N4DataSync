<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="obixDriver" runtimeProfile="rt" qualifiedName="javax.baja.obix.io.BIObixInvocable" name="BIObixInvocable" packageName="javax.baja.obix.io" public="true" interface="true" abstract="true" category="interface">
<description>
Overrides default obix invocation.
</description>
<tag name="@author">Aaron Hansen</tag>
<tag name="@creation">Sept 2005</tag>
<tag name="@since">Niagara 3.1</tag>
<tag name="@version">$Revision: $ $Date: $</tag>
<implements>
<type class="javax.baja.sys.BInterface"/>
</implements>
<!-- javax.baja.obix.io.BIObixInvocable.invoke(javax.baja.obix.io.ObixDecoder, javax.baja.obix.io.ObixEncoder) -->
<method name="invoke"  public="true" abstract="true">
<description>
The encoder is preconfigured for you, specifically the name,&#xa; href, and ref properties apply to you. If you encode children of&#xa; yourself, be sure to indent appropriately.  It is perfectly safe to&#xa; jump back into default encoding by calling encode on the encoder.&#xa; The decoder is for parameters and is also the context needed for&#xa; encoding.
</description>
<parameter name="in">
<type class="javax.baja.obix.io.ObixDecoder"/>
</parameter>
<parameter name="out">
<type class="javax.baja.obix.io.ObixEncoder"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.obix.io.BIObixInvocable.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
