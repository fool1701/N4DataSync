<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="fox" runtimeProfile="rt" qualifiedName="javax.baja.fox.BFoxProxySession" name="BFoxProxySession" packageName="javax.baja.fox" public="true" abstract="true">
<description>
BFoxProxySession is used to open a full-fledged connection to&#xa; a remote station VM.  A FoxProxySession provides all the component&#xa; proxy functionality available in a workbench VM, however this API &#xa; may be used to open sessions to a remote VM within a station.  &#xa; Please note that using this API to manipulate a remote station &#xa; carries with it a great deal of overhead, setting up a FoxProxySession&#xa; requires a series of setup messaging and oodles of memory. So when&#xa; possible you should try to use existing station-to-station peer&#xa; features like proxy points which use much lighter weight connections&#xa; and handshaking.&#xa; &lt;p&gt;&#xa; Just like FoxSessions work in workbench, using this API within&#xa; a station means that there is exactly one FoxProxySession for&#xa; a given host/port which the entire VM shares.  Therefore you must &#xa; be a good citizen when working with the session in case other &#xa; applications or threads are also working with the same proxy session.  &#xa; This is especially important in setting up and tearing down the &#xa; connection - if you use disconnect(), or close() then you are forcing &#xa; the entire session closed without regard to who else might be using &#xa; it.  So as a general rule you should use the engage() or disengage()&#xa; methods for connection setup and teardown.  These methods take&#xa; a String called the &#x22;interest&#x22; which unique identifies the application &#xa; using the session.  Under the covers, the connection will perform &#xa; reference counting, such that the disengage doesn&#x27;t close the session &#xa; until the last interest is finished.  You can debug current interests &#xa; using the spy pages.  Also note that you can engage with no retry or &#xa; with retries.
</description>
<tag name="@author">Brian Frank on 19 Dec 06</tag>
<tag name="@version">$Revision: 3$ $Date: 10/1/10 10:16:47 AM EDT$</tag>
<tag name="@since">Niagara 3.2</tag>
<extends>
<type class="javax.baja.naming.BSession"/>
</extends>
<implements>
<type class="javax.baja.security.AuthenticationRealm"/>
</implements>
<!-- javax.baja.fox.BFoxProxySession(java.lang.String) -->
<constructor name="BFoxProxySession" protected="true">
<parameter name="name">
<type class="java.lang.String"/>
</parameter>
<description>
Framework use only.
</description>
</constructor>

<!-- javax.baja.fox.BFoxProxySession.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.fox.BFoxProxySession.make(javax.baja.naming.BHost, int, java.lang.String, java.lang.String) -->
<method name="make"  public="true" static="true">
<annotation><type class="java.lang.Deprecated"/>
</annotation>
<description>
Make a session which will full proxy access to the &#xa; specified host and port and the specified credentials. &#xa; If the session is currently open using different credentials&#xa; then an IllegalStateException is thrown.
</description>
<tag name="@deprecated">As of Niagara 4.0, use one of the other make methods that takes the useFoxs&#xa; parameter instead.</tag>
<parameter name="host">
<type class="javax.baja.naming.BHost"/>
</parameter>
<parameter name="port">
<type class="int"/>
</parameter>
<parameter name="username">
<type class="java.lang.String"/>
</parameter>
<parameter name="password">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.fox.BFoxProxySession"/>
</return>
</method>

<!-- javax.baja.fox.BFoxProxySession.make(javax.baja.naming.BHost, int, boolean, java.lang.String, java.lang.String) -->
<method name="make"  public="true" static="true">
<description/>
<parameter name="host">
<type class="javax.baja.naming.BHost"/>
</parameter>
<parameter name="port">
<type class="int"/>
</parameter>
<parameter name="useFoxs">
<type class="boolean"/>
</parameter>
<parameter name="username">
<type class="java.lang.String"/>
</parameter>
<parameter name="password">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.fox.BFoxProxySession"/>
</return>
</method>

<!-- javax.baja.fox.BFoxProxySession.make(javax.baja.naming.BHost, int, boolean, javax.baja.security.BIUserCredentials) -->
<method name="make"  public="true" static="true">
<description/>
<parameter name="host">
<type class="javax.baja.naming.BHost"/>
</parameter>
<parameter name="port">
<type class="int"/>
</parameter>
<parameter name="useFoxs">
<type class="boolean"/>
</parameter>
<parameter name="credentials">
<type class="javax.baja.security.BIUserCredentials"/>
</parameter>
<return>
<type class="javax.baja.fox.BFoxProxySession"/>
</return>
</method>

<!-- javax.baja.fox.BFoxProxySession.getPort() -->
<method name="getPort"  public="true" abstract="true">
<description>
Get the TCP port for the session.
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.fox.BFoxProxySession.getStationName() -->
<method name="getStationName"  public="true" abstract="true">
<description>
Get the remote station name or null if unknown.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.fox.BFoxProxySession.getUsername() -->
<method name="getUsername"  public="true" abstract="true">
<description>
Get the username currently being used for the connection.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.fox.BFoxProxySession.getLastFailureTime() -->
<method name="getLastFailureTime"  public="true" abstract="true">
<description>
Get the last time a connection attempt failed.
</description>
<return>
<type class="javax.baja.sys.BAbsTime"/>
</return>
</method>

<!-- javax.baja.fox.BFoxProxySession.getLastFailureCause() -->
<method name="getLastFailureCause"  public="true" abstract="true">
<description>
Get the reason for the last connection attempt failure.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.fox.BFoxProxySession.getRetryPeriod() -->
<method name="getRetryPeriod"  public="true" abstract="true">
<description>
Get the time to wait before retrying a &#xa; connection attempt after a failure.
</description>
<return>
<type class="javax.baja.sys.BRelTime"/>
</return>
</method>

<!-- javax.baja.fox.BFoxProxySession.setRetryPeriod(javax.baja.sys.BRelTime) -->
<method name="setRetryPeriod"  public="true" abstract="true">
<description>
Set the time to wait before retrying a connection &#xa; attempt after a failure.
</description>
<parameter name="period">
<type class="javax.baja.sys.BRelTime"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.fox.BFoxProxySession.getNextAttemptTime() -->
<method name="getNextAttemptTime"  public="true" abstract="true">
<description>
Get the next time we will attempt a connection &#xa; after a failure.
</description>
<return>
<type class="javax.baja.sys.BAbsTime"/>
</return>
</method>

<!-- javax.baja.fox.BFoxProxySession.&lt;R&gt;rpc(javax.baja.naming.BOrd, java.lang.String, java.lang.Object...) -->
<method name="rpc"  public="true" isVarargs="true">
<typeParameters>
<typeVariable class="R">
<description>
The returned value type.
</description>
</typeVariable>
</typeParameters>
<description>
Make a Niagara RPC call.
</description>
<tag name="@see">javax.baja.rpc.NiagaraRpc</tag>
<parameter name="ord">
<type class="javax.baja.naming.BOrd"/>
<description>
The ORD for the RPC.
</description>
</parameter>
<parameter name="methodName">
<type class="java.lang.String"/>
<description>
The method name.
</description>
</parameter>
<parameter name="args">
<type class="java.lang.Object" dimension="1"/>
<description>
The arguments to use in the RPC call.
</description>
</parameter>
<return>
<parameterizedType class="java.util.Optional">
<args>
<typeVariable class="R"/>
</args>
</parameterizedType>
<description>
The return value from the RPC call.
</description>
</return>
<throws>
<type class="java.lang.Exception"/>
<description/>
</throws>
</method>

<!-- javax.baja.fox.BFoxProxySession.isEngaged(java.lang.String) -->
<method name="isEngaged"  public="true" abstract="true">
<description>
Is the specified interest already engaged.
</description>
<parameter name="interest">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.fox.BFoxProxySession.engageNoRetry(java.lang.String) -->
<method name="engageNoRetry"  public="true" abstract="true">
<description>
Convenience for &lt;code&gt;engageNoRetry(interest, 5000)&lt;/code&gt;.
</description>
<parameter name="interest">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.fox.BFoxProxySession.engageNoRetry(java.lang.String, long) -->
<method name="engageNoRetry"  public="true" abstract="true">
<description>
Engage with the specified interest.  If the connection&#xa; cannot be made throw the cause exception to the caller.  &#xa; The connection attempt is short circuited if the last &#xa; failure occured within the fail fast period.&#xa; See class header for more information.
</description>
<parameter name="interest">
<type class="java.lang.String"/>
</parameter>
<parameter name="failFastPeriod">
<type class="long"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.fox.BFoxProxySession.engageRetry(java.lang.String) -->
<method name="engageRetry"  public="true" abstract="true">
<description>
Engage with the specified interest.  This method blocks&#xa; forever until a connection is successfully made.  If a&#xa; failure is encountered then the thread sleeps for retryPeriod&#xa; and then does a retry.  Interest must be a string key&#xa; unique for the VM used for reference counting.   &#xa; See class header for more information.
</description>
<parameter name="interest">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.fox.BFoxProxySession.disengage(java.lang.String) -->
<method name="disengage"  public="true" abstract="true">
<description>
Disengage with the specified interest.  The interest&#xa; must be the same string key passed to the engage&#xa; method.  If all interests have been disengaged, then&#xa; the connection is closed - this allows multiple&#xa; applications to share the same session connection.&#xa; Note unlike standard station-to-station there is&#xa; no linger timeout for the connection.  See class &#xa; header for more information.
</description>
<parameter name="interest">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.fox.BFoxProxySession.userActivity() -->
<method name="userActivity"  public="true">
<description>
Record activity on the session
</description>
<tag name="@since">Niagara 4.4</tag>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.fox.BFoxProxySession.addNotifyListener(javax.baja.fox.BFoxProxySession.NotifyListener) -->
<method name="addNotifyListener"  public="true">
<description>
Add a new NotifyListener to be notified when the session is about to timeout.&#xa; Only the first NotifyListener in the list will be notified, later listeners&#xa; will be notified only if all notifiers before them are removed.
</description>
<tag name="@since">Niagara 4.4</tag>
<parameter name="listener">
<type class="javax.baja.fox.BFoxProxySession$NotifyListener"/>
<description>
the NotifyListener to add
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.fox.BFoxProxySession.removeNotifyListener(javax.baja.fox.BFoxProxySession.NotifyListener) -->
<method name="removeNotifyListener"  public="true">
<description>
Remove a NotifyListener
</description>
<tag name="@since">Niagara 4.4</tag>
<parameter name="listener">
<type class="javax.baja.fox.BFoxProxySession$NotifyListener"/>
<description>
the NotifyListener to remove
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.fox.BFoxProxySession.pauseActivityMonitor() -->
<method name="pauseActivityMonitor"  public="true">
<description>
Pause the session timeout. The session timeout will be paused until resumeActivityMonitor() is&#xa; called the same number of times that pauseActivityMonitor() is called. It is very important that&#xa; each call to pauseActivityMonitor() has a matching call to resumeActivityMonitor(), otherwise the&#xa; session could remain paused forever.
</description>
<tag name="@since">Niagara 4.4</tag>
<return>
<type class="java.lang.Object"/>
<description>
a unique token that must be provided to resume()
</description>
</return>
</method>

<!-- javax.baja.fox.BFoxProxySession.resumeActivityMonitor(java.lang.Object) -->
<method name="resumeActivityMonitor"  public="true">
<description>
Remove a &#x22;pause&#x22; on the session timeout. The timeout can be paused by multiple callers, and will&#xa; not resume until all callers call resumeActivityMonitor(). When the final &#x22;pause&#x22; is removed, the&#xa; session timeout will also be reset.
</description>
<tag name="@since">Niagara 4.4</tag>
<parameter name="token">
<type class="java.lang.Object"/>
<description>
the unique token that was returned by pause()
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.fox.BFoxProxySession.connect() -->
<method name="connect"  public="true" abstract="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Connect to remote station using current credentials.&#xa; Sessions within a station should use engage() instead;&#xa; see class header for more information.
</description>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.fox.BFoxProxySession.disconnect() -->
<method name="disconnect"  public="true" abstract="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Disconnect from remote system.&#xa; Sessions within a station should use disengage() &#xa; instead; see class header for more information.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.fox.BFoxProxySession.close() -->
<method name="close"  public="true" abstract="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Disconnect and remove the BFoxSession from the navigation tree.&#xa; Sessions within a station should use disengage() &#xa; instead; see class header for more information.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.fox.BFoxProxySession.getAuthenticationRealmName() -->
<method name="getAuthenticationRealmName"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.fox.BFoxProxySession.getAuthenticationScheme() -->
<method name="getAuthenticationScheme"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.fox.BFoxProxySession.getAvailableAuthenticationSchemes() -->
<method name="getAvailableAuthenticationSchemes"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="java.lang.String" dimension="1"/>
</return>
</method>

<!-- javax.baja.fox.BFoxProxySession.getDefaultAuthenticationScheme() -->
<method name="getDefaultAuthenticationScheme"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.fox.BFoxProxySession.makeCredentials() -->
<method name="makeCredentials"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.security.BICredentials"/>
</return>
</method>

<!-- javax.baja.fox.BFoxProxySession.getCredentials() -->
<method name="getCredentials"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.security.BICredentials"/>
</return>
</method>

<!-- javax.baja.fox.BFoxProxySession.setCredentials(javax.baja.security.BICredentials) -->
<method name="setCredentials"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="credentials">
<type class="javax.baja.security.BICredentials"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.fox.BFoxProxySession.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
