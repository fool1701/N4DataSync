<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="baja" runtimeProfile="rt" qualifiedName="javax.baja.tag.Relations" name="Relations" packageName="javax.baja.tag" public="true" interface="true" abstract="true" category="interface">
<description>
Relations is used to store a collection of &lt;code&gt;<see ref="javax.baja.tag.Relation">Relation</see>&lt;/code&gt; objects. A Relations collection&#xa; is semantically equivalent to a mathematical &lt;i&gt;set&lt;/i&gt;: it is an unordered collection of&#xa; distinct &lt;code&gt;<see ref="javax.baja.tag.Relation">Relation</see>&lt;/code&gt; objects.&#xa; &lt;p&gt;&#xa; The general behavioral contract of Relations is&#xa; &lt;ul&gt;&#xa; &lt;li&gt;Depending on the concrete implementation, all methods that set or add relations&#xa; to the collection may throw &lt;code&gt;<see ref="java.lang.IllegalArgumentException">IllegalArgumentException</see>&lt;/code&gt; if some property of the&#xa; input arguments prevents the method from succeeding. This is often the case if&#xa; a relation is &#x22;implied&#x22; or &#x22;frozen&#x22; by the concrete implementation of Relations.&lt;/li&gt;&#xa; &lt;li&gt;Because of the above property, none of the removal operations are guaranteed to&#xa; succeed. However, they &lt;strong&gt;&lt;i&gt;SHOULD&lt;/i&gt;&lt;/strong&gt; never throw exceptions. Instead&#xa; they should return &lt;code&gt;false&lt;/code&gt; in that case.&lt;/li&gt;&#xa; &lt;li&gt;Because of the above properties it should be evident that a Relations collection&#xa; might never be empty.&lt;/li&gt;&#xa; &lt;li&gt;This interface requires non-null arguments for all methods and must be enforced&#xa; by the implementation.&lt;/li&gt;&#xa; &lt;/ul&gt;&#xa; &lt;p&gt;&#xa; Unlike &lt;code&gt;<see ref="javax.baja.tag.Tags">Tags</see>&lt;/code&gt;, there is no distinction between single-value and multi-value relations. This&#xa; means that for any id there may be multiple relations. An implementation &lt;strong&gt;must&lt;/strong&gt;&#xa; always allow multiple relations with the same id.&#xa; &lt;p&gt;&#xa; You can never assume an ordering for any of the methods that return a&#xa; &lt;code&gt;Collection&amp;lt;Relation&amp;gt;&lt;/code&gt;, but it is guaranteed that all relations in the collection are&#xa; unique.
</description>
<tag name="@author">&lt;a href=&#x22;mailto:mgiannini@tridium.com&#x22;&gt;Matthew Giannini&lt;/a&gt;</tag>
<implements>
<parameterizedType class="java.lang.Iterable">
<args>
<type class="javax.baja.tag.Relation"/>
</args>
</parameterizedType>
</implements>
<!-- javax.baja.tag.Relations.set(javax.baja.tag.Id, java.util.Collection&lt;? extends javax.baja.tag.Entity&gt;) -->
<method name="set"  public="true" abstract="true">
<description>
Create inbound relations with the given id to all the given endpoints and return the newly&#xa; created relations. Any existing relations with the given id are overwritten.
</description>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
<description>
the id for all the relations
</description>
</parameter>
<parameter name="endpoints">
<parameterizedType class="java.util.Collection">
<args>
<wildcardType class="?">
<bounds kind="extends">
<type class="javax.baja.tag.Entity"/>
</bounds>
</wildcardType>
</args>
</parameterizedType>
<description>
the endpoints to create relations for
</description>
</parameter>
<return>
<parameterizedType class="java.util.Collection">
<args>
<type class="javax.baja.tag.Relation"/>
</args>
</parameterizedType>
<description>
a &lt;code&gt;Collection&amp;lt;Relation&amp;gt;&lt;/code&gt; of all the newly created relations
</description>
</return>
</method>

<!-- javax.baja.tag.Relations.set(javax.baja.tag.Id, java.util.Collection&lt;? extends javax.baja.tag.Entity&gt;, boolean) -->
<method name="set"  public="true" abstract="true">
<description>
Create relations of the given direction with the given id to all the given endpoints and return&#xa; the newly created relations. Any existing relations with the given id are overwritten.
</description>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
<description>
the id for all the relations
</description>
</parameter>
<parameter name="endpoints">
<parameterizedType class="java.util.Collection">
<args>
<wildcardType class="?">
<bounds kind="extends">
<type class="javax.baja.tag.Entity"/>
</bounds>
</wildcardType>
</args>
</parameterizedType>
<description>
the endpoints to create relations for
</description>
</parameter>
<parameter name="isInbound">
<type class="boolean"/>
<description>
true if relation direction is from the endpoints
</description>
</parameter>
<return>
<parameterizedType class="java.util.Collection">
<args>
<type class="javax.baja.tag.Relation"/>
</args>
</parameterizedType>
<description>
a &lt;code&gt;Collection&amp;lt;Relation&amp;gt;&lt;/code&gt; for all the newly created relations
</description>
</return>
</method>

<!-- javax.baja.tag.Relations.set(javax.baja.tag.Id, javax.baja.tag.Entity) -->
<method name="set"  public="true" default="true">
<description>
Create an inbound relation with the given id and endpoint and overwrite any existing relations&#xa; with that id.
</description>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
<description>
the id for the relation
</description>
</parameter>
<parameter name="endpoint">
<type class="javax.baja.tag.Entity"/>
<description>
the endpoint of the new relation
</description>
</parameter>
<return>
<type class="javax.baja.tag.Relation"/>
<description>
the new relation
</description>
</return>
</method>

<!-- javax.baja.tag.Relations.add(javax.baja.tag.Relation) -->
<method name="add"  public="true" abstract="true">
<description>
Add the given relation to the set of relations. The tags will be preserved in the&#xa; new relation. Implementations are not required to return the input relation as the result.&#xa; &lt;p&gt;&#xa; If the relation already exists, then the tags are &lt;code&gt;<see ref="javax.baja.tag.Tags#merge(java.util.Collection&lt;javax.baja.tag.Tag&gt;)">merged</see>&lt;/code&gt;&#xa; and the existing relation is returned.&#xa; &lt;p&gt;&#xa; &lt;strong&gt;It is never valid to assume that the returned relation object is the same as the&#xa; input relation!&lt;/strong&gt;&#xa; &lt;pre&gt;&lt;code&gt;&amp;#xa;   // This is not necessarily true!&amp;#xa;   //&amp;#xa;   Relation relation = new BasicRelation(id, entity);&amp;#xa;   assert relation == entity.add(relation);&amp;#xa;&amp;#xa;   // But this is always true&amp;#xa;   //&amp;#xa;   Relation addedRelation = entity.add(relation);&amp;#xa;   assert relation.id.equals(addedRelation.id) &amp;amp;&amp;amp;&amp;#xa;          relation.endpoint.equals(addedRelation.endpoint);&amp;#xa; &lt;/code&gt;&lt;/pre&gt;
</description>
<parameter name="relation">
<type class="javax.baja.tag.Relation"/>
<description>
the relation to add
</description>
</parameter>
<return>
<type class="javax.baja.tag.Relation"/>
<description>
the newly added relation
</description>
</return>
</method>

<!-- javax.baja.tag.Relations.add(javax.baja.tag.Id, javax.baja.tag.Entity) -->
<method name="add"  public="true" default="true">
<description>
Create an outbound relation with the given id for the given endpoint and add it to the set of&#xa; relations. If the relation already exists, the tags are merged as in &lt;code&gt;<see ref="javax.baja.tag.Relations#add(javax.baja.tag.Relation)">#add(Relation)</see>&lt;/code&gt;.
</description>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
<description>
the id for the relation
</description>
</parameter>
<parameter name="endpoint">
<type class="javax.baja.tag.Entity"/>
<description>
the endpoint of the new relation
</description>
</parameter>
<return>
<type class="javax.baja.tag.Relation"/>
<description>
the new relation
</description>
</return>
</method>

<!-- javax.baja.tag.Relations.add(javax.baja.tag.Id, javax.baja.tag.Entity, boolean) -->
<method name="add"  public="true" default="true">
<description>
Create a relation of the given direction with the given id for the given endpoint and add it to&#xa; the set of relations. If the relation already exists, the tags are merged as in &lt;code&gt;<see ref="javax.baja.tag.Relations#add(javax.baja.tag.Relation)">#add(Relation)</see>&lt;/code&gt;.
</description>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
<description>
the id for the relation
</description>
</parameter>
<parameter name="endpoint">
<type class="javax.baja.tag.Entity"/>
<description>
the endpoint of the new relation
</description>
</parameter>
<parameter name="isInbound">
<type class="boolean"/>
<description>
true if relation direction is from the endpoint
</description>
</parameter>
<return>
<type class="javax.baja.tag.Relation"/>
<description>
the new relation
</description>
</return>
</method>

<!-- javax.baja.tag.Relations.add(javax.baja.tag.Id, java.util.Collection&lt;? extends javax.baja.tag.Entity&gt;) -->
<method name="add"  public="true" default="true">
<description>
Create outbound relations with the given id for each given endpoint and add them to the set of&#xa; relations. If the relation already exists, the tags are merged as in &lt;code&gt;<see ref="javax.baja.tag.Relations#add(javax.baja.tag.Relation)">#add(Relation)</see>&lt;/code&gt;.
</description>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
<description>
the id for each relation
</description>
</parameter>
<parameter name="endpoints">
<parameterizedType class="java.util.Collection">
<args>
<wildcardType class="?">
<bounds kind="extends">
<type class="javax.baja.tag.Entity"/>
</bounds>
</wildcardType>
</args>
</parameterizedType>
<description>
the endpoints to add relations for
</description>
</parameter>
<return>
<parameterizedType class="java.util.Collection">
<args>
<type class="javax.baja.tag.Relation"/>
</args>
</parameterizedType>
<description>
a &lt;code&gt;Collection&amp;lt;Relation&amp;gt;&lt;/code&gt; of all the newly created relations
</description>
</return>
</method>

<!-- javax.baja.tag.Relations.add(javax.baja.tag.Id, java.util.Collection&lt;? extends javax.baja.tag.Entity&gt;, boolean) -->
<method name="add"  public="true" default="true">
<description>
Create relations of the given direction with the given id for each given endpoint and add them&#xa; to the set of relations. If the relation already exists, the tags are merged as in &lt;code&gt;<see ref="javax.baja.tag.Relations#add(javax.baja.tag.Relation)">#add(Relation)</see>&lt;/code&gt;.
</description>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
<description>
the id for each relation
</description>
</parameter>
<parameter name="endpoints">
<parameterizedType class="java.util.Collection">
<args>
<wildcardType class="?">
<bounds kind="extends">
<type class="javax.baja.tag.Entity"/>
</bounds>
</wildcardType>
</args>
</parameterizedType>
<description>
the endpoints to add relations for
</description>
</parameter>
<parameter name="isInbound">
<type class="boolean"/>
<description>
true if the relation is to be the endpoint entities to add relations for
</description>
</parameter>
<return>
<parameterizedType class="java.util.Collection">
<args>
<type class="javax.baja.tag.Relation"/>
</args>
</parameterizedType>
<description>
a &lt;code&gt;Collection&amp;lt;Relation&amp;gt;&lt;/code&gt; of all the newly created relations
</description>
</return>
</method>

<!-- javax.baja.tag.Relations.remove(javax.baja.tag.Relation) -->
<method name="remove"  public="true" abstract="true">
<description>
Attempt to remove the given relation.
</description>
<parameter name="relation">
<type class="javax.baja.tag.Relation"/>
</parameter>
<return>
<type class="boolean"/>
<description>
&lt;code&gt;true&lt;/code&gt; if the relation was removed
</description>
</return>
</method>

<!-- javax.baja.tag.Relations.remove(javax.baja.tag.Id, javax.baja.tag.Entity) -->
<method name="remove"  public="true" default="true">
<description>
Attempt to remove a relation with the given id and endpoint.
</description>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
<description>
the id of the relation to remove
</description>
</parameter>
<parameter name="endpoint">
<type class="javax.baja.tag.Entity"/>
<description>
the endpoint of the relation to remove
</description>
</parameter>
<return>
<type class="boolean"/>
<description>
&lt;code&gt;true&lt;/code&gt; if a relation was removed
</description>
</return>
</method>

<!-- javax.baja.tag.Relations.removeAll(javax.baja.tag.Id) -->
<method name="removeAll"  public="true" default="true">
<description>
Attempts to remove every relation with the given id.
</description>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
<description>
the id to remove relations for
</description>
</parameter>
<return>
<type class="boolean"/>
<description>
true if any relations were removed
</description>
</return>
</method>

<!-- javax.baja.tag.Relations.filter(java.util.function.Predicate&lt;javax.baja.tag.Relation&gt;, int) -->
<method name="filter"  public="true" abstract="true">
<description>
Get the subset of relations in the collection that satisfy the given predicate.&#xa; &lt;p&gt;&#xa; For example:&#xa; &lt;pre&gt;&lt;code&gt;&amp;#xa;   // Find all relations that are tagged&amp;#xa;   //&amp;#xa;   Collection&amp;lt;Relation&amp;gt; tagged = myEntity.relations().filter(r -&amp;gt; !r.tags().isEmpty());&amp;#xa; &lt;/code&gt;&lt;/pre&gt;
</description>
<parameter name="condition">
<parameterizedType class="java.util.function.Predicate">
<args>
<type class="javax.baja.tag.Relation"/>
</args>
</parameterizedType>
<description>
the condition to test for each relation
</description>
</parameter>
<parameter name="direction">
<type class="int"/>
<description>
the relation direction, IN, OUT, or BOTH, to get
</description>
</parameter>
<return>
<parameterizedType class="java.util.Collection">
<args>
<type class="javax.baja.tag.Relation"/>
</args>
</parameterizedType>
<description>
a &lt;code&gt;Collection&amp;lt;Relation&amp;gt;&lt;/code&gt; where every relation satisfies the condition
</description>
</return>
</method>

<!-- javax.baja.tag.Relations.getAll() -->
<method name="getAll"  public="true" default="true">
<description>
Get all the relations.
</description>
<return>
<parameterizedType class="java.util.Collection">
<args>
<type class="javax.baja.tag.Relation"/>
</args>
</parameterizedType>
<description>
a &lt;code&gt;Collection&amp;lt;Relation&amp;gt;&lt;/code&gt; containing every relation
</description>
</return>
</method>

<!-- javax.baja.tag.Relations.getAll(int) -->
<method name="getAll"  public="true" default="true">
<description>
Get all the relations with the given direction.
</description>
<parameter name="direction">
<type class="int"/>
<description>
the relation direction, IN, OUT, or BOTH, to get
</description>
</parameter>
<return>
<parameterizedType class="java.util.Collection">
<args>
<type class="javax.baja.tag.Relation"/>
</args>
</parameterizedType>
<description>
a &lt;code&gt;Collection&amp;lt;Relation&amp;gt;&lt;/code&gt; containing every relation
</description>
</return>
</method>

<!-- javax.baja.tag.Relations.get(javax.baja.tag.Id) -->
<method name="get"  public="true" default="true">
<description>
Get the first or only relation with the given id.
</description>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
<description>
id of the relation to get
</description>
</parameter>
<return>
<parameterizedType class="java.util.Optional">
<args>
<type class="javax.baja.tag.Relation"/>
</args>
</parameterizedType>
<description>
a relation with the given id or empty if the one is not found
</description>
</return>
</method>

<!-- javax.baja.tag.Relations.get(javax.baja.tag.Id, int) -->
<method name="get"  public="true" default="true">
<description>
Get the first or only relation with the given id and direction.
</description>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
<description>
id of the relation to get
</description>
</parameter>
<parameter name="direction">
<type class="int"/>
<description>
the relation direction, IN, OUT, or BOTH, to get
</description>
</parameter>
<return>
<parameterizedType class="java.util.Optional">
<args>
<type class="javax.baja.tag.Relation"/>
</args>
</parameterizedType>
<description>
a relation with the given id and direction or empty if the one is not found
</description>
</return>
</method>

<!-- javax.baja.tag.Relations.getAll(javax.baja.tag.Id) -->
<method name="getAll"  public="true" default="true">
<description>
Get all relations with the given id.
</description>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
<description>
the id to return relations for
</description>
</parameter>
<return>
<parameterizedType class="java.util.Collection">
<args>
<type class="javax.baja.tag.Relation"/>
</args>
</parameterizedType>
<description>
a &lt;code&gt;Collection&amp;lt;Relation&amp;gt;&lt;/code&gt; containing every relation with the given id
</description>
</return>
</method>

<!-- javax.baja.tag.Relations.getAll(javax.baja.tag.Id, int) -->
<method name="getAll"  public="true" default="true">
<description>
Get all relations with the given id and direction.
</description>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
<description>
the id to return relations for
</description>
</parameter>
<parameter name="direction">
<type class="int"/>
<description>
the relation direction, IN, OUT, or BOTH, to get
</description>
</parameter>
<return>
<parameterizedType class="java.util.Collection">
<args>
<type class="javax.baja.tag.Relation"/>
</args>
</parameterizedType>
<description>
a &lt;code&gt;Collection&amp;lt;Relation&amp;gt;&lt;/code&gt; containing every relation with the given id and&#xa; direction
</description>
</return>
</method>

<!-- javax.baja.tag.Relations.get(javax.baja.tag.Id, javax.baja.tag.Entity) -->
<method name="get"  public="true" default="true">
<description>
Get the first or only relation with the given id and endpoint.
</description>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
<description>
the id of the relation to get
</description>
</parameter>
<parameter name="endpoint">
<type class="javax.baja.tag.Entity"/>
<description>
the endpoint of the relation to get
</description>
</parameter>
<return>
<parameterizedType class="java.util.Optional">
<args>
<type class="javax.baja.tag.Relation"/>
</args>
</parameterizedType>
<description>
a relation with the given id and endpoint or empty if the one is not found
</description>
</return>
</method>

<!-- javax.baja.tag.Relations.get(javax.baja.tag.Id, javax.baja.tag.Entity, int) -->
<method name="get"  public="true" default="true">
<description>
Get the first or only relation with the given id, endpoint, and direction.
</description>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
<description>
the id of the relation to get
</description>
</parameter>
<parameter name="endpoint">
<type class="javax.baja.tag.Entity"/>
<description>
the endpoint of the relation to get
</description>
</parameter>
<parameter name="direction">
<type class="int"/>
<description>
the relation direction, IN, OUT, or BOTH, to get
</description>
</parameter>
<return>
<parameterizedType class="java.util.Optional">
<args>
<type class="javax.baja.tag.Relation"/>
</args>
</parameterizedType>
<description>
a relation with the given id, endpoint, and direction or empty if the one is not found
</description>
</return>
</method>

<!-- javax.baja.tag.Relations.iterator() -->
<method name="iterator"  public="true" default="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get an iterator over all relations in the collection.
</description>
<return>
<parameterizedType class="java.util.Iterator">
<args>
<type class="javax.baja.tag.Relation"/>
</args>
</parameterizedType>
<description>
an iterator over all relations in the collection
</description>
</return>
</method>

<!-- javax.baja.tag.Relations.isEmpty() -->
<method name="isEmpty"  public="true" default="true">
<description/>
<return>
<type class="boolean"/>
<description>
&lt;code&gt;true&lt;/code&gt; if there are no relations in the collection
</description>
</return>
</method>

<!-- javax.baja.tag.Relations.IN -->
<field name="IN"  public="true" static="true" final="true">
<type class="int"/>
<description/>
</field>

<!-- javax.baja.tag.Relations.OUT -->
<field name="OUT"  public="true" static="true" final="true">
<type class="int"/>
<description/>
</field>

<!-- javax.baja.tag.Relations.BOTH -->
<field name="BOTH"  public="true" static="true" final="true">
<type class="int"/>
<description/>
</field>

</class>
</bajadoc>
