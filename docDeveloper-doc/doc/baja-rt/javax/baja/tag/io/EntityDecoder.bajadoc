<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="baja" runtimeProfile="rt" qualifiedName="javax.baja.tag.io.EntityDecoder" name="EntityDecoder" packageName="javax.baja.tag.io" public="true" interface="true" abstract="true" category="interface">
<description>
EntityDecoder&#xa; This interface defines the APIs for decoding Niagara &lt;code&gt;<see ref="javax.baja.tag.Entity">Entity</see>&lt;/code&gt; objects,&#xa; which contain &lt;code&gt;<see ref="javax.baja.tag.Tag">javax.baja.tag.Tag</see>&lt;/code&gt; and &lt;code&gt;<see ref="javax.baja.tag.Relation">javax.baja.tag.Relation</see>&lt;/code&gt; objects providing metadata about Niagara&#xa; nodes, points, and objects, as well as their relationships with other objects.
</description>
<tag name="@author">&lt;a href=&#x22;mailto:craig.gemmill@tridium.com&#x22;&gt;Craig Gemmill&lt;/a&gt;&#xa;         Date: 1/23/14&#xa;         Time: 3:08 PM</tag>
<implements>
<type class="java.lang.AutoCloseable"/>
</implements>
<annotation><type class="java.lang.SuppressWarnings"/>
<elementValue name="value">
<annotationValue kind="array">
<elementArray>
<annotationValue kind="expr">
<expression>&#x22;try&#x22;</expression>
</annotationValue>
</elementArray>
</annotationValue>
</elementValue>
</annotation>
<!-- javax.baja.tag.io.EntityDecoder.decode() -->
<method name="decode"  public="true" abstract="true">
<description>
Decode from the decoder&#x27;s input a serialized &lt;code&gt;<see ref="javax.baja.tag.Entity">Entity</see>&lt;/code&gt; tag set.&#xa; This method will return a new &lt;code&gt;<see ref="javax.baja.tag.Entity">Entity</see>&lt;/code&gt;,&#xa; decorated with the decoded &lt;code&gt;<see ref="javax.baja.tag.Tag">javax.baja.tag.Tag</see>&lt;/code&gt;s.&#xa; The default implementation will use a &lt;code&gt;<see ref="javax.baja.tag.util.BasicEntity">BasicEntity</see>&lt;/code&gt; to hold the&#xa; deserialized &lt;code&gt;<see ref="javax.baja.tag.Tag">javax.baja.tag.Tag</see>&lt;/code&gt;s.
</description>
<return>
<type class="javax.baja.tag.Entity"/>
<description>
an (@code Entity} with the decoded &lt;code&gt;<see ref="javax.baja.tag.Tag">javax.baja.tag.Tag</see>&lt;/code&gt;s.
</description>
</return>
<throws>
<type class="java.io.IOException"/>
<description>
if anything fails with the decoding.
</description>
</throws>
</method>

<!-- javax.baja.tag.io.EntityDecoder.merge(javax.baja.tag.Entity) -->
<method name="merge"  public="true" default="true">
<description>
Decode from the decoder&#x27;s input a serialized &lt;code&gt;<see ref="javax.baja.tag.Entity">Entity</see>&lt;/code&gt; tag set and merge&#xa; with the supplied &lt;code&gt;<see ref="javax.baja.tag.Entity">Entity</see>&lt;/code&gt;&#x27;s current tag set.&#xa; This will leave the current tags in place, and simply merge the decoded tags&#xa; into the existing ones.
</description>
<tag name="@see">javax.baja.tag.Entity</tag>
<parameter name="entity">
<type class="javax.baja.tag.Entity"/>
<description>
an &lt;code&gt;<see ref="javax.baja.tag.Entity">Entity</see>&lt;/code&gt; to which the decoded tags should be applied.
</description>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.io.IOException"/>
<description>
if anything fails with the decoding.
</description>
</throws>
</method>

</class>
</bajadoc>
