<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="baja" runtimeProfile="rt" qualifiedName="javax.baja.tag.Tags" name="Tags" packageName="javax.baja.tag" public="true" interface="true" abstract="true" category="interface">
<description>
Tags is used to store a collection of &lt;code&gt;<see ref="javax.baja.tag.Tag">Tag</see>&lt;/code&gt; objects. A Tags collection is semantically&#xa; equivalent to a mathematical &lt;i&gt;set&lt;/i&gt;: it is an unordered collection of distinct &lt;code&gt;<see ref="javax.baja.tag.Tag">Tag</see>&lt;/code&gt;&#xa; objects.&#xa; &lt;p&gt;&#xa; The general behavioral contract of Tags is&#xa; &lt;ul&gt;&#xa;   &lt;li&gt;Depending on the concrete implementation, all methods that set or add tags&#xa;   to the collection may throw &lt;code&gt;<see ref="java.lang.IllegalArgumentException">IllegalArgumentException</see>&lt;/code&gt; if some property of the&#xa;   input arguments prevents the method from succeeding. This is most likely if you attempt&#xa;   to add a tag that is single-valued (see below). &lt;code&gt;<see ref="javax.baja.tag.Tags#isMulti(javax.baja.tag.Id)">#isMulti(Id)</see>&lt;/code&gt; can help prevent this.&#xa;   It could also happen if a Tag is &#x22;implied&#x22; or &#x22;frozen&#x22; by the concrete&#xa;   implementation of Tags.&lt;/li&gt;&#xa;   &lt;li&gt;Because of the above property, none of the removal operations are guaranteed to&#xa;   succeed. However, they &lt;strong&gt;&lt;i&gt;SHOULD&lt;/i&gt;&lt;/strong&gt; never throw exceptions. Instead&#xa;   they should return &lt;code&gt;false&lt;/code&gt; in that case.&lt;/li&gt;&#xa;   &lt;li&gt;Because of the above properties it should be evident that a Tags collection&#xa;   might never be empty.&lt;/li&gt;&#xa;   &lt;li&gt;This interface requires non-null arguments for all methods and must be enforced&#xa;   by the implementation.&lt;/li&gt;&#xa; &lt;/ul&gt;&#xa; &lt;p&gt;&#xa; A tag with a particular &lt;code&gt;<see ref="javax.baja.tag.Id">id</see>&lt;/code&gt; can be either single-value or multi-value. A single-value&#xa; tag is guaranteed to have only one Tag with that id. A multi-value tag may contain multiple tags&#xa; with that id. The arity of an id is determined either implicitly by the object containing the&#xa; tags, or explicitly when a tag is first set or added to the collection.
</description>
<tag name="@author">&lt;a href=&#x22;mailto:mgiannini@tridium.com&#x22;&gt;Matthew Giannini&lt;/a&gt;</tag>
<implements>
<parameterizedType class="java.lang.Iterable">
<args>
<type class="javax.baja.tag.Tag"/>
</args>
</parameterizedType>
</implements>
<!-- javax.baja.tag.Tags.isEmpty() -->
<method name="isEmpty"  public="true" default="true">
<description/>
<return>
<type class="boolean"/>
<description>
&lt;code&gt;true&lt;/code&gt; if the tags collection is empty; &lt;code&gt;false&lt;/code&gt; otherwise.
</description>
</return>
</method>

<!-- javax.baja.tag.Tags.contains(javax.baja.tag.Id) -->
<method name="contains"  public="true" default="true">
<description>
Check if a tag with the given id exists in the collection.
</description>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
<description>
the id to check for
</description>
</parameter>
<return>
<type class="boolean"/>
<description>
&lt;code&gt;true&lt;/code&gt; if there is at least one tag with the given id in the collection;&#xa; &lt;code&gt;false&lt;/code&gt; otherwise.
</description>
</return>
</method>

<!-- javax.baja.tag.Tags.isMulti(javax.baja.tag.Id) -->
<method name="isMulti"  public="true" abstract="true">
<description>
Check if the given id is present in the collection &lt;strong&gt;and&lt;/strong&gt; contains multi-valued&#xa; tags. This method &lt;strong&gt;MUST&lt;/strong&gt; return false if &lt;code&gt;<see ref="javax.baja.tag.Tags#contains(javax.baja.tag.Id)">contains(id)</see>&lt;/code&gt;&#xa; return false.&#xa; &lt;p&gt;&#xa; If this method returns &lt;code&gt;true&lt;/code&gt; it is safe to use the addMulti methods.
</description>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
<description>
the id to check
</description>
</parameter>
<return>
<type class="boolean"/>
<description>
&lt;code&gt;true&lt;/code&gt; if the id exists in the collection and supports multi-value tags;&#xa; &lt;code&gt;false&lt;/code&gt; otherwise.
</description>
</return>
</method>

<!-- javax.baja.tag.Tags.set(javax.baja.tag.Tag) -->
<method name="set"  public="true" abstract="true">
<description>
Adds the given tag to the collection as a single-value tag. Any existing tags with the same&#xa; id are overwritten.
</description>
<parameter name="tag">
<type class="javax.baja.tag.Tag"/>
<description>
the tag to set
</description>
</parameter>
<return>
<type class="boolean"/>
<description>
&lt;code&gt;true&lt;/code&gt; if the collection was modified; &lt;code&gt;false&lt;/code&gt; otherwise.
</description>
</return>
</method>

<!-- javax.baja.tag.Tags.set(javax.baja.tag.Id, javax.baja.data.BIDataValue) -->
<method name="set"  public="true" default="true">
<description>
Equivalent to &lt;pre&gt;set(new Tag(id, value)}&lt;/pre&gt;
</description>
<tag name="@see">#set(Tag)</tag>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
</parameter>
<parameter name="value">
<type class="javax.baja.data.BIDataValue"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.tag.Tags.setMulti(javax.baja.tag.Id, java.util.Collection&lt;? extends javax.baja.data.BIDataValue&gt;) -->
<method name="setMulti"  public="true" abstract="true">
<description>
Creates tags with the given id for each value and adds them to collection as multi-value&#xa; tags. Any existing tags with the same id are overwritten.
</description>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
<description>
the id for each tag
</description>
</parameter>
<parameter name="values">
<parameterizedType class="java.util.Collection">
<args>
<wildcardType class="?">
<bounds kind="extends">
<type class="javax.baja.data.BIDataValue"/>
</bounds>
</wildcardType>
</args>
</parameterizedType>
<description>
the values for each new tag
</description>
</parameter>
<return>
<type class="boolean"/>
<description>
&lt;code&gt;true&lt;/code&gt; if the collection was modified; &lt;code&gt;false&lt;/code&gt; otherwise.
</description>
</return>
</method>

<!-- javax.baja.tag.Tags.addMulti(javax.baja.tag.Id, java.util.Collection&lt;? extends javax.baja.data.BIDataValue&gt;) -->
<method name="addMulti"  public="true" abstract="true">
<description>
Creates tags with the given id for each value and adds them to collection.
</description>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
<description>
the id for each tag
</description>
</parameter>
<parameter name="values">
<parameterizedType class="java.util.Collection">
<args>
<wildcardType class="?">
<bounds kind="extends">
<type class="javax.baja.data.BIDataValue"/>
</bounds>
</wildcardType>
</args>
</parameterizedType>
<description>
the values for each new tag
</description>
</parameter>
<return>
<type class="boolean"/>
<description>
&lt;code&gt;true&lt;/code&gt; if the collection was modified; &lt;code&gt;false&lt;/code&gt; otherwise.
</description>
</return>
</method>

<!-- javax.baja.tag.Tags.addMulti(javax.baja.tag.Tag) -->
<method name="addMulti"  public="true" default="true">
<description>
Equivalent to &lt;pre&gt;addMulti(tag.getId(), Collections.singletonList(tag.getValue())&lt;/pre&gt;
</description>
<tag name="@see">#addMulti(Id, Collection)</tag>
<parameter name="tag">
<type class="javax.baja.tag.Tag"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.tag.Tags.addMulti(javax.baja.tag.Id, javax.baja.data.BIDataValue) -->
<method name="addMulti"  public="true" default="true">
<description>
Equivalent to &lt;pre&gt;addMulti(new Tag(id, value))&lt;/pre&gt;
</description>
<tag name="@see">#addMulti(Tag)</tag>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
</parameter>
<parameter name="value">
<type class="javax.baja.data.BIDataValue"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.tag.Tags.merge(java.util.Collection&lt;javax.baja.tag.Tag&gt;) -->
<method name="merge"  public="true" default="true">
<description>
Merges the tags from the given collection into this Tags collection.&#xa; &lt;p&gt;&#xa; Merge rules&#xa; &lt;ol&gt;&#xa;   &lt;li&gt;&lt;code&gt;addMulti&lt;/code&gt; is used to add the tag&#xa;     &lt;ol&gt;&#xa;       &lt;li&gt;If &lt;code&gt;<see ref="javax.baja.tag.Tags#isMulti(javax.baja.tag.Id)">#isMulti(Id)</see>&lt;/code&gt; for a given tag&#x27;s id returns &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt;&#xa;       &lt;li&gt;If there are more than one tags in the input collection with the same id.&lt;/li&gt;&#xa;     &lt;/ol&gt;&#xa;   &lt;/li&gt;&#xa;   &lt;li&gt;Otherwise the tag is inserted into the collection with &lt;code&gt;<see ref="javax.baja.tag.Tags#set(javax.baja.tag.Tag)">#set(Tag)</see>&lt;/code&gt;&lt;/li&gt;&#xa; &lt;/ol&gt;
</description>
<parameter name="tags">
<parameterizedType class="java.util.Collection">
<args>
<type class="javax.baja.tag.Tag"/>
</args>
</parameterizedType>
<description>
the tags to merge into the collection
</description>
</parameter>
<return>
<type class="boolean"/>
<description>
&lt;code&gt;true&lt;/code&gt; if the collection was modified; &lt;code&gt;false&lt;/code&gt; otherwise.
</description>
</return>
</method>

<!-- javax.baja.tag.Tags.remove(javax.baja.tag.Id, javax.baja.data.BIDataValue) -->
<method name="remove"  public="true" abstract="true">
<description>
Remove the the tag with the given id and value from the collection.
</description>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
<description>
the id of the tag to remove
</description>
</parameter>
<parameter name="value">
<type class="javax.baja.data.BIDataValue"/>
<description>
the value for the tag to remove
</description>
</parameter>
<return>
<type class="boolean"/>
<description>
&lt;code&gt;true&lt;/code&gt; if the tag was removed
</description>
</return>
</method>

<!-- javax.baja.tag.Tags.removeAll(javax.baja.tag.Id) -->
<method name="removeAll"  public="true" default="true">
<description>
Remove every tag with the given id.
</description>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
<description>
the id of the tags to remove
</description>
</parameter>
<return>
<type class="boolean"/>
<description>
&lt;code&gt;true&lt;/code&gt; if the collection was modified; &lt;code&gt;false&lt;/code&gt; otherwise.
</description>
</return>
</method>

<!-- javax.baja.tag.Tags.remove(javax.baja.tag.Tag) -->
<method name="remove"  public="true" default="true">
<description>
Equivalent to &lt;pre&gt;remove(tag.getId(), tag.getValue())&lt;/pre&gt;
</description>
<tag name="@see">#remove(Id, BIDataValue)</tag>
<parameter name="tag">
<type class="javax.baja.tag.Tag"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.tag.Tags.filter(java.util.function.Predicate&lt;javax.baja.tag.Tag&gt;) -->
<method name="filter"  public="true" abstract="true">
<description>
Get the subset of tags in the collection that satisfy the given predicate.&#xa; &lt;p&gt;&#xa; For example:&#xa; &lt;pre&gt;&lt;code&gt;&amp;#xa;   // Find all marker tags&amp;#xa;   //&amp;#xa;   Collection&amp;lt;Tag&amp;gt; markers = myentity.tags().filter(t -&amp;gt; t.getValue() instanceof BMarker);&amp;#xa; &lt;/code&gt;&lt;/pre&gt;
</description>
<parameter name="condition">
<parameterizedType class="java.util.function.Predicate">
<args>
<type class="javax.baja.tag.Tag"/>
</args>
</parameterizedType>
<description>
the condition to test for each tag
</description>
</parameter>
<return>
<parameterizedType class="java.util.Collection">
<args>
<type class="javax.baja.tag.Tag"/>
</args>
</parameterizedType>
<description>
a &lt;code&gt;Collection&amp;lt;Tag&amp;gt;&lt;/code&gt; containing all tags that satisfy the condition
</description>
</return>
</method>

<!-- javax.baja.tag.Tags.getAll() -->
<method name="getAll"  public="true" default="true">
<description>
Get all tags in the collection.
</description>
<return>
<parameterizedType class="java.util.Collection">
<args>
<type class="javax.baja.tag.Tag"/>
</args>
</parameterizedType>
<description>
a &lt;code&gt;Collection&amp;lt;Tag&amp;gt;&lt;/code&gt; containing all tags in the collection
</description>
</return>
</method>

<!-- javax.baja.tag.Tags.get(javax.baja.tag.Id) -->
<method name="get"  public="true" abstract="true">
<description>
Get the value of the tag with the given id if it exists.&#xa; &lt;p&gt;&#xa; If the tag is multi-value the returned value is non-deterministic.
</description>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
<description>
the id to search for
</description>
</parameter>
<return>
<parameterizedType class="java.util.Optional">
<args>
<type class="javax.baja.data.BIDataValue"/>
</args>
</parameterizedType>
<description>
a Optional containing the value of the tag with the given id if it exists
</description>
</return>
</method>

<!-- javax.baja.tag.Tags.getValues(javax.baja.tag.Id) -->
<method name="getValues"  public="true" default="true">
<description>
Get all values for tags with the given id.
</description>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
<description>
the id of tags to search for
</description>
</parameter>
<return>
<parameterizedType class="java.util.Collection">
<args>
<type class="javax.baja.data.BIDataValue"/>
</args>
</parameterizedType>
<description>
a &lt;code&gt;Collection&amp;lt;BIDataValue&amp;gt;&lt;/code&gt; that contains all values for tags with the given id.
</description>
</return>
</method>

<!-- javax.baja.tag.Tags.getInDictionary(java.lang.String) -->
<method name="getInDictionary"  public="true" default="true">
<description>
Get all tags that have an &lt;code&gt;<see ref="javax.baja.tag.Id">Id</see>&lt;/code&gt; with the given dictionary.
</description>
<parameter name="dictionary">
<type class="java.lang.String"/>
<description>
the dictionary name of tags to search for
</description>
</parameter>
<return>
<parameterizedType class="java.util.Collection">
<args>
<type class="javax.baja.tag.Tag"/>
</args>
</parameterizedType>
<description>
a &lt;code&gt;Collection&amp;lt;Tag&amp;gt;&lt;/code&gt; that contains all tags in the given dictionary
</description>
</return>
</method>

<!-- javax.baja.tag.Tags.iterator() -->
<method name="iterator"  public="true" default="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get an iterator over all tags in the collection.
</description>
<return>
<parameterizedType class="java.util.Iterator">
<args>
<type class="javax.baja.tag.Tag"/>
</args>
</parameterizedType>
<description>
an Iterator over all tags in the collection
</description>
</return>
</method>

</class>
</bajadoc>
