<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="baja" runtimeProfile="rt" qualifiedName="javax.baja.tag.TagInfo" name="TagInfo" packageName="javax.baja.tag" public="true" interface="true" abstract="true" category="interface">
<description>
TagInfo is a definition of a Tag in a TagDictionary.
</description>
<tag name="@author">John Sublett</tag>
<tag name="@creation">2/13/14</tag>
<tag name="@since">Niagara 4.0</tag>
<!-- javax.baja.tag.TagInfo.getDictionary() -->
<method name="getDictionary"  public="true" abstract="true">
<description>
Get the dictionary that includes this tag.
</description>
<return>
<parameterizedType class="java.util.Optional">
<args>
<type class="javax.baja.tag.TagDictionary"/>
</args>
</parameterizedType>
<description>
Returns an optional that contains the TagDictionary for this tag if&#xa; the tag is part of a tag dictionary.
</description>
</return>
</method>

<!-- javax.baja.tag.TagInfo.getName() -->
<method name="getName"  public="true" abstract="true">
<description>
Get the name of the tag.
</description>
<return>
<type class="java.lang.String"/>
<description>
Returns the name of the tag.  This is the simple name not including the namespace.
</description>
</return>
</method>

<!-- javax.baja.tag.TagInfo.getTagId() -->
<method name="getTagId"  public="true" default="true">
<description>
Get the Id for this tag.  This constructs the id from the dictionary namespace, if&#xa; available, and the tag name.
</description>
<return>
<type class="javax.baja.tag.Id"/>
<description>
Returns a tag id for this tag.
</description>
</return>
</method>

<!-- javax.baja.tag.TagInfo.isIdealFor(javax.baja.sys.Type) -->
<method name="isIdealFor"  public="true" default="true">
<description>
Test whether this tag and ideal match for the specified entity.  Tag validity&#xa; is not enforced by the API.  Validity provides a guideline for tagging tools.
</description>
<parameter name="type">
<type class="javax.baja.sys.Type"/>
<description>
The Type to test for the ideal match for this tag.
</description>
</parameter>
<return>
<type class="boolean"/>
<description>
Returns true if the tag is an ideal match for the specified type, false otherwise.
</description>
</return>
</method>

<!-- javax.baja.tag.TagInfo.isValidFor(javax.baja.tag.Entity) -->
<method name="isValidFor"  public="true" default="true">
<description>
Test whether this tag is valid for the specified entity.  Tag validity&#xa; is not enforced by the API.  Validity provides a guideline for tagging tools.
</description>
<parameter name="entity">
<type class="javax.baja.tag.Entity"/>
<description>
The entity to test for validity for this tag.
</description>
</parameter>
<return>
<type class="boolean"/>
<description>
Returns true if the tag is valid for the specified entity, false otherwise.
</description>
</return>
</method>

<!-- javax.baja.tag.TagInfo.getDefaultValue() -->
<method name="getDefaultValue"  public="true" abstract="true">
<description>
Get the default value of the tag.  This also restricts the data type for the tag value.&#xa; See getTagType().
</description>
<return>
<type class="javax.baja.data.BIDataValue"/>
</return>
</method>

<!-- javax.baja.tag.TagInfo.getTag(javax.baja.tag.Entity) -->
<method name="getTag"  public="true" default="true">
<description>
Get a Tag from this TagInfo for the specified entity.  This method allows the&#xa; TagInfo to be a &#x22;smart&#x22; tag that can change its value based on the entity.
</description>
<parameter name="entity">
<type class="javax.baja.tag.Entity"/>
<description>
The entity that the resulting Tag is associated with.
</description>
</parameter>
<return>
<type class="javax.baja.tag.Tag"/>
<description>
Returns a Tag for the specified entity.
</description>
</return>
</method>

<!-- javax.baja.tag.TagInfo.getTagType() -->
<method name="getTagType"  public="true" default="true">
<description>
Get the type of the tag value.  This is equivalent to&#xa; getDefaultValue().getType().getTypeInfo().
</description>
<return>
<type class="javax.baja.registry.TypeInfo"/>
<description>
Returns the TypeInfo for the tag value type.
</description>
</return>
</method>

<!-- javax.baja.tag.TagInfo.makeTag() -->
<method name="makeTag"  public="true" default="true">
<description>
Make a Tag from this TagInfo.
</description>
<return>
<type class="javax.baja.tag.Tag"/>
<description>
Returns the Tag represented by this TagInfo with the default value.
</description>
</return>
</method>

<!-- javax.baja.tag.TagInfo.setTagOn(javax.baja.tag.Taggable) -->
<method name="setTagOn"  public="true" default="true">
<description>
Set the tag on the specified target.  This does not enforce any validity rules.  It just&#xa; sets the tag on the specified Taggable object with the default value.
</description>
<parameter name="target">
<type class="javax.baja.tag.Taggable"/>
<description>
The object to set the marker tag on.
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.tag.TagInfo.setTagOn(javax.baja.tag.Taggable, javax.baja.data.BIDataValue) -->
<method name="setTagOn"  public="true" default="true">
<description>
Set the tag on the specified target.  This does not enforce target type validity rules.  It just&#xa; sets the tag on the specified Taggable object.  The value type must match the tag type or a&#xa; javax.baja.data.TypeMismatchException is thrown.
</description>
<parameter name="target">
<type class="javax.baja.tag.Taggable"/>
<description>
The object to set the market tag on.
</description>
</parameter>
<parameter name="value">
<type class="javax.baja.data.BIDataValue"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

</class>
</bajadoc>
