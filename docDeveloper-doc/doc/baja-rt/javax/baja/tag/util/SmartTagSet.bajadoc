<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="baja" runtimeProfile="rt" qualifiedName="javax.baja.tag.util.SmartTagSet" name="SmartTagSet" packageName="javax.baja.tag.util" public="true">
<description>
A SmartTagSet is an implementation of the SmartTags interface.  It maintains&#xa; separate subsets of tags for smart tags and direct tags.  Any methods that&#xa; would modify the tag set only operate on the direct tags.
</description>
<tag name="@author">John Sublett</tag>
<tag name="@creation">2/16/14</tag>
<tag name="@since">Niagara 4.0</tag>
<extends>
<type class="java.lang.Object"/>
</extends>
<implements>
<type class="javax.baja.tag.SmartTags"/>
</implements>
<!-- javax.baja.tag.util.SmartTagSet(javax.baja.tag.Tags, javax.baja.tag.Tags) -->
<constructor name="SmartTagSet" public="true">
<parameter name="impliedTags">
<type class="javax.baja.tag.Tags"/>
</parameter>
<parameter name="directTags">
<type class="javax.baja.tag.Tags"/>
<description>
The direct tags included in this set.
</description>
</parameter>
<description>
Create a new SmartTagSet that includes the specified set of direct tags.
</description>
</constructor>

<!-- javax.baja.tag.util.SmartTagSet.getDirectTags() -->
<method name="getDirectTags"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get the direct tags.  The direct tags are the tags that are defined&#xa; directly on the Taggable object.
</description>
<return>
<type class="javax.baja.tag.Tags"/>
<description>
Returns the set of direct tags.
</description>
</return>
</method>

<!-- javax.baja.tag.util.SmartTagSet.getImpliedTags() -->
<method name="getImpliedTags"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get the set of implied tags.  The implied tags are the tags that are not&#xa; defined directly on the Taggable object.
</description>
<return>
<type class="javax.baja.tag.Tags"/>
<description>
Returns the set of implied tags.
</description>
</return>
</method>

<!-- javax.baja.tag.util.SmartTagSet.isMulti(javax.baja.tag.Id) -->
<method name="isMulti"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Check if the given id is present in the collection &lt;strong&gt;and&lt;/strong&gt; contains multi-valued tags.&#xa; This method &lt;strong&gt;MUST&lt;/strong&gt; return false if &lt;code&gt;<see ref="javax.baja.tag.util.SmartTagSet#contains(javax.baja.tag.Id)">contains(id)</see>&lt;/code&gt; return false.&#xa; &lt;p&gt;&#xa; If this method return &lt;code&gt;true&lt;/code&gt; it is always safe to use the addMulti methods.
</description>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
<description>
the id to check
</description>
</parameter>
<return>
<type class="boolean"/>
<description>
&lt;code&gt;true&lt;/code&gt; if the id exists in the collection and supports multi-value tags;&#xa; &lt;code&gt;false&lt;/code&gt; otherwise.
</description>
</return>
</method>

<!-- javax.baja.tag.util.SmartTagSet.set(javax.baja.tag.Tag) -->
<method name="set"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Adds the given tag to the direct tags as a single-value tag. Any existing&#xa; tags with the same id are overwritten.
</description>
<parameter name="tag">
<type class="javax.baja.tag.Tag"/>
<description>
the tag to set
</description>
</parameter>
<return>
<type class="boolean"/>
<description>
&lt;code&gt;true&lt;/code&gt; if the collection was modified; &lt;code&gt;false&lt;/code&gt; otherwise.
</description>
</return>
</method>

<!-- javax.baja.tag.util.SmartTagSet.setMulti(javax.baja.tag.Id, java.util.Collection&lt;? extends javax.baja.data.BIDataValue&gt;) -->
<method name="setMulti"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Set a direct multi tag.
</description>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
<description>
the id for each tag
</description>
</parameter>
<parameter name="values">
<parameterizedType class="java.util.Collection">
<args>
<wildcardType class="?">
<bounds kind="extends">
<type class="javax.baja.data.BIDataValue"/>
</bounds>
</wildcardType>
</args>
</parameterizedType>
<description>
the values for each new tag
</description>
</parameter>
<return>
<type class="boolean"/>
<description/>
</return>
</method>

<!-- javax.baja.tag.util.SmartTagSet.addMulti(javax.baja.tag.Id, java.util.Collection&lt;? extends javax.baja.data.BIDataValue&gt;) -->
<method name="addMulti"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Creates tags with the given id for each value and adds them to the direct tags.
</description>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
<description>
the id for each tag
</description>
</parameter>
<parameter name="values">
<parameterizedType class="java.util.Collection">
<args>
<wildcardType class="?">
<bounds kind="extends">
<type class="javax.baja.data.BIDataValue"/>
</bounds>
</wildcardType>
</args>
</parameterizedType>
<description>
the values for each new tag
</description>
</parameter>
<return>
<type class="boolean"/>
<description>
&lt;code&gt;true&lt;/code&gt; if the collection was modified; &lt;code&gt;false&lt;/code&gt; otherwise.
</description>
</return>
</method>

<!-- javax.baja.tag.util.SmartTagSet.merge(java.util.Collection&lt;javax.baja.tag.Tag&gt;) -->
<method name="merge"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Merges the tags from the given collection into the direct tags&#xa; in this collection.
</description>
<parameter name="tags">
<parameterizedType class="java.util.Collection">
<args>
<type class="javax.baja.tag.Tag"/>
</args>
</parameterizedType>
<description>
the tags to merge into the collection
</description>
</parameter>
<return>
<type class="boolean"/>
<description>
&lt;code&gt;true&lt;/code&gt; if the collection was modified; &lt;code&gt;false&lt;/code&gt; otherwise.
</description>
</return>
</method>

<!-- javax.baja.tag.util.SmartTagSet.remove(javax.baja.tag.Id, javax.baja.data.BIDataValue) -->
<method name="remove"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Remove the the tag with the given id and value from the direct tags.
</description>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
<description>
the id of the tag to remove
</description>
</parameter>
<parameter name="value">
<type class="javax.baja.data.BIDataValue"/>
<description>
the value for the tag to remove
</description>
</parameter>
<return>
<type class="boolean"/>
<description>
&lt;code&gt;true&lt;/code&gt; if the tag was removed
</description>
</return>
</method>

<!-- javax.baja.tag.util.SmartTagSet.removeAll(javax.baja.tag.Id) -->
<method name="removeAll"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Remove every tag with the given id from the set of direct tags.
</description>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
<description>
the id of the tags to remove
</description>
</parameter>
<return>
<type class="boolean"/>
<description>
&lt;code&gt;true&lt;/code&gt; if the collection was modified; &lt;code&gt;false&lt;/code&gt; otherwise.
</description>
</return>
</method>

<!-- javax.baja.tag.util.SmartTagSet.iterator() -->
<method name="iterator"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get an iterator for all tags in the set.
</description>
<return>
<parameterizedType class="java.util.Iterator">
<args>
<type class="javax.baja.tag.Tag"/>
</args>
</parameterizedType>
<description>
Returns an iterator for all tags, both implied and direct.
</description>
</return>
</method>

<!-- javax.baja.tag.util.SmartTagSet.getAll() -->
<method name="getAll"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get all of the tags in the set.
</description>
<return>
<parameterizedType class="java.util.Collection">
<args>
<type class="javax.baja.tag.Tag"/>
</args>
</parameterizedType>
<description>
Returns a collection of all tags in the set.
</description>
</return>
</method>

<!-- javax.baja.tag.util.SmartTagSet.filter(java.util.function.Predicate&lt;javax.baja.tag.Tag&gt;) -->
<method name="filter"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="f">
<parameterizedType class="java.util.function.Predicate">
<args>
<type class="javax.baja.tag.Tag"/>
</args>
</parameterizedType>
</parameter>
<return>
<parameterizedType class="java.util.Collection">
<args>
<type class="javax.baja.tag.Tag"/>
</args>
</parameterizedType>
</return>
</method>

<!-- javax.baja.tag.util.SmartTagSet.get(javax.baja.tag.Id) -->
<method name="get"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get the value of the tag with the given id if it exists.&#xa; &lt;p&gt;&#xa; If the tag is multi-value the returned value is non-deterministic.
</description>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
<description>
the id to search for
</description>
</parameter>
<return>
<parameterizedType class="java.util.Optional">
<args>
<type class="javax.baja.data.BIDataValue"/>
</args>
</parameterizedType>
<description>
a Optional containing the value of the tag with the given id if it exists
</description>
</return>
</method>

</class>
</bajadoc>
