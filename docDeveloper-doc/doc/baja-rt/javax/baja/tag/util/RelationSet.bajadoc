<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="baja" runtimeProfile="rt" qualifiedName="javax.baja.tag.util.RelationSet" name="RelationSet" packageName="javax.baja.tag.util" public="true">
<description>
A basic &lt;code&gt;<see ref="javax.baja.tag.Relations">Relations</see>&lt;/code&gt; implementation.
</description>
<tag name="@author">&lt;a href=&#x22;mailto:mgiannini@tridium.com&#x22;&gt;Matthew Giannini&lt;/a&gt;</tag>
<extends>
<type class="java.lang.Object"/>
</extends>
<implements>
<type class="javax.baja.tag.Relations"/>
</implements>
<!-- javax.baja.tag.util.RelationSet() -->
<constructor name="RelationSet" public="true">
<description/>
</constructor>

<!-- javax.baja.tag.util.RelationSet.set(javax.baja.tag.Id, java.util.Collection&lt;? extends javax.baja.tag.Entity&gt;) -->
<method name="set"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Create inbound relations with the given id to all the given endpoints and return the newly&#xa; created relations. Any existing relations with the given id are overwritten.
</description>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
<description>
the id for all the relations
</description>
</parameter>
<parameter name="endpoints">
<parameterizedType class="java.util.Collection">
<args>
<wildcardType class="?">
<bounds kind="extends">
<type class="javax.baja.tag.Entity"/>
</bounds>
</wildcardType>
</args>
</parameterizedType>
<description>
the endpoints to create relations for
</description>
</parameter>
<return>
<parameterizedType class="java.util.Collection">
<args>
<type class="javax.baja.tag.Relation"/>
</args>
</parameterizedType>
<description>
a &lt;code&gt;Collection&amp;lt;Relation&amp;gt;&lt;/code&gt; of all the newly created relations
</description>
</return>
</method>

<!-- javax.baja.tag.util.RelationSet.set(javax.baja.tag.Id, java.util.Collection&lt;? extends javax.baja.tag.Entity&gt;, boolean) -->
<method name="set"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Create relations of the given direction with the given id to all the given endpoints and return&#xa; the newly created relations. Any existing relations with the given id are overwritten.
</description>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
<description>
the id for all the relations
</description>
</parameter>
<parameter name="endpoints">
<parameterizedType class="java.util.Collection">
<args>
<wildcardType class="?">
<bounds kind="extends">
<type class="javax.baja.tag.Entity"/>
</bounds>
</wildcardType>
</args>
</parameterizedType>
<description>
the endpoints to create relations for
</description>
</parameter>
<parameter name="isInbound">
<type class="boolean"/>
<description>
true if relation direction is from the endpoints
</description>
</parameter>
<return>
<parameterizedType class="java.util.Collection">
<args>
<type class="javax.baja.tag.Relation"/>
</args>
</parameterizedType>
<description>
a &lt;code&gt;Collection&amp;lt;Relation&amp;gt;&lt;/code&gt; of all the newly created relations
</description>
</return>
</method>

<!-- javax.baja.tag.util.RelationSet.add(javax.baja.tag.Relation) -->
<method name="add"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Add the given relation to the set of relations. The tags will be preserved in the&#xa; new relation. Implementations are not required to return the input relation as the result.&#xa; &lt;p&gt;&#xa; If the relation already exists, then the tags are &lt;code&gt;<see ref="javax.baja.tag.Tags#merge(java.util.Collection&lt;javax.baja.tag.Tag&gt;)">merged</see>&lt;/code&gt;&#xa; and the existing relation is returned.&#xa; &lt;p&gt;&#xa; &lt;strong&gt;It is never valid to assume that the returned relation object is the same as the&#xa; input relation!&lt;/strong&gt;&#xa; &lt;pre&gt;&lt;code&gt;&amp;#xa;   // This is not necessarily true!&amp;#xa;   //&amp;#xa;   Relation relation = new BasicRelation(id, entity);&amp;#xa;   assert relation == entity.add(relation);&amp;#xa;&amp;#xa;   // But this is always true&amp;#xa;   //&amp;#xa;   Relation addedRelation = entity.add(relation);&amp;#xa;   assert relation.id.equals(addedRelation.id) &amp;amp;&amp;amp;&amp;#xa;          relation.endpoint.equals(addedRelation.endpoint);&amp;#xa; &lt;/code&gt;&lt;/pre&gt;
</description>
<parameter name="relation">
<type class="javax.baja.tag.Relation"/>
<description>
the relation to add
</description>
</parameter>
<return>
<type class="javax.baja.tag.Relation"/>
<description>
the newly added relation
</description>
</return>
</method>

<!-- javax.baja.tag.util.RelationSet.remove(javax.baja.tag.Relation) -->
<method name="remove"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Attempt to remove the given relation.
</description>
<parameter name="r">
<type class="javax.baja.tag.Relation"/>
</parameter>
<return>
<type class="boolean"/>
<description>
&lt;code&gt;true&lt;/code&gt; if the relation was removed
</description>
</return>
</method>

<!-- javax.baja.tag.util.RelationSet.filter(java.util.function.Predicate&lt;javax.baja.tag.Relation&gt;, int) -->
<method name="filter"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get the subset of relations in the collection that satisfy the given predicate.&#xa; &lt;p&gt;&#xa; For example:&#xa; &lt;pre&gt;&lt;code&gt;&amp;#xa;   // Find all relations that are tagged&amp;#xa;   //&amp;#xa;   Collection&amp;lt;Relation&amp;gt; tagged = myEntity.relations().filter(r -&amp;gt; !r.tags().isEmpty());&amp;#xa; &lt;/code&gt;&lt;/pre&gt;
</description>
<parameter name="condition">
<parameterizedType class="java.util.function.Predicate">
<args>
<type class="javax.baja.tag.Relation"/>
</args>
</parameterizedType>
<description>
the condition to test for each relation
</description>
</parameter>
<parameter name="direction">
<type class="int"/>
<description>
the relation direction, IN, OUT, or BOTH, to get
</description>
</parameter>
<return>
<parameterizedType class="java.util.Collection">
<args>
<type class="javax.baja.tag.Relation"/>
</args>
</parameterizedType>
<description>
a &lt;code&gt;Collection&amp;lt;Relation&amp;gt;&lt;/code&gt; where every relation satisfies the condition
</description>
</return>
</method>

</class>
</bajadoc>
