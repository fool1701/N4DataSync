<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="baja" runtimeProfile="rt" qualifiedName="javax.baja.tag.util.ImpliedRelations" name="ImpliedRelations" packageName="javax.baja.tag.util" public="true">
<description>
ImpliedRelations is a Relations implementation that is lazily loaded by&#xa; delegating to the TagDictionaryService and the set of SmartTagDictionaries.
</description>
<tag name="@author">John Sublett</tag>
<tag name="@creation">2/28/14</tag>
<tag name="@since">Niagara 4.0</tag>
<extends>
<type class="java.lang.Object"/>
</extends>
<implements>
<type class="javax.baja.tag.Relations"/>
</implements>
<!-- javax.baja.tag.util.ImpliedRelations(javax.baja.tag.TagDictionaryService, javax.baja.tag.Entity) -->
<constructor name="ImpliedRelations" public="true">
<parameter name="service">
<type class="javax.baja.tag.TagDictionaryService"/>
</parameter>
<parameter name="entity">
<type class="javax.baja.tag.Entity"/>
</parameter>
<description/>
</constructor>

<!-- javax.baja.tag.util.ImpliedRelations.set(javax.baja.tag.Id, java.util.Collection&lt;? extends javax.baja.tag.Entity&gt;) -->
<method name="set"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Unsupported operation
</description>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
</parameter>
<parameter name="endpoints">
<parameterizedType class="java.util.Collection">
<args>
<wildcardType class="?">
<bounds kind="extends">
<type class="javax.baja.tag.Entity"/>
</bounds>
</wildcardType>
</args>
</parameterizedType>
</parameter>
<return>
<parameterizedType class="java.util.Collection">
<args>
<type class="javax.baja.tag.Relation"/>
</args>
</parameterizedType>
</return>
</method>

<!-- javax.baja.tag.util.ImpliedRelations.set(javax.baja.tag.Id, java.util.Collection&lt;? extends javax.baja.tag.Entity&gt;, boolean) -->
<method name="set"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Unsupported operation
</description>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
</parameter>
<parameter name="endpoints">
<parameterizedType class="java.util.Collection">
<args>
<wildcardType class="?">
<bounds kind="extends">
<type class="javax.baja.tag.Entity"/>
</bounds>
</wildcardType>
</args>
</parameterizedType>
</parameter>
<parameter name="isInbound">
<type class="boolean"/>
</parameter>
<return>
<parameterizedType class="java.util.Collection">
<args>
<type class="javax.baja.tag.Relation"/>
</args>
</parameterizedType>
</return>
</method>

<!-- javax.baja.tag.util.ImpliedRelations.set(javax.baja.tag.Id, javax.baja.tag.Entity) -->
<method name="set"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Unsupported operation
</description>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
</parameter>
<parameter name="endpoint">
<type class="javax.baja.tag.Entity"/>
</parameter>
<return>
<type class="javax.baja.tag.Relation"/>
</return>
</method>

<!-- javax.baja.tag.util.ImpliedRelations.add(javax.baja.tag.Relation) -->
<method name="add"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Unsupported operation
</description>
<parameter name="relation">
<type class="javax.baja.tag.Relation"/>
</parameter>
<return>
<type class="javax.baja.tag.Relation"/>
</return>
</method>

<!-- javax.baja.tag.util.ImpliedRelations.add(javax.baja.tag.Id, javax.baja.tag.Entity) -->
<method name="add"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Unsupported operation
</description>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
</parameter>
<parameter name="endpoint">
<type class="javax.baja.tag.Entity"/>
</parameter>
<return>
<type class="javax.baja.tag.Relation"/>
</return>
</method>

<!-- javax.baja.tag.util.ImpliedRelations.add(javax.baja.tag.Id, javax.baja.tag.Entity, boolean) -->
<method name="add"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Unsupported operation
</description>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
</parameter>
<parameter name="endpoint">
<type class="javax.baja.tag.Entity"/>
</parameter>
<parameter name="isInbound">
<type class="boolean"/>
</parameter>
<return>
<type class="javax.baja.tag.Relation"/>
</return>
</method>

<!-- javax.baja.tag.util.ImpliedRelations.add(javax.baja.tag.Id, java.util.Collection&lt;? extends javax.baja.tag.Entity&gt;) -->
<method name="add"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Unsupported operation
</description>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
</parameter>
<parameter name="endpoints">
<parameterizedType class="java.util.Collection">
<args>
<wildcardType class="?">
<bounds kind="extends">
<type class="javax.baja.tag.Entity"/>
</bounds>
</wildcardType>
</args>
</parameterizedType>
</parameter>
<return>
<parameterizedType class="java.util.Collection">
<args>
<type class="javax.baja.tag.Relation"/>
</args>
</parameterizedType>
</return>
</method>

<!-- javax.baja.tag.util.ImpliedRelations.add(javax.baja.tag.Id, java.util.Collection&lt;? extends javax.baja.tag.Entity&gt;, boolean) -->
<method name="add"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Unsupported operation
</description>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
</parameter>
<parameter name="endpoints">
<parameterizedType class="java.util.Collection">
<args>
<wildcardType class="?">
<bounds kind="extends">
<type class="javax.baja.tag.Entity"/>
</bounds>
</wildcardType>
</args>
</parameterizedType>
</parameter>
<parameter name="isInbound">
<type class="boolean"/>
</parameter>
<return>
<parameterizedType class="java.util.Collection">
<args>
<type class="javax.baja.tag.Relation"/>
</args>
</parameterizedType>
</return>
</method>

<!-- javax.baja.tag.util.ImpliedRelations.remove(javax.baja.tag.Relation) -->
<method name="remove"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Unsupported operation
</description>
<parameter name="relation">
<type class="javax.baja.tag.Relation"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.tag.util.ImpliedRelations.remove(javax.baja.tag.Id, javax.baja.tag.Entity) -->
<method name="remove"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Unsupported operation
</description>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
</parameter>
<parameter name="endpoint">
<type class="javax.baja.tag.Entity"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.tag.util.ImpliedRelations.removeAll(javax.baja.tag.Id) -->
<method name="removeAll"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Unsupported operation
</description>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.tag.util.ImpliedRelations.filter(java.util.function.Predicate&lt;javax.baja.tag.Relation&gt;, int) -->
<method name="filter"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get the subset of relations in the collection that satisfy the given predicate.&#xa; &lt;p&gt;&#xa; For example:&#xa; &lt;pre&gt;&lt;code&gt;&amp;#xa;   // Find all relations that are tagged&amp;#xa;   //&amp;#xa;   Collection&amp;lt;Relation&amp;gt; tagged = myEntity.relations().filter(r -&amp;gt; !r.tags().isEmpty());&amp;#xa; &lt;/code&gt;&lt;/pre&gt;
</description>
<parameter name="condition">
<parameterizedType class="java.util.function.Predicate">
<args>
<type class="javax.baja.tag.Relation"/>
</args>
</parameterizedType>
<description>
the condition to test for each relation
</description>
</parameter>
<parameter name="direction">
<type class="int"/>
<description>
the relation direction, IN, OUT, or BOTH, to get
</description>
</parameter>
<return>
<parameterizedType class="java.util.Collection">
<args>
<type class="javax.baja.tag.Relation"/>
</args>
</parameterizedType>
<description>
a &lt;code&gt;Collection&amp;lt;Relation&amp;gt;&lt;/code&gt; where every relation satisfies the condition
</description>
</return>
</method>

<!-- javax.baja.tag.util.ImpliedRelations.getAll() -->
<method name="getAll"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get all the relations.
</description>
<return>
<parameterizedType class="java.util.Collection">
<args>
<type class="javax.baja.tag.Relation"/>
</args>
</parameterizedType>
<description>
a &lt;code&gt;Collection&amp;lt;Relation&amp;gt;&lt;/code&gt; containing every relation
</description>
</return>
</method>

<!-- javax.baja.tag.util.ImpliedRelations.get(javax.baja.tag.Id) -->
<method name="get"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get the first or only relation with the given id.
</description>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
<description>
id of the relation to get
</description>
</parameter>
<return>
<parameterizedType class="java.util.Optional">
<args>
<type class="javax.baja.tag.Relation"/>
</args>
</parameterizedType>
<description>
a relation with the given id or empty if the one is not found
</description>
</return>
</method>

<!-- javax.baja.tag.util.ImpliedRelations.get(javax.baja.tag.Id, int) -->
<method name="get"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get the first or only relation with the given id and direction.
</description>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
<description>
id of the relation to get
</description>
</parameter>
<parameter name="direction">
<type class="int"/>
<description>
the relation direction, IN, OUT, or BOTH, to get
</description>
</parameter>
<return>
<parameterizedType class="java.util.Optional">
<args>
<type class="javax.baja.tag.Relation"/>
</args>
</parameterizedType>
<description>
a relation with the given id and direction or empty if the one is not found
</description>
</return>
</method>

<!-- javax.baja.tag.util.ImpliedRelations.getAll(javax.baja.tag.Id) -->
<method name="getAll"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get all relations with the given id.
</description>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
<description>
the id to return relations for
</description>
</parameter>
<return>
<parameterizedType class="java.util.Collection">
<args>
<type class="javax.baja.tag.Relation"/>
</args>
</parameterizedType>
<description>
a &lt;code&gt;Collection&amp;lt;Relation&amp;gt;&lt;/code&gt; containing every relation with the given id
</description>
</return>
</method>

<!-- javax.baja.tag.util.ImpliedRelations.getAll(javax.baja.tag.Id, int) -->
<method name="getAll"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get all relations with the given id and direction.
</description>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
<description>
the id to return relations for
</description>
</parameter>
<parameter name="direction">
<type class="int"/>
<description>
the relation direction, IN, OUT, or BOTH, to get
</description>
</parameter>
<return>
<parameterizedType class="java.util.Collection">
<args>
<type class="javax.baja.tag.Relation"/>
</args>
</parameterizedType>
<description>
a &lt;code&gt;Collection&amp;lt;Relation&amp;gt;&lt;/code&gt; containing every relation with the given id and&#xa; direction
</description>
</return>
</method>

<!-- javax.baja.tag.util.ImpliedRelations.get(javax.baja.tag.Id, javax.baja.tag.Entity) -->
<method name="get"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get the first or only relation with the given id and endpoint.
</description>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
<description>
the id of the relation to get
</description>
</parameter>
<parameter name="endpoint">
<type class="javax.baja.tag.Entity"/>
<description>
the endpoint of the relation to get
</description>
</parameter>
<return>
<parameterizedType class="java.util.Optional">
<args>
<type class="javax.baja.tag.Relation"/>
</args>
</parameterizedType>
<description>
a relation with the given id and endpoint or empty if the one is not found
</description>
</return>
</method>

<!-- javax.baja.tag.util.ImpliedRelations.get(javax.baja.tag.Id, javax.baja.tag.Entity, int) -->
<method name="get"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get the first or only relation with the given id, endpoint, and direction.
</description>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
<description>
the id of the relation to get
</description>
</parameter>
<parameter name="endpoint">
<type class="javax.baja.tag.Entity"/>
<description>
the endpoint of the relation to get
</description>
</parameter>
<parameter name="direction">
<type class="int"/>
<description>
the relation direction, IN, OUT, or BOTH, to get
</description>
</parameter>
<return>
<parameterizedType class="java.util.Optional">
<args>
<type class="javax.baja.tag.Relation"/>
</args>
</parameterizedType>
<description>
a relation with the given id, endpoint, and direction or empty if the one is not found
</description>
</return>
</method>

<!-- javax.baja.tag.util.ImpliedRelations.iterator() -->
<method name="iterator"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get an iterator over all relations in the collection.
</description>
<return>
<parameterizedType class="java.util.Iterator">
<args>
<type class="javax.baja.tag.Relation"/>
</args>
</parameterizedType>
<description>
an iterator over all relations in the collection
</description>
</return>
</method>

<!-- javax.baja.tag.util.ImpliedRelations.isEmpty() -->
<method name="isEmpty"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="boolean"/>
<description>
&lt;code&gt;true&lt;/code&gt; if there are no relations in the collection
</description>
</return>
</method>

<!-- javax.baja.tag.util.ImpliedRelations.isMatchingDirection(javax.baja.tag.Relation, int) -->
<method name="isMatchingDirection"  public="true" static="true">
<description/>
<parameter name="relation">
<type class="javax.baja.tag.Relation"/>
</parameter>
<parameter name="direction">
<type class="int"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

</class>
</bajadoc>
