<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="baja" runtimeProfile="rt" qualifiedName="javax.baja.tag.util.ImpliedTags" name="ImpliedTags" packageName="javax.baja.tag.util" public="true">
<description>
ImpliedTags is a Tags implementation that is lazily loaded by delegating&#xa; to the TagDictionaryService and the set of SmartTagDictionaries.
</description>
<tag name="@author">John Sublett</tag>
<tag name="@creation">2/17/14</tag>
<tag name="@since">Niagara 4.0</tag>
<extends>
<type class="java.lang.Object"/>
</extends>
<implements>
<type class="javax.baja.tag.Tags"/>
</implements>
<!-- javax.baja.tag.util.ImpliedTags(javax.baja.tag.TagDictionaryService, javax.baja.tag.Entity) -->
<constructor name="ImpliedTags" public="true">
<parameter name="service">
<type class="javax.baja.tag.TagDictionaryService"/>
</parameter>
<parameter name="entity">
<type class="javax.baja.tag.Entity"/>
</parameter>
<description/>
</constructor>

<!-- javax.baja.tag.util.ImpliedTags.isMulti(javax.baja.tag.Id) -->
<method name="isMulti"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
This method delegates to get(id) and checks that the result is&#xa; present and that the value is a collection.
</description>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
</parameter>
<return>
<type class="boolean"/>
<description>
Returns true if the tag exists and is a collection, false otherwise.
</description>
</return>
</method>

<!-- javax.baja.tag.util.ImpliedTags.set(javax.baja.tag.Tag) -->
<method name="set"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="tag">
<type class="javax.baja.tag.Tag"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.tag.util.ImpliedTags.set(javax.baja.tag.Id, javax.baja.data.BIDataValue) -->
<method name="set"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
</parameter>
<parameter name="value">
<type class="javax.baja.data.BIDataValue"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.tag.util.ImpliedTags.setMulti(javax.baja.tag.Id, java.util.Collection&lt;? extends javax.baja.data.BIDataValue&gt;) -->
<method name="setMulti"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
</parameter>
<parameter name="values">
<parameterizedType class="java.util.Collection">
<args>
<wildcardType class="?">
<bounds kind="extends">
<type class="javax.baja.data.BIDataValue"/>
</bounds>
</wildcardType>
</args>
</parameterizedType>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.tag.util.ImpliedTags.addMulti(javax.baja.tag.Id, java.util.Collection&lt;? extends javax.baja.data.BIDataValue&gt;) -->
<method name="addMulti"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
</parameter>
<parameter name="values">
<parameterizedType class="java.util.Collection">
<args>
<wildcardType class="?">
<bounds kind="extends">
<type class="javax.baja.data.BIDataValue"/>
</bounds>
</wildcardType>
</args>
</parameterizedType>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.tag.util.ImpliedTags.addMulti(javax.baja.tag.Tag) -->
<method name="addMulti"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="tag">
<type class="javax.baja.tag.Tag"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.tag.util.ImpliedTags.addMulti(javax.baja.tag.Id, javax.baja.data.BIDataValue) -->
<method name="addMulti"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
</parameter>
<parameter name="value">
<type class="javax.baja.data.BIDataValue"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.tag.util.ImpliedTags.merge(java.util.Collection&lt;javax.baja.tag.Tag&gt;) -->
<method name="merge"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="tags">
<parameterizedType class="java.util.Collection">
<args>
<type class="javax.baja.tag.Tag"/>
</args>
</parameterizedType>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.tag.util.ImpliedTags.remove(javax.baja.tag.Id, javax.baja.data.BIDataValue) -->
<method name="remove"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
</parameter>
<parameter name="value">
<type class="javax.baja.data.BIDataValue"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.tag.util.ImpliedTags.removeAll(javax.baja.tag.Id) -->
<method name="removeAll"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.tag.util.ImpliedTags.remove(javax.baja.tag.Tag) -->
<method name="remove"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="tag">
<type class="javax.baja.tag.Tag"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.tag.util.ImpliedTags.filter(java.util.function.Predicate&lt;javax.baja.tag.Tag&gt;) -->
<method name="filter"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="condition">
<parameterizedType class="java.util.function.Predicate">
<args>
<type class="javax.baja.tag.Tag"/>
</args>
</parameterizedType>
</parameter>
<return>
<parameterizedType class="java.util.Collection">
<args>
<type class="javax.baja.tag.Tag"/>
</args>
</parameterizedType>
</return>
</method>

<!-- javax.baja.tag.util.ImpliedTags.getAll() -->
<method name="getAll"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get all tags in the collection.
</description>
<return>
<parameterizedType class="java.util.Collection">
<args>
<type class="javax.baja.tag.Tag"/>
</args>
</parameterizedType>
<description>
a &lt;code&gt;Collection&amp;lt;Tag&amp;gt;&lt;/code&gt; containing all tags in the collection
</description>
</return>
</method>

<!-- javax.baja.tag.util.ImpliedTags.get(javax.baja.tag.Id) -->
<method name="get"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get the first value for the tag with the specified id.
</description>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
<description>
The id of the tag to retrieve from the collection.
</description>
</parameter>
<return>
<parameterizedType class="java.util.Optional">
<args>
<type class="javax.baja.data.BIDataValue"/>
</args>
</parameterizedType>
<description>
Returns the first value for the tag with the specified id or null&#xa; if the tag is not in the collection.
</description>
</return>
</method>

<!-- javax.baja.tag.util.ImpliedTags.getValues(javax.baja.tag.Id) -->
<method name="getValues"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get all of the values for the specified id.
</description>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
</parameter>
<return>
<parameterizedType class="java.util.Collection">
<args>
<type class="javax.baja.data.BIDataValue"/>
</args>
</parameterizedType>
</return>
</method>

<!-- javax.baja.tag.util.ImpliedTags.getInDictionary(java.lang.String) -->
<method name="getInDictionary"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get all tags that have an &lt;code&gt;<see ref="javax.baja.tag.Id">Id</see>&lt;/code&gt; with the given dictionary.
</description>
<parameter name="dictionary">
<type class="java.lang.String"/>
<description>
the dictionary name of tags to search for
</description>
</parameter>
<return>
<parameterizedType class="java.util.Collection">
<args>
<type class="javax.baja.tag.Tag"/>
</args>
</parameterizedType>
<description>
a &lt;code&gt;Collection&amp;lt;Tag&amp;gt;&lt;/code&gt; that contains all tags in the given dictionary
</description>
</return>
</method>

<!-- javax.baja.tag.util.ImpliedTags.iterator() -->
<method name="iterator"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get an iterator over all tags in the collection.
</description>
<return>
<parameterizedType class="java.util.Iterator">
<args>
<type class="javax.baja.tag.Tag"/>
</args>
</parameterizedType>
<description>
an Iterator over all tags in the collection
</description>
</return>
</method>

</class>
</bajadoc>
