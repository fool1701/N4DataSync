<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="baja" runtimeProfile="rt" qualifiedName="javax.baja.tag.TagDictionaryService" name="TagDictionaryService" packageName="javax.baja.tag" public="true" interface="true" abstract="true" category="interface">
<description>
TagDictionaryService
</description>
<tag name="@author">John Sublett</tag>
<tag name="@creation">2/17/14</tag>
<tag name="@since">Niagara 4.0</tag>
<!-- javax.baja.tag.TagDictionaryService.getDefaultNamespace() -->
<method name="getDefaultNamespace"  public="true" abstract="true">
<description>
Get the default namespace for this service.  This is typically the namespace of a dictionary&#xa; installed in the service.  If a default namespace is defined, global tags that appear in tag&#xa; queries are assumed to be tags in the dictionary that owns the default namespace.
</description>
<return>
<type class="java.lang.String"/>
<description>
the default namespace or null if no default namespace is defined.
</description>
</return>
</method>

<!-- javax.baja.tag.TagDictionaryService.setDefaultNamespace(java.lang.String) -->
<method name="setDefaultNamespace"  public="true" abstract="true">
<description>
Set the default namespace for this service.  See &lt;code&gt;<see ref="javax.baja.tag.TagDictionaryService#getDefaultNamespace()">#getDefaultNamespace()</see>&lt;/code&gt;.
</description>
<parameter name="defaultNamespace">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.tag.TagDictionaryService.getTagDictionary(java.lang.String) -->
<method name="getTagDictionary"  public="true" abstract="true">
<description>
Get the TagDictionary for the specified namespace.
</description>
<parameter name="namespace">
<type class="java.lang.String"/>
<description>
The string id of the namespace defined by the target dictionary.
</description>
</parameter>
<return>
<parameterizedType class="java.util.Optional">
<args>
<type class="javax.baja.tag.TagDictionary"/>
</args>
</parameterizedType>
<description>
the TagDictionary with the specified namespace or &lt;code&gt;<see ref="java.util.Optional#empty()">Optional#empty()</see>&lt;/code&gt; if the&#xa; dictionary for the specified namespace is not installed
</description>
</return>
</method>

<!-- javax.baja.tag.TagDictionaryService.getTagDictionaries() -->
<method name="getTagDictionaries"  public="true" abstract="true">
<description>
Get all installed TagDictionaries.
</description>
<return>
<parameterizedType class="java.util.Collection">
<args>
<type class="javax.baja.tag.TagDictionary"/>
</args>
</parameterizedType>
<description>
a collection of all installed TagDictionaries.
</description>
</return>
</method>

<!-- javax.baja.tag.TagDictionaryService.getSmartTagDictionary(java.lang.String) -->
<method name="getSmartTagDictionary"  public="true" abstract="true">
<description>
Get the SmartTagDictionary for the specified namespace.
</description>
<parameter name="namespace">
<type class="java.lang.String"/>
<description>
The string id of the namespace defined by the target dictionary.
</description>
</parameter>
<return>
<parameterizedType class="java.util.Optional">
<args>
<type class="javax.baja.tag.SmartTagDictionary"/>
</args>
</parameterizedType>
<description>
the SmartTagDictionary with the specified namespace or &lt;code&gt;<see ref="java.util.Optional#empty()">Optional#empty()</see>&lt;/code&gt; if a&#xa; SmartTagDictionary for the specified namespace is not installed
</description>
</return>
</method>

<!-- javax.baja.tag.TagDictionaryService.getSmartTagDictionaries() -->
<method name="getSmartTagDictionaries"  public="true" abstract="true">
<description>
Get all installed SmartTagDictionaries.
</description>
<return>
<parameterizedType class="java.util.Collection">
<args>
<type class="javax.baja.tag.SmartTagDictionary"/>
</args>
</parameterizedType>
<description>
a collection of all installed SmartTagDictionaries
</description>
</return>
</method>

<!-- javax.baja.tag.TagDictionaryService.getImpliedTag(javax.baja.tag.Id, javax.baja.tag.Entity) -->
<method name="getImpliedTag"  public="true" default="true">
<description>
Get an implied tag for the specified id on the specified entity. &lt;code&gt;<see ref="java.util.Optional#empty()">Optional#empty()</see>&lt;/code&gt; is&#xa; returned if no smart tag dictionaries imply a &lt;code&gt;<see ref="javax.baja.tag.TagInfo">TagInfo</see>&lt;/code&gt; on the entity; see &lt;code&gt;<see ref="javax.baja.tag.SmartTagDictionary#getImpliedTagInfo(javax.baja.tag.Id, javax.baja.tag.Entity)">SmartTagDictionary#getImpliedTagInfo(Id, Entity)</see>&lt;/code&gt;. &lt;code&gt;<see ref="java.util.Optional#empty()">Optional#empty()</see>&lt;/code&gt; is also returned if&#xa; a smart tag dictionaries implies a TagInfo on the entity but that TagInfo does not result in a&#xa; tag; see &lt;code&gt;<see ref="javax.baja.tag.TagInfo#getTag(javax.baja.tag.Entity)">TagInfo#getTag(Entity)</see>&lt;/code&gt;.
</description>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
<description>
id of the implied tag
</description>
</parameter>
<parameter name="entity">
<type class="javax.baja.tag.Entity"/>
<description>
entity to evaluate for the implied tag
</description>
</parameter>
<return>
<parameterizedType class="java.util.Optional">
<args>
<type class="javax.baja.tag.Tag"/>
</args>
</parameterizedType>
<description>
an implied tag or &lt;code&gt;<see ref="java.util.Optional#empty()">Optional#empty()</see>&lt;/code&gt; if the tag is not implied on the specified&#xa; entity
</description>
</return>
</method>

<!-- javax.baja.tag.TagDictionaryService.getImpliedTags(javax.baja.tag.Entity) -->
<method name="getImpliedTags"  public="true" default="true">
<description>
Get all tags implied on the specified entity. The resulting collection is populated by&#xa; iterating through the installed SmartTagDictionaries and adding the implied tags from each. See&#xa; &lt;code&gt;<see ref="javax.baja.tag.SmartTagDictionary#addAllImpliedTags(javax.baja.tag.Entity, java.util.Collection&lt;javax.baja.tag.Tag&gt;)">SmartTagDictionary#addAllImpliedTags(Entity, Collection)</see>&lt;/code&gt; for further details.
</description>
<parameter name="entity">
<type class="javax.baja.tag.Entity"/>
<description>
The entity to evaluate for implied tags.
</description>
</parameter>
<return>
<parameterizedType class="java.util.Collection">
<args>
<type class="javax.baja.tag.Tag"/>
</args>
</parameterizedType>
<description>
a collection of tags implied on the entity
</description>
</return>
</method>

<!-- javax.baja.tag.TagDictionaryService.getImpliedRelation(javax.baja.tag.Id, javax.baja.tag.Entity) -->
<method name="getImpliedRelation"  public="true" abstract="true">
<description>
Get the first or only relation with the specified id with the specified entity as the source.&#xa; See &lt;code&gt;<see ref="javax.baja.tag.SmartTagDictionary#getImpliedRelation(javax.baja.tag.Id, javax.baja.tag.Entity)">SmartTagDictionary#getImpliedRelation(Id, Entity)</see>&lt;/code&gt; for further details.
</description>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
<description>
The id of the relation.
</description>
</parameter>
<parameter name="source">
<type class="javax.baja.tag.Entity"/>
<description>
The source entity for the relation.
</description>
</parameter>
<return>
<parameterizedType class="java.util.Optional">
<args>
<type class="javax.baja.tag.Relation"/>
</args>
</parameterizedType>
<description>
a single relation with the specified id or &lt;code&gt;<see ref="java.util.Optional#empty()">Optional#empty()</see>&lt;/code&gt; if the relation&#xa; is not implied on the specified entity
</description>
</return>
</method>

<!-- javax.baja.tag.TagDictionaryService.addAllImpliedRelations(javax.baja.tag.Entity, java.util.Collection&lt;javax.baja.tag.Relation&gt;) -->
<method name="addAllImpliedRelations"  public="true" abstract="true">
<description>
Add all implied relations for the specified source entity to the collection of relations. See&#xa; &lt;code&gt;<see ref="javax.baja.tag.SmartTagDictionary#addAllImpliedRelations(javax.baja.tag.Entity, java.util.Collection&lt;javax.baja.tag.Relation&gt;)">SmartTagDictionary#addAllImpliedRelations(Entity, Collection)</see>&lt;/code&gt; for further details.
</description>
<parameter name="source">
<type class="javax.baja.tag.Entity"/>
<description>
The entity that is the source of the relation.
</description>
</parameter>
<parameter name="relations">
<parameterizedType class="java.util.Collection">
<args>
<type class="javax.baja.tag.Relation"/>
</args>
</parameterizedType>
<description>
The collection of relations to populate.
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.tag.TagDictionaryService.getAllImpliedRelations(javax.baja.tag.Entity) -->
<method name="getAllImpliedRelations"  public="true" default="true">
<description>
Get the collection of relations implied for the specified source entity.  See &lt;code&gt;<see ref="javax.baja.tag.TagDictionaryService#addAllImpliedRelations(javax.baja.tag.Entity, java.util.Collection&lt;javax.baja.tag.Relation&gt;)">#addAllImpliedRelations(Entity, Collection)</see>&lt;/code&gt;.
</description>
<parameter name="source">
<type class="javax.baja.tag.Entity"/>
<description>
The source entity of the relations.
</description>
</parameter>
<return>
<parameterizedType class="java.util.Collection">
<args>
<type class="javax.baja.tag.Relation"/>
</args>
</parameterizedType>
<description>
a collection of relations where the specified entity is the source
</description>
</return>
</method>

<!-- javax.baja.tag.TagDictionaryService.addImpliedRelations(javax.baja.tag.Id, javax.baja.tag.Entity, java.util.Collection&lt;javax.baja.tag.Relation&gt;) -->
<method name="addImpliedRelations"  public="true" abstract="true">
<description>
Add to the supplied collection all relations with the specified ID implied by a &lt;code&gt;<see ref="javax.baja.tag.SmartTagDictionary">SmartTagDictionary</see>&lt;/code&gt; for the specified source entity. The smart tag dictionary must be enabled&#xa; and its namespace must match that of the ID.  See &lt;code&gt;<see ref="javax.baja.tag.SmartTagDictionary#addImpliedRelations(javax.baja.tag.Id, javax.baja.tag.Entity, java.util.Collection&lt;javax.baja.tag.Relation&gt;)">SmartTagDictionary#addImpliedRelations(Id, Entity, Collection)</see>&lt;/code&gt; for further details.
</description>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
<description>
The id of the relation.
</description>
</parameter>
<parameter name="source">
<type class="javax.baja.tag.Entity"/>
<description>
The source entity of the relations.
</description>
</parameter>
<parameter name="relations">
<parameterizedType class="java.util.Collection">
<args>
<type class="javax.baja.tag.Relation"/>
</args>
</parameterizedType>
<description>
The collection of relations to populate.
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.tag.TagDictionaryService.getImpliedRelations(javax.baja.tag.Id, javax.baja.tag.Entity) -->
<method name="getImpliedRelations"  public="true" default="true">
<description>
Get the collection of relations with the specified id implied by the specified entity. See&#xa; &lt;code&gt;<see ref="javax.baja.tag.TagDictionaryService#addImpliedRelations(javax.baja.tag.Id, javax.baja.tag.Entity, java.util.Collection&lt;javax.baja.tag.Relation&gt;)">#addImpliedRelations(Id, Entity, Collection)</see>&lt;/code&gt;.
</description>
<parameter name="id">
<type class="javax.baja.tag.Id"/>
<description>
The id of the relations.
</description>
</parameter>
<parameter name="entity">
<type class="javax.baja.tag.Entity"/>
<description>
The source entity for the relations.
</description>
</parameter>
<return>
<parameterizedType class="java.util.Collection">
<args>
<type class="javax.baja.tag.Relation"/>
</args>
</parameterizedType>
<description>
a collection of relations with the specified id where the specified entity is the&#xa; source
</description>
</return>
</method>

<!-- javax.baja.tag.TagDictionaryService.tagAdded(javax.baja.tag.Entity, javax.baja.tag.Id) -->
<method name="tagAdded"  public="true" abstract="true">
<description>
Call back when a tag with the given Id has been added to the given target entity.
</description>
<parameter name="target">
<type class="javax.baja.tag.Entity"/>
<description>
The target entity.
</description>
</parameter>
<parameter name="tagId">
<type class="javax.baja.tag.Id"/>
<description>
The Id of the tag that has been added.
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.tag.TagDictionaryService.tagRemoved(javax.baja.tag.Entity, javax.baja.tag.Id) -->
<method name="tagRemoved"  public="true" abstract="true">
<description>
Call back when a tag with the given Id has been removed from the given target entity.
</description>
<parameter name="target">
<type class="javax.baja.tag.Entity"/>
<description>
The target entity.
</description>
</parameter>
<parameter name="tagId">
<type class="javax.baja.tag.Id"/>
<description>
The Id of the tag that has been added.
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.tag.TagDictionaryService.getDataPolicyForTag(javax.baja.tag.Id) -->
<method name="getDataPolicyForTag"  public="true" abstract="true">
<description>
Get the DataPolicy of the given tag ID.
</description>
<parameter name="tagId">
<type class="javax.baja.tag.Id"/>
<description>
The source entity of the relations.
</description>
</parameter>
<return>
<parameterizedType class="java.util.Optional">
<args>
<type class="javax.baja.tag.DataPolicy"/>
</args>
</parameterizedType>
<description>
Returns a &lt;code&gt;Optional&amp;lt;DataPolicy&amp;gt;&lt;/code&gt;.
</description>
</return>
</method>

</class>
</bajadoc>
