<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="baja" runtimeProfile="rt" qualifiedName="javax.baja.user.BPasswordStrength" name="BPasswordStrength" packageName="javax.baja.user" public="true">
<description/>
<tag name="@author">Bill Smith</tag>
<tag name="@creation">08 Feb 2012</tag>
<tag name="@version">$Revision: 1$ $Date: 3/28/02 10:35:40 AM EST$</tag>
<tag name="@since">Niagara AX 3.8</tag>
<extends>
<type class="javax.baja.sys.BStruct"/>
</extends>
<implements>
<type class="javax.baja.sys.IPropertyValidator"/>
</implements>
<property name="minimumLength" flags="">
<type class="int"/>
<description>
Slot for the &lt;code&gt;minimumLength&lt;/code&gt; property.&#xa; minimum password length
</description>
<tag name="@see">#getMinimumLength</tag>
<tag name="@see">#setMinimumLength</tag>
</property>

<property name="maximumLength" flags="">
<type class="int"/>
<description>
Slot for the &lt;code&gt;maximumLength&lt;/code&gt; property.&#xa; Maximum password length
</description>
<tag name="@since">Niagara 4.13</tag>
<tag name="@see">#getMaximumLength</tag>
<tag name="@see">#setMaximumLength</tag>
</property>

<property name="minimumLowerCase" flags="">
<type class="int"/>
<description>
Slot for the &lt;code&gt;minimumLowerCase&lt;/code&gt; property.&#xa; minimum lower case letters
</description>
<tag name="@see">#getMinimumLowerCase</tag>
<tag name="@see">#setMinimumLowerCase</tag>
</property>

<property name="minimumUpperCase" flags="">
<type class="int"/>
<description>
Slot for the &lt;code&gt;minimumUpperCase&lt;/code&gt; property.&#xa; minimum upper case letters
</description>
<tag name="@see">#getMinimumUpperCase</tag>
<tag name="@see">#setMinimumUpperCase</tag>
</property>

<property name="minimumDigits" flags="">
<type class="int"/>
<description>
Slot for the &lt;code&gt;minimumDigits&lt;/code&gt; property.&#xa; minimum numbers
</description>
<tag name="@see">#getMinimumDigits</tag>
<tag name="@see">#setMinimumDigits</tag>
</property>

<property name="minimumSpecial" flags="">
<type class="int"/>
<description>
Slot for the &lt;code&gt;minimumSpecial&lt;/code&gt; property.&#xa; minimum numbers
</description>
<tag name="@see">#getMinimumSpecial</tag>
<tag name="@see">#setMinimumSpecial</tag>
</property>

<!-- javax.baja.user.BPasswordStrength() -->
<constructor name="BPasswordStrength" public="true">
<description/>
</constructor>

<!-- javax.baja.user.BPasswordStrength(int, int, int, int, int) -->
<constructor name="BPasswordStrength" public="true">
<parameter name="len">
<type class="int"/>
</parameter>
<parameter name="lower">
<type class="int"/>
</parameter>
<parameter name="upper">
<type class="int"/>
</parameter>
<parameter name="digits">
<type class="int"/>
</parameter>
<parameter name="special">
<type class="int"/>
</parameter>
<description/>
</constructor>

<!-- javax.baja.user.BPasswordStrength(int, int, int, int, int, int) -->
<constructor name="BPasswordStrength" public="true">
<parameter name="minLen">
<type class="int"/>
<description>
The minimum password length (should not exceed maxLen)
</description>
</parameter>
<parameter name="lower">
<type class="int"/>
<description>
The minimum number of lowercase characters required for passwords
</description>
</parameter>
<parameter name="upper">
<type class="int"/>
<description>
The minimum number of uppercase characters required for passwords
</description>
</parameter>
<parameter name="digits">
<type class="int"/>
<description>
The minimum number of digits required for passwords
</description>
</parameter>
<parameter name="special">
<type class="int"/>
<description>
The minimum number of special characters required for passwords
</description>
</parameter>
<parameter name="maxLen">
<type class="int"/>
<description>
The maximum password length (should not be less than minLen and must be greater than zero)
</description>
</parameter>
<description>
Construct a new BPasswordStrength instance with the given parameters.
</description>
<tag name="@since">Niagara 4.13</tag>
</constructor>

<!-- javax.baja.user.BPasswordStrength(com.tridium.nre.security.PasswordStrength) -->
<constructor name="BPasswordStrength" public="true">
<parameter name="passwordStrength">
<type class="com.tridium.nre.security.PasswordStrength"/>
<description>
Used to create the BPasswordStrength.
</description>
</parameter>
<description>
Creates a new BPasswordStrength using the information from the provided &lt;code&gt;<see ref="com.tridium.nre.security.PasswordStrength">PasswordStrength</see>&lt;/code&gt;
</description>
<tag name="@since">Niagara 4.5</tag>
</constructor>

<!-- javax.baja.user.BPasswordStrength(javax.baja.user.BPasswordStrength, int) -->
<constructor name="BPasswordStrength" public="true">
<parameter name="passwordStrength">
<type class="javax.baja.user.BPasswordStrength"/>
<description>
The instance whose properties to copy to the new instance
</description>
</parameter>
<parameter name="maxLen">
<type class="int"/>
<description>
The maximum password length to set on the new instance (should not be&#xa;               less than the minimum length on the given instance and must be greater than zero)
</description>
</parameter>
<description>
Construct a new BPasswordStrength instance with the same properties as the given&#xa; BPasswordStrength instance but replacing the maximum length with the given one.
</description>
<tag name="@since">Niagara 4.13</tag>
</constructor>

<!-- javax.baja.user.BPasswordStrength.getMinimumLength() -->
<method name="getMinimumLength"  public="true">
<description>
Get the &lt;code&gt;minimumLength&lt;/code&gt; property.&#xa; minimum password length
</description>
<tag name="@see">#minimumLength</tag>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.user.BPasswordStrength.setMinimumLength(int) -->
<method name="setMinimumLength"  public="true">
<description>
Set the &lt;code&gt;minimumLength&lt;/code&gt; property.&#xa; minimum password length
</description>
<tag name="@see">#minimumLength</tag>
<parameter name="v">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.user.BPasswordStrength.getMaximumLength() -->
<method name="getMaximumLength"  public="true">
<description>
Get the &lt;code&gt;maximumLength&lt;/code&gt; property.&#xa; Maximum password length
</description>
<tag name="@since">Niagara 4.13</tag>
<tag name="@see">#maximumLength</tag>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.user.BPasswordStrength.setMaximumLength(int) -->
<method name="setMaximumLength"  public="true">
<description>
Set the &lt;code&gt;maximumLength&lt;/code&gt; property.&#xa; Maximum password length
</description>
<tag name="@since">Niagara 4.13</tag>
<tag name="@see">#maximumLength</tag>
<parameter name="v">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.user.BPasswordStrength.getMinimumLowerCase() -->
<method name="getMinimumLowerCase"  public="true">
<description>
Get the &lt;code&gt;minimumLowerCase&lt;/code&gt; property.&#xa; minimum lower case letters
</description>
<tag name="@see">#minimumLowerCase</tag>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.user.BPasswordStrength.setMinimumLowerCase(int) -->
<method name="setMinimumLowerCase"  public="true">
<description>
Set the &lt;code&gt;minimumLowerCase&lt;/code&gt; property.&#xa; minimum lower case letters
</description>
<tag name="@see">#minimumLowerCase</tag>
<parameter name="v">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.user.BPasswordStrength.getMinimumUpperCase() -->
<method name="getMinimumUpperCase"  public="true">
<description>
Get the &lt;code&gt;minimumUpperCase&lt;/code&gt; property.&#xa; minimum upper case letters
</description>
<tag name="@see">#minimumUpperCase</tag>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.user.BPasswordStrength.setMinimumUpperCase(int) -->
<method name="setMinimumUpperCase"  public="true">
<description>
Set the &lt;code&gt;minimumUpperCase&lt;/code&gt; property.&#xa; minimum upper case letters
</description>
<tag name="@see">#minimumUpperCase</tag>
<parameter name="v">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.user.BPasswordStrength.getMinimumDigits() -->
<method name="getMinimumDigits"  public="true">
<description>
Get the &lt;code&gt;minimumDigits&lt;/code&gt; property.&#xa; minimum numbers
</description>
<tag name="@see">#minimumDigits</tag>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.user.BPasswordStrength.setMinimumDigits(int) -->
<method name="setMinimumDigits"  public="true">
<description>
Set the &lt;code&gt;minimumDigits&lt;/code&gt; property.&#xa; minimum numbers
</description>
<tag name="@see">#minimumDigits</tag>
<parameter name="v">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.user.BPasswordStrength.getMinimumSpecial() -->
<method name="getMinimumSpecial"  public="true">
<description>
Get the &lt;code&gt;minimumSpecial&lt;/code&gt; property.&#xa; minimum numbers
</description>
<tag name="@see">#minimumSpecial</tag>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.user.BPasswordStrength.setMinimumSpecial(int) -->
<method name="setMinimumSpecial"  public="true">
<description>
Set the &lt;code&gt;minimumSpecial&lt;/code&gt; property.&#xa; minimum numbers
</description>
<tag name="@see">#minimumSpecial</tag>
<parameter name="v">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.user.BPasswordStrength.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.user.BPasswordStrength.isPasswordValid(char[], java.util.function.Consumer&lt;javax.baja.sys.Localizable&gt;) -->
<method name="isPasswordValid"  public="true">
<description>
Returns true if the given password meets this object&#x27;s strength requirements, otherwise false.
</description>
<tag name="@since">Niagara 4.1</tag>
<parameter name="password">
<type class="char" dimension="1"/>
</parameter>
<parameter name="messageConsumer">
<parameterizedType class="java.util.function.Consumer">
<args>
<type class="javax.baja.sys.Localizable"/>
</args>
</parameterizedType>
<description>
if the strength requirements are unmet, a localizable message will be provided&#xa;                        to &lt;code&gt;<see ref="java.util.function.Consumer#accept(T)">Consumer#accept(Object)</see>&lt;/code&gt;
</description>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.user.BPasswordStrength.isPasswordValid(java.lang.String) -->
<method name="isPasswordValid"  public="true">
<description/>
<parameter name="password">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.user.BPasswordStrength.validateSet(javax.baja.sys.Validatable, javax.baja.sys.Context) -->
<method name="validateSet"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
This method validates that the password strength follows the minimum requirements&#xa; of this host. For example, a host in FIPS mode cannot have passwords short than&#xa; 14 characters.&#xa;&#xa; &lt;p&gt;Subclasses that override this method should take care to enforce these limits. Failure&#xa; to do so may result in unexpected errors when trying to log in, or when creating PBE keys.&lt;/p&gt;
</description>
<parameter name="validatable">
<type class="javax.baja.sys.Validatable"/>
<description>
The validatable instance which contains the existing&#xa; and proposed state of a BComplex that needs to be validated.
</description>
</parameter>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
<description>
the Context for the pending set operation. Might be null.
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.user.BPasswordStrength.validateSet(javax.baja.sys.BComplex, javax.baja.sys.Property, javax.baja.sys.BValue, javax.baja.sys.Context) -->
<method name="validateSet"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
This method validates that the password strength follows the minimum requirements&#xa; of this host. For example, a host in FIPS mode cannot have passwords short than&#xa; 14 characters.&#xa;&#xa; &lt;p&gt;Subclasses that override this method should take care to enforce these limits. Failure&#xa; to do so may result in unexpected errors when trying to log in, or when creating PBE keys.&lt;/p&gt;
</description>
<parameter name="instance">
<type class="javax.baja.sys.BComplex"/>
<description>
The BComplex instance for which there is&#xa; a pending set operation requiring validation.
</description>
</parameter>
<parameter name="property">
<type class="javax.baja.sys.Property"/>
<description>
The property on the BComplex instance for&#xa; which there is a pending set operation.
</description>
</parameter>
<parameter name="newValue">
<type class="javax.baja.sys.BValue"/>
<description>
The pending new value for the property on the&#xa; BComplex instance which should be validated prior to commit.
</description>
</parameter>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
<description>
the Context for the pending set operation. Might be null.
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.user.BPasswordStrength.getPropertyValidator(javax.baja.sys.Property[], javax.baja.sys.Context) -->
<method name="getPropertyValidator"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="properties">
<type class="javax.baja.sys.Property" dimension="1"/>
</parameter>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="javax.baja.sys.IPropertyValidator"/>
</return>
</method>

<!-- javax.baja.user.BPasswordStrength.getPropertyValidator(javax.baja.sys.Property, javax.baja.sys.Context) -->
<method name="getPropertyValidator"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="property">
<type class="javax.baja.sys.Property"/>
</parameter>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="javax.baja.sys.IPropertyValidator"/>
</return>
</method>

<!-- javax.baja.user.BPasswordStrength.getLocalizableRequirements() -->
<method name="getLocalizableRequirements"  public="true">
<description/>
<return>
<parameterizedType class="java.util.List">
<args>
<type class="javax.baja.sys.Localizable"/>
</args>
</parameterizedType>
</return>
</method>

<!-- javax.baja.user.BPasswordStrength.minimumLength -->
<field name="minimumLength"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;minimumLength&lt;/code&gt; property.&#xa; minimum password length
</description>
<tag name="@see">#getMinimumLength</tag>
<tag name="@see">#setMinimumLength</tag>
</field>

<!-- javax.baja.user.BPasswordStrength.maximumLength -->
<field name="maximumLength"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;maximumLength&lt;/code&gt; property.&#xa; Maximum password length
</description>
<tag name="@since">Niagara 4.13</tag>
<tag name="@see">#getMaximumLength</tag>
<tag name="@see">#setMaximumLength</tag>
</field>

<!-- javax.baja.user.BPasswordStrength.minimumLowerCase -->
<field name="minimumLowerCase"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;minimumLowerCase&lt;/code&gt; property.&#xa; minimum lower case letters
</description>
<tag name="@see">#getMinimumLowerCase</tag>
<tag name="@see">#setMinimumLowerCase</tag>
</field>

<!-- javax.baja.user.BPasswordStrength.minimumUpperCase -->
<field name="minimumUpperCase"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;minimumUpperCase&lt;/code&gt; property.&#xa; minimum upper case letters
</description>
<tag name="@see">#getMinimumUpperCase</tag>
<tag name="@see">#setMinimumUpperCase</tag>
</field>

<!-- javax.baja.user.BPasswordStrength.minimumDigits -->
<field name="minimumDigits"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;minimumDigits&lt;/code&gt; property.&#xa; minimum numbers
</description>
<tag name="@see">#getMinimumDigits</tag>
<tag name="@see">#setMinimumDigits</tag>
</field>

<!-- javax.baja.user.BPasswordStrength.minimumSpecial -->
<field name="minimumSpecial"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;minimumSpecial&lt;/code&gt; property.&#xa; minimum numbers
</description>
<tag name="@see">#getMinimumSpecial</tag>
<tag name="@see">#setMinimumSpecial</tag>
</field>

<!-- javax.baja.user.BPasswordStrength.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

<!-- javax.baja.user.BPasswordStrength.DEFAULT -->
<field name="DEFAULT"  public="true" static="true" final="true">
<type class="javax.baja.user.BPasswordStrength"/>
<description/>
</field>

<!-- javax.baja.user.BPasswordStrength.FIPS_1 -->
<field name="FIPS_1"  public="true" static="true" final="true">
<type class="javax.baja.user.BPasswordStrength"/>
<description/>
</field>

<!-- javax.baja.user.BPasswordStrength.STRONG -->
<field name="STRONG"  public="true" static="true" final="true">
<type class="javax.baja.user.BPasswordStrength"/>
<description/>
</field>

<!-- javax.baja.user.BPasswordStrength.OFF -->
<field name="OFF"  public="true" static="true" final="true">
<type class="javax.baja.user.BPasswordStrength"/>
<description/>
</field>

</class>
</bajadoc>
