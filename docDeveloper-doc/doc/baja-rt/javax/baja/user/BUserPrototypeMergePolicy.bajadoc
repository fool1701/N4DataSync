<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="baja" runtimeProfile="rt" qualifiedName="javax.baja.user.BUserPrototypeMergePolicy" name="BUserPrototypeMergePolicy" packageName="javax.baja.user" public="true" final="true">
<description>
This class describes a policy for merging user prototypes (&lt;code&gt;<see ref="javax.baja.user.BUser">BUser</see>&lt;/code&gt; or &lt;code&gt;<see ref="javax.baja.user.BUserPrototype">BUserPrototype</see>&lt;/code&gt;)&#xa; when a remote user specifies multiple possible prototypes.
</description>
<tag name="@author">Melanie Coggan on 2021-12-02</tag>
<tag name="@since">Niagara 4.12</tag>
<extends>
<type class="javax.baja.sys.BComponent"/>
</extends>
<property name="enabled" flags="">
<type class="boolean"/>
<description>
Slot for the &lt;code&gt;enabled&lt;/code&gt; property.&#xa; If true, user prototypes will be merged according to the policy.
</description>
<tag name="@see">#getEnabled</tag>
<tag name="@see">#setEnabled</tag>
</property>

<property name="rolesMergeMode" flags="">
<type class="javax.baja.user.BRolesMergeMode"/>
<description>
Slot for the &lt;code&gt;rolesMergeMode&lt;/code&gt; property.&#xa; Determines if and how the roles will be merged.
</description>
<tag name="@see">#getRolesMergeMode</tag>
<tag name="@see">#setRolesMergeMode</tag>
</property>

<property name="expirationMergeMode" flags="">
<type class="javax.baja.user.BExpirationMergeMode"/>
<description>
Slot for the &lt;code&gt;expirationMergeMode&lt;/code&gt; property.&#xa; Determines if and how the expirations will be merged.
</description>
<tag name="@see">#getExpirationMergeMode</tag>
<tag name="@see">#setExpirationMergeMode</tag>
</property>

<property name="allowConcurrentSessionsMergeMode" flags="">
<type class="javax.baja.user.BAllowConcurrentSessionsMergeMode"/>
<description>
Slot for the &lt;code&gt;allowConcurrentSessionsMergeMode&lt;/code&gt; property.&#xa; Determines if and how the allowConcurrentSetting properties will be merged.
</description>
<tag name="@see">#getAllowConcurrentSessionsMergeMode</tag>
<tag name="@see">#setAllowConcurrentSessionsMergeMode</tag>
</property>

<property name="autoLogoffSettingsMergeMode" flags="">
<type class="javax.baja.user.BAutoLogoffSettingsMergeMode"/>
<description>
Slot for the &lt;code&gt;autoLogoffSettingsMergeMode&lt;/code&gt; property.&#xa; Determines if and how the autoLogoffSetting properties will be merged.
</description>
<tag name="@see">#getAutoLogoffSettingsMergeMode</tag>
<tag name="@see">#setAutoLogoffSettingsMergeMode</tag>
</property>

<!-- javax.baja.user.BUserPrototypeMergePolicy() -->
<constructor name="BUserPrototypeMergePolicy" public="true">
<description/>
</constructor>

<!-- javax.baja.user.BUserPrototypeMergePolicy.getEnabled() -->
<method name="getEnabled"  public="true">
<description>
Get the &lt;code&gt;enabled&lt;/code&gt; property.&#xa; If true, user prototypes will be merged according to the policy.
</description>
<tag name="@see">#enabled</tag>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.user.BUserPrototypeMergePolicy.setEnabled(boolean) -->
<method name="setEnabled"  public="true">
<description>
Set the &lt;code&gt;enabled&lt;/code&gt; property.&#xa; If true, user prototypes will be merged according to the policy.
</description>
<tag name="@see">#enabled</tag>
<parameter name="v">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.user.BUserPrototypeMergePolicy.getRolesMergeMode() -->
<method name="getRolesMergeMode"  public="true">
<description>
Get the &lt;code&gt;rolesMergeMode&lt;/code&gt; property.&#xa; Determines if and how the roles will be merged.
</description>
<tag name="@see">#rolesMergeMode</tag>
<return>
<type class="javax.baja.user.BRolesMergeMode"/>
</return>
</method>

<!-- javax.baja.user.BUserPrototypeMergePolicy.setRolesMergeMode(javax.baja.user.BRolesMergeMode) -->
<method name="setRolesMergeMode"  public="true">
<description>
Set the &lt;code&gt;rolesMergeMode&lt;/code&gt; property.&#xa; Determines if and how the roles will be merged.
</description>
<tag name="@see">#rolesMergeMode</tag>
<parameter name="v">
<type class="javax.baja.user.BRolesMergeMode"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.user.BUserPrototypeMergePolicy.getExpirationMergeMode() -->
<method name="getExpirationMergeMode"  public="true">
<description>
Get the &lt;code&gt;expirationMergeMode&lt;/code&gt; property.&#xa; Determines if and how the expirations will be merged.
</description>
<tag name="@see">#expirationMergeMode</tag>
<return>
<type class="javax.baja.user.BExpirationMergeMode"/>
</return>
</method>

<!-- javax.baja.user.BUserPrototypeMergePolicy.setExpirationMergeMode(javax.baja.user.BExpirationMergeMode) -->
<method name="setExpirationMergeMode"  public="true">
<description>
Set the &lt;code&gt;expirationMergeMode&lt;/code&gt; property.&#xa; Determines if and how the expirations will be merged.
</description>
<tag name="@see">#expirationMergeMode</tag>
<parameter name="v">
<type class="javax.baja.user.BExpirationMergeMode"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.user.BUserPrototypeMergePolicy.getAllowConcurrentSessionsMergeMode() -->
<method name="getAllowConcurrentSessionsMergeMode"  public="true">
<description>
Get the &lt;code&gt;allowConcurrentSessionsMergeMode&lt;/code&gt; property.&#xa; Determines if and how the allowConcurrentSetting properties will be merged.
</description>
<tag name="@see">#allowConcurrentSessionsMergeMode</tag>
<return>
<type class="javax.baja.user.BAllowConcurrentSessionsMergeMode"/>
</return>
</method>

<!-- javax.baja.user.BUserPrototypeMergePolicy.setAllowConcurrentSessionsMergeMode(javax.baja.user.BAllowConcurrentSessionsMergeMode) -->
<method name="setAllowConcurrentSessionsMergeMode"  public="true">
<description>
Set the &lt;code&gt;allowConcurrentSessionsMergeMode&lt;/code&gt; property.&#xa; Determines if and how the allowConcurrentSetting properties will be merged.
</description>
<tag name="@see">#allowConcurrentSessionsMergeMode</tag>
<parameter name="v">
<type class="javax.baja.user.BAllowConcurrentSessionsMergeMode"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.user.BUserPrototypeMergePolicy.getAutoLogoffSettingsMergeMode() -->
<method name="getAutoLogoffSettingsMergeMode"  public="true">
<description>
Get the &lt;code&gt;autoLogoffSettingsMergeMode&lt;/code&gt; property.&#xa; Determines if and how the autoLogoffSetting properties will be merged.
</description>
<tag name="@see">#autoLogoffSettingsMergeMode</tag>
<return>
<type class="javax.baja.user.BAutoLogoffSettingsMergeMode"/>
</return>
</method>

<!-- javax.baja.user.BUserPrototypeMergePolicy.setAutoLogoffSettingsMergeMode(javax.baja.user.BAutoLogoffSettingsMergeMode) -->
<method name="setAutoLogoffSettingsMergeMode"  public="true">
<description>
Set the &lt;code&gt;autoLogoffSettingsMergeMode&lt;/code&gt; property.&#xa; Determines if and how the autoLogoffSetting properties will be merged.
</description>
<tag name="@see">#autoLogoffSettingsMergeMode</tag>
<parameter name="v">
<type class="javax.baja.user.BAutoLogoffSettingsMergeMode"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.user.BUserPrototypeMergePolicy.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.user.BUserPrototypeMergePolicy.mergePrototypes(javax.baja.sys.BComponent, javax.baja.sys.BComponent...) -->
<method name="mergePrototypes"  public="true" isVarargs="true">
<description>
Merges the supplied prototypes according to the policy.
</description>
<parameter name="mainPrototype">
<type class="javax.baja.sys.BComponent"/>
<description>
A &lt;code&gt;<see ref="javax.baja.user.BUser">BUser</see>&lt;/code&gt; or &lt;code&gt;<see ref="javax.baja.user.BUserPrototypeMergePolicy">BUserPrototypeMergePolicy</see>&lt;/code&gt;. This prototype will be used as a base for the merging.&#xa;                      All non-merged values will come from this prototype.
</description>
</parameter>
<parameter name="prototypes">
<type class="javax.baja.sys.BComponent" dimension="1"/>
<description>
A (potentially empty) list of prototypes to be merged with the main prototype. Only enabled, mergeable properties will be merged,&#xa;                   according to the merge policy.
</description>
</parameter>
<return>
<type class="javax.baja.user.BUserPrototype"/>
<description>
A &lt;code&gt;<see ref="javax.baja.user.BUserPrototype">BUserPrototype</see>&lt;/code&gt; corresponding to the merge of all supplied prototypes.
</description>
</return>
</method>

<!-- javax.baja.user.BUserPrototypeMergePolicy.getMergedPrototypeName(java.util.List&lt;javax.baja.sys.BComponent&gt;) -->
<method name="getMergedPrototypeName"  public="true" static="true">
<description>
Generates a name for the supplied list of prototypes
</description>
<parameter name="prototypes">
<parameterizedType class="java.util.List">
<args>
<type class="javax.baja.sys.BComponent"/>
</args>
</parameterizedType>
<description>
A List of BComponents that should be either BUser or BUserPrototypes
</description>
</parameter>
<return>
<type class="java.lang.String"/>
<description>
A new name for the merged prototype: merged_proto1_proto2_proto3
</description>
</return>
</method>

<!-- javax.baja.user.BUserPrototypeMergePolicy.enabled -->
<field name="enabled"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;enabled&lt;/code&gt; property.&#xa; If true, user prototypes will be merged according to the policy.
</description>
<tag name="@see">#getEnabled</tag>
<tag name="@see">#setEnabled</tag>
</field>

<!-- javax.baja.user.BUserPrototypeMergePolicy.rolesMergeMode -->
<field name="rolesMergeMode"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;rolesMergeMode&lt;/code&gt; property.&#xa; Determines if and how the roles will be merged.
</description>
<tag name="@see">#getRolesMergeMode</tag>
<tag name="@see">#setRolesMergeMode</tag>
</field>

<!-- javax.baja.user.BUserPrototypeMergePolicy.expirationMergeMode -->
<field name="expirationMergeMode"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;expirationMergeMode&lt;/code&gt; property.&#xa; Determines if and how the expirations will be merged.
</description>
<tag name="@see">#getExpirationMergeMode</tag>
<tag name="@see">#setExpirationMergeMode</tag>
</field>

<!-- javax.baja.user.BUserPrototypeMergePolicy.allowConcurrentSessionsMergeMode -->
<field name="allowConcurrentSessionsMergeMode"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;allowConcurrentSessionsMergeMode&lt;/code&gt; property.&#xa; Determines if and how the allowConcurrentSetting properties will be merged.
</description>
<tag name="@see">#getAllowConcurrentSessionsMergeMode</tag>
<tag name="@see">#setAllowConcurrentSessionsMergeMode</tag>
</field>

<!-- javax.baja.user.BUserPrototypeMergePolicy.autoLogoffSettingsMergeMode -->
<field name="autoLogoffSettingsMergeMode"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;autoLogoffSettingsMergeMode&lt;/code&gt; property.&#xa; Determines if and how the autoLogoffSetting properties will be merged.
</description>
<tag name="@see">#getAutoLogoffSettingsMergeMode</tag>
<tag name="@see">#setAutoLogoffSettingsMergeMode</tag>
</field>

<!-- javax.baja.user.BUserPrototypeMergePolicy.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
