<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="baja" runtimeProfile="rt" qualifiedName="javax.baja.security.BPermissionsMap" name="BPermissionsMap" packageName="javax.baja.security" public="true" final="true">
<description>
BPermissionsMap is used to grant permissions to categories.
</description>
<tag name="@author">Brian Frank</tag>
<tag name="@creation">19 Feb 05</tag>
<tag name="@version">$Revision: 12$ $Date: 2/16/09 9:24:11 AM EST$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="javax.baja.sys.BSimple"/>
</extends>
<implements>
<type class="javax.baja.sys.BIUnlinkable"/>
</implements>
<annotation><type class="javax.baja.nre.annotations.NoSlotomatic"/>
</annotation>
<!-- javax.baja.security.BPermissionsMap.make(javax.baja.security.BPermissions[]) -->
<method name="make"  public="true" static="true">
<description>
Make map where category number maps to array index.  &#xa; The first item (permissions[0]) is unused.  If any&#xa; items in the array are null, then BPermissions.none&#xa; is assumed.
</description>
<parameter name="permissions">
<type class="javax.baja.security.BPermissions" dimension="1"/>
</parameter>
<return>
<type class="javax.baja.security.BPermissionsMap"/>
</return>
</method>

<!-- javax.baja.security.BPermissionsMap.or(javax.baja.security.BPermissionsMap) -->
<method name="or"  public="true">
<description>
Create a new BPermissionsMap from the bitwise OR of this BPermissionsMap&#xa; instance and the specified BPermissionsMap.
</description>
<tag name="@since">Niagara 3.5</tag>
<parameter name="other">
<type class="javax.baja.security.BPermissionsMap"/>
</parameter>
<return>
<type class="javax.baja.security.BPermissionsMap"/>
</return>
</method>

<!-- javax.baja.security.BPermissionsMap.and(javax.baja.security.BPermissionsMap) -->
<method name="and"  public="true">
<description>
Create a new BPermissionsMap from the bitwise AND of this BPermissionsMap&#xa; instance and the specified BPermissionsMap.
</description>
<tag name="@since">Niagara 3.5</tag>
<parameter name="other">
<type class="javax.baja.security.BPermissionsMap"/>
</parameter>
<return>
<type class="javax.baja.security.BPermissionsMap"/>
</return>
</method>

<!-- javax.baja.security.BPermissionsMap.isSuperUser() -->
<method name="isSuperUser"  public="true">
<description>
Return if this is the super user permission map which&#xa; is automatically granted all permissions in all categories.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.security.BPermissionsMap.size() -->
<method name="size"  public="true">
<description>
Get the number of category/permissions mappings.
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.security.BPermissionsMap.getPermissions(int) -->
<method name="getPermissions"  public="true">
<description>
Given a category index, return the mapped BPermissions&#xa; or return BPermissions.none if no mapping configured.&#xa; If this is the super user, then always return BPermissions.all.
</description>
<parameter name="categoryIndex">
<type class="int"/>
</parameter>
<return>
<type class="javax.baja.security.BPermissions"/>
</return>
</method>

<!-- javax.baja.security.BPermissionsMap.getCategoryPermissions(javax.baja.category.BCategoryMask) -->
<method name="getCategoryPermissions"  public="true">
<description>
Given a category mask, compute the applied permissions which&#xa; are a bitwise &#x22;OR&#x22; of the permissions assigned to each union&#xa; category and a bitwise &#x22;AND&#x22; of the permissions assigned to&#xa; each intersection category from the specified mask.  If this&#xa; is the super user instance then always return BPermissions.all.
</description>
<parameter name="categoryMask">
<type class="javax.baja.category.BCategoryMask"/>
</parameter>
<return>
<type class="javax.baja.security.BPermissions"/>
</return>
</method>

<!-- javax.baja.security.BPermissionsMap.hashCode() -->
<method name="hashCode"  public="true">
<description>
BPermissionsMap uses its encodeToString() value&#x27;s hash code.
</description>
<tag name="@since">Niagara 3.4</tag>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.security.BPermissionsMap.equals(java.lang.Object) -->
<method name="equals"  public="true">
<description/>
<parameter name="obj">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.security.BPermissionsMap.encode(java.io.DataOutput) -->
<method name="encode"  public="true">
<description/>
<parameter name="out">
<type class="java.io.DataOutput"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.security.BPermissionsMap.decode(java.io.DataInput) -->
<method name="decode"  public="true">
<description/>
<parameter name="in">
<type class="java.io.DataInput"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.security.BPermissionsMap.encodeToString() -->
<method name="encodeToString"  public="true">
<description/>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.security.BPermissionsMap.decodeFromString(java.lang.String) -->
<method name="decodeFromString"  public="true">
<description/>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.security.BPermissionsMap.getType() -->
<method name="getType"  public="true">
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.security.BPermissionsMap.SUPER_USER -->
<field name="SUPER_USER"  public="true" static="true" final="true">
<type class="javax.baja.security.BPermissionsMap"/>
<description>
The SUPER_USER instance automatically is granted &#xa; all permissions in any category.
</description>
</field>

<!-- javax.baja.security.BPermissionsMap.DEFAULT -->
<field name="DEFAULT"  public="true" static="true" final="true">
<type class="javax.baja.security.BPermissionsMap"/>
<description>
This is default instance is the empty permissions map.
</description>
</field>

<!-- javax.baja.security.BPermissionsMap.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
