<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="baja" runtimeProfile="rt" qualifiedName="javax.baja.security.BPassword" name="BPassword" packageName="javax.baja.security" public="true" final="true">
<description>
The BPassword is a string containing secret data.&#xa;&#xa; Secret keys can be provided to make() in form &amp;lt;plaintextValue&amp;gt; and they will be encoded&#xa; as appropriate, otherwise the make() methods expect the form [&amp;lt;encodingType&amp;gt;]=&amp;lt;encodedValue&amp;gt;
</description>
<tag name="@author">Brian Frank on 1 Feb 00</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="javax.baja.sys.BSimple"/>
</extends>
<implements>
<type class="javax.baja.sys.BIComparable"/>
</implements>
<implements>
<type class="javax.baja.security.BIPasswordValidator"/>
</implements>
<implements>
<type class="javax.baja.sys.BIUnlinkable"/>
</implements>
<annotation><type class="javax.baja.nre.annotations.NoSlotomatic"/>
</annotation>
<!-- javax.baja.security.BPassword.make(java.lang.String) -->
<method name="make"  public="true" static="true">
<description>
Create a BPassword with the given value.&#xa; &lt;p&gt;&#xa; NOTE: the change in the source field from the name password&#xa; to key is to recognize that not all supplied data is a password.
</description>
<parameter name="key">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.security.BPassword"/>
</return>
</method>

<!-- javax.baja.security.BPassword.make(java.lang.String, javax.baja.sys.Context) -->
<method name="make"  public="true" static="true">
<description>
Create a BPassword with the given value.&#xa; &lt;p&gt;&#xa; NOTE: the change in the source field from the name password&#xa; to key is to recognize that not all supplied data is a password.
</description>
<tag name="@since">Niagara 4.0</tag>
<parameter name="key">
<type class="java.lang.String"/>
</parameter>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="javax.baja.security.BPassword"/>
</return>
</method>

<!-- javax.baja.security.BPassword.make(char[]) -->
<method name="make"  public="true" static="true">
<description>
Create a BPassword with the given value.&#xa; &lt;p&gt;&#xa; NOTE: the change in the source field from the name password&#xa; to key is to recognize that not all supplied data is a password.
</description>
<parameter name="key">
<type class="char" dimension="1"/>
</parameter>
<return>
<type class="javax.baja.security.BPassword"/>
</return>
</method>

<!-- javax.baja.security.BPassword.make(java.lang.String, java.lang.String) -->
<method name="make"  public="true" static="true">
<description>
Create a BPassword with the given value.&#xa; &lt;p&gt;&#xa; NOTE: the change in the source field from the name password&#xa; to key is to recognize that not all supplied data is a password.
</description>
<parameter name="password">
<type class="java.lang.String"/>
</parameter>
<parameter name="encodingType">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.security.BPassword"/>
</return>
</method>

<!-- javax.baja.security.BPassword.make(char[], java.lang.String) -->
<method name="make"  public="true" static="true">
<description>
Create a BPassword with the given value.&#xa; &lt;p&gt;&#xa; NOTE: the change in the source field from the name password&#xa; to key is to recognize that not all supplied data is a password.
</description>
<parameter name="password">
<type class="char" dimension="1"/>
</parameter>
<parameter name="encodingType">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.security.BPassword"/>
</return>
</method>

<!-- javax.baja.security.BPassword.make(com.tridium.nre.security.PBEValidator) -->
<method name="make"  public="true" static="true">
<description>
Create a BPassword from a PBEValidator
</description>
<tag name="@since">Niagara 4.0</tag>
<parameter name="pbeValidator">
<type class="com.tridium.nre.security.PBEValidator"/>
</parameter>
<return>
<type class="javax.baja.security.BPassword"/>
</return>
</method>

<!-- javax.baja.security.BPassword.make(javax.baja.security.BAbstractPasswordEncoder) -->
<method name="make"  public="true" static="true">
<description>
Creates a BPassword with the given encoder&#xa; &lt;p&gt;&#xa; The encoder should have all its field correctly initialized&#xa; for encoding.
</description>
<parameter name="encoder">
<type class="javax.baja.security.BAbstractPasswordEncoder"/>
</parameter>
<return>
<type class="javax.baja.security.BPassword"/>
</return>
</method>

<!-- javax.baja.security.BPassword.getValue() -->
<method name="getValue"  public="true">
<description>
If the password is in a reversible format, getValue() retrieves the&#xa; plain text String value of the password.&#xa; If the password is not reversible, returns a Base64 encoded random byte array.&#xa;&#xa; Since Niagara 4.6, reversible passwords are encrypted by module specific keys and&#xa; protected by a permission check. To avoid permissions issues, it is recommended to&#xa; wrap all calls to getValue() in a doPrivileged block like this:&#xa;&#xa; &lt;code&gt;AccessController.doPrivileged((PrivilegedAction&amp;lt;String&amp;gt;)password::getValue)&lt;/code&gt;
</description>
<return>
<type class="java.lang.String"/>
<description>
the String value of the password, or a random byte array
</description>
</return>
<throws>
<type class="java.lang.SecurityException"/>
<description>
if the password is reversible but cannot be recovered&#xa; (e.g. missing security key), or if the password is not reversible and a random&#xa; number cannot be generated.
</description>
</throws>
</method>

<!-- javax.baja.security.BPassword.getSecretChars() -->
<method name="getSecretChars"  public="true">
<description>
If the password is in a reversible format, getSecretChars() returns the unencrypted value,&#xa; otherwise it returns random characters.&#xa;&#xa; Callers should take care to ensure that the result is closed when the secret data&#xa; is no longer needed.  Putting it in a try-with-resources is a good way to do that.&#xa;&#xa; Since Niagara 4.6, reversible passwords are encrypted by module specific keys and&#xa; protected by a permission check. To avoid permissions issues, it is recommended to&#xa; wrap all calls to getSecretChars() in a doPrivileged block like this:&#xa;&#xa; &lt;code&gt;AccessController.doPrivileged((PrivilegedAction&amp;lt;SecretChars&amp;gt;)password::getSecretChars)&lt;/code&gt;
</description>
<tag name="@since">Niagara 4.0</tag>
<return>
<type class="com.tridium.nre.security.SecretChars"/>
</return>
<throws>
<type class="java.lang.SecurityException"/>
</throws>
</method>

<!-- javax.baja.security.BPassword.hashCode() -->
<method name="hashCode"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
BPassword uses its String value&#x27;s hash code.
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.security.BPassword.equals(java.lang.Object) -->
<method name="equals"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
BPassword equality is based on String value equality.
</description>
<parameter name="obj">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.security.BPassword.compareTo(java.lang.Object) -->
<method name="compareTo"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Comparison of BPassword to other passwords serves no purpose so changed to &#xa; just return 0
</description>
<parameter name="obj">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.security.BPassword.validate(javax.baja.security.BPassword) -->
<method name="validate"  public="true">
<description>
Return true if the given password matches this object&#x27;s.
</description>
<tag name="@since">Niagara 4.0</tag>
<parameter name="toValidate">
<type class="javax.baja.security.BPassword"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.security.BPassword.validate(com.tridium.nre.security.SecretChars) -->
<method name="validate"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Return true if the given password matches this object&#x27;s.
</description>
<tag name="@since">Niagara 4.0</tag>
<parameter name="password">
<type class="com.tridium.nre.security.SecretChars"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.security.BPassword.validate(com.tridium.nre.security.SecretBytes) -->
<method name="validate"  public="true">
<description>
Return true if the given data matches this object&#x27;s value.
</description>
<parameter name="secretData">
<type class="com.tridium.nre.security.SecretBytes"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.security.BPassword.toString(javax.baja.sys.Context) -->
<method name="toString"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
To string method.
</description>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.security.BPassword.encode(java.io.DataOutput) -->
<method name="encode"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
BPassword is encoded as using &lt;code&gt;<see ref="java.io.DataOutput#writeUTF(java.lang.String)">java.io.DataOutput#writeUTF(java.lang.String)</see>&lt;/code&gt;.
</description>
<parameter name="out">
<type class="java.io.DataOutput"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.security.BPassword.encode(java.io.DataOutput, javax.baja.sys.Context) -->
<method name="encode"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
BPassword is encoded as using &lt;code&gt;<see ref="java.io.DataOutput#writeUTF(java.lang.String)">java.io.DataOutput#writeUTF(java.lang.String)</see>&lt;/code&gt;.
</description>
<tag name="@since">Niagara 4.0</tag>
<parameter name="out">
<type class="java.io.DataOutput"/>
</parameter>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.security.BPassword.decode(java.io.DataInput) -->
<method name="decode"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
BPassword is decoded using &lt;code&gt;<see ref="java.io.DataInput#readUTF()">java.io.DataInput#readUTF()</see>&lt;/code&gt;.
</description>
<parameter name="in">
<type class="java.io.DataInput"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.security.BPassword.decode(java.io.DataInput, javax.baja.sys.Context) -->
<method name="decode"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
BPassword is decoded using &lt;code&gt;<see ref="java.io.DataInput#readUTF()">java.io.DataInput#readUTF()</see>&lt;/code&gt;.
</description>
<parameter name="in">
<type class="java.io.DataInput"/>
</parameter>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.security.BPassword.encodeToString() -->
<method name="encodeToString"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Write the simple in text format which is encrypted.
</description>
<return>
<type class="java.lang.String"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.security.BPassword.encodeToString(javax.baja.sys.Context) -->
<method name="encodeToString"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Write the simple in text format which is encrypted.
</description>
<tag name="@since">Niagara 4.0</tag>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.security.BPassword.decodeFromString(java.lang.String, javax.baja.sys.Context) -->
<method name="decodeFromString"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Read the simple from text format which is encrypted.
</description>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.security.BPassword.decodeFromString(java.lang.String) -->
<method name="decodeFromString"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.security.BPassword.getEncodingType() -->
<method name="getEncodingType"  public="true">
<description/>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.security.BPassword.getPasswordEncoder() -->
<method name="getPasswordEncoder"  public="true">
<description/>
<return>
<type class="javax.baja.security.BAbstractPasswordEncoder"/>
</return>
</method>

<!-- javax.baja.security.BPassword.isDefault() -->
<method name="isDefault"  public="true">
<description>
Returns true if this object is, or is equivalent to &lt;code&gt;<see ref="javax.baja.security.BPassword#DEFAULT">#DEFAULT</see>&lt;/code&gt;
</description>
<tag name="@since">Niagara 4.0</tag>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.security.BPassword.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.security.BPassword.DEFAULT -->
<field name="DEFAULT"  public="true" static="true" final="true">
<type class="javax.baja.security.BPassword"/>
<description>
The default instance is encoded with an empty string and is used for &#x22;no password&#x22;, specifically:&#xa; &lt;ul&gt;&#xa;   &lt;li&gt;its &lt;code&gt;<see ref="javax.baja.security.BPassword#validate(java.lang.String)">#validate(String)</see>&lt;/code&gt;, &lt;code&gt;<see ref="javax.baja.security.BPassword#validate(com.tridium.nre.security.SecretChars)">#validate(SecretChars)</see>&lt;/code&gt; and &lt;code&gt;<see ref="javax.baja.security.BPassword#validate(com.tridium.nre.security.SecretBytes)">#validate(SecretBytes)</see>&lt;/code&gt; always return false&lt;/li&gt;&#xa;   &lt;li&gt;its &lt;code&gt;<see ref="javax.baja.security.BPassword#getValue()">#getValue()</see>&lt;/code&gt; and &lt;code&gt;<see ref="javax.baja.security.BPassword#getSecretChars()">#getSecretChars()</see>&lt;/code&gt; return random characters&lt;/li&gt;&#xa; &lt;/ul&gt;
</description>
</field>

<!-- javax.baja.security.BPassword.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

<!-- javax.baja.security.BPassword.PLACEHOLDER_TEXT -->
<field name="PLACEHOLDER_TEXT"  public="true" static="true" final="true">
<type class="java.lang.String"/>
<description/>
</field>

</class>
</bajadoc>
