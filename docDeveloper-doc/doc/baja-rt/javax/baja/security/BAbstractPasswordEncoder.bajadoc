<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="baja" runtimeProfile="rt" qualifiedName="javax.baja.security.BAbstractPasswordEncoder" name="BAbstractPasswordEncoder" packageName="javax.baja.security" public="true" abstract="true">
<description>
A BAbstractPasswordEncoder provides a way for passwords&#xa; to be encoded using different encoding methods, such as&#xa; hashing or encryption.&#xa; &#xa; This allows us store passwords differently based on what&#xa; is required for the situation.&#xa; &#xa; All subclasses must include an ENCODING_TYPE field, which&#xa; will be used to create a map between encoding names and&#xa; actual classes.&#xa; &#xa; Subclasses must also be agents on BPassword, or they will&#xa; not be added to the map.
</description>
<tag name="@author">Melanie Coggan</tag>
<tag name="@creation">Mar 18, 2013</tag>
<extends>
<type class="javax.baja.sys.BObject"/>
</extends>
<implements>
<type class="javax.baja.agent.BIAgent"/>
</implements>
<!-- javax.baja.security.BAbstractPasswordEncoder() -->
<constructor name="BAbstractPasswordEncoder" public="true">
<description/>
</constructor>

<!-- javax.baja.security.BAbstractPasswordEncoder.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.security.BAbstractPasswordEncoder.encode(java.lang.String) -->
<method name="encode"  public="true" final="true">
<description>
Takes a password and encodes it. The encoding will depend on the&#xa; particular subclass of BAbstractPasswordEncoder.
</description>
<parameter name="password">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.security.BAbstractPasswordEncoder.encode(com.tridium.nre.security.SecretChars) -->
<method name="encode"  public="true" abstract="true">
<description>
Takes a password and encodes it. The encoding will depend on the&#xa; particular subclass of BAbstractPasswordEncoder.
</description>
<parameter name="password">
<type class="com.tridium.nre.security.SecretChars"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.security.BAbstractPasswordEncoder.parse(java.lang.String) -->
<method name="parse"  public="true" abstract="true">
<description>
Takes an encoded string and parses it to instantiate the encoder.&#xa; The string should be in the format returned by getEncodedValue().
</description>
<parameter name="key">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.security.BAbstractPasswordEncoder.getValue() -->
<method name="getValue"  public="true" abstract="true">
<description>
Returns the plaintext value of the password, if the password is &#xa; reversible.&#xa;&#xa; Since Niagara 4.6, reversible passwords are encrypted by module specific keys and&#xa; protected by a permission check. To avoid permissions issues, it is recommended to&#xa; wrap all calls to getValue() on a reversible encoder in a doPrivileged block like this:&#xa;&#xa; &lt;code&gt;AccessController.doPrivileged((PrivilegedExceptionAction&amp;lt;String&amp;gt;)encoder::getValue)&lt;/code&gt;
</description>
<return>
<type class="java.lang.String"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.security.BAbstractPasswordEncoder.getSecretChars() -->
<method name="getSecretChars"  public="true">
<description>
Returns the unencrypted value of the password, if it is reversible.&#xa;&#xa; Callers should take care to ensure that the result is closed when the secret data&#xa; is no longer needed.  Putting it in a try-with-resources is a good way to do that.&#xa;&#xa; Since Niagara 4.6, reversible passwords are encrypted by module specific keys and&#xa; protected by a permission check. To avoid permissions issues, it is recommended to&#xa; wrap all calls to getSecretChars() in a doPrivileged block like this:&#xa;&#xa; &lt;code&gt;AccessController.doPrivileged((PrivilegedExceptionAction&amp;lt;SecretChars&amp;gt;)encoder::getSecretChars)&lt;/code&gt;
</description>
<tag name="@since">Niagara 4.0</tag>
<return>
<type class="com.tridium.nre.security.SecretChars"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.security.BAbstractPasswordEncoder.getEncodingType() -->
<method name="getEncodingType"  public="true" abstract="true">
<description>
Returns a String describing the encoding type.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.security.BAbstractPasswordEncoder.isReversible() -->
<method name="isReversible"  public="true" abstract="true">
<description>
Returns true is the original password can be recovered from the&#xa; encoded password.&#xa; Returns false if the password encoding is one-way.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.security.BAbstractPasswordEncoder.validate(java.lang.String) -->
<method name="validate"  public="true" final="true">
<description>
Validates that the provided String &#x22;password&#x22; corresponds to the&#xa; encoded password.
</description>
<parameter name="password">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="boolean"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.security.BAbstractPasswordEncoder.validate(com.tridium.nre.security.SecretChars) -->
<method name="validate"  public="true" abstract="true">
<description/>
<parameter name="password">
<type class="com.tridium.nre.security.SecretChars"/>
</parameter>
<return>
<type class="boolean"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.security.BAbstractPasswordEncoder.getEncodedValue() -->
<method name="getEncodedValue"  public="true" abstract="true">
<description>
Returns an encoded string describing the password. This should include&#xa; the encrypted/hashed password and any public data associated with it&#xa; (e.g. the salt, or initialization vector).
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.security.BAbstractPasswordEncoder.getDefaultEncodingType(boolean) -->
<method name="getDefaultEncodingType"  public="true" static="true">
<description>
Return a system default encoding type
</description>
<tag name="@since">Niagara 4.0</tag>
<parameter name="isReversible">
<type class="boolean"/>
<description>
if true, returns the default encoding type for reversible encodings, otherwise returns&#xa;                     the default encoding type for one-way hashing
</description>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.security.BAbstractPasswordEncoder.makeDefaultInstance(boolean) -->
<method name="makeDefaultInstance"  public="true" static="true">
<description>
Return the an instance of a system default encoder
</description>
<tag name="@since">Niagara 4.0</tag>
<parameter name="isReversible">
<type class="boolean"/>
<description>
if true, returns the default encoder for reversible encodings, otherwise returns&#xa;                     the default encoder for one-way hashing
</description>
</parameter>
<return>
<type class="javax.baja.security.BAbstractPasswordEncoder"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.security.BAbstractPasswordEncoder.make(java.lang.String) -->
<method name="make"  public="true" static="true">
<description>
Creates a new encoder of the specified type. The encoding type must correspond&#xa; go an encoding type of a subclass of BAbstractPasswordEncoder as obtained&#xa; using getEncodingType().
</description>
<parameter name="encodingType">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.security.BAbstractPasswordEncoder"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.security.BAbstractPasswordEncoder.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
