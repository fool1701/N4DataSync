<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="baja" runtimeProfile="rt" qualifiedName="javax.baja.security.BNullPasswordEncoder" name="BNullPasswordEncoder" packageName="javax.baja.security" public="true" final="true">
<description>
Password encoder for BPassword.DEFAULT, whose validate() method always returns false.
</description>
<tag name="@author">Matt Boon</tag>
<tag name="@creation">February 18, 2015</tag>
<tag name="@since">Niagara 4.0</tag>
<extends>
<type class="javax.baja.security.BAbstractPasswordEncoder"/>
</extends>
<implements>
<type class="javax.baja.agent.BIAgent"/>
</implements>
<!-- javax.baja.security.BNullPasswordEncoder() -->
<constructor name="BNullPasswordEncoder" public="true">
<description/>
</constructor>

<!-- javax.baja.security.BNullPasswordEncoder.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.security.BNullPasswordEncoder.getEncodedDefaultPassword() -->
<method name="getEncodedDefaultPassword"  public="true" static="true">
<description>
Convenience for getting the encoded value of BPassword.DEFAULT
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.security.BNullPasswordEncoder.isReversible() -->
<method name="isReversible"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.security.BNullPasswordEncoder.encode(com.tridium.nre.security.SecretChars) -->
<method name="encode"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Takes a password and encodes it. The encoding will depend on the&#xa; particular subclass of BAbstractPasswordEncoder.
</description>
<parameter name="password">
<type class="com.tridium.nre.security.SecretChars"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
<description/>
</throws>
</method>

<!-- javax.baja.security.BNullPasswordEncoder.parse(java.lang.String) -->
<method name="parse"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Takes an encoded string and parses it to instantiate the encoder.&#xa; The string should be in the format returned by getEncodedValue().
</description>
<parameter name="key">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
<description/>
</throws>
</method>

<!-- javax.baja.security.BNullPasswordEncoder.getValue() -->
<method name="getValue"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Returns random nonsense.
</description>
<return>
<type class="java.lang.String"/>
</return>
<throws>
<type class="java.lang.Exception"/>
<description/>
</throws>
</method>

<!-- javax.baja.security.BNullPasswordEncoder.getSecretChars() -->
<method name="getSecretChars"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="com.tridium.nre.security.SecretChars"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.security.BNullPasswordEncoder.getEncodingType() -->
<method name="getEncodingType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Returns a String describing the encoding type.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.security.BNullPasswordEncoder.validate(com.tridium.nre.security.SecretChars) -->
<method name="validate"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Validates that the provided String &#x22;password&#x22; corresponds to the&#xa; encoded password.
</description>
<parameter name="password">
<type class="com.tridium.nre.security.SecretChars"/>
</parameter>
<return>
<type class="boolean"/>
</return>
<throws>
<type class="java.lang.Exception"/>
<description/>
</throws>
</method>

<!-- javax.baja.security.BNullPasswordEncoder.getEncodedValue() -->
<method name="getEncodedValue"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Returns an encoded string describing the password. This should included&#xa; the encrypted/hashed password and any public data associated with it&#xa; (e.g. the salt, or initialization vector).
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.security.BNullPasswordEncoder.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

<!-- javax.baja.security.BNullPasswordEncoder.ALGORITHM_BUNDLE -->
<field name="ALGORITHM_BUNDLE"  public="true" static="true" final="true">
<type class="com.tridium.nre.security.NullAlgorithmBundle"/>
<description/>
</field>

<!-- javax.baja.security.BNullPasswordEncoder.ENCODING_TYPE -->
<field name="ENCODING_TYPE"  public="true" static="true" final="true">
<type class="java.lang.String"/>
<description/>
</field>

</class>
</bajadoc>
