<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="baja" runtimeProfile="rt" qualifiedName="javax.baja.security.BReversiblePasswordEncoder" name="BReversiblePasswordEncoder" packageName="javax.baja.security" public="true" abstract="true">
<description>
Base class for password encoders that use reversible encryption algorithms
</description>
<tag name="@author">Matt Boon</tag>
<tag name="@creation">February 13, 2015</tag>
<tag name="@since">Niagara 4.0</tag>
<extends>
<type class="javax.baja.security.BAbstractPasswordEncoder"/>
</extends>
<!-- javax.baja.security.BReversiblePasswordEncoder() -->
<constructor name="BReversiblePasswordEncoder" public="true">
<description/>
</constructor>

<!-- javax.baja.security.BReversiblePasswordEncoder.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.security.BReversiblePasswordEncoder.getDefaultEncodingType() -->
<method name="getDefaultEncodingType"  public="true" static="true">
<description>
Return the system default reversible encoding type
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.security.BReversiblePasswordEncoder.makeDefaultInstance() -->
<method name="makeDefaultInstance"  public="true" static="true">
<description>
Returns an instance of the system default reversible encoder
</description>
<return>
<type class="javax.baja.security.BReversiblePasswordEncoder"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.security.BReversiblePasswordEncoder.encode(com.tridium.nre.security.SecretBytes) -->
<method name="encode"  public="true" abstract="true">
<description>
Takes secret data and encodes it. The encoding will depend on the&#xa; particular subclass of BReversiblePasswordEncoder.
</description>
<parameter name="secret">
<type class="com.tridium.nre.security.SecretBytes"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
<description/>
</throws>
</method>

<!-- javax.baja.security.BReversiblePasswordEncoder.getSecretBytes() -->
<method name="getSecretBytes"  public="true" abstract="true">
<description>
Returns the unencrypted value of the secret data.&#xa;&#xa; Callers should take care to ensure that the result is closed when the secret data&#xa; is no longer needed.  Putting it in a try-with-resources is a good way to do that.&#xa;&#xa; Since Niagara 4.6, reversible passwords are encrypted by module specific keys and&#xa; protected by a permission check. To avoid permissions issues, it is recommended to&#xa; wrap all calls to getSecretBytes() in a doPrivileged block like this:&#xa;&#xa; &lt;code&gt;AccessController.doPrivileged((PrivilegedAction&amp;lt;SecretBytes&amp;gt;)encoder::getSecretBytes)&lt;/code&gt;
</description>
<return>
<type class="com.tridium.nre.security.SecretBytes"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.security.BReversiblePasswordEncoder.validate(com.tridium.nre.security.SecretBytes) -->
<method name="validate"  public="true" abstract="true">
<description>
Validates that the provided secret matches the encoded value.
</description>
<parameter name="secret">
<type class="com.tridium.nre.security.SecretBytes"/>
</parameter>
<return>
<type class="boolean"/>
</return>
<throws>
<type class="java.lang.Exception"/>
<description/>
</throws>
</method>

<!-- javax.baja.security.BReversiblePasswordEncoder.transcode(java.lang.String, java.util.Optional&lt;com.tridium.nre.security.ISecretBytesSupplier&gt;) -->
<method name="transcode"  public="true" abstract="true">
<description>
Transcode a given value (as generated by &lt;code&gt;<see ref="javax.baja.security.BReversiblePasswordEncoder#getEncodedValue()">#getEncodedValue()</see>&lt;/code&gt;).
</description>
<parameter name="encodedValue">
<type class="java.lang.String"/>
<description>
Value to transcode
</description>
</parameter>
<parameter name="key">
<parameterizedType class="java.util.Optional">
<args>
<type class="com.tridium.nre.security.ISecretBytesSupplier"/>
</args>
</parameterizedType>
<description>
Key to use--if not present, attempt to use the security provider&#x27;s keyring&#xa;            instead
</description>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
<description/>
</throws>
</method>

<!-- javax.baja.security.BReversiblePasswordEncoder.validate(com.tridium.nre.security.SecretChars) -->
<method name="validate"  public="true" final="true">
<description>
Validates that the provided secret matches the encoded value.
</description>
<parameter name="password">
<type class="com.tridium.nre.security.SecretChars"/>
</parameter>
<return>
<type class="boolean"/>
</return>
<throws>
<type class="java.lang.Exception"/>
<description/>
</throws>
</method>

<!-- javax.baja.security.BReversiblePasswordEncoder.setUsesExternalEncryptionKey(boolean) -->
<method name="setUsesExternalEncryptionKey"  public="true" final="true">
<description>
Tell the encoder where it should get the encryption key
</description>
<parameter name="value">
<type class="boolean"/>
<description>
true if this encoder requires an external encryption key to be supplied for encoding&#xa; and decoding, or false if the key in the security provider&#x27;s keyring is to be used.
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.security.BReversiblePasswordEncoder.usesExternalEncryptionKey() -->
<method name="usesExternalEncryptionKey"  public="true" final="true">
<description>
Return true if this encoder requires an external encryption key to be supplied for encoding&#xa; and decoding, or return false if the key in the security provider&#x27;s keyring is to be used.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.security.BReversiblePasswordEncoder.validateExternalEncryptionKey(java.util.Optional&lt;com.tridium.nre.security.ISecretBytesSupplier&gt;) -->
<method name="validateExternalEncryptionKey"  public="true" final="true">
<description>
Return true if this encoder doesn&#x27;t use an external encryption key, or if it uses one and the&#xa; parameter&#x27;s key matches it.
</description>
<parameter name="key">
<parameterizedType class="java.util.Optional">
<args>
<type class="com.tridium.nre.security.ISecretBytesSupplier"/>
</args>
</parameterizedType>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.security.BReversiblePasswordEncoder.setExternalEncryptionKey(com.tridium.nre.security.SecretBytes) -->
<method name="setExternalEncryptionKey"  public="true" final="true">
<description>
Provide the external encryption key
</description>
<parameter name="value">
<type class="com.tridium.nre.security.SecretBytes"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.security.BReversiblePasswordEncoder.isReversible() -->
<method name="isReversible"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.security.BReversiblePasswordEncoder.encode(com.tridium.nre.security.SecretChars) -->
<method name="encode"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="password">
<type class="com.tridium.nre.security.SecretChars"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.security.BReversiblePasswordEncoder.getSecretChars() -->
<method name="getSecretChars"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="com.tridium.nre.security.SecretChars"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.security.BReversiblePasswordEncoder.getValue() -->
<method name="getValue"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="java.lang.String"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.security.BReversiblePasswordEncoder.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
