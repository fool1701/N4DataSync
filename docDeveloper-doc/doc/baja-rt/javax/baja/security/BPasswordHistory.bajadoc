<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="baja" runtimeProfile="rt" qualifiedName="javax.baja.security.BPasswordHistory" name="BPasswordHistory" packageName="javax.baja.security" public="true" final="true">
<description>
A history for storing and managing hashed password values.
</description>
<tag name="@author">Lee Adcock</tag>
<tag name="@creation">28 Oct 2011</tag>
<tag name="@version">$Revision: 46$ $Date: 5/14/08 3:14:00 PM EDT$</tag>
<tag name="@since">Niagara 3.7</tag>
<extends>
<type class="javax.baja.sys.BSimple"/>
</extends>
<implements>
<type class="javax.baja.io.BIContextEncodable"/>
</implements>
<annotation><type class="javax.baja.nre.annotations.NoSlotomatic"/>
</annotation>
<!-- javax.baja.security.BPasswordHistory() -->
<constructor name="BPasswordHistory" public="true">
<description>
Create an empty password history instance.
</description>
</constructor>

<!-- javax.baja.security.BPasswordHistory.getType() -->
<method name="getType"  public="true">
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.security.BPasswordHistory.add(java.lang.String, javax.baja.security.BPassword) -->
<method name="add"  public="true">
<description>
Create a new BPasswordHistory with the contents of the current&#xa; history, plus the additional BPassword.  The size of the password&#xa; history will be increased by one.
</description>
<parameter name="username">
<type class="java.lang.String"/>
</parameter>
<parameter name="password">
<type class="javax.baja.security.BPassword"/>
</parameter>
<return>
<type class="javax.baja.security.BPasswordHistory"/>
</return>
</method>

<!-- javax.baja.security.BPasswordHistory.add(java.lang.String, javax.baja.security.BPassword, int) -->
<method name="add"  public="true">
<description>
Create a new BPasswordHistory with the contents of the current&#xa; history, plus the additional BPassword.  The size of the resulting&#xa; history will be no larger than the defined maximumHistorySize.  If&#xa; the size of the existing history plus one is larger than the&#xa; maximumHistorySize, the oldest histories will be truncated.
</description>
<parameter name="username">
<type class="java.lang.String"/>
</parameter>
<parameter name="password">
<type class="javax.baja.security.BPassword"/>
</parameter>
<parameter name="maximumHistorySize">
<type class="int"/>
</parameter>
<return>
<type class="javax.baja.security.BPasswordHistory"/>
</return>
</method>

<!-- javax.baja.security.BPasswordHistory.contains(java.lang.String, javax.baja.security.BPassword) -->
<method name="contains"  public="true">
<description>
Check whether the history contains the specified password.  Returns&#xa; true if the password exists, false if it does not.
</description>
<parameter name="username">
<type class="java.lang.String"/>
</parameter>
<parameter name="password">
<type class="javax.baja.security.BPassword"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.security.BPasswordHistory.contains(java.lang.String, javax.baja.security.BPassword, int) -->
<method name="contains"  public="true">
<description>
Check whether the most history contains the specified password within&#xa; the most recent passwords, as specified by the historySize parameter.&#xa; Returns true if the password exists within the specified number of&#xa; records, false if it does not.
</description>
<parameter name="username">
<type class="java.lang.String"/>
</parameter>
<parameter name="password">
<type class="javax.baja.security.BPassword"/>
</parameter>
<parameter name="historySize">
<type class="int"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.security.BPasswordHistory.contains(java.lang.String, javax.baja.security.BPassword, javax.baja.security.BPassword, int) -->
<method name="contains"  public="true">
<description>
Check whether the most history contains the specified password within&#xa; the most recent passwords, as specified by the historySize parameter.&#xa; The prehashed password parameter allows the caller to provide a hashed&#xa; version of password. The purpose of this is to avoid re-hashing a password&#xa; to compare it with existing hashes in the history, as this can be expensive.&#xa; Returns true if the password exists within the specified number of&#xa; records, false if it does not.
</description>
<parameter name="username">
<type class="java.lang.String"/>
</parameter>
<parameter name="password">
<type class="javax.baja.security.BPassword"/>
</parameter>
<parameter name="prehashedPassword">
<type class="javax.baja.security.BPassword"/>
</parameter>
<parameter name="historySize">
<type class="int"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.security.BPasswordHistory.getSize() -->
<method name="getSize"  public="true">
<description>
Get the size of the password history.  This will return the total&#xa; number of passwords records within the history.
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.security.BPasswordHistory.encode(java.io.DataOutput) -->
<method name="encode"  public="true">
<description/>
<parameter name="encoder">
<type class="java.io.DataOutput"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.security.BPasswordHistory.encode(java.io.DataOutput, javax.baja.sys.Context) -->
<method name="encode"  public="true">
<description/>
<parameter name="encoder">
<type class="java.io.DataOutput"/>
</parameter>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.security.BPasswordHistory.decode(java.io.DataInput) -->
<method name="decode"  public="true">
<description/>
<parameter name="decoder">
<type class="java.io.DataInput"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.security.BPasswordHistory.decode(java.io.DataInput, javax.baja.sys.Context) -->
<method name="decode"  public="true">
<description/>
<parameter name="decoder">
<type class="java.io.DataInput"/>
</parameter>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.security.BPasswordHistory.encodeToString() -->
<method name="encodeToString"  public="true">
<description/>
<return>
<type class="java.lang.String"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.security.BPasswordHistory.encodeToString(javax.baja.sys.Context) -->
<method name="encodeToString"  public="true">
<description/>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.security.BPasswordHistory.decodeFromString(java.lang.String) -->
<method name="decodeFromString"  public="true">
<description/>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.security.BPasswordHistory.decodeFromString(java.lang.String, javax.baja.sys.Context) -->
<method name="decodeFromString"  public="true">
<description/>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.security.BPasswordHistory.equals(java.lang.Object) -->
<method name="equals"  public="true">
<description/>
<parameter name="obj">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.security.BPasswordHistory.DEFAULT -->
<field name="DEFAULT"  public="true" static="true" final="true">
<type class="javax.baja.security.BPasswordHistory"/>
<description/>
</field>

<!-- javax.baja.security.BPasswordHistory.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
