<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="baja" runtimeProfile="rt" qualifiedName="javax.baja.security.PasswordEncodingContext" name="PasswordEncodingContext" packageName="javax.baja.security" public="true" final="true">
<description>
Context that provides encoding instructions for BPassword values.&#xa;&#xa; Callers that construct PasswordEncodingContext values that contain secret information should&#xa; ensure that they invoke &lt;code&gt;<see ref="javax.baja.security.PasswordEncodingContext#close()">#close()</see>&lt;/code&gt; when the information is no longer needed.  Try-with-&#xa; resources is a straightforward way to do that.
</description>
<tag name="@since">Niagara 4.0</tag>
<tag name="@author">Matt Boon</tag>
<tag name="@creation">March 5, 2015</tag>
<extends>
<type class="java.lang.Object"/>
</extends>
<implements>
<type class="javax.baja.sys.Context"/>
</implements>
<implements>
<type class="java.lang.AutoCloseable"/>
</implements>
<!-- javax.baja.security.PasswordEncodingContext(javax.baja.sys.Context, com.tridium.nre.security.EncryptionKeySource, com.tridium.nre.security.EncryptionKeySource, java.util.Optional&lt;com.tridium.nre.security.ISecretBytesSupplier&gt;, java.util.Optional&lt;com.tridium.nre.security.ISecretBytesSupplier&gt;) -->
<constructor name="PasswordEncodingContext" public="true">
<parameter name="base">
<type class="javax.baja.sys.Context"/>
</parameter>
<parameter name="decryptionKeySource">
<type class="com.tridium.nre.security.EncryptionKeySource"/>
</parameter>
<parameter name="encryptionKeySource">
<type class="com.tridium.nre.security.EncryptionKeySource"/>
</parameter>
<parameter name="decryptionKey">
<parameterizedType class="java.util.Optional">
<args>
<type class="com.tridium.nre.security.ISecretBytesSupplier"/>
</args>
</parameterizedType>
</parameter>
<parameter name="encryptionKey">
<parameterizedType class="java.util.Optional">
<args>
<type class="com.tridium.nre.security.ISecretBytesSupplier"/>
</args>
</parameterizedType>
</parameter>
<description/>
</constructor>

<!-- javax.baja.security.PasswordEncodingContext(javax.baja.sys.Context) -->
<constructor name="PasswordEncodingContext" public="true">
<parameter name="base">
<type class="javax.baja.sys.Context"/>
</parameter>
<description/>
</constructor>

<!-- javax.baja.security.PasswordEncodingContext.makeKeyring() -->
<method name="makeKeyring"  public="true" static="true">
<description>
Return a new context with no base which can be used for encoding BPassword values with&#xa; a key from the NRE security provider&#x27;s keyring
</description>
<return>
<type class="javax.baja.security.PasswordEncodingContext"/>
</return>
</method>

<!-- javax.baja.security.PasswordEncodingContext.makeNone() -->
<method name="makeNone"  public="true" static="true">
<description>
Return a new context with no base which cannot be used for encoding BPassword values
</description>
<return>
<type class="javax.baja.security.PasswordEncodingContext"/>
</return>
</method>

<!-- javax.baja.security.PasswordEncodingContext.updateContext(javax.baja.sys.Context, java.util.function.Consumer&lt;javax.baja.security.PasswordEncodingContext&gt;) -->
<method name="updateContext"  public="true" static="true">
<description>
Return either a PasswordEncodingContext or a Context whose base is one, and&#xa; update the PasswordEncodingContext using the given consumer.
</description>
<parameter name="from">
<type class="javax.baja.sys.Context"/>
</parameter>
<parameter name="consumer">
<parameterizedType class="java.util.function.Consumer">
<args>
<type class="javax.baja.security.PasswordEncodingContext"/>
</args>
</parameterizedType>
</parameter>
<return>
<type class="javax.baja.sys.Context"/>
</return>
</method>

<!-- javax.baja.security.PasswordEncodingContext.updateForKeyring(javax.baja.sys.Context) -->
<method name="updateForKeyring"  public="true" static="true">
<description>
Return a context suitable for encoding with the local keyring
</description>
<parameter name="from">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="javax.baja.sys.Context"/>
</return>
</method>

<!-- javax.baja.security.PasswordEncodingContext.updateForNone(javax.baja.sys.Context) -->
<method name="updateForNone"  public="true" static="true">
<description>
Return a context which will allow no password values to be encoded with a reversible encryption.
</description>
<parameter name="from">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="javax.baja.sys.Context"/>
</return>
</method>

<!-- javax.baja.security.PasswordEncodingContext.updateForExternal(javax.baja.sys.Context, com.tridium.nre.security.ISecretBytesSupplier) -->
<method name="updateForExternal"  public="true" static="true">
<description>
Return a context suitable for encoding with the given external key
</description>
<parameter name="from">
<type class="javax.baja.sys.Context"/>
</parameter>
<parameter name="keySupplier">
<type class="com.tridium.nre.security.ISecretBytesSupplier"/>
</parameter>
<return>
<type class="javax.baja.sys.Context"/>
</return>
</method>

<!-- javax.baja.security.PasswordEncodingContext.from(javax.baja.sys.Context) -->
<method name="from"  public="true" static="true">
<description>
If the given Context or any of its bases is a PasswordEncodingContext, return it, otherwise&#xa; return a new PasswordEncodingContext that uses the given context as a base.
</description>
<parameter name="from">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="javax.baja.security.PasswordEncodingContext"/>
</return>
</method>

<!-- javax.baja.security.PasswordEncodingContext.find(javax.baja.sys.Context) -->
<method name="find"  public="true" static="true">
<description>
If the given Context or any of its bases is a PasswordEncodingContext, return it; otherwise&#xa; return Optional.empty().
</description>
<tag name="@since">Niagara 4.11</tag>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<parameterizedType class="java.util.Optional">
<args>
<type class="javax.baja.security.PasswordEncodingContext"/>
</args>
</parameterizedType>
</return>
</method>

<!-- javax.baja.security.PasswordEncodingContext.setEncryptionAndDecryptionKey(com.tridium.nre.security.EncryptionKeySource) -->
<method name="setEncryptionAndDecryptionKey"  public="true">
<description/>
<parameter name="source">
<type class="com.tridium.nre.security.EncryptionKeySource"/>
</parameter>
<return>
<type class="javax.baja.security.PasswordEncodingContext"/>
</return>
</method>

<!-- javax.baja.security.PasswordEncodingContext.setEncryptionAndDecryptionKey(com.tridium.nre.security.EncryptionKeySource, java.util.Optional&lt;com.tridium.nre.security.ISecretBytesSupplier&gt;) -->
<method name="setEncryptionAndDecryptionKey"  public="true">
<description/>
<parameter name="source">
<type class="com.tridium.nre.security.EncryptionKeySource"/>
</parameter>
<parameter name="key">
<parameterizedType class="java.util.Optional">
<args>
<type class="com.tridium.nre.security.ISecretBytesSupplier"/>
</args>
</parameterizedType>
</parameter>
<return>
<type class="javax.baja.security.PasswordEncodingContext"/>
</return>
</method>

<!-- javax.baja.security.PasswordEncodingContext.getDecryptionKey() -->
<method name="getDecryptionKey"  public="true">
<description/>
<return>
<parameterizedType class="java.util.Optional">
<args>
<type class="com.tridium.nre.security.ISecretBytesSupplier"/>
</args>
</parameterizedType>
</return>
</method>

<!-- javax.baja.security.PasswordEncodingContext.hasDecryptionKey() -->
<method name="hasDecryptionKey"  public="true">
<description/>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.security.PasswordEncodingContext.getDecryptionKeySource() -->
<method name="getDecryptionKeySource"  public="true">
<description/>
<return>
<type class="com.tridium.nre.security.EncryptionKeySource"/>
</return>
</method>

<!-- javax.baja.security.PasswordEncodingContext.setDecryptionKey(com.tridium.nre.security.EncryptionKeySource, java.util.Optional&lt;com.tridium.nre.security.ISecretBytesSupplier&gt;) -->
<method name="setDecryptionKey"  public="true">
<description/>
<parameter name="source">
<type class="com.tridium.nre.security.EncryptionKeySource"/>
</parameter>
<parameter name="key">
<parameterizedType class="java.util.Optional">
<args>
<type class="com.tridium.nre.security.ISecretBytesSupplier"/>
</args>
</parameterizedType>
</parameter>
<return>
<type class="javax.baja.security.PasswordEncodingContext"/>
</return>
</method>

<!-- javax.baja.security.PasswordEncodingContext.setDecryptionUndefined() -->
<method name="setDecryptionUndefined"  public="true">
<description/>
<return>
<type class="javax.baja.security.PasswordEncodingContext"/>
</return>
</method>

<!-- javax.baja.security.PasswordEncodingContext.getEncryptionKey() -->
<method name="getEncryptionKey"  public="true">
<description/>
<return>
<parameterizedType class="java.util.Optional">
<args>
<type class="com.tridium.nre.security.ISecretBytesSupplier"/>
</args>
</parameterizedType>
</return>
</method>

<!-- javax.baja.security.PasswordEncodingContext.hasEncryptionKey() -->
<method name="hasEncryptionKey"  public="true">
<description/>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.security.PasswordEncodingContext.getEncryptionKeySource() -->
<method name="getEncryptionKeySource"  public="true">
<description/>
<return>
<type class="com.tridium.nre.security.EncryptionKeySource"/>
</return>
</method>

<!-- javax.baja.security.PasswordEncodingContext.setEncryptionKey(com.tridium.nre.security.EncryptionKeySource, java.util.Optional&lt;com.tridium.nre.security.ISecretBytesSupplier&gt;) -->
<method name="setEncryptionKey"  public="true">
<description/>
<parameter name="source">
<type class="com.tridium.nre.security.EncryptionKeySource"/>
</parameter>
<parameter name="key">
<parameterizedType class="java.util.Optional">
<args>
<type class="com.tridium.nre.security.ISecretBytesSupplier"/>
</args>
</parameterizedType>
</parameter>
<return>
<type class="javax.baja.security.PasswordEncodingContext"/>
</return>
</method>

<!-- javax.baja.security.PasswordEncodingContext.setEncryptionUndefined() -->
<method name="setEncryptionUndefined"  public="true">
<description/>
<return>
<type class="javax.baja.security.PasswordEncodingContext"/>
</return>
</method>

<!-- javax.baja.security.PasswordEncodingContext.setEncryptionAlgorithmBundle(com.tridium.nre.security.EncryptionAlgorithmBundle) -->
<method name="setEncryptionAlgorithmBundle"  public="true">
<description>
Set the EncryptionAlgorithmBundle to use for encoding
</description>
<tag name="@since">Niagara 4.9</tag>
<parameter name="algorithmBundle">
<type class="com.tridium.nre.security.EncryptionAlgorithmBundle"/>
<description>
the algorithm bundle to use for encoding
</description>
</parameter>
<return>
<type class="javax.baja.security.PasswordEncodingContext"/>
<description>
this PasswordEncodingContext
</description>
</return>
</method>

<!-- javax.baja.security.PasswordEncodingContext.getEncryptionAlgorithmBundle() -->
<method name="getEncryptionAlgorithmBundle"  public="true">
<description>
Get the EncryptionAlgorithmBundle to use for encoding, or Optional.empty() if not set
</description>
<tag name="@since">Niagara 4.9</tag>
<return>
<parameterizedType class="java.util.Optional">
<args>
<type class="com.tridium.nre.security.EncryptionAlgorithmBundle"/>
</args>
</parameterizedType>
<description>
the EncryptionAlgorihtmBundle to use for encoding, or empty
</description>
</return>
</method>

<!-- javax.baja.security.PasswordEncodingContext.throwExceptionOnDecodeFailures() -->
<method name="throwExceptionOnDecodeFailures"  public="true">
<description>
Configure to throw &lt;code&gt;<see ref="javax.baja.security.MissingEncodingKeyException">MissingEncodingKeyException</see>&lt;/code&gt; whenever password decoding fails&#xa; due to missing or invalid key
</description>
<return>
<type class="javax.baja.security.PasswordEncodingContext"/>
</return>
</method>

<!-- javax.baja.security.PasswordEncodingContext.defaultOnDecodeFailures() -->
<method name="defaultOnDecodeFailures"  public="true">
<description>
Configure to return &lt;code&gt;<see ref="javax.baja.security.BPassword#DEFAULT">BPassword#DEFAULT</see>&lt;/code&gt; whenever password decoding fails&#xa; due to missing or invalid key
</description>
<return>
<type class="javax.baja.security.PasswordEncodingContext"/>
</return>
</method>

<!-- javax.baja.security.PasswordEncodingContext.setDecodeFailureSupplier(com.tridium.nre.SupplierWithException&lt;javax.baja.security.BPassword, javax.baja.security.MissingEncodingKeyException&gt;) -->
<method name="setDecodeFailureSupplier"  public="true">
<description>
Configure to take a particular action whenever password decoding fails due to missing or&#xa; invalid key
</description>
<parameter name="value">
<parameterizedType class="com.tridium.nre.SupplierWithException">
<args>
<type class="javax.baja.security.BPassword"/>
<type class="javax.baja.security.MissingEncodingKeyException"/>
</args>
</parameterizedType>
</parameter>
<return>
<type class="javax.baja.security.PasswordEncodingContext"/>
</return>
</method>

<!-- javax.baja.security.PasswordEncodingContext.getDecodeErrorPasswordValue() -->
<method name="getDecodeErrorPasswordValue"  public="true">
<description>
return a password value or throw &lt;code&gt;<see ref="javax.baja.security.MissingEncodingKeyException">MissingEncodingKeyException</see>&lt;/code&gt; as appropriate for&#xa; a decode failure
</description>
<return>
<type class="javax.baja.security.BPassword"/>
</return>
<throws>
<type class="javax.baja.security.MissingEncodingKeyException"/>
</throws>
</method>

<!-- javax.baja.security.PasswordEncodingContext.defaultOnEncodeFailures() -->
<method name="defaultOnEncodeFailures"  public="true">
<description>
Configure to return encoded &lt;code&gt;<see ref="javax.baja.security.BPassword#DEFAULT">BPassword#DEFAULT</see>&lt;/code&gt; whenever password encoding fails&#xa; due to missing or invalid key
</description>
<return>
<type class="javax.baja.security.PasswordEncodingContext"/>
</return>
</method>

<!-- javax.baja.security.PasswordEncodingContext.throwExceptionOnEncodeFailures() -->
<method name="throwExceptionOnEncodeFailures"  public="true">
<description>
Configure to throw &lt;code&gt;<see ref="javax.baja.security.MissingEncodingKeyException">MissingEncodingKeyException</see>&lt;/code&gt; whenever password encoding fails&#xa; due to missing or invalid key
</description>
<return>
<type class="javax.baja.security.PasswordEncodingContext"/>
</return>
</method>

<!-- javax.baja.security.PasswordEncodingContext.setEncodeFailureSupplier(com.tridium.nre.SupplierWithException&lt;java.lang.String, javax.baja.security.MissingEncodingKeyException&gt;) -->
<method name="setEncodeFailureSupplier"  public="true">
<description>
Configure to take a particular action whenever password encoding fails due to missing or&#xa; invalid key
</description>
<parameter name="value">
<parameterizedType class="com.tridium.nre.SupplierWithException">
<args>
<type class="java.lang.String"/>
<type class="javax.baja.security.MissingEncodingKeyException"/>
</args>
</parameterizedType>
</parameter>
<return>
<type class="javax.baja.security.PasswordEncodingContext"/>
</return>
</method>

<!-- javax.baja.security.PasswordEncodingContext.getErrorEncodedValue() -->
<method name="getErrorEncodedValue"  public="true">
<description>
return an encoded password value or throw &lt;code&gt;<see ref="javax.baja.security.MissingEncodingKeyException">MissingEncodingKeyException</see>&lt;/code&gt; as appropriate for&#xa; a decode failure
</description>
<return>
<type class="java.lang.String"/>
</return>
<throws>
<type class="javax.baja.security.MissingEncodingKeyException"/>
</throws>
</method>

<!-- javax.baja.security.PasswordEncodingContext.getBase() -->
<method name="getBase"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Context"/>
</return>
</method>

<!-- javax.baja.security.PasswordEncodingContext.getUser() -->
<method name="getUser"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.user.BUser"/>
</return>
</method>

<!-- javax.baja.security.PasswordEncodingContext.getFacets() -->
<method name="getFacets"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.BFacets"/>
</return>
</method>

<!-- javax.baja.security.PasswordEncodingContext.getFacet(java.lang.String) -->
<method name="getFacet"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="name">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
</method>

<!-- javax.baja.security.PasswordEncodingContext.getLanguage() -->
<method name="getLanguage"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.security.PasswordEncodingContext.close() -->
<method name="close"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.security.PasswordEncodingContext.EXCEPTION_DECODE_FAILURE_SUPPLIER -->
<field name="EXCEPTION_DECODE_FAILURE_SUPPLIER"  public="true" static="true" final="true">
<parameterizedType class="com.tridium.nre.SupplierWithException">
<args>
<type class="javax.baja.security.BPassword"/>
<type class="javax.baja.security.MissingEncodingKeyException"/>
</args>
</parameterizedType>
<description/>
</field>

<!-- javax.baja.security.PasswordEncodingContext.DEFAULT_DECODE_FAILURE_SUPPLIER -->
<field name="DEFAULT_DECODE_FAILURE_SUPPLIER"  public="true" static="true" final="true">
<parameterizedType class="com.tridium.nre.SupplierWithException">
<args>
<type class="javax.baja.security.BPassword"/>
<type class="javax.baja.security.MissingEncodingKeyException"/>
</args>
</parameterizedType>
<description/>
</field>

<!-- javax.baja.security.PasswordEncodingContext.EXCEPTION_ENCODE_FAILURE_SUPPLIER -->
<field name="EXCEPTION_ENCODE_FAILURE_SUPPLIER"  public="true" static="true" final="true">
<parameterizedType class="com.tridium.nre.SupplierWithException">
<args>
<type class="java.lang.String"/>
<type class="javax.baja.security.MissingEncodingKeyException"/>
</args>
</parameterizedType>
<description/>
</field>

<!-- javax.baja.security.PasswordEncodingContext.DEFAULT_ENCODE_FAILURE_SUPPLIER -->
<field name="DEFAULT_ENCODE_FAILURE_SUPPLIER"  public="true" static="true" final="true">
<parameterizedType class="com.tridium.nre.SupplierWithException">
<args>
<type class="java.lang.String"/>
<type class="javax.baja.security.MissingEncodingKeyException"/>
</args>
</parameterizedType>
<description/>
</field>

</class>
</bajadoc>
