<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="baja" runtimeProfile="rt" qualifiedName="javax.baja.security.BPermissions" name="BPermissions" packageName="javax.baja.security" public="true" final="true">
<description>
BPermissions encapsulates a set of permissions for a given &#xa; security domain.  String encoding for BPermissions is:&#xa; &lt;pre&gt;&#xa;  permissions := [oRead][oWrite][oInvoke][aRead][aWrite][aInvoke]&#xa;  oRead       := r                 &#xa;  oWrite      := w                 &#xa;  oInvoke     := i                 &#xa;  aRead       := R                 &#xa;  aWrite      := W                 &#xa;  aInvoke     := I                 &#xa; &lt;/pre&gt;
</description>
<tag name="@author">Brian Frank</tag>
<tag name="@creation">25 Mar 02</tag>
<tag name="@version">$Revision: 10$ $Date: 2/16/09 9:23:59 AM EST$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="javax.baja.sys.BSimple"/>
</extends>
<annotation><type class="javax.baja.nre.annotations.NoSlotomatic"/>
</annotation>
<!-- javax.baja.security.BPermissions.make(int) -->
<method name="make"  public="true" static="true">
<description>
Make a BPermissions for the specified bit mask.
</description>
<parameter name="mask">
<type class="int"/>
</parameter>
<return>
<type class="javax.baja.security.BPermissions"/>
</return>
</method>

<!-- javax.baja.security.BPermissions.or(javax.baja.security.BPermissions) -->
<method name="or"  public="true">
<description>
Create a new BPermissions from the bitwise OR of this BPermissions&#xa; instance and the specified BPermissions.
</description>
<tag name="@since">Niagara 3.5</tag>
<parameter name="other">
<type class="javax.baja.security.BPermissions"/>
</parameter>
<return>
<type class="javax.baja.security.BPermissions"/>
</return>
</method>

<!-- javax.baja.security.BPermissions.and(javax.baja.security.BPermissions) -->
<method name="and"  public="true">
<description>
Create a new BPermissions from the bitwise AND of this BPermissions&#xa; instance and the specified BPermissions.
</description>
<tag name="@since">Niagara 3.5</tag>
<parameter name="other">
<type class="javax.baja.security.BPermissions"/>
</parameter>
<return>
<type class="javax.baja.security.BPermissions"/>
</return>
</method>

<!-- javax.baja.security.BPermissions.make(java.lang.String) -->
<method name="make"  public="true" static="true">
<description>
Make a BPermissions for the specified string encoding.
</description>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.security.BPermissions"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.security.BPermissions.getMask() -->
<method name="getMask"  public="true">
<description>
Get the permission mask.
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.security.BPermissions.has(int) -->
<method name="has"  public="true">
<description>
Return true if all the permissions specified &#xa; in in the given bitmask are enabled.
</description>
<parameter name="required">
<type class="int"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.security.BPermissions.has(javax.baja.security.BPermissions) -->
<method name="has"  public="true">
<description>
Return true if this instance has all the permissions &#xa; enabled which are enabled in the specified instance.
</description>
<parameter name="permissions">
<type class="javax.baja.security.BPermissions"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.security.BPermissions.hasOperatorRead() -->
<method name="hasOperatorRead"  public="true">
<description>
Is the operator read permission enabled.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.security.BPermissions.hasOperatorWrite() -->
<method name="hasOperatorWrite"  public="true">
<description>
Is the operator write permission enabled.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.security.BPermissions.hasOperatorInvoke() -->
<method name="hasOperatorInvoke"  public="true">
<description>
Is the operator invoke permission enabled.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.security.BPermissions.hasAdminRead() -->
<method name="hasAdminRead"  public="true">
<description>
Is the admin read permission enabled.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.security.BPermissions.hasAdminWrite() -->
<method name="hasAdminWrite"  public="true">
<description>
Is the admin write permission enabled.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.security.BPermissions.hasAdminInvoke() -->
<method name="hasAdminInvoke"  public="true">
<description>
Is the admin invoke permission enabled.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.security.BPermissions.getAllPermissions() -->
<method name="getAllPermissions"  public="true" static="true">
<description>
Array of all individual permissions, useful for iterating
</description>
<return>
<type class="javax.baja.security.BPermissions" dimension="1"/>
</return>
</method>

<!-- javax.baja.security.BPermissions.hashCode() -->
<method name="hashCode"  public="true">
<description>
Hash is based on &lt;code&gt;System.identityHashCode()&lt;/code&gt;.&#xa; Added override for this method in Niagara 3.4.
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.security.BPermissions.equals(java.lang.Object) -->
<method name="equals"  public="true">
<description>
BPermissions equality is based on identical bitmask.
</description>
<parameter name="obj">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.security.BPermissions.toString(javax.baja.sys.Context) -->
<method name="toString"  public="true">
<description>
To string method.
</description>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.security.BPermissions.encode(java.io.DataOutput) -->
<method name="encode"  public="true">
<description>
BPermissions is encoded as using writeUTF(encodeToString()).
</description>
<parameter name="out">
<type class="java.io.DataOutput"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.security.BPermissions.decode(java.io.DataInput) -->
<method name="decode"  public="true">
<description>
BPermissions is decoded using decodeFromString(readUTF()).
</description>
<parameter name="in">
<type class="java.io.DataInput"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.security.BPermissions.encodeToString() -->
<method name="encodeToString"  public="true">
<description>
Write the simple in text format.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.security.BPermissions.decodeFromString(java.lang.String) -->
<method name="decodeFromString"  public="true">
<description>
Read the simple from text format.
</description>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.security.BPermissions.getType() -->
<method name="getType"  public="true">
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.security.BPermissions.OPERATOR_READ -->
<field name="OPERATOR_READ"  public="true" static="true" final="true">
<type class="int"/>
<description>
Operator read privilege.
</description>
</field>

<!-- javax.baja.security.BPermissions.OPERATOR_WRITE -->
<field name="OPERATOR_WRITE"  public="true" static="true" final="true">
<type class="int"/>
<description>
Operator write privilege (implies OPERATOR_READ).
</description>
</field>

<!-- javax.baja.security.BPermissions.OPERATOR_INVOKE -->
<field name="OPERATOR_INVOKE"  public="true" static="true" final="true">
<type class="int"/>
<description>
Operator invoke privilege.
</description>
</field>

<!-- javax.baja.security.BPermissions.ADMIN_READ -->
<field name="ADMIN_READ"  public="true" static="true" final="true">
<type class="int"/>
<description>
Admin read privilege (implies OPERATOR_READ).
</description>
</field>

<!-- javax.baja.security.BPermissions.ADMIN_WRITE -->
<field name="ADMIN_WRITE"  public="true" static="true" final="true">
<type class="int"/>
<description>
Admin write privilege (implies OPERATOR_READ, OPERATOR_WRITE, ADMIN_READ).
</description>
</field>

<!-- javax.baja.security.BPermissions.ADMIN_INVOKE -->
<field name="ADMIN_INVOKE"  public="true" static="true" final="true">
<type class="int"/>
<description>
Admin invoke privilege (implies OPERATOR_INVOKE).
</description>
</field>

<!-- javax.baja.security.BPermissions.operatorRead -->
<field name="operatorRead"  public="true" static="true" final="true">
<type class="javax.baja.security.BPermissions"/>
<description>
Operator read privilege.
</description>
</field>

<!-- javax.baja.security.BPermissions.operatorWrite -->
<field name="operatorWrite"  public="true" static="true" final="true">
<type class="javax.baja.security.BPermissions"/>
<description>
Operator write privilege (implies OPERATOR_READ).
</description>
</field>

<!-- javax.baja.security.BPermissions.operatorInvoke -->
<field name="operatorInvoke"  public="true" static="true" final="true">
<type class="javax.baja.security.BPermissions"/>
<description>
Operator invoke privilege.
</description>
</field>

<!-- javax.baja.security.BPermissions.adminRead -->
<field name="adminRead"  public="true" static="true" final="true">
<type class="javax.baja.security.BPermissions"/>
<description>
Admin read privilege (implies OPERATOR_READ).
</description>
</field>

<!-- javax.baja.security.BPermissions.adminWrite -->
<field name="adminWrite"  public="true" static="true" final="true">
<type class="javax.baja.security.BPermissions"/>
<description>
Admin write privilege (implies OPERATOR_READ, OPERATOR_WRITE, ADMIN_READ).
</description>
</field>

<!-- javax.baja.security.BPermissions.adminInvoke -->
<field name="adminInvoke"  public="true" static="true" final="true">
<type class="javax.baja.security.BPermissions"/>
<description>
Admin invoke privilege (implies OPERATOR_INVOKE).
</description>
</field>

<!-- javax.baja.security.BPermissions.all -->
<field name="all"  public="true" static="true" final="true">
<type class="javax.baja.security.BPermissions"/>
<description>
All permissions enabled.
</description>
</field>

<!-- javax.baja.security.BPermissions.none -->
<field name="none"  public="true" static="true" final="true">
<type class="javax.baja.security.BPermissions"/>
<description>
No permissions enabled.
</description>
</field>

<!-- javax.baja.security.BPermissions.DEFAULT -->
<field name="DEFAULT"  public="true" static="true" final="true">
<type class="javax.baja.security.BPermissions"/>
<description>
The default is none.
</description>
</field>

<!-- javax.baja.security.BPermissions.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
