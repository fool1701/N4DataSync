<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="baja" runtimeProfile="rt" qualifiedName="javax.baja.security.crypto.ITrustStore" name="ITrustStore" packageName="javax.baja.security.crypto" public="true" interface="true" abstract="true" category="interface">
<description>
ITrustStore is the type of object returned from&#xa; a call to getSystemTrustStore or getUserTrustStore from an&#xa; ICryptoManager.
</description>
<tag name="@author">$Author$</tag>
<tag name="@creation">29 June 2011</tag>
<tag name="@version">$Revision$ $Date$</tag>
<tag name="@since">Niagara 3.7</tag>
<!-- javax.baja.security.crypto.ITrustStore.aliases() -->
<method name="aliases"  public="true" abstract="true">
<description>
Get an Enumeration of aliases stored in this trust store
</description>
<return>
<parameterizedType class="java.util.Enumeration">
<args>
<type class="java.lang.String"/>
</args>
</parameterizedType>
<description>
Enumeration of aliases in the trust store
</description>
</return>
<throws>
<type class="java.lang.Exception"/>
<description>
if an error occurs retrieving the aliases
</description>
</throws>
</method>

<!-- javax.baja.security.crypto.ITrustStore.containsAlias(java.lang.String) -->
<method name="containsAlias"  public="true" abstract="true">
<description>
Return true if the specified alias is stored in this trust store
</description>
<parameter name="alias">
<type class="java.lang.String"/>
<description>
the alias to check
</description>
</parameter>
<return>
<type class="boolean"/>
<description>
true if the alias is present, false otherwise
</description>
</return>
<throws>
<type class="java.lang.Exception"/>
<description>
if an error occurs checking for the alias
</description>
</throws>
</method>

<!-- javax.baja.security.crypto.ITrustStore.deleteEntry(java.lang.String) -->
<method name="deleteEntry"  public="true" abstract="true">
<description>
Delete the specified entry from the trust store
</description>
<parameter name="alias">
<type class="java.lang.String"/>
<description>
the alias to delete
</description>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
<description>
if an error occurs deleting the entry
</description>
</throws>
</method>

<!-- javax.baja.security.crypto.ITrustStore.getCertificate(java.lang.String) -->
<method name="getCertificate"  public="true" abstract="true">
<description>
Get the certificate stored for the specified alias
</description>
<parameter name="alias">
<type class="java.lang.String"/>
<description>
the alias to retrieve
</description>
</parameter>
<return>
<type class="java.security.cert.X509Certificate"/>
<description>
The certificate stored for the alias, or null if the alias does&#xa;         not exist
</description>
</return>
<throws>
<type class="java.lang.Exception"/>
<description>
if an error occurs retrieving the certificate
</description>
</throws>
</method>

<!-- javax.baja.security.crypto.ITrustStore.getCertificateAlias(java.security.cert.X509Certificate) -->
<method name="getCertificateAlias"  public="true" abstract="true">
<description>
Get the alias that the specified certificate is stored as
</description>
<parameter name="cert">
<type class="java.security.cert.X509Certificate"/>
<description>
the certificate to get the alias for
</description>
</parameter>
<return>
<type class="java.lang.String"/>
<description>
The the alias that the certificate is stored as, or null if the&#xa;         certificate is not present
</description>
</return>
<throws>
<type class="java.lang.Exception"/>
<description>
if an error occurs retrieving the alias
</description>
</throws>
</method>

<!-- javax.baja.security.crypto.ITrustStore.getCertificateChain(java.lang.String) -->
<method name="getCertificateChain"  public="true" abstract="true">
<description>
Get the certificate chain stored for the specified alias
</description>
<parameter name="alias">
<type class="java.lang.String"/>
<description>
the alias to retrieve
</description>
</parameter>
<return>
<type class="java.security.cert.X509Certificate" dimension="1"/>
<description>
The certificate chain stored for the alias, or null if the alias&#xa;         does not exist
</description>
</return>
<throws>
<type class="java.lang.Exception"/>
<description>
if an error occurs retrieving the certificate chain
</description>
</throws>
</method>

<!-- javax.baja.security.crypto.ITrustStore.getCreationDate(java.lang.String) -->
<method name="getCreationDate"  public="true" abstract="true">
<description>
Get the creation date of the specified alias
</description>
<parameter name="alias">
<type class="java.lang.String"/>
<description>
the alias to check
</description>
</parameter>
<return>
<type class="java.util.Date"/>
<description>
The creation date or the alias, or null if the alias does not exist
</description>
</return>
<throws>
<type class="java.lang.Exception"/>
<description>
if an error occurs retrieving the creation date
</description>
</throws>
</method>

<!-- javax.baja.security.crypto.ITrustStore.isCertificateEntry(java.lang.String) -->
<method name="isCertificateEntry"  public="true" abstract="true">
<description>
Return true if the alias exists and contains a certificate
</description>
<parameter name="alias">
<type class="java.lang.String"/>
<description>
the alias to check
</description>
</parameter>
<return>
<type class="boolean"/>
<description>
true if the alias exists and contains a certificate, false otherwise
</description>
</return>
<throws>
<type class="java.lang.Exception"/>
<description>
if an error occurs checking the alias
</description>
</throws>
</method>

<!-- javax.baja.security.crypto.ITrustStore.isKeyEntry(java.lang.String) -->
<method name="isKeyEntry"  public="true" abstract="true">
<description>
Return true if the alias exists and contains a key
</description>
<parameter name="alias">
<type class="java.lang.String"/>
<description>
the alias to check
</description>
</parameter>
<return>
<type class="boolean"/>
<description>
true if the alias exists and contains a key, false otherwise
</description>
</return>
<throws>
<type class="java.lang.Exception"/>
<description>
if an error occurs checking the alias
</description>
</throws>
</method>

<!-- javax.baja.security.crypto.ITrustStore.setCertificateEntry(java.lang.String, java.security.cert.X509Certificate) -->
<method name="setCertificateEntry"  public="true" abstract="true">
<description>
Store a certificate with the specified alias
</description>
<parameter name="alias">
<type class="java.lang.String"/>
<description>
the alias for the entry
</description>
</parameter>
<parameter name="cert">
<type class="java.security.cert.X509Certificate"/>
<description>
the certificate to store
</description>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
<description>
if an error occurs setting the certificate
</description>
</throws>
</method>

<!-- javax.baja.security.crypto.ITrustStore.size() -->
<method name="size"  public="true" abstract="true">
<description>
Return the number of entries in the trust store
</description>
<return>
<type class="int"/>
<description>
the number of entries in the trust store
</description>
</return>
<throws>
<type class="java.lang.Exception"/>
<description>
if an error occurs checking the entries
</description>
</throws>
</method>

<!-- javax.baja.security.crypto.ITrustStore.save() -->
<method name="save"  public="true" abstract="true">
<description>
Save the trust store to file
</description>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
<description>
if an error occurs saving the trust store
</description>
</throws>
</method>

<!-- javax.baja.security.crypto.ITrustStore.getCertificateEntries() -->
<method name="getCertificateEntries"  public="true" abstract="true">
<description>
Return an Iterable of all certificates in the trust store
</description>
<return>
<parameterizedType class="java.lang.Iterable">
<args>
<type class="javax.baja.nre.security.IX509CertificateEntry"/>
</args>
</parameterizedType>
<description>
Iterable of certificates in the trust store
</description>
</return>
<throws>
<type class="java.lang.Exception"/>
<description>
if an error occurs retrieving the certificates
</description>
</throws>
</method>

<!-- javax.baja.security.crypto.ITrustStore.getCertificates() -->
<method name="getCertificates"  public="true" default="true">
<annotation><type class="java.lang.Deprecated"/>
</annotation>
<description>
Return an Enumeration of all certificates in the trust store
</description>
<tag name="@deprecated">since Niagara 4.13 - will be removed in Niagara 5.0</tag>
<return>
<parameterizedType class="java.util.Enumeration">
<args>
<type class="com.tridium.crypto.core.cert.NX509CertificateEntry"/>
</args>
</parameterizedType>
<description>
Enumeration of certificates in the trust store
</description>
</return>
<throws>
<type class="java.lang.Exception"/>
<description>
if an error occurs retrieving the certificates
</description>
</throws>
</method>

<!-- javax.baja.security.crypto.ITrustStore.findCertificate(java.security.cert.X509Certificate) -->
<method name="findCertificate"  public="true" abstract="true">
<description>
Return the alias of the certificate in the trust store that matches the&#xa; specified certificate&#x27;s public key
</description>
<parameter name="match">
<type class="java.security.cert.X509Certificate"/>
<description>
the certificate to check for
</description>
</parameter>
<return>
<type class="java.lang.String"/>
<description>
the alias of the certificate with a matching public key, or null&#xa;         if no match is found
</description>
</return>
<throws>
<type class="java.lang.Exception"/>
<description>
if an error occurs checking for the certificate
</description>
</throws>
</method>

<!-- javax.baja.security.crypto.ITrustStore.deleteEntries(java.lang.String[]) -->
<method name="deleteEntries"  public="true" abstract="true">
<description>
Delete the specified aliases from the trust store
</description>
<parameter name="aliases">
<type class="java.lang.String" dimension="1"/>
<description>
the aliases to delete
</description>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
<description>
if an error occurs deleting the entries
</description>
</throws>
</method>

</class>
</bajadoc>
