<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="baja" runtimeProfile="rt" qualifiedName="javax.baja.security.BAbstractAuthenticator" name="BAbstractAuthenticator" packageName="javax.baja.security" public="true" abstract="true">
<description>
Contains authentication data for users.  AuthenticationSchemes use whatever authenticator is&#xa; their &lt;code&gt;<see ref="javax.baja.authn.BAuthenticationScheme#getDefaultAuthenticator()">javax.baja.authn.BAuthenticationScheme#getDefaultAuthenticator()</see>&lt;/code&gt;
</description>
<tag name="@author">Tom Duffy</tag>
<tag name="@creation">8/8/2014</tag>
<tag name="@since">Niagara 4.0</tag>
<extends>
<type class="javax.baja.sys.BComponent"/>
</extends>
<!-- javax.baja.security.BAbstractAuthenticator() -->
<constructor name="BAbstractAuthenticator" public="true">
<description/>
</constructor>

<!-- javax.baja.security.BAbstractAuthenticator.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.security.BAbstractAuthenticator.canLogin() -->
<method name="canLogin"  public="true">
<description>
Hook for subclasses, when there is an authenticator specific reason the user should not login.
</description>
<return>
<type class="boolean"/>
<description>
true if the user can login, false otherwise.
</description>
</return>
</method>

<!-- javax.baja.security.BAbstractAuthenticator.canLogin(javax.baja.user.BUser) -->
<method name="canLogin"  public="true">
<description>
Allows a subclass to pass in a user to determine if the user&#x27;s password has expired or not.
</description>
<parameter name="user">
<type class="javax.baja.user.BUser"/>
</parameter>
<return>
<type class="boolean"/>
<description>
true if the user can login, false if the password has expired.
</description>
</return>
</method>

<!-- javax.baja.security.BAbstractAuthenticator.changed(javax.baja.sys.Property, javax.baja.sys.Context) -->
<method name="changed"  public="true">
<description/>
<parameter name="property">
<type class="javax.baja.sys.Property"/>
</parameter>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.security.BAbstractAuthenticator.invalidUserSessions(javax.baja.user.BUser) -->
<method name="invalidUserSessions"  protected="true">
<description/>
<parameter name="user">
<type class="javax.baja.user.BUser"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.security.BAbstractAuthenticator.isChildLegal(javax.baja.sys.BComponent) -->
<method name="isChildLegal"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="comp">
<type class="javax.baja.sys.BComponent"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.security.BAbstractAuthenticator.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
