<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="baja" runtimeProfile="rt" qualifiedName="javax.baja.security.BIProtected" name="BIProtected" packageName="javax.baja.security" public="true" interface="true" abstract="true" category="interface">
<description>
BIProtected is implemented by BObjects which are should&#xa; be protected via the security architecture.  Every protected&#xa; instance must support the BICategorizable interface for&#xa; assignment into one or more categories.
</description>
<tag name="@author">Brian Frank</tag>
<tag name="@creation">1 May 03</tag>
<tag name="@version">$Revision: 7$ $Date: 6/20/07 7:39:10 PM EDT$</tag>
<tag name="@since">Baja 1.0</tag>
<implements>
<type class="javax.baja.category.BICategorizable"/>
</implements>
<!-- javax.baja.security.BIProtected.getPermissions(javax.baja.sys.Context) -->
<method name="getPermissions"  public="true" abstract="true">
<description>
Get the set of permissions available based on the&#xa; specified context.  If the context is non-null and&#xa; has a non-null user then this method must return&#xa; &lt;code&gt;cx.getUser().getPermissionsFor(this)&lt;/code&gt;.&#xa; If the context is null then typically this method&#xa; should return &lt;code&gt;BPermissions.all&lt;/code&gt;.  If this&#xa; happens to be a proxy object within a remote session,&#xa; then this method should return a cached instance&#xa; of BPermissions based on the credentials used to&#xa; establish the session.  Under no circumstances should&#xa; this method return null or make a network call.
</description>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="javax.baja.security.BPermissions"/>
</return>
</method>

<!-- javax.baja.security.BIProtected.canRead(javax.baja.naming.OrdTarget) -->
<method name="canRead"  public="true" abstract="true">
<description>
Return true if the specified target object has read permission.&#xa; It is up to the implementation to decide whether operator or&#xa; admin read permission should be checked.
</description>
<parameter name="cx">
<type class="javax.baja.naming.OrdTarget"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.security.BIProtected.canWrite(javax.baja.naming.OrdTarget) -->
<method name="canWrite"  public="true" abstract="true">
<description>
Return true if the specified target object has write permission.&#xa; It is up to the implementation to decide whether operator or&#xa; admin write permission should be checked.
</description>
<parameter name="cx">
<type class="javax.baja.naming.OrdTarget"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.security.BIProtected.canInvoke(javax.baja.naming.OrdTarget) -->
<method name="canInvoke"  public="true" abstract="true">
<description>
Return true if the specified target object has invoke permission.&#xa; It is up to the implementation to decide whether operator or&#xa; admin invoke permission should be checked.
</description>
<parameter name="cx">
<type class="javax.baja.naming.OrdTarget"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.security.BIProtected.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
