<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="baja" runtimeProfile="rt" qualifiedName="javax.baja.virtual.VirtualCacheCallbacks" name="VirtualCacheCallbacks" packageName="javax.baja.virtual" public="true">
<description>
VirtualCacheCallbacks provides a BVirtualComponentSpace the hooks to&#xa; manage how virtual components are cached in the space.
</description>
<tag name="@author">Scott Hoye</tag>
<tag name="@creation">06 Nov 06</tag>
<tag name="@version">$Revision: 13$ $Date: 8/5/10 4:35:17 PM EDT$</tag>
<tag name="@since">Niagara 3.2</tag>
<extends>
<type class="java.lang.Object"/>
</extends>
<!-- javax.baja.virtual.VirtualCacheCallbacks(javax.baja.virtual.BVirtualComponentSpace) -->
<constructor name="VirtualCacheCallbacks" public="true">
<parameter name="space">
<type class="javax.baja.virtual.BVirtualComponentSpace"/>
</parameter>
<description>
Constructor specifies the virtual component space.
</description>
</constructor>

<!-- javax.baja.virtual.VirtualCacheCallbacks.start() -->
<method name="start"  public="true" synchronized="true">
<description>
Starts the execution of this virtual cache callbacks.&#xa; This method is called by the virtual component space.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.virtual.VirtualCacheCallbacks.stop() -->
<method name="stop"  public="true" synchronized="true">
<description>
Stops the execution of this virtual cache callbacks.&#xa; This method is called by the virtual component space.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.virtual.VirtualCacheCallbacks.getMaxVirtualCacheLife() -->
<method name="getMaxVirtualCacheLife"  public="true">
<description>
The relative time returned from this callback specifies the maximum&#xa; amount of time a virtual component should remain in memory after it is&#xa; no longer needed (ie. it has been unsubscribed, it has no active children,&#xa; and it is a virtual component subject to auto removal).  If the virtual&#xa; component is not re-subscribed within this max cache life time, it&#xa; will be automatically removed from the virtual space.
</description>
<return>
<type class="javax.baja.sys.BRelTime"/>
</return>
</method>

<!-- javax.baja.virtual.VirtualCacheCallbacks.getMinVirtualCacheLife() -->
<method name="getMinVirtualCacheLife"  public="true">
<description>
The relative time returned from this callback specifies the minimum&#xa; amount of time a virtual component should remain in memory after it is&#xa; no longer needed (ie. it has been unsubscribed, it has no active children,&#xa; and it is a virtual component subject to auto removal).  This minimum life is&#xa; only enforced if the virtual threshold limit has been exceeded for the&#xa; station.  If this situation exists, if the virtual&#xa; component is not re-subscribed within this min cache life time, it&#xa; may be automatically removed from the virtual space if the virtual threshold&#xa; limit determines that it can be removed.
</description>
<return>
<type class="javax.baja.sys.BRelTime"/>
</return>
</method>

<!-- javax.baja.virtual.VirtualCacheCallbacks.getSpace() -->
<method name="getSpace"  public="true">
<description>
Return the virtual component space for this virtual cache callbacks implementation
</description>
<return>
<type class="javax.baja.virtual.BVirtualComponentSpace"/>
</return>
</method>

<!-- javax.baja.virtual.VirtualCacheCallbacks.spy(javax.baja.spy.SpyWriter) -->
<method name="spy"  public="true">
<description>
Supply virtual spy info.
</description>
<parameter name="out">
<type class="javax.baja.spy.SpyWriter"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.virtual.VirtualCacheCallbacks.MAX_CACHE_LIFE -->
<field name="MAX_CACHE_LIFE"  public="true" static="true" final="true">
<type class="javax.baja.sys.BRelTime"/>
<description/>
</field>

<!-- javax.baja.virtual.VirtualCacheCallbacks.MIN_CACHE_LIFE -->
<field name="MIN_CACHE_LIFE"  public="true" static="true" final="true">
<type class="javax.baja.sys.BRelTime"/>
<description/>
</field>

<!-- javax.baja.virtual.VirtualCacheCallbacks.VIRTUAL_THRESHOLD -->
<field name="VIRTUAL_THRESHOLD"  public="true" static="true" final="true">
<type class="int"/>
<description/>
</field>

<!-- javax.baja.virtual.VirtualCacheCallbacks.VIRTUAL_THRESHOLD_SCAN_RATE -->
<field name="VIRTUAL_THRESHOLD_SCAN_RATE"  public="true" static="true" final="true">
<type class="long"/>
<description/>
</field>

<!-- javax.baja.virtual.VirtualCacheCallbacks.THREAD_POOL_SIZE -->
<field name="THREAD_POOL_SIZE"  public="true" static="true" final="true">
<type class="int"/>
<description/>
</field>

<!-- javax.baja.virtual.VirtualCacheCallbacks.SPACES_PER_THREAD -->
<field name="SPACES_PER_THREAD"  public="true" static="true" final="true">
<type class="int"/>
<description/>
</field>

</class>
</bajadoc>
