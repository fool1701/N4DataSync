<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="baja" runtimeProfile="rt" qualifiedName="javax.baja.virtual.BVirtualComponent" name="BVirtualComponent" packageName="javax.baja.virtual" public="true">
<description>
Captures information about a virtual component. &#xa; Virtual Components are subject to automatic removal when no longer in use &#xa; (ie. when unsubscribed and no active children), as managed by the the virtual &#xa; component space&#x27;s virtual cache callbacks.  The lastActiveTicks property&#xa; contains the tick count of the last time this virtual component moved from&#xa; an active to inactive state (ie. moved to an unsubscribed state).
</description>
<tag name="@author">Scott Hoye</tag>
<tag name="@creation">14 Jul 06</tag>
<tag name="@version">$Revision: 20$ $Date: 7/29/10 5:17:35 PM EDT$</tag>
<tag name="@since">Niagara 3.2</tag>
<extends>
<type class="javax.baja.sys.BComponent"/>
</extends>
<!-- javax.baja.virtual.BVirtualComponent() -->
<constructor name="BVirtualComponent" public="true">
<description/>
</constructor>

<!-- javax.baja.virtual.BVirtualComponent.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.virtual.BVirtualComponent.performAutoRemoval() -->
<method name="performAutoRemoval"  public="true">
<description>
This is an override hook for subclasses if they wish to&#xa; disable the default behavior of auto removal for virtual components.&#xa; Auto removal means that virtual components will automatically&#xa; remove themselves when they are no longer in use (ie. unsubscribed and&#xa; have no subscribed children, or virtual children that don&#x27;t perform auto&#xa; removal) and the virtual cache lifetime (defined by the parent virtual &#xa; component space) has expired since the last unsubscription.&#xa;&#xa; The default value is to return true for this method (enables auto&#xa; removal).
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.virtual.BVirtualComponent.getLastActiveTicks() -->
<method name="getLastActiveTicks"  public="true" final="true">
<description>
Get the last active ticks count.
</description>
<return>
<type class="long"/>
</return>
</method>

<!-- javax.baja.virtual.BVirtualComponent.setLastActiveTicks(long) -->
<method name="setLastActiveTicks"  public="true" final="true">
<description>
Set the last active ticks count.
</description>
<parameter name="ticks">
<type class="long"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.virtual.BVirtualComponent.getVirtualGateway() -->
<method name="getVirtualGateway"  public="true" final="true">
<description>
Returns the parent virtual gateway instance, or null if it can&#x27;t be found.
</description>
<return>
<type class="javax.baja.virtual.BVirtualGateway"/>
</return>
</method>

<!-- javax.baja.virtual.BVirtualComponent.getCategorizableOrd() -->
<method name="getCategorizableOrd"  public="true">
<description>
Return a &#x22;normalized&#x22; virtual ord for this virtual&#xa; component which can be used for identification in the&#xa; category service.  A &#x22;normalized&#x22; virtual ord is one&#xa; that uniquely identifies the object/point in the actual&#xa; device which is represented by this virtual component.  &#xa; In many cases, the default Ord returned by this method, &#xa; getNavOrd(), will be sufficient.  However, in cases where &#xa; you can have multiple virtual Ords that resolve to the&#xa; same object/point in the device, the result of this method &#xa; should be the same &#x22;normalized&#x22; Ord for both virtual component &#xa; instances.  This can happen if you allow facets to be included&#xa; in a virtual Ord to tweak the virtual representation of an &#xa; object/point.  For such cases, you would want to strip out the&#xa; facet information in the &#x22;normalized&#x22; Ord returned by this method,&#xa; while keeping the necessary parentage virtual path information &#xa; in tact (which also must be &#x22;normalized&#x22;).
</description>
<tag name="@since">Niagara 3.4</tag>
<return>
<type class="javax.baja.naming.BOrd"/>
</return>
</method>

<!-- javax.baja.virtual.BVirtualComponent.isChildLegal(javax.baja.sys.BComponent) -->
<method name="isChildLegal"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Overridden to enforce that only virtual components and&#xa; BVectors can be children of virtual components.
</description>
<parameter name="child">
<type class="javax.baja.sys.BComponent"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.virtual.BVirtualComponent.isParentLegal(javax.baja.sys.BComponent) -->
<method name="isParentLegal"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Overridden to enforce that only virtual components can be&#xa; parents of virtual components.
</description>
<parameter name="parent">
<type class="javax.baja.sys.BComponent"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.virtual.BVirtualComponent.getNavOrd() -->
<method name="getNavOrd"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Overridden to incorporate the virtual address into the&#xa; nav ord.
</description>
<return>
<type class="javax.baja.naming.BOrd"/>
</return>
</method>

<!-- javax.baja.virtual.BVirtualComponent.getTagDictionaryService() -->
<method name="getTagDictionaryService"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Overridden to use the virtual gateway to retrieve the&#xa; local TagDictionaryService.&#xa;&#xa; since Niagara 4.2
</description>
<return>
<type class="javax.baja.tag.TagDictionaryService"/>
</return>
</method>

<!-- javax.baja.virtual.BVirtualComponent.getAppliedCategoryMask() -->
<method name="getAppliedCategoryMask"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Starting in Niagara 3.4, the default behavior of this method &#xa; will be to check the category service&#x27;s ord to category mask&#xa; map for the category mask to use for this virtual component.&#xa; (It uses the getCategorizableOrd() as the lookup key).&#xa; If it doesn&#x27;t exist there, then it will default to use the &#xa; applied category mask of the virtual gateway.
</description>
<return>
<type class="javax.baja.category.BCategoryMask"/>
</return>
</method>

<!-- javax.baja.virtual.BVirtualComponent.getCategoryMask() -->
<method name="getCategoryMask"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Starting in Niagara 3.4, the default behavior of this method &#xa; will be to check the category service&#x27;s ord to category mask&#xa; map for the category mask to use for this virtual component.&#xa; (It uses the getCategorizableOrd() as the lookup key).&#xa; If it doesn&#x27;t exist there, then it will return BCategoryMask.NULL.
</description>
<return>
<type class="javax.baja.category.BCategoryMask"/>
</return>
</method>

<!-- javax.baja.virtual.BVirtualComponent.getAgents(javax.baja.sys.Context) -->
<method name="getAgents"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Override the agent list to remove the pxEditor, since&#xa; px views are not allowed on virtuals.  Also&#xa; removes the WireSheet and LinkSheet views since linking &#xa; is not allowed for virtual components.
</description>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="javax.baja.agent.AgentList"/>
</return>
</method>

<!-- javax.baja.virtual.BVirtualComponent.getIcon() -->
<method name="getIcon"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get the icon.  The default implement checks if &#xa; there is a BIcon property called &#x22;icon&#x22;.  If &#xa; not then return a default virtual component icon.
</description>
<return>
<type class="javax.baja.sys.BIcon"/>
</return>
</method>

<!-- javax.baja.virtual.BVirtualComponent.spy(javax.baja.spy.SpyWriter) -->
<method name="spy"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Overridden to be sure to include virtual spy info.
</description>
<parameter name="out">
<type class="javax.baja.spy.SpyWriter"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.virtual.BVirtualComponent.fw(int, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object) -->
<method name="fw"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Framework use only.
</description>
<parameter name="x">
<type class="int"/>
</parameter>
<parameter name="a">
<type class="java.lang.Object"/>
</parameter>
<parameter name="b">
<type class="java.lang.Object"/>
</parameter>
<parameter name="c">
<type class="java.lang.Object"/>
</parameter>
<parameter name="d">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="java.lang.Object"/>
</return>
</method>

<!-- javax.baja.virtual.BVirtualComponent.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
