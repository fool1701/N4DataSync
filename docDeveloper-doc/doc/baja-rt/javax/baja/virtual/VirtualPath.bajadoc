<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="baja" runtimeProfile="rt" qualifiedName="javax.baja.virtual.VirtualPath" name="VirtualPath" packageName="javax.baja.virtual" public="true" final="true">
<description>
VirtualPath is a ord scheme (subclasses SlotPath) for resolving BVirtualComponents&#xa; using unescaped slot names.  The &#x27;/&#x27;, &#x27;|&#x27;, &#x27;$&#x27;, and &#x27;:&#x27; characters are NOT &#xa; allowed in a virtual path.  Also, the &#x22;../&#x22; is reserved for backups.&#xa;&#xa; Starting in Niagara 4.6, there is a method &lt;code&gt;<see ref="javax.baja.virtual.VirtualPath#toVirtualPathName(java.lang.String)">VirtualPath#toVirtualPathName(String)</see>&lt;/code&gt; used to&#xa; convert any SlotPath name whose unescaped form may contain unsupported characters (&#x27;/&#x27;, &#x27;|&#x27;, &#x27;$&#x27;,&#xa; &#x27;:&#x27;, and the &#x27;~&#x27; escape character itself) and return a proper VirtualPath name with unsupported&#xa; characters escaped using a &#x22;~&#x22; hex hex form.  There is also a method&#xa; &lt;code&gt;<see ref="javax.baja.virtual.VirtualPath#toSlotPathName(java.lang.String)">VirtualPath#toSlotPathName(String)</see>&lt;/code&gt; used to convert a VirtualPath name back to its&#xa; original SlotPath name form.&#xa;&#xa; The BNF is:&#xa; &lt;pre&gt;&#xa;   virtualpath := absolute&#xa;   absolute    := &#x22;/&#x22; path&#xa;   path        := name [ &#x22;/&#x22; path]&#xa;   name        := asciiEsc | ascii, &#x27;/&#x27; &#x27;|&#x27; &#x27;$&#x27; and &#x27;:&#x27; characters NOT allowed (&#x22;../&#x22; is also reserved for backups)&#xa;   asciiEsc    := &#x22;~&#x22; hex hex, only used to escape the &#x27;/&#x27; &#x27;|&#x27; &#x27;$&#x27;, &#x27;:&#x27;, and &#x27;~&#x27; characters&#xa; &lt;/pre&gt;
</description>
<tag name="@author">Scott Hoye</tag>
<tag name="@creation">20 Nov 06</tag>
<tag name="@version">$Revision: 7$ $Date: 9/24/10 5:10:42 AM EDT$</tag>
<tag name="@since">Niagara 3.2</tag>
<extends>
<type class="javax.baja.naming.SlotPath"/>
</extends>
<!-- javax.baja.virtual.VirtualPath(java.lang.String, java.lang.String) -->
<constructor name="VirtualPath" public="true">
<parameter name="scheme">
<type class="java.lang.String"/>
</parameter>
<parameter name="body">
<type class="java.lang.String"/>
</parameter>
<throws>
<type class="javax.baja.naming.SyntaxException"/>
<description>
if the body isn&#x27;t a valid file path.
</description>
</throws>
<description>
Construct an VirtualPath with the specified scheme and body.
</description>
</constructor>

<!-- javax.baja.virtual.VirtualPath(java.lang.String, java.lang.String[]) -->
<constructor name="VirtualPath" public="true">
<parameter name="scheme">
<type class="java.lang.String"/>
</parameter>
<parameter name="names">
<type class="java.lang.String" dimension="1"/>
</parameter>
<throws>
<type class="javax.baja.naming.SyntaxException"/>
</throws>
<description>
Construct an VirtualPath with the specified scheme and names.
</description>
</constructor>

<!-- javax.baja.virtual.VirtualPath(java.lang.String) -->
<constructor name="VirtualPath" public="true">
<parameter name="body">
<type class="java.lang.String"/>
</parameter>
<throws>
<type class="javax.baja.naming.SyntaxException"/>
</throws>
<description>
Convenience with &#x22;virtual&#x22; scheme.
</description>
</constructor>

<!-- javax.baja.virtual.VirtualPath.convertFromSlotPath(javax.baja.naming.SlotPath) -->
<method name="convertFromSlotPath"  public="true" static="true">
<description>
The conversion from a SlotPath is basically just to&#xa; unescape all of the path names and escape any unsupported&#xa; characters (&#x27;/&#x27;, &#x27;|&#x27;, &#x27;$&#x27;, &#x27;:&#x27;, and &#x27;~&#x27;).
</description>
<parameter name="slotPath">
<type class="javax.baja.naming.SlotPath"/>
</parameter>
<return>
<type class="javax.baja.virtual.VirtualPath"/>
</return>
</method>

<!-- javax.baja.virtual.VirtualPath.makeSlotPath(java.lang.String, java.lang.String) -->
<method name="makeSlotPath"  protected="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Creates a new SlotPath instance for the given scheme and body.&#xa; Overridden to return a new VirtualPath instance.
</description>
<parameter name="scheme">
<type class="java.lang.String"/>
</parameter>
<parameter name="body">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.naming.SlotPath"/>
</return>
</method>

<!-- javax.baja.virtual.VirtualPath.makePath(java.lang.String) -->
<method name="makePath"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<tag name="@since">Niagara 4.3U1</tag>
<parameter name="body">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.naming.OrdQuery"/>
</return>
</method>

<!-- javax.baja.virtual.VirtualPath.isValidPathName(java.lang.String) -->
<method name="isValidPathName"  protected="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Does the specified string contain a valid name.&#xa; Overridden here to check for invalid characters&#xa; in a virtual path.&#xa; The &#x27;/&#x27;, &#x27;|&#x27;, &#x27;$&#x27;, and &#x27;:&#x27; characters are NOT &#xa; allowed in a virtual path.
</description>
<parameter name="name">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.virtual.VirtualPath.isValidName(java.lang.String) -->
<method name="isValidName"  public="true" static="true">
<description>
Does the specified string contain a valid name.
</description>
<parameter name="name">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.virtual.VirtualPath.verifyValidName(java.lang.String) -->
<method name="verifyValidName"  public="true" static="true">
<description>
If the specified name is invalid then throw an IllegalNameException.
</description>
<parameter name="name">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.virtual.VirtualPath.escape(java.lang.String) -->
<method name="escape"  public="true" static="true">
<description>
Escape the specified string.
</description>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.virtual.VirtualPath.unescape(java.lang.String) -->
<method name="unescape"  public="true" static="true">
<description>
Unescape the specified string.
</description>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.virtual.VirtualPath.toDisplayString() -->
<method name="toDisplayString"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Return the body.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.virtual.VirtualPath.toVirtualPathName(java.lang.String) -->
<method name="toVirtualPathName"  public="true" static="true">
<description>
Converts the given SlotPath name to a valid VirtualPath name.  The SlotPath name argument&#xa; must be in its proper slot escaped form - don&#x27;t call SlotPath.unescape() on the SlotPath name&#xa; argument before calling this method.  This method will unescape the given SlotPath name and&#xa; look for any unsupported virtual characters (&#x27;/&#x27;, &#x27;|&#x27;, &#x27;$&#x27;, &#x27;:&#x27;, and the &#x27;~&#x27; escape character&#xa; itself) and escape those using the &#x27;~&#x27; escape character.
</description>
<tag name="@since">Niagara 4.6</tag>
<parameter name="slotPathName">
<type class="java.lang.String"/>
<description>
The SlotPath name to be converted to a valid VirtualPath name.  This&#xa;                     argument must be in its proper slot escaped form - don&#x27;t call&#xa;                     SlotPath.unescape() on this SlotPath name argument before passing it to&#xa;                     this method.
</description>
</parameter>
<return>
<type class="java.lang.String"/>
<description>
A valid VirtualPath name where any unsupported virtual characters have been escaped&#xa;         using the &#x27;~&#x27; escape character.
</description>
</return>
</method>

<!-- javax.baja.virtual.VirtualPath.toSlotPathName(java.lang.String) -->
<method name="toSlotPathName"  public="true" static="true">
<description>
Converts the given VirtualPath name to a valid SlotPath name. This method will unescape any&#xa; unsupported virtual characters (&#x27;/&#x27;, &#x27;|&#x27;, &#x27;$&#x27;, &#x27;:&#x27;, and the &#x27;~&#x27; escape character itself) in the&#xa; given VirtualPath name that were previously escaped using the &#x27;~&#x27; escape character.  It will&#xa; also ensure that the result is in proper SlotPath escaped form before returning it.&#xa;&#xa; In order to support legacy uses of the &#x27;~&#x27; escape character in pre-4.6 VirtualPath names,&#xa; this method will only consider &#x27;~&#x27; as an escape character if it is followed by the code for&#xa; one of the unsupported virtual characters (&#x27;/&#x27;, &#x27;|&#x27;, &#x27;$&#x27;, &#x27;:&#x27;, and &#x27;~&#x27;) in the given&#xa; VirtualPath name.
</description>
<tag name="@since">Niagara 4.6</tag>
<parameter name="virtualPathName">
<type class="java.lang.String"/>
<description>
The VirtualPath name to be converted to a valid SlotPath name.
</description>
</parameter>
<return>
<type class="java.lang.String"/>
<description>
A valid SlotPath name.
</description>
</return>
</method>

<!-- javax.baja.virtual.VirtualPath.EMPTY_VIRTUAL_PATH -->
<field name="EMPTY_VIRTUAL_PATH"  public="true" static="true" final="true">
<type class="javax.baja.virtual.VirtualPath"/>
<description>
A VirtualPath constant with an empty body String
</description>
<tag name="@since">Niagara 4.13</tag>
</field>

</class>
</bajadoc>
