<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="baja" runtimeProfile="rt" qualifiedName="javax.baja.nav.NavFileDecoder" name="NavFileDecoder" packageName="javax.baja.nav" public="true">
<description>
NavFileDecoder decodes a nav XML file into a tree of BNavFileNodes.&#xa; The format of a nav file is a root element called &#x22;nav&#x22; with a &#xa; version attribute of &#x22;1.0&#x22;.  A tree of nodes is defined using the&#xa; &#x22;node&#x22; element with &#x22;name&#x22;, &#x22;ord&#x22;, and &#x22;icon&#x22; attributes.
</description>
<tag name="@author">Brian Frank</tag>
<tag name="@creation">1 Sept 04</tag>
<tag name="@version">$Revision: 6$ $Date: 3/28/05 9:23:02 AM EST$</tag>
<tag name="@since">Baja 3.0</tag>
<extends>
<type class="javax.baja.xml.XParser"/>
</extends>
<!-- javax.baja.nav.NavFileDecoder(javax.baja.file.BIFile) -->
<constructor name="NavFileDecoder" public="true">
<parameter name="file">
<type class="javax.baja.file.BIFile"/>
</parameter>
<throws>
<type class="java.lang.Exception"/>
</throws>
<description>
Construct a NavFileDecoder to read from the specified file.
</description>
</constructor>

<!-- javax.baja.nav.NavFileDecoder(javax.baja.naming.BOrd, java.io.InputStream) -->
<constructor name="NavFileDecoder" public="true">
<parameter name="baseOrd">
<type class="javax.baja.naming.BOrd"/>
</parameter>
<parameter name="in">
<type class="java.io.InputStream"/>
</parameter>
<throws>
<type class="java.lang.Exception"/>
</throws>
<description>
Construct an NavFileDecoder from the given input stream.
</description>
</constructor>

<!-- javax.baja.nav.NavFileDecoder.load(javax.baja.naming.BOrd) -->
<method name="load"  public="true" static="true">
<description>
Convenience for &lt;code&gt;get((BIFile)ord.get())&lt;/code&gt;.
</description>
<parameter name="ord">
<type class="javax.baja.naming.BOrd"/>
</parameter>
<return>
<type class="javax.baja.nav.BNavFileSpace"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.nav.NavFileDecoder.load(javax.baja.file.BIFile) -->
<method name="load"  public="true" static="true">
<description>
This method is used to access NavFile&#x27;s as parsed  NavFileSpaces &#xa; via a cache.  If the ord hasn&#x27;t been loaded yet or the file&#xa; has changed since last loaded it is parsed, otherwise return the &#xa; cached nav tree.
</description>
<parameter name="navFile">
<type class="javax.baja.file.BIFile"/>
</parameter>
<return>
<type class="javax.baja.nav.BNavFileSpace"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.nav.NavFileDecoder.decodeDocument() -->
<method name="decodeDocument"  public="true">
<description>
Convenience for &lt;code&gt;decodeDocument(true)&lt;/code&gt;.
</description>
<return>
<type class="javax.baja.nav.BNavFileSpace"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.nav.NavFileDecoder.decodeDocument(boolean) -->
<method name="decodeDocument"  public="true">
<description>
Decode the XML document into a BNavFileSpace which contains&#xa; a BNavFileNode tree. Optionally close the input stream.
</description>
<parameter name="close">
<type class="boolean"/>
</parameter>
<return>
<type class="javax.baja.nav.BNavFileSpace"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

</class>
</bajadoc>
