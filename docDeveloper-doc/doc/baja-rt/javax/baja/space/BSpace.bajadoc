<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="baja" runtimeProfile="rt" qualifiedName="javax.baja.space.BSpace" name="BSpace" packageName="javax.baja.space" public="true" abstract="true">
<description>
BSpace defines a group of BObjects which share common&#xa; strategies for loading, caching, lifecycle, naming, and&#xa; navigation.  Entries in a space implement the BISpaceNode&#xa; interface.  Spaces are typically mounted under BIAuthorities &#xa; in the naming and nav hierarchies.
</description>
<tag name="@author">Brian Frank</tag>
<tag name="@creation">21 Jan 03</tag>
<tag name="@version">$Revision: 9$ $Date: 3/28/05 9:23:04 AM EST$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="javax.baja.nav.BNavContainer"/>
</extends>
<implements>
<type class="javax.baja.agent.BIAgent"/>
</implements>
<implements>
<type class="javax.baja.space.BISpace"/>
</implements>
<!-- javax.baja.space.BSpace(java.lang.String, javax.baja.util.LexiconText) -->
<constructor name="BSpace" protected="true">
<parameter name="name">
<type class="java.lang.String"/>
</parameter>
<parameter name="lexText">
<type class="javax.baja.util.LexiconText"/>
</parameter>
<description>
Constructor.
</description>
</constructor>

<!-- javax.baja.space.BSpace(java.lang.String) -->
<constructor name="BSpace" protected="true">
<parameter name="name">
<type class="java.lang.String"/>
</parameter>
<description>
Constructor.
</description>
</constructor>

<!-- javax.baja.space.BSpace.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.space.BSpace.getSpaceId() -->
<method name="getSpaceId"  public="true">
<description/>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.space.BSpace.isMounted() -->
<method name="isMounted"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Return true if this space is mounted under an host.&#xa; Default implementation is &lt;code&gt;getHost() != null&lt;/code&gt;.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.space.BSpace.getSpaceContainer() -->
<method name="getSpaceContainer"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
If this space is mounted, then return its parent &#xa; container, otherwise return null.
</description>
<return>
<type class="javax.baja.space.BISpaceContainer"/>
</return>
</method>

<!-- javax.baja.space.BSpace.setSpaceContainer(javax.baja.space.BISpaceContainer) -->
<method name="setSpaceContainer"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Sets the parent space container.
</description>
<parameter name="spaceParent">
<type class="javax.baja.space.BISpaceContainer"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.space.BSpace.getHost() -->
<method name="getHost"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
If this space is mounted, then return its parent &#xa; host, otherwise return null.
</description>
<return>
<type class="javax.baja.naming.BHost"/>
</return>
</method>

<!-- javax.baja.space.BSpace.getSession() -->
<method name="getSession"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
If this space is mounted, then return its parent &#xa; session, otherwise return null.
</description>
<return>
<type class="javax.baja.naming.BISession"/>
</return>
</method>

<!-- javax.baja.space.BSpace.getAbsoluteOrd() -->
<method name="getAbsoluteOrd"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get an host absolute ord which identifies this&#xa; space.  If not mounted return null.
</description>
<return>
<type class="javax.baja.naming.BOrd"/>
</return>
</method>

<!-- javax.baja.space.BSpace.getOrdInHost() -->
<method name="getOrdInHost"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get the ord of this space relative to its host.
</description>
<return>
<type class="javax.baja.naming.BOrd"/>
</return>
</method>

<!-- javax.baja.space.BSpace.getOrdInSession() -->
<method name="getOrdInSession"  public="true" abstract="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get the ord of this space relative to its session.
</description>
<return>
<type class="javax.baja.naming.BOrd"/>
</return>
</method>

<!-- javax.baja.space.BSpace.getOrdInSpaceContainer() -->
<method name="getOrdInSpaceContainer"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get the ord of this space relative to its space container.&#xa;   Default implementation is to return getOrdInHost().
</description>
<return>
<type class="javax.baja.naming.BOrd"/>
</return>
</method>

<!-- javax.baja.space.BSpace.getNavOrd() -->
<method name="getNavOrd"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
The default implementation is to return getAbsoluteOrd().
</description>
<return>
<type class="javax.baja.naming.BOrd"/>
</return>
</method>

<!-- javax.baja.space.BSpace.spy(javax.baja.spy.SpyWriter) -->
<method name="spy"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Dump spy info.
</description>
<parameter name="out">
<type class="javax.baja.spy.SpyWriter"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.space.BSpace.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
