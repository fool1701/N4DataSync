<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="baja" runtimeProfile="rt" qualifiedName="javax.baja.space.SubscribeCallbacks" name="SubscribeCallbacks" packageName="javax.baja.space" public="true">
<description>
SubscribeCallbacks provides a BComponentSpace the hooks &#xa; to trap the subscription of its BComponents.
</description>
<tag name="@author">Brian Frank</tag>
<tag name="@creation">23 Oct 01</tag>
<tag name="@version">$Revision: 6$ $Date: 3/17/11 10:36:01 AM EDT$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="java.lang.Object"/>
</extends>
<!-- javax.baja.space.SubscribeCallbacks() -->
<constructor name="SubscribeCallbacks" public="true">
<description/>
</constructor>

<!-- javax.baja.space.SubscribeCallbacks.subscribe(javax.baja.sys.BComponent[], int) -->
<method name="subscribe"  public="true">
<description>
This callback is invoked when a BComponent enters the &#xa; subscribed state.  It is an indication that the component &#xa; is actively being used and the space should attempt to &#xa; maintain synchronization until unsubscribed.  This is the &#xa; hook to implement demand based COV registration and polling.&#xa; If depth is non-zero, then the space should subscribe&#xa; to the components, plus all their descendents up to the &#xa; specified depth.  A depth of one indicates child components, &#xa; a depth of two grandchildren, and so on.&#xa; &lt;p&gt;&#xa; Since this method may be requesting a subscription of&#xa; several components at one time, it is possible that&#xa; the components within the subscription tree may already&#xa; be subscribed to.  It is the space&#x27;s responsibility to&#xa; handle this case.&#xa; &lt;p&gt;&#xa; Default implementation does nothing.
</description>
<parameter name="c">
<type class="javax.baja.sys.BComponent" dimension="1"/>
</parameter>
<parameter name="depth">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.space.SubscribeCallbacks.unsubscribe(javax.baja.sys.BComponent[]) -->
<method name="unsubscribe"  public="true">
<description>
This callback is invoked when components enters the unsubscribed &#xa; state.  It is an indication that the component is no longer &#xa; actively being used and that demand based registration or polling &#xa; may now be cleaned up.&#xa; &lt;p&gt;&#xa; Since this method may be requesting a unsubscription of&#xa; several components at one time, it is possible that&#xa; the components within the unsubscription tree may already&#xa; be unsubscribed.  It is the space&#x27;s responsibility to&#xa; handle this case.&#xa; &lt;p&gt;&#xa; Default implementation does nothing.
</description>
<parameter name="c">
<type class="javax.baja.sys.BComponent" dimension="1"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.space.SubscribeCallbacks.update(javax.baja.sys.BComponent, int) -->
<method name="update"  public="true">
<description>
This callback is invoked when a component&#x27;s update()&#xa; method is called.  It is used to indicate an up-to-date&#xa; snapshot of the component is needed, but not an ongoing&#xa; subscription.&#xa; &lt;p&gt;&#xa; Default implementation does nothing.
</description>
<parameter name="c">
<type class="javax.baja.sys.BComponent"/>
</parameter>
<parameter name="depth">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

</class>
</bajadoc>
