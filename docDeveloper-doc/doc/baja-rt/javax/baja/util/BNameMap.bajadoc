<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="baja" runtimeProfile="rt" qualifiedName="javax.baja.util.BNameMap" name="BNameMap" packageName="javax.baja.util" public="true" final="true">
<description>
The BNameMap is a map of String names to BFormat values:&#xa; &lt;pre&gt;&#xa;  map   := &#x22;{&#x22; pairs &#x22;}&#x22;&#xa;  pairs := pair ( &#x22;;&#x22; pair )*&#xa;  pair  := name &#x22;=&#x22; value&#xa;  name  := escaped String&#xa;  value := escaped Format&#xa; &lt;/pre&gt;    &#xa; The escape format for names and values uses the &#x22;\&#x22; character&#xa; to denote control characters which should be treated as part&#xa; of the name or value string. The control characters which must&#xa; be escaped include &#x22;\&#x22;, &#x22;{&#x22;, &#x22;}&#x22;, &#x22;=&#x22;, and &#x22;;&#x22;.
</description>
<tag name="@author">Brian Frank</tag>
<tag name="@creation">11 Feb 03</tag>
<tag name="@version">$Revision: 7$ $Date: 4/1/08 11:24:05 AM EDT$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="javax.baja.sys.BSimple"/>
</extends>
<annotation><type class="javax.baja.nre.annotations.NoSlotomatic"/>
</annotation>
<!-- javax.baja.util.BNameMap.make(java.util.HashMap&lt;java.lang.String, javax.baja.util.BFormat&gt;) -->
<method name="make"  public="true" static="true">
<description>
Make using the specified map where the keys must be &#xa; Strings, and the values must be BFormats.
</description>
<parameter name="map">
<parameterizedType class="java.util.HashMap">
<args>
<type class="java.lang.String"/>
<type class="javax.baja.util.BFormat"/>
</args>
</parameterizedType>
</parameter>
<return>
<type class="javax.baja.util.BNameMap"/>
</return>
</method>

<!-- javax.baja.util.BNameMap.make(javax.baja.util.BNameMap, java.lang.String, java.lang.String) -->
<method name="make"  public="true" static="true">
<description>
Convenience for &lt;code&gt;make(orig, name, BFormat.make(value))&lt;/code&gt;.
</description>
<parameter name="orig">
<type class="javax.baja.util.BNameMap"/>
</parameter>
<parameter name="name">
<type class="java.lang.String"/>
</parameter>
<parameter name="value">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.util.BNameMap"/>
</return>
</method>

<!-- javax.baja.util.BNameMap.make(javax.baja.util.BNameMap, java.lang.String, javax.baja.util.BFormat) -->
<method name="make"  public="true" static="true">
<description>
Create a new map from the original except add or &#xa; set the specified name/value pair.
</description>
<parameter name="orig">
<type class="javax.baja.util.BNameMap"/>
</parameter>
<parameter name="name">
<type class="java.lang.String"/>
</parameter>
<parameter name="value">
<type class="javax.baja.util.BFormat"/>
</parameter>
<return>
<type class="javax.baja.util.BNameMap"/>
</return>
</method>

<!-- javax.baja.util.BNameMap.make(javax.baja.util.BNameMap, javax.baja.util.BNameMap) -->
<method name="make"  public="true" static="true">
<description>
Create a new map from the original, except add or overwrite the values from&#xa; the &lt;code&gt;other&lt;/code&gt; map.
</description>
<tag name="@since">Niagara 3.4</tag>
<parameter name="orig">
<type class="javax.baja.util.BNameMap"/>
</parameter>
<parameter name="other">
<type class="javax.baja.util.BNameMap"/>
</parameter>
<return>
<type class="javax.baja.util.BNameMap"/>
</return>
</method>

<!-- javax.baja.util.BNameMap.remove(javax.baja.util.BNameMap, java.lang.String) -->
<method name="remove"  public="true" static="true">
<description>
Create a new map from the original except remove the &#xa; name/value pair.
</description>
<parameter name="orig">
<type class="javax.baja.util.BNameMap"/>
</parameter>
<parameter name="name">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.util.BNameMap"/>
</return>
</method>

<!-- javax.baja.util.BNameMap.list() -->
<method name="list"  public="true">
<description>
Get the name keys.
</description>
<return>
<type class="java.lang.String" dimension="1"/>
</return>
</method>

<!-- javax.baja.util.BNameMap.get(java.lang.String) -->
<method name="get"  public="true">
<description>
Get value for the specified name.
</description>
<parameter name="name">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.util.BFormat"/>
</return>
</method>

<!-- javax.baja.util.BNameMap.isNull() -->
<method name="isNull"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Return true if the map has a length of zero.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.util.BNameMap.hashCode() -->
<method name="hashCode"  public="true">
<description>
BNameMap uses its encodeToString() value&#x27;s hash code.
</description>
<tag name="@since">Niagara 3.4</tag>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.util.BNameMap.equals(java.lang.Object) -->
<method name="equals"  public="true">
<description>
Equality is based on both maps containing &#xa; the same keys and values.
</description>
<parameter name="obj">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.util.BNameMap.toString(javax.baja.sys.Context) -->
<method name="toString"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
To string method.
</description>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.util.BNameMap.encode(java.io.DataOutput) -->
<method name="encode"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Encode using writeUTF(encodeToString()).
</description>
<parameter name="out">
<type class="java.io.DataOutput"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.util.BNameMap.decode(java.io.DataInput) -->
<method name="decode"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Decoded using decodeFromString(readUTF()).
</description>
<parameter name="in">
<type class="java.io.DataInput"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.util.BNameMap.encodeToString() -->
<method name="encodeToString"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Write the simple in text format.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.util.BNameMap.decodeFromString(java.lang.String) -->
<method name="decodeFromString"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Read the simple from text format.
</description>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.util.BNameMap.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.util.BNameMap.NULL -->
<field name="NULL"  public="true" static="true" final="true">
<type class="javax.baja.util.BNameMap"/>
<description>
Null is the empty map.
</description>
</field>

<!-- javax.baja.util.BNameMap.DEFAULT -->
<field name="DEFAULT"  public="true" static="true" final="true">
<type class="javax.baja.util.BNameMap"/>
<description>
The map is NULL.
</description>
</field>

<!-- javax.baja.util.BNameMap.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
