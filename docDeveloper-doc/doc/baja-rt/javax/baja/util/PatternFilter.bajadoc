<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="baja" runtimeProfile="rt" qualifiedName="javax.baja.util.PatternFilter" name="PatternFilter" packageName="javax.baja.util" public="true">
<description>
PatternFileFilter provides simple DOS like pattern&#xa; file matching where * represents zero or more wildcard&#xa; characters and ? represents one wildcard character.
</description>
<tag name="@author">Brian Frank</tag>
<tag name="@creation">20 Dec 03</tag>
<tag name="@version">$Revision: 4$ $Date: 9/17/08 12:00:27 PM EDT$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="java.lang.Object"/>
</extends>
<implements>
<type class="javax.baja.nre.util.IFilter"/>
</implements>
<implements>
<type class="javax.baja.file.IFileFilter"/>
</implements>
<!-- javax.baja.util.PatternFilter(java.lang.String) -->
<constructor name="PatternFilter" public="true">
<parameter name="pattern">
<type class="java.lang.String"/>
</parameter>
<description>
Constructor which takes a pattern.
</description>
</constructor>

<!-- javax.baja.util.PatternFilter.parseList(java.lang.String, java.lang.String) -->
<method name="parseList"  public="true" static="true">
<description>
Parse a list of patterns using the specified separator&#xa; using StringTokenizer semantics.
</description>
<parameter name="listOfPatterns">
<type class="java.lang.String"/>
</parameter>
<parameter name="separators">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.util.PatternFilter" dimension="1"/>
</return>
</method>

<!-- javax.baja.util.PatternFilter.parseList(java.lang.String) -->
<method name="parseList"  public="true" static="true">
<description>
Convenience for &lt;code&gt;parseList(listOfPatterns, &#x22; \t,;&#x22;)&lt;/code&gt;.
</description>
<parameter name="listOfPatterns">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.util.PatternFilter" dimension="1"/>
</return>
</method>

<!-- javax.baja.util.PatternFilter.getPattern() -->
<method name="getPattern"  public="true">
<description>
Get the pattern passed to the constructor.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.util.PatternFilter.getDescription(javax.baja.sys.Context) -->
<method name="getDescription"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get the pattern passed to the constructor.
</description>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.util.PatternFilter.accept(javax.baja.file.BIFile) -->
<method name="accept"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Return &lt;code&gt;accept(file.getFileName())&lt;/code&gt;
</description>
<parameter name="file">
<type class="javax.baja.file.BIFile"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.util.PatternFilter.accept(java.lang.Object) -->
<method name="accept"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Return &lt;code&gt;accept(object.toString())&lt;/code&gt;
</description>
<parameter name="object">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.util.PatternFilter.accept(java.lang.String) -->
<method name="accept"  public="true">
<description>
Return if the specified string matches the pattern.
</description>
<parameter name="string">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.util.PatternFilter.hasWildChars() -->
<method name="hasWildChars"  public="true">
<description>
Does this pattern include wildcard characters (? or *)?
</description>
<return>
<type class="boolean"/>
</return>
</method>

</class>
</bajadoc>
