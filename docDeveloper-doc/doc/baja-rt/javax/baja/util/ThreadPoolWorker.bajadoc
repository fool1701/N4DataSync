<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="baja" runtimeProfile="rt" qualifiedName="javax.baja.util.ThreadPoolWorker" name="ThreadPoolWorker" packageName="javax.baja.util" public="true">
<description>
ThreadPoolWorker is a Worker which processes its work&#xa; concurrently using a pool of threads.&#xa; &#xa; Starting in Niagara 3.3, the behavior was enhanced to&#xa; remove idle worker threads from the pool (those that &#xa; have surpassed 10 seconds since last used).  Of course, &#xa; they will get recreated on demand as needed.  The idea&#xa; is that idle worker threads should linger in memory for &#xa; a short time (10 seconds) and then be automatically &#xa; cleaned up if still inactive.
</description>
<tag name="@author">John Sublett</tag>
<tag name="@creation">27 Jan 2004</tag>
<tag name="@version">$Revision: 13$ $Date: 1/9/09 4:22:35 PM EST$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="javax.baja.util.Worker"/>
</extends>
<!-- javax.baja.util.ThreadPoolWorker(javax.baja.util.Worker.ITodo) -->
<constructor name="ThreadPoolWorker" public="true">
<parameter name="todo">
<type class="javax.baja.util.Worker$ITodo"/>
</parameter>
<description>
Construct a ThreadPoolWorker to process work from todo.
</description>
</constructor>

<!-- javax.baja.util.ThreadPoolWorker.getMaxThreads() -->
<method name="getMaxThreads"  public="true">
<description>
Get the max number of concurrent threads to use for this worker.
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.util.ThreadPoolWorker.setMaxThreads(int) -->
<method name="setMaxThreads"  public="true">
<description>
Set the max number of concurrent threads to use for this worker.
</description>
<parameter name="maxThreads">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.util.ThreadPoolWorker.start(java.lang.ThreadGroup, java.lang.String) -->
<method name="start"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Start the worker on a thread and loop forever processing&#xa; its todo entries until the &lt;code&gt;stop()&lt;/code&gt; method is called.
</description>
<parameter name="threadGroup">
<type class="java.lang.ThreadGroup"/>
</parameter>
<parameter name="threadName">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.util.ThreadPoolWorker.stop() -->
<method name="stop"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Stop the worker threads from running.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.util.ThreadPoolWorker.process(java.lang.Runnable) -->
<method name="process"  protected="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Dispatch the work to one of the threads in the thread&#xa; pool, or if we are at maxThreads then block until a thread&#xa; becomes available.
</description>
<parameter name="work">
<type class="java.lang.Runnable"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.util.ThreadPoolWorker.threadStarted() -->
<method name="threadStarted"  protected="true">
<description>
Override point, called by a pool thread when it is created.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.util.ThreadPoolWorker.threadStopped() -->
<method name="threadStopped"  protected="true">
<description>
Override point, called by a pool thread when it is destroyed.
</description>
<return>
<type class="void"/>
</return>
</method>

</class>
</bajadoc>
