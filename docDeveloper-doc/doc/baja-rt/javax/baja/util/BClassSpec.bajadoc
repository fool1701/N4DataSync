<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="baja" runtimeProfile="rt" qualifiedName="javax.baja.util.BClassSpec" name="BClassSpec" packageName="javax.baja.util" public="true" final="true">
<description>
BClassSpec is a Baja simple which stores a module name&#xa; and class name pair.  A BClassSpec&#x27;s string format is &#xa; &#x22;moduleName:className&#x22;.
</description>
<tag name="@author">John Sublett</tag>
<tag name="@creation">14 May 2002</tag>
<tag name="@version">$Revision: 4$ $Date: 1/25/08 4:04:06 PM EST$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="javax.baja.sys.BSimple"/>
</extends>
<annotation><type class="javax.baja.nre.annotations.NoSlotomatic"/>
</annotation>
<!-- javax.baja.util.BClassSpec.make(java.lang.String, java.lang.String) -->
<method name="make"  public="true" static="true">
<description>
Create a class spec with its components.
</description>
<parameter name="moduleName">
<type class="java.lang.String"/>
</parameter>
<parameter name="className">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.util.BClassSpec"/>
</return>
</method>

<!-- javax.baja.util.BClassSpec.make(java.lang.String) -->
<method name="make"  public="true" static="true">
<description>
Create a class spec with string format.
</description>
<parameter name="spec">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.util.BClassSpec"/>
</return>
</method>

<!-- javax.baja.util.BClassSpec.make(javax.baja.sys.BModule, java.lang.Class&lt;?&gt;) -->
<method name="make"  public="true" static="true">
<description>
Construct a class spec with a module and class reference.
</description>
<parameter name="module">
<type class="javax.baja.sys.BModule"/>
</parameter>
<parameter name="cls">
<parameterizedType class="java.lang.Class">
<args>
<wildcardType class="?">
</wildcardType>
</args>
</parameterizedType>
</parameter>
<return>
<type class="javax.baja.util.BClassSpec"/>
</return>
</method>

<!-- javax.baja.util.BClassSpec.make(java.lang.Class&lt;?&gt;) -->
<method name="make"  public="true" static="true">
<description>
Construct a class spec with a class reference.
</description>
<parameter name="cls">
<parameterizedType class="java.lang.Class">
<args>
<wildcardType class="?">
</wildcardType>
</args>
</parameterizedType>
</parameter>
<return>
<type class="javax.baja.util.BClassSpec"/>
</return>
</method>

<!-- javax.baja.util.BClassSpec.isNull() -->
<method name="isNull"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Return if this is the null BClassSpec.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.util.BClassSpec.getModuleName() -->
<method name="getModuleName"  public="true">
<description>
Get the module name.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.util.BClassSpec.getClassName() -->
<method name="getClassName"  public="true">
<description>
Get the type name.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.util.BClassSpec.getResolvedClass() -->
<method name="getResolvedClass"  public="true">
<description>
Attempt to get the type resolved if possible.
</description>
<return>
<parameterizedType class="java.lang.Class">
<args>
<wildcardType class="?">
</wildcardType>
</args>
</parameterizedType>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
<throws>
<type class="javax.baja.sys.ModuleException"/>
</throws>
<throws>
<type class="java.lang.ClassNotFoundException"/>
</throws>
</method>

<!-- javax.baja.util.BClassSpec.newInstance() -->
<method name="newInstance"  public="true">
<description>
Get a new instance of the resolved class.
</description>
<return>
<type class="java.lang.Object"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
<throws>
<type class="javax.baja.sys.ModuleException"/>
</throws>
<throws>
<type class="java.lang.IllegalAccessException"/>
</throws>
<throws>
<type class="java.lang.InstantiationException"/>
</throws>
<throws>
<type class="java.lang.ClassNotFoundException"/>
</throws>
<throws>
<type class="java.lang.ClassCastException"/>
</throws>
</method>

<!-- javax.baja.util.BClassSpec.hashCode() -->
<method name="hashCode"  public="true">
<description>
BClassSpec hash code is based on string hashcode.
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.util.BClassSpec.equals(java.lang.Object) -->
<method name="equals"  public="true">
<description>
BClassSpec equality is based on string equality.
</description>
<parameter name="obj">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.util.BClassSpec.toString(javax.baja.sys.Context) -->
<method name="toString"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
To string.
</description>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.util.BClassSpec.encode(java.io.DataOutput) -->
<method name="encode"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
BClassSpec is serialized using writeUTF().
</description>
<parameter name="out">
<type class="java.io.DataOutput"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.util.BClassSpec.decode(java.io.DataInput) -->
<method name="decode"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
BClassSpec is unserialized using readUTF().
</description>
<parameter name="in">
<type class="java.io.DataInput"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.util.BClassSpec.encodeToString() -->
<method name="encodeToString"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Encode to the string format.
</description>
<return>
<type class="java.lang.String"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.util.BClassSpec.decodeFromString(java.lang.String) -->
<method name="decodeFromString"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Read the simple from its string format.
</description>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.util.BClassSpec.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.util.BClassSpec.NULL -->
<field name="NULL"  public="true" static="true" final="true">
<type class="javax.baja.util.BClassSpec"/>
<description/>
</field>

<!-- javax.baja.util.BClassSpec.DEFAULT -->
<field name="DEFAULT"  public="true" static="true" final="true">
<type class="javax.baja.util.BClassSpec"/>
<description>
The default is NULL
</description>
</field>

<!-- javax.baja.util.BClassSpec.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
