<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="baja" runtimeProfile="rt" qualifiedName="javax.baja.util.StringToIntMap" name="StringToIntMap" packageName="javax.baja.util" public="true">
<description>
StringToIntMap is an optimized hashtable for hashing &#xa; Strings to an integer.
</description>
<tag name="@author">Brian Frank</tag>
<tag name="@creation">22 Jun 01</tag>
<tag name="@version">$Revision: 1$ $Date: 6/22/01 12:28:28 PM EDT$</tag>
<tag name="@since">Baja 1.0</tag>
<tag name="@deprecated">Use Map&amp;lt;String,Integer&amp;gt;</tag>
<extends>
<type class="java.lang.Object"/>
</extends>
<annotation><type class="java.lang.Deprecated"/>
</annotation>
<!-- javax.baja.util.StringToIntMap() -->
<constructor name="StringToIntMap" public="true">
<description>
Default constructor.
</description>
</constructor>

<!-- javax.baja.util.StringToIntMap(int) -->
<constructor name="StringToIntMap" public="true">
<parameter name="initialCapacity">
<type class="int"/>
</parameter>
<description>
Constructor with initial capacity.
</description>
</constructor>

<!-- javax.baja.util.StringToIntMap(int, float) -->
<constructor name="StringToIntMap" public="true">
<parameter name="initialCapacity">
<type class="int"/>
</parameter>
<parameter name="loadFactor">
<type class="float"/>
</parameter>
<description>
Constructor with capacity and load factor.
</description>
</constructor>

<!-- javax.baja.util.StringToIntMap.size() -->
<method name="size"  public="true">
<description/>
<return>
<type class="int"/>
<description>
the count of elements in the table.
</description>
</return>
</method>

<!-- javax.baja.util.StringToIntMap.isEmpty() -->
<method name="isEmpty"  public="true">
<description/>
<return>
<type class="boolean"/>
<description>
if the table is empty.
</description>
</return>
</method>

<!-- javax.baja.util.StringToIntMap.keys() -->
<method name="keys"  public="true">
<description/>
<return>
<parameterizedType class="java.util.Iterator">
<args>
<type class="java.lang.String"/>
</args>
</parameterizedType>
<description>
an iterator for the String keys of the table.
</description>
</return>
</method>

<!-- javax.baja.util.StringToIntMap.get(java.lang.String) -->
<method name="get"  public="true">
<description>
Get the int identified by the given String key.
</description>
<parameter name="key">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="int"/>
<description>
-1 if not in table.
</description>
</return>
</method>

<!-- javax.baja.util.StringToIntMap.get(java.lang.String, int) -->
<method name="get"  public="true" synchronized="true">
<description>
Get the int identified by the given String key.
</description>
<parameter name="key">
<type class="java.lang.String"/>
</parameter>
<parameter name="nullValue">
<type class="int"/>
</parameter>
<return>
<type class="int"/>
<description>
nullValue if not in table.
</description>
</return>
</method>

<!-- javax.baja.util.StringToIntMap.put(java.lang.String, int) -->
<method name="put"  public="true" synchronized="true">
<description>
Put the given object into the table keyed on the int.
</description>
<parameter name="key">
<type class="java.lang.String"/>
</parameter>
<parameter name="value">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.util.StringToIntMap.remove(java.lang.String) -->
<method name="remove"  public="true" synchronized="true">
<description>
Remove the vaulue identified by the key.
</description>
<parameter name="key">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.util.StringToIntMap.clear() -->
<method name="clear"  public="true" synchronized="true">
<description>
Clear the hashtable of entries.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.util.StringToIntMap.equals(java.lang.Object) -->
<method name="equals"  public="true">
<description>
Return if the specified object another IntHashMap &#xa; with the exact same key-value pairs.
</description>
<parameter name="obj">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.util.StringToIntMap.hashCode() -->
<method name="hashCode"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.util.StringToIntMap.clone() -->
<method name="clone"  public="true" synchronized="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Clone the IntHashMap into a new instance.
</description>
<return>
<type class="java.lang.Object"/>
</return>
</method>

</class>
</bajadoc>
