<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="baja" runtimeProfile="rt" qualifiedName="javax.baja.util.BUuid" name="BUuid" packageName="javax.baja.util" public="true" final="true">
<description>
Baja simple for a Universal Unique Identifier.
</description>
<tag name="@author">Brian Frank</tag>
<tag name="@creation">27 Jul 00</tag>
<tag name="@version">$Revision: 15$ $Date: 4/7/11 4:39:32 PM EDT$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="javax.baja.sys.BSimple"/>
</extends>
<implements>
<type class="javax.baja.sys.BIComparable"/>
</implements>
<annotation><type class="javax.baja.nre.annotations.NoSlotomatic"/>
</annotation>
<!-- javax.baja.util.BUuid.make(java.lang.String) -->
<method name="make"  public="true" static="true">
<description>
Construct a BUuid from its string representation&#xa; using the decodeFromString() specification.
</description>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.util.BUuid"/>
</return>
</method>

<!-- javax.baja.util.BUuid.make(long, long) -->
<method name="make"  public="true" static="true">
<description>
Constructor with most and least significant 64 bits.
</description>
<parameter name="mostSig">
<type class="long"/>
<description>
the most significant 64 bits
</description>
</parameter>
<parameter name="leastSig">
<type class="long"/>
<description>
the least significant 64 bits
</description>
</parameter>
<return>
<type class="javax.baja.util.BUuid"/>
</return>
</method>

<!-- javax.baja.util.BUuid.make(java.util.UUID) -->
<method name="make"  public="true" static="true">
<description>
Constructor with a standard UUID.
</description>
<tag name="@since">Niagara 4.11</tag>
<parameter name="uuid">
<type class="java.util.UUID"/>
<description>
the standard Java UUID
</description>
</parameter>
<return>
<type class="javax.baja.util.BUuid"/>
</return>
</method>

<!-- javax.baja.util.BUuid.make(byte[]) -->
<method name="make"  public="true" static="true">
<description>
Construct a Uuid from a byte array. &#xa; The byte array must be 16 bytes long.  &#xa; The most significant byte must be at &lt;code&gt;bytes[15]&lt;/code&gt;, and &#xa; the least significant byte must be at &lt;code&gt;bytes[0]&lt;/code&gt;.
</description>
<parameter name="bytes">
<type class="byte" dimension="1"/>
</parameter>
<return>
<type class="javax.baja.util.BUuid"/>
</return>
</method>

<!-- javax.baja.util.BUuid.make() -->
<method name="make"  public="true" static="true">
<description>
Make a new universally unique identifier.
</description>
<return>
<type class="javax.baja.util.BUuid"/>
</return>
</method>

<!-- javax.baja.util.BUuid.getMostSignificant() -->
<method name="getMostSignificant"  public="true">
<description/>
<return>
<type class="long"/>
<description>
the most significant 64 bits
</description>
</return>
</method>

<!-- javax.baja.util.BUuid.getLeastSignificant() -->
<method name="getLeastSignificant"  public="true">
<description/>
<return>
<type class="long"/>
<description>
the least significant 64 bits
</description>
</return>
</method>

<!-- javax.baja.util.BUuid.getBytes() -->
<method name="getBytes"  public="true">
<description/>
<return>
<type class="byte" dimension="1"/>
<description>
a byte-array representation of this Uuid.&#xa; The array will be 16 bytes long.&#xa; The most significant byte will be at &lt;code&gt;bytes[15]&lt;/code&gt;, and &#xa; the least significant byte will be at &lt;code&gt;bytes[0]&lt;/code&gt;.
</description>
</return>
</method>

<!-- javax.baja.util.BUuid.toBytes(java.util.UUID) -->
<method name="toBytes"  public="true" static="true">
<description>
Generate a byte-array representation of a UUID described by integral components.
</description>
<tag name="@since">Niagara 4.11</tag>
<parameter name="juuid">
<type class="java.util.UUID"/>
<description>
the UUID
</description>
</parameter>
<return>
<type class="byte" dimension="1"/>
<description>
a byte-array representation of the UUID.&#xa; The array will be 16 bytes long.&#xa; The most significant byte will be at &lt;code&gt;bytes[15]&lt;/code&gt;, and&#xa; the least significant byte will be at &lt;code&gt;bytes[0]&lt;/code&gt;.
</description>
</return>
</method>

<!-- javax.baja.util.BUuid.isNull() -->
<method name="isNull"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="boolean"/>
<description>
is this BUuid the null value where all&#xa;    sixteen bytes are equal to zero.
</description>
</return>
</method>

<!-- javax.baja.util.BUuid.hashCode() -->
<method name="hashCode"  public="true">
<description>
The BUUid hash code is a hash of the 128 bit value.
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.util.BUuid.compareTo(java.lang.Object) -->
<method name="compareTo"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Compare to another BUuid.
</description>
<parameter name="o">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.util.BUuid.equals(java.lang.Object) -->
<method name="equals"  public="true">
<description>
BUuids are equal if they represent the same 128 bit value.
</description>
<parameter name="obj">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.util.BUuid.encode(java.io.DataOutput) -->
<method name="encode"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
BUuid is serialized as 16 bytes in standard &#xa; network byte order.
</description>
<parameter name="out">
<type class="java.io.DataOutput"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.util.BUuid.decode(java.io.DataInput) -->
<method name="decode"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
BUUid is unserialized as 16 bytes in standard&#xa; network byte order.
</description>
<parameter name="in">
<type class="java.io.DataInput"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.util.BUuid.encodeToString() -->
<method name="encodeToString"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Write the primitive in text format as a 36 character &#xa; string consisting of 8 hexadecimal digits followed by a &#xa; hyphen, then three groups of 4 hexadecimal digits each &#xa; followed by a hyphen, then 12 hexadecimal digits.
</description>
<return>
<type class="java.lang.String"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.util.BUuid.toCompactString() -->
<method name="toCompactString"  public="true">
<description>
Get a compact string representing this uuid.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.util.BUuid.decodeFromString(java.lang.String) -->
<method name="decodeFromString"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Read the primitive from text format using the&#xa; same format as encodeToString().
</description>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.util.BUuid.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.util.BUuid.NULL -->
<field name="NULL"  public="true" static="true" final="true">
<type class="javax.baja.util.BUuid"/>
<description>
&lt;code&gt;NULL&lt;/code&gt; indicates a null identifier&#xa; with zeroes in all sixteen bytes.
</description>
</field>

<!-- javax.baja.util.BUuid.MIN -->
<field name="MIN"  public="true" static="true" final="true">
<type class="javax.baja.util.BUuid"/>
<description>
Constant for BUuid.make(Long.MIN_VALUE, Long.MIN_VALUE)
</description>
</field>

<!-- javax.baja.util.BUuid.MAX -->
<field name="MAX"  public="true" static="true" final="true">
<type class="javax.baja.util.BUuid"/>
<description>
Constant for BUuid.make(Long.MAX_VALUE, Long.MAX_VALUE)
</description>
</field>

<!-- javax.baja.util.BUuid.DEFAULT -->
<field name="DEFAULT"  public="true" static="true" final="true">
<type class="javax.baja.util.BUuid"/>
<description>
Get default constant is &lt;code&gt;NULL&lt;/code&gt;
</description>
</field>

<!-- javax.baja.util.BUuid.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
