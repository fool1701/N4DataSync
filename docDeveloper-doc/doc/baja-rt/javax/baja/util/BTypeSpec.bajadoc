<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="baja" runtimeProfile="rt" qualifiedName="javax.baja.util.BTypeSpec" name="BTypeSpec" packageName="javax.baja.util" public="true" final="true">
<description>
BTypeSpec is a Baja simple which stores a module name&#xa; and type name pair.  A BTypeSpec&#x27;s string format is &#xa; &#x22;moduleName:typeName&#x22;.
</description>
<tag name="@author">Brian Frank</tag>
<tag name="@creation">22 Jan 01</tag>
<tag name="@version">$Revision: 20$ $Date: 1/25/08 4:04:37 PM EST$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="javax.baja.sys.BSimple"/>
</extends>
<implements>
<type class="javax.baja.sys.BIComparable"/>
</implements>
<annotation><type class="javax.baja.nre.annotations.NoSlotomatic"/>
</annotation>
<!-- javax.baja.util.BTypeSpec.make(java.lang.String, java.lang.String) -->
<method name="make"  public="true" static="true">
<description>
Create a type spec with its components.
</description>
<parameter name="moduleName">
<type class="java.lang.String"/>
</parameter>
<parameter name="typeName">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.util.BTypeSpec"/>
</return>
</method>

<!-- javax.baja.util.BTypeSpec.make(java.lang.String) -->
<method name="make"  public="true" static="true">
<description>
Create a type spec with string format.
</description>
<parameter name="spec">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.util.BTypeSpec"/>
</return>
</method>

<!-- javax.baja.util.BTypeSpec.make(javax.baja.sys.Type) -->
<method name="make"  public="true" static="true">
<description>
Construct a type spec with a Type reference.
</description>
<parameter name="type">
<type class="javax.baja.sys.Type"/>
</parameter>
<return>
<type class="javax.baja.util.BTypeSpec"/>
</return>
</method>

<!-- javax.baja.util.BTypeSpec.compareTo(java.lang.Object) -->
<method name="compareTo"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Compares this object with the specified object for &#xa; order. Returns a negative integer, zero, or a positive &#xa; integer as this object is less than, equal to, or greater &#xa; than the specified object.
</description>
<parameter name="obj">
<type class="java.lang.Object"/>
<annotation><type class="java.lang.SuppressWarnings"/>
<elementValue name="value">
<annotationValue kind="array">
<elementArray>
<annotationValue kind="expr">
<expression>&#x22;NullableProblems&#x22;</expression>
</annotationValue>
</elementArray>
</annotationValue>
</elementValue>
</annotation>
</parameter>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.util.BTypeSpec.isNull() -->
<method name="isNull"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Return if this is the null BTypeSpec.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.util.BTypeSpec.getModuleName() -->
<method name="getModuleName"  public="true">
<description>
Get the module name.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.util.BTypeSpec.getTypeName() -->
<method name="getTypeName"  public="true">
<description>
Get the type name.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.util.BTypeSpec.getTypeInfo() -->
<method name="getTypeInfo"  public="true">
<description>
Get the TypeInfo for the type.
</description>
<return>
<type class="javax.baja.registry.TypeInfo"/>
</return>
</method>

<!-- javax.baja.util.BTypeSpec.getResolvedType() -->
<method name="getResolvedType"  public="true">
<description>
Attempt to get the type resolved if possible.
</description>
<return>
<type class="javax.baja.sys.Type"/>
</return>
<throws>
<type class="javax.baja.sys.ModuleException"/>
</throws>
<throws>
<type class="javax.baja.sys.TypeException"/>
</throws>
</method>

<!-- javax.baja.util.BTypeSpec.getInstance() -->
<method name="getInstance"  public="true">
<description>
Get a newInstance of the resolved type.
</description>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="javax.baja.sys.ModuleException"/>
</throws>
<throws>
<type class="javax.baja.sys.TypeException"/>
</throws>
</method>

<!-- javax.baja.util.BTypeSpec.hashCode() -->
<method name="hashCode"  public="true">
<description>
BTypeSpec hash code is based on string hashcode.
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.util.BTypeSpec.equals(java.lang.Object) -->
<method name="equals"  public="true">
<description>
BTypeSpec equality is based on string equality.
</description>
<parameter name="obj">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.util.BTypeSpec.toString(javax.baja.sys.Context) -->
<method name="toString"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
To string.
</description>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.util.BTypeSpec.encode(java.io.DataOutput) -->
<method name="encode"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
BTypeSpec is serialized using writeUTF().
</description>
<parameter name="out">
<type class="java.io.DataOutput"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.util.BTypeSpec.decode(java.io.DataInput) -->
<method name="decode"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
BTypeSpec is unserialized using readUTF().
</description>
<parameter name="in">
<type class="java.io.DataInput"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.util.BTypeSpec.encodeToString() -->
<method name="encodeToString"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Encode to the string format.
</description>
<return>
<type class="java.lang.String"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.util.BTypeSpec.decodeFromString(java.lang.String) -->
<method name="decodeFromString"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Read the simple from its string format.
</description>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.util.BTypeSpec.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.util.BTypeSpec.NULL -->
<field name="NULL"  public="true" static="true" final="true">
<type class="javax.baja.util.BTypeSpec"/>
<description/>
</field>

<!-- javax.baja.util.BTypeSpec.DEFAULT -->
<field name="DEFAULT"  public="true" static="true" final="true">
<type class="javax.baja.util.BTypeSpec"/>
<description>
The default is NULL
</description>
</field>

<!-- javax.baja.util.BTypeSpec.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
