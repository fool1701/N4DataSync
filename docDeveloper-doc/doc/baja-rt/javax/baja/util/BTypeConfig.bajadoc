<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="baja" runtimeProfile="rt" qualifiedName="javax.baja.util.BTypeConfig" name="BTypeConfig" packageName="javax.baja.util" public="true" abstract="true">
<description>
BTypeConfig is used to store both a TypeSpec and additional&#xa; configuration.  It is useful for configuring plugin objects&#xa; indirectly without requiring the target to be a BValue or&#xa; to exist directly in a station database.  The design pattern&#xa; is that subclasses implement syncTo() and syncFrom() to&#xa; synchronize the configuration state between the TypeConfig&#xa; and the target instance.  TypeConfig should store the state&#xa; using dynamic properties.  The default implementation of&#xa; syncTo() and syncFrom() assume the use of an inner class&#xa; called IConfigurable.
</description>
<tag name="@author">Brian Frank</tag>
<tag name="@creation">12 May 04</tag>
<tag name="@version">$Revision: 5$ $Date: 1/3/11 2:36:24 PM EST$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="javax.baja.sys.BVector"/>
</extends>
<property name="typeSpec" flags="">
<type class="javax.baja.util.BTypeSpec"/>
<description>
Slot for the &lt;code&gt;typeSpec&lt;/code&gt; property.&#xa; The type spec of the target type to allocate.
</description>
<tag name="@see">#getTypeSpec</tag>
<tag name="@see">#setTypeSpec</tag>
</property>

<!-- javax.baja.util.BTypeConfig() -->
<constructor name="BTypeConfig" public="true">
<description/>
</constructor>

<!-- javax.baja.util.BTypeConfig.getTypeSpec() -->
<method name="getTypeSpec"  public="true">
<description>
Get the &lt;code&gt;typeSpec&lt;/code&gt; property.&#xa; The type spec of the target type to allocate.
</description>
<tag name="@see">#typeSpec</tag>
<return>
<type class="javax.baja.util.BTypeSpec"/>
</return>
</method>

<!-- javax.baja.util.BTypeConfig.setTypeSpec(javax.baja.util.BTypeSpec) -->
<method name="setTypeSpec"  public="true">
<description>
Set the &lt;code&gt;typeSpec&lt;/code&gt; property.&#xa; The type spec of the target type to allocate.
</description>
<tag name="@see">#typeSpec</tag>
<parameter name="v">
<type class="javax.baja.util.BTypeSpec"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.util.BTypeConfig.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.util.BTypeConfig.getTargetType() -->
<method name="getTargetType"  public="true" abstract="true">
<description>
Get the base class which target instances must implement.
</description>
<return>
<type class="javax.baja.registry.TypeInfo"/>
</return>
</method>

<!-- javax.baja.util.BTypeConfig.make() -->
<method name="make"  public="true">
<description>
Create a new instance using the current typeSpec&#xa; and automatically call syncTo() to initialize its&#xa; configuration.
</description>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
</method>

<!-- javax.baja.util.BTypeConfig.syncTo(javax.baja.sys.BObject) -->
<method name="syncTo"  public="true">
<description>
Synchronize this TypeConfig to the target instance.&#xa; This should initialize the target instance with all of&#xa; its configurable properties based on the state of&#xa; this TypeConfig.  The default implementation assumes&#xa; the target instance is an IConfigurable.
</description>
<parameter name="target">
<type class="javax.baja.sys.BObject"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.util.BTypeConfig.syncFrom(javax.baja.sys.BObject) -->
<method name="syncFrom"  public="true">
<description>
Synchronize the target instance to this TypeConfig.&#xa; This method should initialize this instance&#x27;s properties&#xa; with the configuration state of the target.  The&#xa; default implementation assumes the target is an &#xa; IConfigurable and maps its configuration as dynamic &#xa; properties on this instance.
</description>
<parameter name="target">
<type class="javax.baja.sys.BObject"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.util.BTypeConfig.fw(int, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object) -->
<method name="fw"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="x">
<type class="int"/>
</parameter>
<parameter name="a">
<type class="java.lang.Object"/>
</parameter>
<parameter name="b">
<type class="java.lang.Object"/>
</parameter>
<parameter name="c">
<type class="java.lang.Object"/>
</parameter>
<parameter name="d">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="java.lang.Object"/>
</return>
</method>

<!-- javax.baja.util.BTypeConfig.configChanged() -->
<method name="configChanged"  public="true">
<description>
This callback is called when either the typeSpec&#xa; of configuration has been modified.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.util.BTypeConfig.updateModuleDependencies(boolean) -->
<method name="updateModuleDependencies"  public="true" final="true">
<description/>
<parameter name="forceUpdate">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.util.BTypeConfig.typeSpec -->
<field name="typeSpec"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;typeSpec&lt;/code&gt; property.&#xa; The type spec of the target type to allocate.
</description>
<tag name="@see">#getTypeSpec</tag>
<tag name="@see">#setTypeSpec</tag>
</field>

<!-- javax.baja.util.BTypeConfig.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
