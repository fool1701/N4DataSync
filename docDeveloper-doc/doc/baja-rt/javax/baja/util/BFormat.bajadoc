<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="baja" runtimeProfile="rt" qualifiedName="javax.baja.util.BFormat" name="BFormat" packageName="javax.baja.util" public="true" final="true">
<description>
BFormat is used to format Objects into Strings using&#xa; a standardized formatting pattern language.  The format&#xa; String is normal text with embedded scripts denoted by &#xa; the % percent character (use %% to insert a real %). &#xa; A script is one or more calls chained together using &#xa; the . dot operator.  Calls are mapped to methods using &#xa; reflections.  If a script can not be processed successfully,&#xa; an error will be output.  To define an alternate output to use&#xa; if an error is encountered, include a ? followed by a second&#xa; script within the same % pair.  Given call &#x22;foo&#x22;, the &#xa; order of reflection mapping is:&#xa; &lt;ol&gt;&#xa;   &lt;li&gt;special call (see below)&lt;/li&gt;&#xa;   &lt;li&gt;getFoo(Context)&lt;/li&gt;&#xa;   &lt;li&gt;getFoo()&lt;/li&gt;&#xa;   &lt;li&gt;foo(Context)&lt;/li&gt;&#xa;   &lt;li&gt;foo()&lt;/li&gt;&#xa;   &lt;li&gt;get(&#x22;foo&#x22;)&lt;/li&gt;&#xa;   &lt;li&gt;getFormatValue(&#x22;foo&#x22;)&lt;/li&gt;&#xa; &lt;/ol&gt;                &#xa; The following special functions are available to use in a script:&#xa; &lt;ol&gt;&#xa;   &lt;li&gt;time() calls Clock.time() to get current time as an AbsTime&lt;/li&gt;&#xa;   &lt;li&gt;user() returns the current user&#x27;s name&lt;/li&gt;&#xa;   &lt;li&gt;lexicon(module:key) gets the specified lexicon text&lt;/li&gt;&#xa;   &lt;li&gt;decodeFromString(module:type:escapedEncodedValue)&lt;/li&gt;&#xa;   &lt;li&gt;substring(to) on string&lt;/li&gt;&#xa;   &lt;li&gt;substring(-fromEnd) on string&lt;/li&gt;&#xa;   &lt;li&gt;substring(from, to) on string&lt;/li&gt;&#xa;   &lt;li&gt;escape(text) on string&lt;/li&gt;&#xa;   &lt;li&gt;unescape(text) on string&lt;/li&gt;&#xa; &lt;/ol&gt;&#xa; &lt;p&gt;&#xa; Examples of formats:&#xa; &lt;pre&gt;&#xa; &#x22;hello world&#x22;&#xa; &#x22;my name is %displayName%&#x22;&#xa; &#x22;my parent&#x27;s name is %parent.displayName%&#x22;&#xa; &#x22;%value% {%status.flagsToString%} @ %status.priority%&#x22;&#xa; &#x22;%time().toDateString%&#x22;&#xa; &#x22;%lexicon(bajaui:dialog.error)%&#x22;&#xa; &#x22;%parent.value?lexicon(bajaui:dialog.error)%&#x22;&#xa; &lt;/pre&gt;
</description>
<tag name="@author">Brian Frank</tag>
<tag name="@creation">19 May 04</tag>
<tag name="@version">$Revision: 22$ $Date: 4/11/11 2:47:57 PM EDT$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="javax.baja.sys.BSimple"/>
</extends>
<annotation><type class="javax.baja.nre.annotations.NoSlotomatic"/>
</annotation>
<!-- javax.baja.util.BFormat.format(java.lang.String, java.lang.Object) -->
<method name="format"  public="true" static="true">
<description>
Format the specified object using the given format pattern.
</description>
<parameter name="format">
<type class="java.lang.String"/>
<description>
- format to use
</description>
</parameter>
<parameter name="obj">
<type class="java.lang.Object"/>
<description>
- object being formatted
</description>
</parameter>
<return>
<type class="java.lang.String"/>
<description>
String
</description>
</return>
</method>

<!-- javax.baja.util.BFormat.format(java.lang.String, java.lang.Object, javax.baja.sys.Context) -->
<method name="format"  public="true" static="true">
<description>
Format the specified object using the given format pattern and context.&#xa;&#xa; Consider the following example:&#xa; &lt;pre&gt;&#xa; public class Foo&#xa; {&#xa;   public String bar()&#xa;   {&#xa;     return &#x22;call to function bar()&#x22;;&#xa;   }&#xa;&#xa;   public String name()&#xa;   {&#xa;     return &#x22;Foo&#x22;;&#xa;   }&#xa; }&#xa;&#xa; class FooPrinter&#xa; {&#xa;  static void printFoo()&#xa;  {&#xa;    Context context = new BasicContext();&#xa;    Foo foo = new Foo();&#xa;    BFormat.format(&#x22;This is a %bar()% on class %name()%.&#x22;, foo, context);&#xa;  }&#xa; }&#xa; &lt;/pre&gt;&#xa;&#xa; The results from calling printFoo() would be:&#xa; &lt;pre&gt;&#xa; This is a call to function bar() on class Foo.&#xa; &lt;/pre&gt;
</description>
<parameter name="format">
<type class="java.lang.String"/>
<description>
format to use
</description>
</parameter>
<parameter name="obj">
<type class="java.lang.Object"/>
<description>
object being formatted
</description>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
<description>
context to use while formatting
</description>
</parameter>
<return>
<type class="java.lang.String"/>
<description>
String
</description>
</return>
</method>

<!-- javax.baja.util.BFormat.getEncodedPattern(javax.baja.io.BIEncodable) -->
<method name="getEncodedPattern"  public="true" static="true">
<description>
Return a format pattern that contains an encoded object
</description>
<tag name="@since">Niagara 3.5</tag>
<parameter name="enc">
<type class="javax.baja.io.BIEncodable"/>
<description>
encodable object
</description>
</parameter>
<return>
<type class="java.lang.String"/>
<description>
String
</description>
</return>
<throws>
<type class="java.io.IOException"/>
<description>
if BIEncodable cannot be encoded to String
</description>
</throws>
</method>

<!-- javax.baja.util.BFormat.getLexiconPattern(java.lang.String, java.lang.String, java.lang.String[]) -->
<method name="getLexiconPattern"  public="true" static="true">
<description>
Return a format pattern that uses the given module name and lexicon key, and&#xa; provides the lexicon arguments as format patterns.
</description>
<tag name="@since">Niagara 3.5</tag>
<parameter name="module">
<type class="java.lang.String"/>
<description>
module name for lexicon key
</description>
</parameter>
<parameter name="key">
<type class="java.lang.String"/>
<description>
lexicon key
</description>
</parameter>
<parameter name="argFormatStrings">
<type class="java.lang.String" dimension="1"/>
<description>
format patterns for each of the arguments
</description>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.util.BFormat.make(java.lang.String) -->
<method name="make"  public="true" static="true">
<description>
Construct using format string.
</description>
<parameter name="format">
<type class="java.lang.String"/>
<description>
the format string
</description>
</parameter>
<return>
<type class="javax.baja.util.BFormat"/>
<description>
BFormat
</description>
</return>
</method>

<!-- javax.baja.util.BFormat.getFormat() -->
<method name="getFormat"  public="true" final="true">
<description>
Get the format pattern string.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.util.BFormat.format(java.lang.Object) -->
<method name="format"  public="true" final="true">
<description>
Convenience for &lt;code&gt;format(obj, null)&lt;/code&gt;.
</description>
<parameter name="obj">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.util.BFormat.format(java.lang.Object, javax.baja.sys.Context) -->
<method name="format"  public="true" final="true">
<description>
Format the specified object using the format pattern.
</description>
<parameter name="obj">
<type class="java.lang.Object"/>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.util.BFormat.parse(java.lang.String) -->
<method name="parse"  protected="true" static="true">
<description/>
<parameter name="format">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="java.lang.Object" dimension="1"/>
</return>
</method>

<!-- javax.baja.util.BFormat.parse() -->
<method name="parse"  public="true">
<description>
Parse the format into segments
</description>
<return>
<type class="java.lang.Object" dimension="1"/>
</return>
</method>

<!-- javax.baja.util.BFormat.dump() -->
<method name="dump"  public="true">
<description/>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.util.BFormat.hashCode() -->
<method name="hashCode"  public="true">
<description>
BFormat uses its encodeToString() value&#x27;s hash code.
</description>
<tag name="@since">Niagara 3.4</tag>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.util.BFormat.equals(java.lang.Object) -->
<method name="equals"  public="true">
<description>
BFormats are equal if they have equal format patterns.
</description>
<parameter name="obj">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.util.BFormat.encode(java.io.DataOutput) -->
<method name="encode"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Encode format pattern String.
</description>
<parameter name="out">
<type class="java.io.DataOutput"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.util.BFormat.decode(java.io.DataInput) -->
<method name="decode"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Decode format pattern String.
</description>
<parameter name="in">
<type class="java.io.DataInput"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.util.BFormat.encodeToString() -->
<method name="encodeToString"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Encode format pattern String.
</description>
<return>
<type class="java.lang.String"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.util.BFormat.decodeFromString(java.lang.String) -->
<method name="decodeFromString"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Decode format pattern String.
</description>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.util.BFormat.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.util.BFormat.DEFAULT -->
<field name="DEFAULT"  public="true" static="true" final="true">
<type class="javax.baja.util.BFormat"/>
<description>
Get default is the empty string &#x22;&#x22; format pattern.
</description>
</field>

<!-- javax.baja.util.BFormat.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
