<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="baja" runtimeProfile="rt" qualifiedName="javax.baja.util.BIRestrictedComponent" name="BIRestrictedComponent" packageName="javax.baja.util" public="true" interface="true" abstract="true" category="interface">
<description>
Defines an interface for station components (especially services)&#xa; that should be restricted to a certain location in a station and&#xa; also restricted based on the presence of other restricted components (ie. to&#xa; prevent duplicate instances).  The default behavior for a BIRestrictedComponent&#xa; is that only one instance can live under the Services frozen slot of the root&#xa; BStation object, or under a descendant ServiceContainer of that frozen Services&#xa; slot.  By default, when enforcing that only one instance of its type is&#xa; allowed, the duplicate check includes a type being a super/sub type of&#xa; an existing instance.&#xa;&#xa; An implementation class should strongly consider being made final, or if not,&#xa; make the methods final in order to prevent a subclass from overriding the&#xa; behavior to remove the restrictions.
</description>
<tag name="@author">Scott Hoye</tag>
<tag name="@creation">Jan 13, 2015</tag>
<tag name="@since">Niagara 4.0</tag>
<implements>
<type class="javax.baja.sys.BInterface"/>
</implements>
<!-- javax.baja.util.BIRestrictedComponent.checkParentForRestrictedComponent(javax.baja.sys.BComponent, javax.baja.sys.Context) -->
<method name="checkParentForRestrictedComponent"  public="true" default="true">
<description>
This method is called just before this BIRestrictedComponent instance is&#xa; mounted in the parent argument and gives an opportunity to cancel the&#xa; mount by throwing a &lt;code&gt;LocalizableRuntimeException&lt;/code&gt; if the parent&#xa; is an invalid location for this BIRestrictedComponent instance to be mounted.&#xa; By default, restricted components are only allowed to live under the&#xa; station&#x27;s BServiceContainer (or a descendant BServiceContainer of that&#xa; root BServiceContainer), and no duplicates are allowed.  Be aware&#xa; that this method can get called for both an online or offline station,&#xa; so the implementation should work in both cases.
</description>
<parameter name="parent">
<type class="javax.baja.sys.BComponent"/>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.util.BIRestrictedComponent.checkParentForRestrictedComponent(javax.baja.sys.BComponent, javax.baja.util.BIRestrictedComponent) -->
<method name="checkParentForRestrictedComponent"  public="true" static="true">
<description>
Default implementation that checks to see if the parent argument is&#xa; a valid location for the BIRestrictedComponent argument to be mounted&#xa; and throws an &lt;code&gt;IllegalChildException&lt;/code&gt; if it is not.&#xa; This default implementation enforces that the restricted component child&#xa; is only allowed to live under the station&#x27;s BServiceContainer (or a&#xa; descendant BServiceContainer of that root BServiceContainer), and no&#xa; duplicates are allowed.
</description>
<parameter name="parent">
<type class="javax.baja.sys.BComponent"/>
</parameter>
<parameter name="child">
<type class="javax.baja.util.BIRestrictedComponent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.util.BIRestrictedComponent.checkParentIsServiceContainer(javax.baja.sys.BComponent, javax.baja.util.BIRestrictedComponent) -->
<method name="checkParentIsServiceContainer"  public="true" static="true">
<description>
Checks to see if the parent argument is a valid &lt;code&gt;BServiceContainer&lt;/code&gt;&#xa; instance that is suitable for the BIRestrictedComponent child to live&#xa; and throws an &lt;code&gt;IllegalChildException&lt;/code&gt; if it is not.
</description>
<parameter name="parent">
<type class="javax.baja.sys.BComponent"/>
</parameter>
<parameter name="child">
<type class="javax.baja.util.BIRestrictedComponent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.util.BIRestrictedComponent.checkForDuplicates(javax.baja.sys.BComponent, javax.baja.util.BIRestrictedComponent, boolean) -->
<method name="checkForDuplicates"  public="true" static="true">
<description>
Checks to make sure that there are no duplicate instances of the&#xa; BIRestrictedComponent child that already exist under the station&#x27;s BServiceContainer (or a&#xa; descendant BServiceContainer of that root BServiceContainer).&#xa; If a duplicate is found, an &lt;code&gt;IllegalChildException&lt;/code&gt; is thrown.
</description>
<parameter name="parent">
<type class="javax.baja.sys.BComponent"/>
<description>
The proposed parent where there is a pending mount attempt for the given child.
</description>
</parameter>
<parameter name="child">
<type class="javax.baja.util.BIRestrictedComponent"/>
<description>
The child that is pending a mount
</description>
</parameter>
<parameter name="allowNonExactTypes">
<type class="boolean"/>
<description>
if true, the check for duplicates will look for only exact type&#xa;                           matches (allowing multiple instances of a super/sub type). If false,&#xa;                           the check for duplicates will include looking for types of a&#xa;                           matching super/sub type.
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.util.BIRestrictedComponent.checkContextForSuperUser(javax.baja.util.BIRestrictedComponent, javax.baja.sys.Context) -->
<method name="checkContextForSuperUser"  public="true" static="true">
<description>
Checks to see if the context identifies a user invoked the pending&#xa; add operation, and checks to ensure that the user is a Super User.&#xa; If a non-null user is found, and the user is not a Super User, then&#xa; an &lt;code&gt;IllegalChildException&lt;/code&gt; is thrown.
</description>
<parameter name="component">
<type class="javax.baja.util.BIRestrictedComponent"/>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.util.BIRestrictedComponent.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
