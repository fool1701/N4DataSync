<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="baja" runtimeProfile="rt" qualifiedName="javax.baja.util.Version" name="Version" packageName="javax.baja.util" public="true">
<description>
Encapsulation of a dewey decimal version string.&#xa; This version string must be a sequence of positive &#xa; decimal integers separated by &#x22;.&#x22;&#x27;s and may have &#xa; leading zeros (per java.lang.Package specification).
</description>
<tag name="@author">Brian Frank on 24 May 00</tag>
<tag name="@since">Niagara 3.0</tag>
<extends>
<type class="java.lang.Object"/>
</extends>
<implements>
<parameterizedType class="java.lang.Comparable">
<args>
<type class="javax.baja.util.Version"/>
</args>
</parameterizedType>
</implements>
<!-- javax.baja.util.Version(int[]) -->
<constructor name="Version" public="true">
<parameter name="versions">
<type class="int" dimension="1"/>
</parameter>
<description>
Create a version using given version nodes
</description>
<tag name="@since">Niagara 3.5</tag>
</constructor>

<!-- javax.baja.util.Version(java.lang.String) -->
<constructor name="Version" public="true">
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<description>
Parse a version string.
</description>
</constructor>

<!-- javax.baja.util.Version.major() -->
<method name="major"  public="true">
<description>
Get version at index 0 or -1
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.util.Version.minor() -->
<method name="minor"  public="true">
<description>
Get version at index 1 or -1
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.util.Version.build() -->
<method name="build"  public="true">
<description>
Get version at index 2 or -1
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.util.Version.patch() -->
<method name="patch"  public="true">
<description>
Get version at index 3 or -1
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.util.Version.get(int) -->
<method name="get"  public="true">
<description>
Get the version at index.
</description>
<parameter name="index">
<type class="int"/>
</parameter>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.util.Version.size() -->
<method name="size"  public="true">
<description>
Get the number of numbers in this Version.
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.util.Version.isNull() -->
<method name="isNull"  public="true">
<description>
The null version is &#x22;0&#x22;.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.util.Version.compareTo(javax.baja.util.Version) -->
<method name="compareTo"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Return a negative integer, zero, or a positive &#xa; integer as this Version is less than, equal to, &#xa; or greater than the specified Version.  If the two &#xa; versions are equal in the number of digits they &#xa; contain, but one version has additional digits then &#xa; that one is considered greater (ie, &lt;code&gt;1.0.1 &amp;gt; 1.0&lt;/code&gt;).
</description>
<parameter name="ver">
<type class="javax.baja.util.Version"/>
</parameter>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.util.Version.equals(java.lang.Object) -->
<method name="equals"  public="true">
<description>
Return true if the versions equal.
</description>
<parameter name="obj">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.util.Version.hashCode() -->
<method name="hashCode"  public="true">
<description>
Hash code
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.util.Version.toString() -->
<method name="toString"  public="true">
<description>
To string.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.util.Version.toString(int) -->
<method name="toString"  public="true">
<description>
To string using the first &#x27;len&#x27; versions.
</description>
<parameter name="len">
<type class="int"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.util.Version.toMinorVersion() -->
<method name="toMinorVersion"  public="true">
<description/>
<tag name="@since">Niagara 4.1</tag>
<return>
<type class="javax.baja.util.Version"/>
</return>
</method>

<!-- javax.baja.util.Version.ZERO -->
<field name="ZERO"  public="true" static="true">
<type class="javax.baja.util.Version"/>
<description>
Version of &#x22;0&#x22;
</description>
</field>

<!-- javax.baja.util.Version.NULL -->
<field name="NULL"  public="true" static="true">
<type class="javax.baja.util.Version"/>
<description>
Version of &#x22;0&#x22;
</description>
</field>

</class>
</bajadoc>
