<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="baja" runtimeProfile="rt" qualifiedName="javax.baja.util.Worker" name="Worker" packageName="javax.baja.util" public="true">
<description>
Worker is used to asynchronously perform &#x22;work&#x22; on a &#xa; background thread.  The &#x22;work&#x22; is Runnables returned&#xa; by the ITodo interface.  The common case is to use a&#xa; Queue as the ITodo.
</description>
<tag name="@author">Brian Frank</tag>
<tag name="@creation">7 Feb 04</tag>
<tag name="@version">$Revision: 4$ $Date: 8/30/07 8:52:49 AM EDT$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="java.lang.Object"/>
</extends>
<!-- javax.baja.util.Worker(javax.baja.util.Worker.ITodo) -->
<constructor name="Worker" public="true">
<parameter name="todo">
<type class="javax.baja.util.Worker$ITodo"/>
</parameter>
<description>
Construct a Worker.
</description>
</constructor>

<!-- javax.baja.util.Worker.getTodo() -->
<method name="getTodo"  public="true">
<description>
Get the ITodo object which provides the work.
</description>
<return>
<type class="javax.baja.util.Worker$ITodo"/>
</return>
</method>

<!-- javax.baja.util.Worker.getTimeout() -->
<method name="getTimeout"  public="true">
<description>
Get the timeout used for fectching work from the ITodo.
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.util.Worker.setTimeout(int) -->
<method name="setTimeout"  public="true">
<description>
Set the timeout used for fectching work from the ITodo.
</description>
<parameter name="timeout">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.util.Worker.toString() -->
<method name="toString"  public="true">
<description>
Get string representation.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.util.Worker.isRunning() -->
<method name="isRunning"  public="true">
<description>
Is the worker currently running.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.util.Worker.start(java.lang.String) -->
<method name="start"  public="true" final="true">
<description>
Convenience for &lt;code&gt;start(Thread.currentThread().getThreadGroup(), threadName)&lt;/code&gt;.
</description>
<parameter name="threadName">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.util.Worker.start(java.lang.ThreadGroup, java.lang.String) -->
<method name="start"  public="true">
<description>
Start the worker on a thread and loop forever processing&#xa; its todo entries until the &lt;code&gt;stop()&lt;/code&gt; method is called.
</description>
<parameter name="threadGroup">
<type class="java.lang.ThreadGroup"/>
</parameter>
<parameter name="threadName">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.util.Worker.stop() -->
<method name="stop"  public="true">
<description>
Stop the worker thread from running.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.util.Worker.process(java.lang.Runnable) -->
<method name="process"  protected="true">
<description>
This method is called on the worker&#x27;s thread when a &#xa; new item of work is available.  If the todo timed out&#xa; then null is passed.
</description>
<parameter name="work">
<type class="java.lang.Runnable"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.util.Worker.spy(javax.baja.spy.SpyWriter) -->
<method name="spy"  public="true">
<description>
Dump debug information.
</description>
<parameter name="out">
<type class="javax.baja.spy.SpyWriter"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

</class>
</bajadoc>
