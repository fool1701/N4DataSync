<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="baja" runtimeProfile="rt" qualifiedName="javax.baja.spy.SpyWriter" name="SpyWriter" packageName="javax.baja.spy" public="true">
<description>
&lt;p&gt;SpyWriter is used to generate the HTML content of Spy pages.&lt;/p&gt;&#xa;&#xa; &lt;p&gt;As of Niagara 4.10, SpyWriter methods escape HTML by default. To begin&#xa; writing raw HTML to escaped methods, call &lt;code&gt;unsafe()&lt;/code&gt;. Break the&#xa; call chain to begin writing escaped HTML again.&lt;/p&gt;&#xa;&#xa; &lt;pre&gt;&lt;code&gt;&amp;#xa;  spyWriter.td(stringToBeEscaped);&amp;#xa;&amp;#xa;  spyWriter.unsafe() //obtain an unsafe SpyWriter&amp;#xa;    .td(&amp;#x22;&amp;lt;b&amp;gt;Disable escaping to write raw HTML&amp;lt;/b&amp;gt;&amp;#x22;)&amp;#xa;    .td(&amp;#x22;&amp;lt;b&amp;gt;Keep the chain going to keep escaping disabled&amp;lt;/b&amp;gt;&amp;#x22;);&amp;#xa;&amp;#xa;  spyWriter.td(anotherStringToBeEscaped);&amp;#xa; &lt;/code&gt;&lt;/pre&gt;
</description>
<tag name="@author">Brian Frank</tag>
<tag name="@creation">16 Nov 01</tag>
<tag name="@version">$Revision: 5$ $Date: 8/10/10 11:42:29 AM EDT$</tag>
<tag name="@since">Niagara 3.0</tag>
<extends>
<type class="javax.baja.io.HtmlWriter"/>
</extends>
<!-- javax.baja.spy.SpyWriter(java.io.Writer, javax.baja.file.FilePath) -->
<constructor name="SpyWriter" public="true">
<parameter name="out">
<type class="java.io.Writer"/>
</parameter>
<parameter name="path">
<type class="javax.baja.file.FilePath"/>
</parameter>
<description>
Constructor.
</description>
</constructor>

<!-- javax.baja.spy.SpyWriter(java.io.Writer, javax.baja.file.FilePath, javax.baja.sys.Context) -->
<constructor name="SpyWriter" public="true">
<parameter name="out">
<type class="java.io.Writer"/>
</parameter>
<parameter name="path">
<type class="javax.baja.file.FilePath"/>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<description>
Constructor with Context.
</description>
<tag name="@since">Niagara 3.5</tag>
</constructor>

<!-- javax.baja.spy.SpyWriter(java.io.OutputStream, javax.baja.file.FilePath) -->
<constructor name="SpyWriter" public="true">
<parameter name="out">
<type class="java.io.OutputStream"/>
</parameter>
<parameter name="path">
<type class="javax.baja.file.FilePath"/>
</parameter>
<description>
Constructor.
</description>
</constructor>

<!-- javax.baja.spy.SpyWriter(java.io.OutputStream, javax.baja.file.FilePath, javax.baja.sys.Context) -->
<constructor name="SpyWriter" public="true">
<parameter name="out">
<type class="java.io.OutputStream"/>
</parameter>
<parameter name="path">
<type class="javax.baja.file.FilePath"/>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<description>
Constructor with Context.
</description>
<tag name="@since">Niagara 3.5</tag>
</constructor>

<!-- javax.baja.spy.SpyWriter.unsafe() -->
<method name="unsafe"  public="true">
<description/>
<tag name="@since">Niagara 4.10</tag>
<return>
<type class="javax.baja.spy.SpyWriter"/>
<description>
a SpyWriter instance that will write unsafe HTML, and will continue&#xa; to write unsafe HTML as long as more calls are chained from it. To revert&#xa; back to safe/escaped HTML, start your calls again from the&#xa; &lt;code&gt;SpyWriter&lt;/code&gt; instance on which you called &lt;code&gt;unsafe()&lt;/code&gt;.
</description>
</return>
</method>

<!-- javax.baja.spy.SpyWriter.makeUnsafeSpyWriter() -->
<method name="makeUnsafeSpyWriter"  protected="true">
<description/>
<tag name="@since">Niagara 4.10</tag>
<return>
<type class="javax.baja.spy.SpyWriter"/>
<description>
a SpyWriter instance that does not perform any HTML-escaping.
</description>
</return>
</method>

<!-- javax.baja.spy.SpyWriter.getPath() -->
<method name="getPath"  public="true">
<description>
Get the current path of the spy page being written.
</description>
<return>
<type class="javax.baja.file.FilePath"/>
</return>
</method>

<!-- javax.baja.spy.SpyWriter.getContext() -->
<method name="getContext"  public="true">
<description>
Get the current Context of the spy page being written.
</description>
<tag name="@since">Niagara 3.5</tag>
<return>
<type class="javax.baja.sys.Context"/>
</return>
</method>

<!-- javax.baja.spy.SpyWriter.w(java.lang.Object) -->
<method name="w"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="o">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="javax.baja.spy.SpyWriter"/>
</return>
</method>

<!-- javax.baja.spy.SpyWriter.startProps() -->
<method name="startProps"  public="true">
<description>
Start a two column properties table.
</description>
<return>
<type class="javax.baja.spy.SpyWriter"/>
</return>
</method>

<!-- javax.baja.spy.SpyWriter.startProps(java.lang.String) -->
<method name="startProps"  public="true">
<description>
Start a two column properties table. HTML will be escaped for safety.
</description>
<parameter name="title">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.spy.SpyWriter"/>
</return>
</method>

<!-- javax.baja.spy.SpyWriter.prop(java.lang.Object, java.lang.Object) -->
<method name="prop"  public="true">
<description>
Write a two column table row. HTML will be escaped for safety.
</description>
<parameter name="name">
<type class="java.lang.Object"/>
</parameter>
<parameter name="value">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="javax.baja.spy.SpyWriter"/>
</return>
</method>

<!-- javax.baja.spy.SpyWriter.prop(java.lang.Object, boolean) -->
<method name="prop"  public="true">
<description>
Write a two column table row. HTML will be escaped for safety.
</description>
<parameter name="name">
<type class="java.lang.Object"/>
</parameter>
<parameter name="value">
<type class="boolean"/>
</parameter>
<return>
<type class="javax.baja.spy.SpyWriter"/>
</return>
</method>

<!-- javax.baja.spy.SpyWriter.prop(java.lang.Object, int) -->
<method name="prop"  public="true">
<description>
Write a two column table row. HTML will be escaped for safety.
</description>
<parameter name="name">
<type class="java.lang.Object"/>
</parameter>
<parameter name="value">
<type class="int"/>
</parameter>
<return>
<type class="javax.baja.spy.SpyWriter"/>
</return>
</method>

<!-- javax.baja.spy.SpyWriter.prop(java.lang.Object, double) -->
<method name="prop"  public="true">
<description>
Write a two column table row. HTML will be escaped for safety.
</description>
<parameter name="name">
<type class="java.lang.Object"/>
</parameter>
<parameter name="value">
<type class="double"/>
</parameter>
<return>
<type class="javax.baja.spy.SpyWriter"/>
</return>
</method>

<!-- javax.baja.spy.SpyWriter.propNameLink(java.lang.Object, java.lang.Object, java.lang.Object) -->
<method name="propNameLink"  public="true">
<description>
Writes a name/value property pair, where the name is a hyperlink. Call&#xa; where you may otherwise call &lt;code&gt;prop()&lt;/code&gt;. (You do not need to call&#xa; &lt;code&gt;href()&lt;/code&gt; first.)
</description>
<tag name="@since">Niagara 4.10</tag>
<parameter name="href">
<type class="java.lang.Object"/>
<description>
hyperlink target
</description>
</parameter>
<parameter name="linkTitle">
<type class="java.lang.Object"/>
<description>
text of hyperlink
</description>
</parameter>
<parameter name="value">
<type class="java.lang.Object"/>
<description>
property value
</description>
</parameter>
<return>
<type class="javax.baja.spy.SpyWriter"/>
</return>
</method>

<!-- javax.baja.spy.SpyWriter.propValueLink(java.lang.Object, java.lang.Object, java.lang.Object) -->
<method name="propValueLink"  public="true">
<description>
Writes a name/value property pair, where the value is a hyperlink. Call&#xa; where you may otherwise call &lt;code&gt;prop()&lt;/code&gt;. (You do not need to call&#xa; &lt;code&gt;href()&lt;/code&gt; first.)
</description>
<tag name="@since">Niagara 4.10</tag>
<parameter name="name">
<type class="java.lang.Object"/>
<description>
property name
</description>
</parameter>
<parameter name="href">
<type class="java.lang.Object"/>
<description>
hyperlink target
</description>
</parameter>
<parameter name="linkTitle">
<type class="java.lang.Object"/>
<description>
text of hyperlink
</description>
</parameter>
<return>
<type class="javax.baja.spy.SpyWriter"/>
</return>
</method>

<!-- javax.baja.spy.SpyWriter.endProps() -->
<method name="endProps"  public="true">
<description>
Close a two column properties table.
</description>
<return>
<type class="javax.baja.spy.SpyWriter"/>
</return>
</method>

<!-- javax.baja.spy.SpyWriter.href(java.lang.String) -->
<method name="href"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
SpyWriter sanitizes hrefs by encoding them for HTML.
</description>
<parameter name="href">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.spy.SpyWriter.trTitle(java.lang.Object, int) -->
<method name="trTitle"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Write a table row with the specified colspan that can be used as a title&#xa; header to separate rows. HTML will be escaped for safety.
</description>
<parameter name="title">
<type class="java.lang.Object"/>
</parameter>
<parameter name="colspan">
<type class="int"/>
</parameter>
<return>
<type class="javax.baja.spy.SpyWriter"/>
</return>
</method>

<!-- javax.baja.spy.SpyWriter.thTitle(java.lang.Object) -->
<method name="thTitle"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Write a table header column using the predefined formatting of&#xa; &lt;code&gt;trTitle()&lt;/code&gt;. HTML will be escaped for safety.
</description>
<parameter name="title">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="javax.baja.spy.SpyWriter"/>
</return>
</method>

<!-- javax.baja.spy.SpyWriter.th(java.lang.Object) -->
<method name="th"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Write a th tag with align=left and nowrap. HTML will be escaped for safety.
</description>
<parameter name="s">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="javax.baja.spy.SpyWriter"/>
</return>
</method>

<!-- javax.baja.spy.SpyWriter.td(java.lang.Object) -->
<method name="td"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Write a td tag with align=left and nowrap. HTML will be escaped for safety.
</description>
<parameter name="s">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="javax.baja.spy.SpyWriter"/>
</return>
</method>

<!-- javax.baja.spy.SpyWriter.close() -->
<method name="close"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.spy.SpyWriter.addCsrfToken(java.lang.String) -->
<method name="addCsrfToken"  public="true" static="true">
<description>
Intended for use when inserting hyperlinks into spy pages that could potentially&#xa; change state on the server side, given an href name, append a CSRF token&#xa; to the href name that is valid for the current session (if no current session is&#xa; available, indicating a call from the Workbench/Local spy, the original hrefName&#xa; will be returned with no CSRF token appended). A subsequent call to&#xa; &lt;code&gt;verifyNameAndCsrfToken()&lt;/code&gt; can validate that a spy request contains&#xa; a proper CSRF token for the current session.
</description>
<tag name="@since">Niagara 4.3</tag>
<parameter name="hrefName">
<type class="java.lang.String"/>
<description>
The href String on which to append a CSRF token for the current session.
</description>
</parameter>
<return>
<type class="java.lang.String"/>
<description>
A new href String containing a valid CSRF token for the current session. If the&#xa; current session is null (indicating a call from Workbench/Local spy), then the original&#xa; hrefName String is returned.
</description>
</return>
</method>

<!-- javax.baja.spy.SpyWriter.verifyNameAndCsrfToken(java.lang.String, java.lang.String) -->
<method name="verifyNameAndCsrfToken"  public="true" static="true">
<description>
Intended for use when validating spy ORD requests, given an href name and CSRF token String,&#xa; checks the name and verifies that the CSRF token is valid for the current session. A&#xa; CsrfException will be thrown if the hrefNameAndToken contains an invalid CSRF token for the&#xa; current session or if the hrefNameAndToken starts with the expectedHrefName but doesn&#x27;t contain&#xa; a properly formed CSRF token.  If there is no current session available (indicates a&#xa; call from Workbench/Local spy), then the CSRF token validation step will be skipped and&#xa; only the name will be compared to compute the result.
</description>
<tag name="@since">Niagara 4.3</tag>
<parameter name="hrefNameAndToken">
<type class="java.lang.String"/>
<description>
An href name and CSRF token String from a spy ORD request.
</description>
</parameter>
<parameter name="expectedHrefName">
<type class="java.lang.String"/>
<description>
The expected href name to use for validation of the hrefNameAndToken.
</description>
</parameter>
<return>
<type class="boolean"/>
<description>
true if the name check and CSRF token validation is successful or false if the&#xa; hrefNameAndToken does not contain a CSRF token and it doesn&#x27;t start with the expectedHrefName.&#xa; If the current session is not available (indicating a call from Workbench/Local spy), then&#xa; only the name check will determine the result.
</description>
</return>
</method>

<!-- javax.baja.spy.SpyWriter.getNameWithoutCsrfToken(java.lang.String) -->
<method name="getNameWithoutCsrfToken"  public="true" static="true">
<description>
Intended for use when validating spy ORD requests when you don&#x27;t know the expected&#xa; href name (without the CSRF token), given an href name and CSRF token String,&#xa; computes an expected href name and verifies that the CSRF token is valid for the&#xa; current session (if the session is available - no session indicates a call from Workbench/&#xa; Local spy). A CsrfException will be thrown if the hrefNameAndToken contains an invalid&#xa; CSRF token for the current session or if the hrefNameAndToken doesn&#x27;t contain a&#xa; properly formed CSRF token and the current session is available.
</description>
<tag name="@since">Niagara 4.3</tag>
<parameter name="hrefNameAndToken">
<type class="java.lang.String"/>
<description>
An href name and CSRF token String from a spy ORD request.
</description>
</parameter>
<return>
<type class="java.lang.String"/>
<description>
A new href String with the validated CSRF token removed.
</description>
</return>
</method>

</class>
</bajadoc>
