<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="baja" runtimeProfile="rt" qualifiedName="javax.baja.registry.Registry" name="Registry" packageName="javax.baja.registry" public="true" interface="true" abstract="true" category="interface">
<description>
The registry may be used to interrogate the system for summary&#xa; information about the modules, types, ord schemes, and agents &#xa; installed without loading modules into memory.
</description>
<tag name="@author">Brian Frank&#xa; creation  5 Dec 02</tag>
<tag name="@version">$Revision: 29$ $Date: 7/7/11 2:03:50 PM EDT$</tag>
<tag name="@since">Baja 1.0</tag>
<!-- javax.baja.registry.Registry.getLastBuildTime() -->
<method name="getLastBuildTime"  public="true" abstract="true">
<description>
Get summary information about all the modules&#xa; currently installed on the system.
</description>
<return>
<type class="javax.baja.sys.BAbsTime"/>
</return>
</method>

<!-- javax.baja.registry.Registry.getModules() -->
<method name="getModules"  public="true" abstract="true">
<description>
Get summary information about all the modules&#xa; currently installed on the system.
</description>
<return>
<type class="javax.baja.registry.ModuleInfo" dimension="1"/>
</return>
</method>

<!-- javax.baja.registry.Registry.moduleForDependency(java.lang.String) -->
<method name="moduleForDependency"  public="true" abstract="true">
<description>
Get information for the module that meets the given dependency
</description>
<parameter name="modulePartName">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.registry.ModuleInfo"/>
</return>
</method>

<!-- javax.baja.registry.Registry.getModule(java.lang.String, javax.baja.nre.platform.RuntimeProfile) -->
<method name="getModule"  public="true" abstract="true">
<description>
Get information for the specified module.
</description>
<parameter name="moduleName">
<type class="java.lang.String"/>
</parameter>
<parameter name="profile">
<type class="javax.baja.nre.platform.RuntimeProfile"/>
</parameter>
<return>
<type class="javax.baja.registry.ModuleInfo"/>
</return>
</method>

<!-- javax.baja.registry.Registry.getModules(java.lang.String) -->
<method name="getModules"  public="true" abstract="true">
<description/>
<parameter name="moduleName">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.registry.ModuleInfo" dimension="1"/>
</return>
</method>

<!-- javax.baja.registry.Registry.getTypes() -->
<method name="getTypes"  public="true" abstract="true">
<description>
Get the list of the installed types.
</description>
<return>
<type class="javax.baja.registry.TypeInfo" dimension="1"/>
</return>
</method>

<!-- javax.baja.registry.Registry.getTypes(javax.baja.registry.TypeInfo) -->
<method name="getTypes"  public="true" abstract="true">
<description>
Get the list of all the installed types which&#xa; extend (or implement) the specified type.
</description>
<parameter name="type">
<type class="javax.baja.registry.TypeInfo"/>
</parameter>
<return>
<type class="javax.baja.registry.TypeInfo" dimension="1"/>
</return>
</method>

<!-- javax.baja.registry.Registry.getConcreteTypes(javax.baja.registry.TypeInfo) -->
<method name="getConcreteTypes"  public="true" abstract="true">
<description>
Get the list of all the concrete (non-abstract) installed &#xa; types which extend (or implement) the specified type.
</description>
<parameter name="type">
<type class="javax.baja.registry.TypeInfo"/>
</parameter>
<return>
<type class="javax.baja.registry.TypeInfo" dimension="1"/>
</return>
</method>

<!-- javax.baja.registry.Registry.getType(java.lang.String) -->
<method name="getType"  public="true" abstract="true">
<description>
Get details about the Type identified by the specified &#xa; type spec of the format &#x22;module:typename&#x22;.
</description>
<parameter name="typeSpec">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.registry.TypeInfo"/>
</return>
</method>

<!-- javax.baja.registry.Registry.getDefs() -->
<method name="getDefs"  public="true" abstract="true">
<description>
Get the list of all the declared name/value &#xa; definitions declared in module manifests.
</description>
<return>
<type class="java.lang.String" dimension="1"/>
</return>
</method>

<!-- javax.baja.registry.Registry.getDefs(java.lang.String) -->
<method name="getDefs"  public="true" abstract="true">
<description>
Get all the defs for the specified String key.  If&#xa; the key is not found return an array of length zero.
</description>
<parameter name="name">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="java.lang.String" dimension="1"/>
</return>
</method>

<!-- javax.baja.registry.Registry.getDef(java.lang.String) -->
<method name="getDef"  public="true" abstract="true">
<description>
Convenience for &lt;code&gt;getDef(name, null)&lt;/code&gt;.
</description>
<parameter name="name">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.registry.Registry.getDef(java.lang.String, java.lang.String) -->
<method name="getDef"  public="true" abstract="true">
<description>
Lookup a definition name/value pair with a String&#xa; key.  If there is more than one def for the given&#xa; key, return the first one (no order guaranteed).  &#xa; If not found then return fallback parameter.
</description>
<parameter name="name">
<type class="java.lang.String"/>
</parameter>
<parameter name="fallback">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.registry.Registry.getAgents(javax.baja.registry.TypeInfo) -->
<method name="getAgents"  public="true" abstract="true">
<description>
Get all the agents registered for the specified target type.
</description>
<parameter name="targetType">
<type class="javax.baja.registry.TypeInfo"/>
</parameter>
<return>
<type class="javax.baja.agent.AgentList"/>
</return>
</method>

<!-- javax.baja.registry.Registry.getSpecificAgents(javax.baja.registry.TypeInfo) -->
<method name="getSpecificAgents"  public="true" abstract="true">
<description>
Get all the agents registered specifically on the target type.&#xa; This does not return agents registered on a super type or&#xa; interface of this target type.
</description>
<parameter name="targetType">
<type class="javax.baja.registry.TypeInfo"/>
</parameter>
<return>
<type class="javax.baja.agent.AgentList"/>
</return>
</method>

<!-- javax.baja.registry.Registry.isAgent(javax.baja.registry.TypeInfo, javax.baja.registry.TypeInfo) -->
<method name="isAgent"  public="true" abstract="true">
<description>
Return if the specified agent type is a registered agent&#xa; on the target type.  Note this method applies only to the&#xa; the registry database and does not take into account what&#xa; a BObject may do in its &lt;code&gt;getAgents()&lt;/code&gt; method.
</description>
<tag name="@since">Niagara 4.0</tag>
<parameter name="agentType">
<type class="javax.baja.registry.TypeInfo"/>
</parameter>
<parameter name="targetType">
<type class="javax.baja.registry.TypeInfo"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.registry.Registry.isSpecificAgent(javax.baja.registry.TypeInfo, javax.baja.registry.TypeInfo) -->
<method name="isSpecificAgent"  public="true" abstract="true">
<description>
Return if the specified agent type is an agent specifically&#xa; registered on the target type.  Note this method applies only to the&#xa; the registry database and does not take into account what&#xa; a BObject may do in its &lt;code&gt;getAgents()&lt;/code&gt; method.
</description>
<parameter name="agentType">
<type class="javax.baja.registry.TypeInfo"/>
</parameter>
<parameter name="targetType">
<type class="javax.baja.registry.TypeInfo"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.registry.Registry.getAdapters(javax.baja.registry.TypeInfo, javax.baja.registry.TypeInfo) -->
<method name="getAdapters"  public="true" abstract="true">
<description>
Get the list of adapters available to convert instances &#xa; of the fromType into instances of the toType.  If no &#xa; adapters are available then return an empty array.
</description>
<parameter name="fromType">
<type class="javax.baja.registry.TypeInfo"/>
</parameter>
<parameter name="toType">
<type class="javax.baja.registry.TypeInfo"/>
</parameter>
<return>
<type class="javax.baja.registry.TypeInfo" dimension="1"/>
</return>
</method>

<!-- javax.baja.registry.Registry.getFileExtensions() -->
<method name="getFileExtensions"  public="true" abstract="true">
<description>
Get the list of file extensions registered to an&#xa; implementation of &#x22;baja:IFile&#x22;.
</description>
<return>
<type class="java.lang.String" dimension="1"/>
</return>
</method>

<!-- javax.baja.registry.Registry.getFileExtensions(javax.baja.registry.TypeInfo) -->
<method name="getFileExtensions"  public="true" abstract="true">
<description>
Get the list of file extensions registered to an&#xa; implementation of the specified type.
</description>
<parameter name="typeInfo">
<type class="javax.baja.registry.TypeInfo"/>
</parameter>
<return>
<type class="java.lang.String" dimension="1"/>
</return>
</method>

<!-- javax.baja.registry.Registry.getFileTypeForExtension(java.lang.String) -->
<method name="getFileTypeForExtension"  public="true" abstract="true">
<description>
Given an extension map it to the correct implementation&#xa; of &#x22;baja:IFile&#x22;.  If no file is found for the extension&#xa; then &#x22;baja:DataFile&#x22; is returned.  Extensions are case&#xa; insensitive.
</description>
<parameter name="ext">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.registry.TypeInfo"/>
</return>
</method>

<!-- javax.baja.registry.Registry.getOrdSchemes() -->
<method name="getOrdSchemes"  public="true" abstract="true">
<description>
Get the list of all the registered ord schemes.
</description>
<return>
<type class="java.lang.String" dimension="1"/>
</return>
</method>

<!-- javax.baja.registry.Registry.getOrdScheme(java.lang.String) -->
<method name="getOrdScheme"  public="true" abstract="true">
<description>
Get TypeInfo by its global scheme id.
</description>
<parameter name="schemeId">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.registry.TypeInfo"/>
</return>
</method>

<!-- javax.baja.registry.Registry.findOrdScheme(java.lang.String) -->
<method name="findOrdScheme"  public="true" abstract="true">
<description>
Find a TypeInfo by its global scheme id.
</description>
<parameter name="schemeId">
<type class="java.lang.String"/>
<description>
The id of the ord scheme.
</description>
</parameter>
<return>
<type class="javax.baja.registry.TypeInfo"/>
<description>
Returns the TypeInfo for the ord scheme or null if the ord scheme is not found.
</description>
</return>
</method>

<!-- javax.baja.registry.Registry.isOrdScheme(java.lang.String) -->
<method name="isOrdScheme"  public="true" abstract="true">
<description>
Test to see if the specified scheme id refers to a&#xa; known ord scheme.
</description>
<parameter name="schemeId">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.registry.Registry.getLexicons() -->
<method name="getLexicons"  public="true" abstract="true">
<description>
Get the list of all the registered lexicons.
</description>
<return>
<type class="javax.baja.registry.LexiconInfo" dimension="1"/>
</return>
</method>

<!-- javax.baja.registry.Registry.getLexicons(java.lang.String) -->
<method name="getLexicons"  public="true" abstract="true">
<description>
Get the list of all the registered lexicons for a module.
</description>
<parameter name="moduleName">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.registry.LexiconInfo" dimension="1"/>
</return>
</method>

<!-- javax.baja.registry.Registry.getLexicons(java.lang.String, java.lang.String) -->
<method name="getLexicons"  public="true" abstract="true">
<description>
Get the registered lexicons for a module and language.
</description>
<parameter name="moduleName">
<type class="java.lang.String"/>
</parameter>
<parameter name="language">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.registry.LexiconInfo" dimension="1"/>
</return>
</method>

<!-- javax.baja.registry.Registry.getLexicon(java.lang.String, java.lang.String, java.lang.String, java.lang.String) -->
<method name="getLexicon"  public="true" abstract="true">
<description>
Get the registered lexicon for a module, language,&#xa; and lexicon container module name.
</description>
<parameter name="moduleName">
<type class="java.lang.String"/>
</parameter>
<parameter name="language">
<type class="java.lang.String"/>
</parameter>
<parameter name="container">
<type class="java.lang.String"/>
</parameter>
<parameter name="containerProfile">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.registry.LexiconInfo"/>
</return>
</method>

<!-- javax.baja.registry.Registry.synthesizeType(javax.baja.util.BTypeSpec, java.lang.String, javax.baja.registry.TypeInfo, javax.baja.registry.TypeInfo[], javax.baja.agent.AgentInfo[], boolean, boolean) -->
<method name="synthesizeType"  public="true" abstract="true">
<description>
Create a new synthesized Niagara type with the specified attributes. When &#xa; called, Java bytecode will be generated and loaded into the local VM.  Type &#xa; information will be automatically added to the NRE&#x27;s registry. An instance&#xa; of the new type can then be instantiated by calling type.getInstance().
</description>
<tag name="@since">Niagara 3.7</tag>
<parameter name="typeSpec">
<type class="javax.baja.util.BTypeSpec"/>
<description>
The type spec of the new type, made up of the module &#xa; name and type name. The module must reference a synthesized module created&#xa; using the synthesizeModule() method.
</description>
</parameter>
<parameter name="className">
<type class="java.lang.String"/>
<description>
The full Java class name of the new type. The package &#xa; name must start with &#x22;auto.&#x22; and match the type name specified in the &#xa; typeSpec attribute.
</description>
</parameter>
<parameter name="superType">
<type class="javax.baja.registry.TypeInfo"/>
<description>
The TypeInfo instance for the desired super type.
</description>
</parameter>
<parameter name="interfaceTypes">
<type class="javax.baja.registry.TypeInfo" dimension="1"/>
<description>
An array of TypeInfo instances for the desired &#xa; interfaces for this new type to implement.
</description>
</parameter>
<parameter name="agentOnTypes">
<type class="javax.baja.agent.AgentInfo" dimension="1"/>
<description>
An array of AgentInfo instances specifying the other &#xa; Niagara types that the new type is registered as an agent on.
</description>
</parameter>
<parameter name="isAbstract">
<type class="boolean"/>
<description>
Boolean flag that sets the created type as abstract when &#xa; true. Classes can not be both abstract and final.
</description>
</parameter>
<parameter name="isFinal">
<type class="boolean"/>
<description>
Boolean flag that sets the created type as final when true. &#xa; Classes can not be both abstract and final.
</description>
</parameter>
<return>
<type class="javax.baja.sys.Type"/>
<description>
The Type instance declared on the resulting new Niagara type. The type is&#xa; typically a specialized Type implementation which provides additional support for&#xa; modifying or managing the synthetic type.
</description>
</return>
</method>

<!-- javax.baja.registry.Registry.synthesizeModule(java.lang.String, javax.baja.util.Version, java.lang.String, javax.baja.util.Version, java.lang.String) -->
<method name="synthesizeModule"  public="true" abstract="true">
<description>
Create a new synthesized Niagara module with the specified attributes. The result&#xa; is a new memory construct which represents a module within the Niagara registry.&#xa; The product is completely memory resident, no actula module file is created on the &#xa; file system.&#xa; &#xa; Once a synthesized Niagara module has been created, Niagara types can be synthesized&#xa; for inclusion in this module.
</description>
<tag name="@since">Niagara 3.7</tag>
<parameter name="moduleName">
<type class="java.lang.String"/>
<description>
The module name of the synthesized module.  This must not match an&#xa; existing module within the NRE.
</description>
</parameter>
<parameter name="bajaVersion">
<type class="javax.baja.util.Version"/>
<description>
The required baja version.  Typically always 1.0.
</description>
</parameter>
<parameter name="vendor">
<type class="java.lang.String"/>
<description>
The module vendor.
</description>
</parameter>
<parameter name="vendorVersion">
<type class="javax.baja.util.Version"/>
<description>
The module vendor version.
</description>
</parameter>
<parameter name="description">
<type class="java.lang.String"/>
<description>
The textual description of the module contents.
</description>
</parameter>
<return>
<type class="javax.baja.sys.BModule"/>
<description>
A BModule instance for the synthesized module
</description>
</return>
</method>

</class>
</bajadoc>
