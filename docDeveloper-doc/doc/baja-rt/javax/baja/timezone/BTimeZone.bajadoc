<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="baja" runtimeProfile="rt" qualifiedName="javax.baja.timezone.BTimeZone" name="BTimeZone" packageName="javax.baja.timezone" public="true" final="true">
<description>
BTimeZone is the definition of a time zone. The time zone&#xa; id must uniquely identify the time zone in the time zone&#xa; database.
</description>
<tag name="@author">John Sublett</tag>
<tag name="@creation">19 Feb 2004</tag>
<tag name="@version">$Revision: 58$ $Date: 3/23/11 1:09:30 PM EDT$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="javax.baja.sys.BSimple"/>
</extends>
<implements>
<type class="javax.baja.data.BIDataValue"/>
</implements>
<annotation><type class="javax.baja.nre.annotations.NoSlotomatic"/>
</annotation>
<!-- javax.baja.timezone.BTimeZone.getTimeZone(java.lang.String) -->
<method name="getTimeZone"  public="true" static="true">
<description>
Get the time zone with the specified Olson id
</description>
<parameter name="id">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.timezone.BTimeZone"/>
</return>
</method>

<!-- javax.baja.timezone.BTimeZone.make(java.lang.String, int) -->
<method name="make"  public="true" static="true">
<description>
Make a time zone with the specified offset from UTC. If an attempt is made&#xa; to create a time zone with an id that is already defined by the internal&#xa; database, the existing zone is returned and the rules defined by the parameters&#xa; to this method are ignored. If no zone in the internal database matches&#xa; the provided id, the behavior of this function is identical to makeIgnoringCache().&#xa; &#xa; To create an instance without being affected by the internal database, &#xa; use makeIgnoringCache().
</description>
<parameter name="id">
<type class="java.lang.String"/>
<description>
The unique identifier for the time zone.
</description>
</parameter>
<parameter name="utcOffset">
<type class="int"/>
<description>
The offset from UTC in milliseconds.
</description>
</parameter>
<return>
<type class="javax.baja.timezone.BTimeZone"/>
</return>
</method>

<!-- javax.baja.timezone.BTimeZone.make(java.lang.String, int, int, javax.baja.timezone.DstRule, javax.baja.timezone.DstRule) -->
<method name="make"  public="true" static="true">
<description>
Make a time zone with the specified offset from UTC and daylight saving&#xa; time adjustment and rules. If an attempt is made to create a time zone with &#xa; an id that is already defined by the internal database, the existing zone&#xa; is returned and the rules defined by the parameters to this method are &#xa; ignored. If no zone in the internal database matches the provided id,&#xa; the behavior of this function is identical to makeIgnoringCache().&#xa; &#xa; To create an instance without being affected by the internal database, &#xa; use makeIgnoringCache().
</description>
<parameter name="id">
<type class="java.lang.String"/>
<description>
The unique identifier for the time zone.
</description>
</parameter>
<parameter name="utcOffset">
<type class="int"/>
<description>
The offset from UTC in milliseconds.
</description>
</parameter>
<parameter name="daylightAdj">
<type class="int"/>
<description>
The difference between standard time and daylight saving&#xa;   time in milliseconds.
</description>
</parameter>
<parameter name="startRule">
<type class="javax.baja.timezone.DstRule"/>
<description>
The rule that determines the start of daylight saving time.
</description>
</parameter>
<parameter name="endRule">
<type class="javax.baja.timezone.DstRule"/>
<description>
The rule that determines the end of daylight saving time.
</description>
</parameter>
<return>
<type class="javax.baja.timezone.BTimeZone"/>
</return>
</method>

<!-- javax.baja.timezone.BTimeZone.make(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, int, int, javax.baja.timezone.DstRule, javax.baja.timezone.DstRule) -->
<method name="make"  public="true" static="true">
<description>
Make a time zone with the specified offset from UTC and daylight saving&#xa; time adjustment, name, and rules. If an attempt is made to create a time zone with &#xa; an id that is already defined by the internal database, the existing zone&#xa; is returned and the rules defined by the parameters to this method are &#xa; ignored. If no zone in the internal database matches the provided id,&#xa; the behavior of this function is identical to makeIgnoringCache().
</description>
<parameter name="id">
<type class="java.lang.String"/>
<description>
The unique identifier for the time zone.
</description>
</parameter>
<parameter name="stdName">
<type class="java.lang.String"/>
<description>
The display name of this time zone to use during standard time.
</description>
</parameter>
<parameter name="stdShort">
<type class="java.lang.String"/>
<description>
The short display name of this Time Zone to use during standard time.
</description>
</parameter>
<parameter name="dstName">
<type class="java.lang.String"/>
<description>
The display name of this time zone to use during daylight time.
</description>
</parameter>
<parameter name="dstShort">
<type class="java.lang.String"/>
<description>
The short display name of this Time Zone to use during daylight time.
</description>
</parameter>
<parameter name="utcOffset">
<type class="int"/>
<description>
The offset from UTC in milliseconds.
</description>
</parameter>
<parameter name="daylightAdj">
<type class="int"/>
<description>
The difference between standard time and daylight saving time in milliseconds.
</description>
</parameter>
<parameter name="startRule">
<type class="javax.baja.timezone.DstRule"/>
<description>
The rule that determines the start of daylight saving time.
</description>
</parameter>
<parameter name="endRule">
<type class="javax.baja.timezone.DstRule"/>
<description>
The rule that determines the end of daylight saving time.
</description>
</parameter>
<return>
<type class="javax.baja.timezone.BTimeZone"/>
</return>
</method>

<!-- javax.baja.timezone.BTimeZone.makeIgnoringCache(java.lang.String, int) -->
<method name="makeIgnoringCache"  public="true" static="true">
<description>
Make a time zone with the specified offset from UTC, ignoring any&#xa; previously existing definition.
</description>
<parameter name="id">
<type class="java.lang.String"/>
<description>
The unique identifier for the time zone.
</description>
</parameter>
<parameter name="utcOffset">
<type class="int"/>
<description>
The offset from UTC in milliseconds.
</description>
</parameter>
<return>
<type class="javax.baja.timezone.BTimeZone"/>
</return>
</method>

<!-- javax.baja.timezone.BTimeZone.makeIgnoringCache(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, int, int, javax.baja.timezone.DstRule, javax.baja.timezone.DstRule) -->
<method name="makeIgnoringCache"  public="true" static="true">
<description>
Make a time zone with the specified offset from UTC, ignoring any&#xa; previously existing definition. The time zone will demonstrate &#xa; daylight saving time behavior based on the provided parameters.
</description>
<parameter name="id">
<type class="java.lang.String"/>
<description>
The unique identifier for the Time Zone.
</description>
</parameter>
<parameter name="stdName">
<type class="java.lang.String"/>
<description>
The display name of this Time Zone to use during standard time.
</description>
</parameter>
<parameter name="stdShort">
<type class="java.lang.String"/>
<description>
The short display name of this Time Zone to use during standard time.
</description>
</parameter>
<parameter name="dstName">
<type class="java.lang.String"/>
<description>
The display name of this Time Zone to use during daylight time.
</description>
</parameter>
<parameter name="dstShort">
<type class="java.lang.String"/>
<description>
The short display name of this Time Zone to use during daylight time.
</description>
</parameter>
<parameter name="utcOffset">
<type class="int"/>
<description>
The offset from UTC in milliseconds.
</description>
</parameter>
<parameter name="daylightAdj">
<type class="int"/>
<description>
The difference between standard time and daylight saving&#xa;   time in milliseconds.
</description>
</parameter>
<parameter name="startRule">
<type class="javax.baja.timezone.DstRule"/>
<description>
The rule that determines the start of daylight saving time.
</description>
</parameter>
<parameter name="endRule">
<type class="javax.baja.timezone.DstRule"/>
<description>
The rule that determines the end of daylight saving time.
</description>
</parameter>
<return>
<type class="javax.baja.timezone.BTimeZone"/>
</return>
</method>

<!-- javax.baja.timezone.BTimeZone.isNull() -->
<method name="isNull"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Is this a null instance?
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.timezone.BTimeZone.getId() -->
<method name="getId"  public="true">
<description>
Get the unique time zone identifier.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.timezone.BTimeZone.getDisplayName(javax.baja.sys.BAbsTime, javax.baja.sys.Context) -->
<method name="getDisplayName"  public="true">
<description>
Get the display name for the specified time and context.
</description>
<parameter name="time">
<type class="javax.baja.sys.BAbsTime"/>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.timezone.BTimeZone.getDisplayName(boolean, javax.baja.sys.Context) -->
<method name="getDisplayName"  public="true">
<description>
Get the display name for the specified daylight time state.
</description>
<parameter name="daylightTime">
<type class="boolean"/>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.timezone.BTimeZone.getShortDisplayName(javax.baja.sys.BAbsTime, javax.baja.sys.Context) -->
<method name="getShortDisplayName"  public="true">
<description>
Get the abbreviated display name for the specified time and context.
</description>
<parameter name="time">
<type class="javax.baja.sys.BAbsTime"/>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.timezone.BTimeZone.getShortDisplayName(boolean, javax.baja.sys.Context) -->
<method name="getShortDisplayName"  public="true">
<description>
Get the abbreviated display name for the specified daylight time state.
</description>
<parameter name="daylightTime">
<type class="boolean"/>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.timezone.BTimeZone.getUtcOffset() -->
<method name="getUtcOffset"  public="true">
<description>
Get the offset from UTC during standard time in milliseconds.&#xa; This value is not automatically adjusted for DST. The behavior&#xa; of this function is comparable to the TimeZone getRawOffset()&#xa; method.
</description>
<return>
<type class="int"/>
<description>
The offset in milliseconds between a standard local&#xa;   time in this time zone and the same time in UTC.
</description>
</return>
</method>

<!-- javax.baja.timezone.BTimeZone.getDaylightAdjustment() -->
<method name="getDaylightAdjustment"  public="true">
<description>
Get the daylight saving time adjustment during daylight time in milliseconds.&#xa; The behavior of this method is comparable to the TimeZone getDSTSavings()&#xa; method.
</description>
<return>
<type class="int"/>
<description>
The daylight adjustment in milliseconds to apply to this&#xa;   zone&#x27;s UTC offset to calculate local time during DST
</description>
</return>
</method>

<!-- javax.baja.timezone.BTimeZone.getCurrentUtcOffset(long) -->
<method name="getCurrentUtcOffset"  public="true">
<description>
Get the offset of this zone from UTC at the provided date in milliseconds since the Epoch. &#xa; If the zone uses DST, and DST is in effect at the specified date, the return value will &#xa; be is adjusted with the amount of daylight saving in milliseconds. The behavior of this &#xa; method is comparable to the java.util.TimeZone getUtcOffset(long millis) method.
</description>
<tag name="@since">Niagara 4.0</tag>
<parameter name="millis">
<type class="long"/>
<description>
The requested date in milliseconds since the UTC Epoch
</description>
</parameter>
<return>
<type class="int"/>
<description>
The UTC offset in milliseconds that was in effect at the provided date,&#xa;   adjusted for DST when appropriate.
</description>
</return>
</method>

<!-- javax.baja.timezone.BTimeZone.getDaylightStartRule() -->
<method name="getDaylightStartRule"  public="true">
<description>
Get the rule that determines the start of daylight saving time.
</description>
<return>
<type class="javax.baja.timezone.DstRule"/>
</return>
</method>

<!-- javax.baja.timezone.BTimeZone.getDaylightEndRule() -->
<method name="getDaylightEndRule"  public="true">
<description>
Get the rule that determines the start of daylight saving time.
</description>
<return>
<type class="javax.baja.timezone.DstRule"/>
</return>
</method>

<!-- javax.baja.timezone.BTimeZone.getJavaTimeZone() -->
<method name="getJavaTimeZone"  public="true">
<description>
Return a java.util.TimeZone object that behaves the same way as this object.
</description>
<tag name="@since">Niagara 3.5</tag>
<return>
<type class="java.util.TimeZone"/>
</return>
</method>

<!-- javax.baja.timezone.BTimeZone.tzSupport() -->
<method name="tzSupport"  public="true">
<description>
Framework use only, not to used by developers
</description>
<return>
<type class="java.lang.Object"/>
</return>
</method>

<!-- javax.baja.timezone.BTimeZone.toDataValue() -->
<method name="toDataValue"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Return this instance since it&#x27;s already a data value.
</description>
<return>
<type class="javax.baja.data.BIDataValue"/>
</return>
</method>

<!-- javax.baja.timezone.BTimeZone.hashCode() -->
<method name="hashCode"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
BTimeZone uses its encodeToString value&#x27;s hash code.
</description>
<tag name="@since">Niagara 3.4</tag>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.timezone.BTimeZone.equals(java.lang.Object) -->
<method name="equals"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Compare this time zone to the specified time zone to check&#xa; for equality.
</description>
<parameter name="o">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="boolean"/>
<description>
Returns true if the specified object is a BTimeZone&#xa;   with the same id, UTC offset, and daylight saving time rules&#xa;   as this time zone.
</description>
</return>
</method>

<!-- javax.baja.timezone.BTimeZone.isEquivalent(javax.baja.timezone.BTimeZone) -->
<method name="isEquivalent"  public="true">
<description>
Compare this time zone to the specified time zone to check&#xa; for equivalence.  Two time zones are equivalent if they&#xa; have the same UTC offset and daylight saving time rules&#xa; even if they do not have matching IDs.
</description>
<parameter name="tz">
<type class="javax.baja.timezone.BTimeZone"/>
</parameter>
<return>
<type class="boolean"/>
<description>
Returns true if the specified object is a BTimeZone&#xa;   with the UTC offset, and daylight saving time rules&#xa;   as this time zone.
</description>
</return>
</method>

<!-- javax.baja.timezone.BTimeZone.encode(java.io.DataOutput) -->
<method name="encode"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Encode this instance to the specified output.
</description>
<parameter name="out">
<type class="java.io.DataOutput"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.timezone.BTimeZone.decode(java.io.DataInput) -->
<method name="decode"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Decode a BTimeZone instance from the specified input.
</description>
<parameter name="in">
<type class="java.io.DataInput"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.timezone.BTimeZone.encodeToString() -->
<method name="encodeToString"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Encode this instance to a string representation that can&#xa; be decoded with decodeFromString(String).  This method&#xa; uses the &#x27;;&#x27; character as the separator between elements&#xa; so no subelements (specifically BDstRule) can use the &#x27;|&#x27;&#xa; character in their encoding.
</description>
<return>
<type class="java.lang.String"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.timezone.BTimeZone.decodeFromString(java.lang.String) -->
<method name="decodeFromString"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Decode a string representation of a BTimeZone.
</description>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.timezone.BTimeZone.toString(javax.baja.sys.Context) -->
<method name="toString"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.timezone.BTimeZone.isJavaTimeZone() -->
<method name="isJavaTimeZone"  public="true">
<description>
Will this time zone demonstrate backed by java time zone?
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.timezone.BTimeZone.getJavaUTCInstance() -->
<method name="getJavaUTCInstance"  public="true" static="true">
<description>
Lazy load an instance of the Java SimpleTimeZone representing UTC time
</description>
<return>
<type class="java.util.TimeZone"/>
</return>
</method>

<!-- javax.baja.timezone.BTimeZone.getLocal() -->
<method name="getLocal"  public="true" static="true">
<description>
Get the time zone that this VM is running in.
</description>
<return>
<type class="javax.baja.timezone.BTimeZone"/>
</return>
</method>

<!-- javax.baja.timezone.BTimeZone.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.timezone.BTimeZone.UTC -->
<field name="UTC"  public="true" static="true" final="true">
<type class="javax.baja.timezone.BTimeZone"/>
<description/>
</field>

<!-- javax.baja.timezone.BTimeZone.GMT -->
<field name="GMT"  public="true" static="true" final="true">
<type class="javax.baja.timezone.BTimeZone"/>
<description/>
</field>

<!-- javax.baja.timezone.BTimeZone.NULL -->
<field name="NULL"  public="true" static="true" final="true">
<type class="javax.baja.timezone.BTimeZone"/>
<description/>
</field>

<!-- javax.baja.timezone.BTimeZone.DEFAULT -->
<field name="DEFAULT"  public="true" static="true" final="true">
<type class="javax.baja.timezone.BTimeZone"/>
<description/>
</field>

<!-- javax.baja.timezone.BTimeZone.OFFSET_COMPARATOR -->
<field name="OFFSET_COMPARATOR"  public="true" static="true" final="true">
<parameterizedType class="java.util.Comparator">
<args>
<type class="javax.baja.timezone.BTimeZone"/>
</args>
</parameterizedType>
<description>
A Comparator implementation that sorts BTimeZones by standard UTC offset.&#xa; If 2 BTimeZones have the same standard UTC offset, an alphabetical sort&#xa; is used to resolve the collision.
</description>
<tag name="@since">Niagara 4.0</tag>
</field>

<!-- javax.baja.timezone.BTimeZone.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
