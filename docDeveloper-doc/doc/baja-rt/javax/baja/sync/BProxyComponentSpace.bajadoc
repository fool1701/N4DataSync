<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="baja" runtimeProfile="rt" qualifiedName="javax.baja.sync.BProxyComponentSpace" name="BProxyComponentSpace" packageName="javax.baja.sync" public="true" abstract="true">
<description>
BProxyComponentSpace is a BComponentSpace which uses the sync&#xa; framework to keep itself synchronized with a remote master&#xa; BComponentSpace.
</description>
<tag name="@author">Brian Frank       &#xa; creation  21 Jan 03</tag>
<tag name="@version">$Revision: 5$ $Date: 3/10/11 11:30:59 AM EST$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="javax.baja.space.BComponentSpace"/>
</extends>
<!-- javax.baja.sync.BProxyComponentSpace(java.lang.String, javax.baja.util.LexiconText, javax.baja.naming.BOrd) -->
<constructor name="BProxyComponentSpace" protected="true">
<parameter name="name">
<type class="java.lang.String"/>
</parameter>
<parameter name="lexText">
<type class="javax.baja.util.LexiconText"/>
</parameter>
<parameter name="ordInSession">
<type class="javax.baja.naming.BOrd"/>
</parameter>
<description>
Constructor.
</description>
</constructor>

<!-- javax.baja.sync.BProxyComponentSpace.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.sync.BProxyComponentSpace.isProxyComponentSpace() -->
<method name="isProxyComponentSpace"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Return true.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.sync.BProxyComponentSpace.findByHandle(java.lang.Object, boolean) -->
<method name="findByHandle"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Attempt to lookup a component by handle.  If it is&#xa; not found in the cache and autoLoad is true, then &#xa; route to &lt;code&gt;loadByHandle()&lt;/code&gt;.
</description>
<parameter name="handle">
<type class="java.lang.Object"/>
</parameter>
<parameter name="autoLoad">
<type class="boolean"/>
</parameter>
<return>
<type class="javax.baja.sys.BComponent"/>
</return>
</method>

<!-- javax.baja.sync.BProxyComponentSpace.loadByHandle(java.lang.Object) -->
<method name="loadByHandle"  protected="true" abstract="true">
<description>
Subclasses should use this hook to load an object by handle.
</description>
<parameter name="handle">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="javax.baja.sys.BComponent"/>
</return>
</method>

<!-- javax.baja.sync.BProxyComponentSpace.sync() -->
<method name="sync"  public="true" abstract="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Sync with the master space.
</description>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.sync.BProxyComponentSpace.fireDirectCallbacks() -->
<method name="fireDirectCallbacks"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Override to return false by default.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.sync.BProxyComponentSpace.subscribe(javax.baja.sys.Type[], javax.baja.sys.TypeSubscriber) -->
<method name="subscribe"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="t">
<type class="javax.baja.sys.Type" dimension="1"/>
</parameter>
<parameter name="s">
<type class="javax.baja.sys.TypeSubscriber"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.sync.BProxyComponentSpace.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
