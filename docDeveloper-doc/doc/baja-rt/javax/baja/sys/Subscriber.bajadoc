<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="baja" runtimeProfile="rt" qualifiedName="javax.baja.sys.Subscriber" name="Subscriber" packageName="javax.baja.sys" public="true" abstract="true">
<description>
Subscriber is a listener for ComponentEvents on zero or more&#xa; BComponents.  Subscriber handles maintaining the list of components&#xa; which are subscribed. Subclasses decide how to process the events&#xa; by overriding the abstract &lt;code&gt;event()&lt;/code&gt; method.
</description>
<tag name="@author">Brian Frank</tag>
<tag name="@creation">26 Apr 02</tag>
<tag name="@version">$Revision: 26$ $Date: 4/11/11 3:56:16 PM EDT$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="java.lang.Object"/>
</extends>
<!-- javax.baja.sys.Subscriber() -->
<constructor name="Subscriber" public="true">
<description/>
</constructor>

<!-- javax.baja.sys.Subscriber.make(java.util.function.Consumer&lt;javax.baja.sys.BComponentEvent&gt;) -->
<method name="make"  public="true" static="true" final="true">
<description>
Return an instance of a subscriber with the specified event handler.
</description>
<parameter name="eventHandler">
<parameterizedType class="java.util.function.Consumer">
<args>
<type class="javax.baja.sys.BComponentEvent"/>
</args>
</parameterizedType>
<description>
Invoked when the subscriber has a component event.
</description>
</parameter>
<return>
<type class="javax.baja.sys.Subscriber"/>
<description>
A subscriber.
</description>
</return>
</method>

<!-- javax.baja.sys.Subscriber.make(java.util.function.Consumer&lt;javax.baja.sys.BComponentEvent&gt;, java.util.function.BiConsumer&lt;javax.baja.sys.BComponent, javax.baja.sys.Context&gt;, java.util.function.BiConsumer&lt;javax.baja.sys.BComponent, javax.baja.sys.Context&gt;) -->
<method name="make"  public="true" static="true" final="true">
<description>
Return an instance of a subscriber with the specified event,&#xa; subscriber and unsubscribed handlers.
</description>
<parameter name="eventHandler">
<parameterizedType class="java.util.function.Consumer">
<args>
<type class="javax.baja.sys.BComponentEvent"/>
</args>
</parameterizedType>
<description>
Invoked when the subscriber has a component event.
</description>
</parameter>
<parameter name="subscribedHandler">
<parameterizedType class="java.util.function.BiConsumer">
<args>
<type class="javax.baja.sys.BComponent"/>
<type class="javax.baja.sys.Context"/>
</args>
</parameterizedType>
<description>
Invoked when a new component is added to the subscribers list.
</description>
</parameter>
<parameter name="unsubscribedHandler">
<parameterizedType class="java.util.function.BiConsumer">
<args>
<type class="javax.baja.sys.BComponent"/>
<type class="javax.baja.sys.Context"/>
</args>
</parameterizedType>
<description>
Invoked when a new component is removed from the subscribers list.
</description>
</parameter>
<return>
<type class="javax.baja.sys.Subscriber"/>
<description>
A subscriber.
</description>
</return>
</method>

<!-- javax.baja.sys.Subscriber.isSubscribed(javax.baja.sys.BComponent) -->
<method name="isSubscribed"  public="true" final="true" synchronized="true">
<description>
Return true if the specified component is in &#xa; this instance&#x27;s subscription list.
</description>
<parameter name="component">
<type class="javax.baja.sys.BComponent"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.sys.Subscriber.isSubscribed(javax.baja.sys.BComponent[]) -->
<method name="isSubscribed"  public="true" final="true" synchronized="true">
<description>
Return true if all the specified components are in &#xa; this instance&#x27;s subscription list.
</description>
<parameter name="components">
<type class="javax.baja.sys.BComponent" dimension="1"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.sys.Subscriber.getSubscriptionCount() -->
<method name="getSubscriptionCount"  public="true" final="true">
<description>
Get the number of components currently subscribed.
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.sys.Subscriber.getSubscriptions() -->
<method name="getSubscriptions"  public="true" final="true" synchronized="true">
<description>
Get the list of components this subscriber is &#xa; currently subscribed to.
</description>
<return>
<type class="javax.baja.sys.BComponent" dimension="1"/>
</return>
</method>

<!-- javax.baja.sys.Subscriber.subscribe(javax.baja.sys.BComponent) -->
<method name="subscribe"  public="true" final="true" synchronized="true">
<description>
Convenience for &lt;code&gt;subscribe(c, 0, null)&lt;/code&gt;
</description>
<parameter name="c">
<type class="javax.baja.sys.BComponent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.sys.Subscriber.subscribe(javax.baja.sys.BComponent, int) -->
<method name="subscribe"  public="true" final="true" synchronized="true">
<description>
Convenience for &lt;code&gt;subscribe(c, depth, null)&lt;/code&gt;
</description>
<parameter name="c">
<type class="javax.baja.sys.BComponent"/>
</parameter>
<parameter name="depth">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.sys.Subscriber.subscribe(javax.baja.sys.BComponent, int, javax.baja.sys.Context) -->
<method name="subscribe"  public="true" final="true" synchronized="true">
<description>
Convenience for &lt;code&gt;subscribe(new BComponent[] {c}, depth, cx)&lt;/code&gt;
</description>
<parameter name="c">
<type class="javax.baja.sys.BComponent"/>
</parameter>
<parameter name="depth">
<type class="int"/>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.sys.Subscriber.subscribe(javax.baja.sys.BComponent[], int, javax.baja.sys.Context) -->
<method name="subscribe"  public="true" final="true" synchronized="true">
<description>
Subscribe to the list of specified components, and all their&#xa; ancestors up to depth.  A depth of zero indicated just&#xa; the component, one its children, two its grandchildren.
</description>
<parameter name="c">
<type class="javax.baja.sys.BComponent" dimension="1"/>
</parameter>
<parameter name="depth">
<type class="int"/>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.sys.Subscriber.subscribe(javax.baja.space.BComponentSpace, javax.baja.naming.BOrd[], int, javax.baja.sys.Context) -->
<method name="subscribe"  public="true" final="true">
<description>
Resolve and subscribe to all the of specified ords.  &#xa; Return a matching array for the resolved components.
</description>
<parameter name="space">
<type class="javax.baja.space.BComponentSpace"/>
</parameter>
<parameter name="ords">
<type class="javax.baja.naming.BOrd" dimension="1"/>
</parameter>
<parameter name="depth">
<type class="int"/>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="javax.baja.sys.BComponent" dimension="1"/>
</return>
</method>

<!-- javax.baja.sys.Subscriber.unsubscribe(javax.baja.sys.BComponent) -->
<method name="unsubscribe"  public="true" final="true" synchronized="true">
<description>
Convenience for &lt;code&gt;unsubscribe(c, null)&lt;/code&gt;.
</description>
<parameter name="c">
<type class="javax.baja.sys.BComponent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.sys.Subscriber.unsubscribe(javax.baja.sys.BComponent, javax.baja.sys.Context) -->
<method name="unsubscribe"  public="true" final="true" synchronized="true">
<description>
Unsubscribe from the specified component.
</description>
<parameter name="c">
<type class="javax.baja.sys.BComponent"/>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.sys.Subscriber.unsubscribe(javax.baja.sys.BComponent[], javax.baja.sys.Context) -->
<method name="unsubscribe"  public="true" final="true" synchronized="true">
<description>
Unsubscribe from the list of specified components.
</description>
<tag name="@since">Niagara 3.2</tag>
<parameter name="c">
<type class="javax.baja.sys.BComponent" dimension="1"/>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.sys.Subscriber.unsubscribeAll() -->
<method name="unsubscribeAll"  public="true" final="true" synchronized="true">
<description>
Unsubscribe all the component&#x27;s in the &#xa; &lt;code&gt;getSubscription()&lt;/code&gt; list.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.sys.Subscriber.getMask() -->
<method name="getMask"  public="true" final="true">
<description/>
<return>
<type class="javax.baja.sys.BComponentEventMask"/>
</return>
</method>

<!-- javax.baja.sys.Subscriber.setMask(javax.baja.sys.BComponentEventMask) -->
<method name="setMask"  public="true" final="true">
<description/>
<parameter name="mask">
<type class="javax.baja.sys.BComponentEventMask"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.sys.Subscriber.event(javax.baja.sys.BComponentEvent) -->
<method name="event"  public="true" abstract="true">
<description>
Callback when an event is received on subscribed component.
</description>
<parameter name="event">
<type class="javax.baja.sys.BComponentEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.sys.Subscriber.subscribed(javax.baja.sys.BComponent, javax.baja.sys.Context) -->
<method name="subscribed"  protected="true">
<description>
Callback when a new component is added to the subscribers list.
</description>
<parameter name="c">
<type class="javax.baja.sys.BComponent"/>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.sys.Subscriber.unsubscribed(javax.baja.sys.BComponent, javax.baja.sys.Context) -->
<method name="unsubscribed"  protected="true">
<description>
Callback when a component is removed from the subscribers list.
</description>
<parameter name="c">
<type class="javax.baja.sys.BComponent"/>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.sys.Subscriber.gc() -->
<method name="gc"  public="true" synchronized="true">
<description>
This method is called to unsubscribe any component which&#xa; is unmounted.  This allows the Subscriber to free the reference&#xa; and make the component available for garbage collection.  &#xa; Because this API is used with both mounted and unmounted &#xa; components, this call is never invoked automatically.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.sys.Subscriber.spy(javax.baja.spy.SpyWriter) -->
<method name="spy"  public="true">
<description>
Dump debug info.
</description>
<parameter name="out">
<type class="javax.baja.spy.SpyWriter"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

</class>
</bajadoc>
