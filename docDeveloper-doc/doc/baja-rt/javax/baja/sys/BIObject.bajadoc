<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="baja" runtimeProfile="rt" qualifiedName="javax.baja.sys.BIObject" name="BIObject" packageName="javax.baja.sys" public="true" interface="true" abstract="true" category="interface">
<description>
BIObject is the super type of all Baja types in the Niagara Framework.
</description>
<tag name="@author">&lt;a href=&#x22;mailto:mgiannini@tridium.com&#x22;&gt;Matthew Giannini&lt;/a&gt;</tag>
<tag name="@since">Niagara 4.0</tag>
<!-- javax.baja.sys.BIObject.&lt;T extends javax.baja.sys.BIObject&gt;as(java.lang.Class&lt;T&gt;) -->
<method name="as"  public="true" abstract="true">
<typeParameters>
<typeVariable class="T">
<bounds>
<type class="javax.baja.sys.BIObject"/>
</bounds>
</typeVariable>
</typeParameters>
<description>
Narrow to the given type.
</description>
<parameter name="cls">
<parameterizedType class="java.lang.Class">
<args>
<typeVariable class="T"/>
</args>
</parameterizedType>
</parameter>
<return>
<typeVariable class="T"/>
</return>
</method>

<!-- javax.baja.sys.BIObject.toDataValue() -->
<method name="toDataValue"  public="true" abstract="true">
<description>
Get a BIDataValue instance for this instance.  If this type is&#xa; already a BIDataValue then this instance will be returned.&#xa; Otherwise, the returned instance will be the result of converting&#xa; this type into a BIDataValue.  Data types are defined in the&#xa; Baja Data API.
</description>
<return>
<type class="javax.baja.data.BIDataValue"/>
</return>
</method>

<!-- javax.baja.sys.BIObject.toString(javax.baja.sys.Context) -->
<method name="toString"  public="true" abstract="true">
<description>
Return a String version of the object based on the&#xa; specified context.  If context is null then a&#xa; non-localized debug String designed for engineering&#xa; use should be returned.  But if context is not null&#xa; then the object should return a localized String&#xa; designed for end user display.   The default&#xa; implementation routes to the various toXString()&#xa; methods.
</description>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.sys.BIObject.equivalent(java.lang.Object) -->
<method name="equivalent"  public="true" abstract="true">
<description>
Equivalent is used to compare if two objects have equivalent&#xa; state, but might not want to return true for equals since it&#xa; it has implied semantics for many operations.  The default&#xa; implementation returns the result of &lt;code&gt;equals()&lt;/code&gt;.
</description>
<parameter name="obj">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.sys.BIObject.getType() -->
<method name="getType"  public="true" abstract="true">
<description>
Get the type of this instance.  By convention this&#xa; type is stored in a public static final field named&#xa; &lt;code&gt;TYPE&lt;/code&gt;.  It should be loaded only once&#xa; for a given class using the &lt;code&gt;<see ref="javax.baja.sys.Sys#loadType(java.lang.Class&lt;?&gt;)">Sys#loadType(Class)</see>&lt;/code&gt; method.
</description>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.sys.BIObject.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
