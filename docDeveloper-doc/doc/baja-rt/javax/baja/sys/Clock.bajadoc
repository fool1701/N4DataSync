<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="baja" runtimeProfile="rt" qualifiedName="javax.baja.sys.Clock" name="Clock" packageName="javax.baja.sys" public="true">
<description>
Clock provides access to the system clock.
</description>
<tag name="@author">Brian Frank</tag>
<tag name="@creation">9 Aug 00</tag>
<tag name="@version">$Revision: 25$ $Date: 7/1/11 11:29:43 AM EDT$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="java.lang.Object"/>
</extends>
<!-- javax.baja.sys.Clock() -->
<constructor name="Clock" public="true">
<description/>
</constructor>

<!-- javax.baja.sys.Clock.ticks() -->
<method name="ticks"  public="true" static="true">
<description>
Get the number of system time ticks in milliseconds.&#xa; Ticks are independent of changes to system time.
</description>
<return>
<type class="long"/>
</return>
</method>

<!-- javax.baja.sys.Clock.nanoTicks() -->
<method name="nanoTicks"  public="true" static="true">
<description>
Get the number of system time ticks in nanoseconds.&#xa; Ticks are independent of changes to system time.
</description>
<return>
<type class="long"/>
<description>
the current value of the running Niagara Platform&#x27;s&#xa;         high-resolution time source, in nanoseconds
</description>
</return>
</method>

<!-- javax.baja.sys.Clock.millis() -->
<method name="millis"  public="true" static="true">
<description>
Get the system time as the number of milliseconds&#xa; since the epoch.  This method is equivalent to&#xa; &lt;code&gt;System.currentTimeMillis()&lt;/code&gt;.
</description>
<return>
<type class="long"/>
<description>
the difference, measured in milliseconds,&#xa;    between the current time and midnight,&#xa;    January 1, 1970 UTC.
</description>
</return>
</method>

<!-- javax.baja.sys.Clock.time(int) -->
<method name="time"  public="true" static="true">
<description>
Get an instance of &lt;code&gt;BAbsTime&lt;/code&gt; with the current&#xa; time within the specified tolerance.  This allows&#xa; operations which need a &lt;code&gt;BAbsTime&lt;/code&gt; to share a&#xa; single immutable instance when millisecond accuracy is not&#xa; important.
</description>
<parameter name="tolerance">
<type class="int"/>
<description>
number of milliseconds which&#xa;    the resulting time may be off from the actual&#xa;    current time.  The greater the tolerance, the&#xa;    more likely the ability to share an existing&#xa;    instance and increase performance.
</description>
</parameter>
<return>
<type class="javax.baja.sys.BAbsTime"/>
<description>
&lt;code&gt;BAbsTime&lt;/code&gt; for the current time&#xa;    accurate up with &lt;code&gt;tolerance&lt;/code&gt; milliseconds.
</description>
</return>
</method>

<!-- javax.baja.sys.Clock.time() -->
<method name="time"  public="true" static="true">
<description>
Convenience method for time(int) with a&#xa; default tolerance of 100 milliseconds.
</description>
<return>
<type class="javax.baja.sys.BAbsTime"/>
</return>
</method>

<!-- javax.baja.sys.Clock.nextTopOfMinute() -->
<method name="nextTopOfMinute"  public="true" static="true">
<description>
Get an absolute time for top of the next minute.
</description>
<return>
<type class="javax.baja.sys.BAbsTime"/>
</return>
</method>

<!-- javax.baja.sys.Clock.setTime(javax.baja.sys.BAbsTime) -->
<method name="setTime"  public="true" static="true">
<description>
Set the current system time.
</description>
<parameter name="time">
<type class="javax.baja.sys.BAbsTime"/>
<description>
BAbsTime initialized to desired UTC millis&#xa;             for system clock. The Time Zone of the BAbsTime&#xa;             is not applied to the system.
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.sys.Clock.schedule(javax.baja.sys.BComponent, javax.baja.sys.BRelTime, javax.baja.sys.Action, javax.baja.sys.BValue) -->
<method name="schedule"  public="true" static="true">
<description>
Schedule an single action at the specified&#xa; relative time from now.  This action is&#xa; scheduled independently of changes to the&#xa; system clock.
</description>
<parameter name="target">
<type class="javax.baja.sys.BComponent"/>
<description>
BComponent to invoke the&#xa;   action upon.
</description>
</parameter>
<parameter name="time">
<type class="javax.baja.sys.BRelTime"/>
<description>
relative time from now&#xa;    to invoke the action.
</description>
</parameter>
<parameter name="action">
<type class="javax.baja.sys.Action"/>
<description>
the action to invoke on&#xa;    this schedule&#x27;s component.
</description>
</parameter>
<parameter name="arg">
<type class="javax.baja.sys.BValue"/>
<description>
argument to pass to the action&#xa;    or null if no argument is required.
</description>
</parameter>
<return>
<type class="javax.baja.sys.Clock$Ticket"/>
<description>
Ticket instance which may be used to&#xa;    cancel the scheduled action.
</description>
</return>
</method>

<!-- javax.baja.sys.Clock.schedule(javax.baja.sys.BComponent, javax.baja.sys.BAbsTime, javax.baja.sys.Action, javax.baja.sys.BValue) -->
<method name="schedule"  public="true" static="true">
<description>
Schedule an single action at the specified&#xa; absolute point in time.  If the given time&#xa; has already occurred, the action is called as&#xa; soon as possible.  The specified time is&#xa; dependent on changes to the system clock.
</description>
<parameter name="target">
<type class="javax.baja.sys.BComponent"/>
<description>
BComponent to invoke the&#xa;   action upon.
</description>
</parameter>
<parameter name="time">
<type class="javax.baja.sys.BAbsTime"/>
<description>
absolute point in time at&#xa;    which to invoke the action.
</description>
</parameter>
<parameter name="action">
<type class="javax.baja.sys.Action"/>
<description>
the action to invoke on&#xa;    this schedule&#x27;s component.
</description>
</parameter>
<parameter name="arg">
<type class="javax.baja.sys.BValue"/>
<description>
argument to pass to the action&#xa;    or null if no argument is required.
</description>
</parameter>
<return>
<type class="javax.baja.sys.Clock$Ticket"/>
<description>
Ticket instance which may be used to&#xa;    cancel the scheduled action.
</description>
</return>
</method>

<!-- javax.baja.sys.Clock.schedulePeriodically(javax.baja.sys.BComponent, javax.baja.sys.BRelTime, javax.baja.sys.Action, javax.baja.sys.BValue) -->
<method name="schedulePeriodically"  public="true" static="true">
<description>
Schedule a reoccurring call to the action using the&#xa; specified interval period.  Actions are scheduled&#xa; based relative to the actual time of the last&#xa; invocation.  This guarantees fairly regular intervals,&#xa; but introduces a drift in the actual frequency&#xa; over time.  Actions scheduled using this method&#xa; are independent of changes to the system clock.
</description>
<parameter name="target">
<type class="javax.baja.sys.BComponent"/>
<description>
BComponent to invoke the&#xa;   action upon.
</description>
</parameter>
<parameter name="period">
<type class="javax.baja.sys.BRelTime"/>
<description>
fixed interval over which to&#xa;    repeatedly invoke the specified action.
</description>
</parameter>
<parameter name="action">
<type class="javax.baja.sys.Action"/>
<description>
the action to invoke on&#xa;    this schedule&#x27;s component.
</description>
</parameter>
<parameter name="arg">
<type class="javax.baja.sys.BValue"/>
<description>
argument to pass to the action&#xa;    or null if no argument is required.
</description>
</parameter>
<return>
<type class="javax.baja.sys.Clock$Ticket"/>
<description>
Ticket instance which may be used to&#xa;    cancel the scheduled action.
</description>
</return>
</method>

<!-- javax.baja.sys.Clock.schedulePeriodically(javax.baja.sys.BComponent, javax.baja.sys.BAbsTime, javax.baja.sys.BRelTime, javax.baja.sys.Action, javax.baja.sys.BValue) -->
<method name="schedulePeriodically"  public="true" static="true">
<description>
Schedule a reoccurring call to the action based on&#xa; a fixed starting time with the specified interval&#xa; period.  Actions are scheduled based relative&#xa; to the scheduled time of the last invocation, not&#xa; the actual time.  This introduces slight variations&#xa; in the actual interval, but guarantees regular&#xa; invokes over time on start+period*n.  Actions&#xa; using this method are dependent on changes to the&#xa; system clock; components are required to realign&#xa; themselves with the system clock.  See the method&#xa; BComponent.clockChanged().
</description>
<parameter name="target">
<type class="javax.baja.sys.BComponent"/>
<description>
BComponent to invoke the&#xa;   action upon.
</description>
</parameter>
<parameter name="start">
<type class="javax.baja.sys.BAbsTime"/>
<description>
absolute point in time in which to&#xa;    base interval times.  The start time should&#xa;    be at a point in the future, otherwise behavior&#xa;    is undefined.
</description>
</parameter>
<parameter name="period">
<type class="javax.baja.sys.BRelTime"/>
<description>
fixed interval over which to&#xa;    repeatedly invoke the specified action.
</description>
</parameter>
<parameter name="action">
<type class="javax.baja.sys.Action"/>
<description>
the action to invoke on&#xa;    this schedule&#x27;s component.
</description>
</parameter>
<parameter name="arg">
<type class="javax.baja.sys.BValue"/>
<description>
argument to pass to the action&#xa;    or null if no argument is required.
</description>
</parameter>
<return>
<type class="javax.baja.sys.Clock$Ticket"/>
<description>
Ticket instance which may be used to&#xa;    cancel the scheduled action.
</description>
</return>
</method>

<!-- javax.baja.sys.Clock.expiredTicket -->
<field name="expiredTicket"  public="true" static="true" final="true">
<type class="javax.baja.sys.Clock$Ticket"/>
<description/>
</field>

</class>
</bajadoc>
