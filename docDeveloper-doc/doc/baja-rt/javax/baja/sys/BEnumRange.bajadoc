<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="baja" runtimeProfile="rt" qualifiedName="javax.baja.sys.BEnumRange" name="BEnumRange" packageName="javax.baja.sys" public="true" final="true">
<description>
BEnumRange stores a range of ordinal/name pairs:&#xa; &lt;pre&gt;&#xa;   range     := [frozen &#x22;+&#x22;] dynamic [options]&#xa;   frozen    := BTypeSpec::typeSpec&#xa;   dynamic   := &#x22;{&#x22; + pairs &#x22;}&#x22;&#xa;   pairs     := pair [ &#x22;,&#x22; pairs ]&#xa;   pair      := SlotPath::name &#x22;=&#x22; ordinal&#xa;   ordinal   := int&#xa;   options   := &#x22;?&#x22; baja::Facets&#xa;&#xa;   examples:&#xa;     {zero=0,one=1,two=2,three=3}&#xa;     baja:Weekday&#xa;     baja:Month+{Never=13}&#xa;     {zero=0,one=1,two=2,three=3}?lexicon=foo;&#xa; &lt;/pre&gt;
</description>
<tag name="@author">Brian Frank</tag>
<tag name="@creation">13 Dec 01</tag>
<tag name="@version">$Revision: 25$ $Date: 4/23/08 11:54:57 AM EDT$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="javax.baja.sys.BSimple"/>
</extends>
<implements>
<type class="javax.baja.data.BIDataValue"/>
</implements>
<annotation><type class="javax.baja.nre.annotations.NoSlotomatic"/>
</annotation>
<!-- javax.baja.sys.BEnumRange.make(javax.baja.sys.Type) -->
<method name="make"  public="true" static="true">
<description>
Create a BEnumRange for the specified frozen enum.
</description>
<parameter name="frozenType">
<type class="javax.baja.sys.Type"/>
</parameter>
<return>
<type class="javax.baja.sys.BEnumRange"/>
</return>
</method>

<!-- javax.baja.sys.BEnumRange.make(java.lang.String[]) -->
<method name="make"  public="true" static="true">
<description>
Create an BEnumRange with no frozen range, and a&#xa; dynamic range where the ordinals are the tag array indices.
</description>
<parameter name="tags">
<type class="java.lang.String" dimension="1"/>
</parameter>
<return>
<type class="javax.baja.sys.BEnumRange"/>
</return>
</method>

<!-- javax.baja.sys.BEnumRange.make(int[], java.lang.String[]) -->
<method name="make"  public="true" static="true">
<description>
Create a BEnumRange with no frozen range, and&#xa; the specified dynamic range.
</description>
<parameter name="ordinals">
<type class="int" dimension="1"/>
</parameter>
<parameter name="tags">
<type class="java.lang.String" dimension="1"/>
</parameter>
<return>
<type class="javax.baja.sys.BEnumRange"/>
</return>
</method>

<!-- javax.baja.sys.BEnumRange.make(javax.baja.sys.Type, int[], java.lang.String[]) -->
<method name="make"  public="true" static="true">
<description>
Create a BEnumRange with the specified frozen and dynamic range.
</description>
<parameter name="frozenType">
<type class="javax.baja.sys.Type"/>
</parameter>
<parameter name="ordinals">
<type class="int" dimension="1"/>
</parameter>
<parameter name="tags">
<type class="java.lang.String" dimension="1"/>
</parameter>
<return>
<type class="javax.baja.sys.BEnumRange"/>
</return>
</method>

<!-- javax.baja.sys.BEnumRange.make(javax.baja.sys.Type, int[], java.lang.String[], int) -->
<method name="make"  public="true" static="true">
<description>
Convenience for &lt;code&gt;make(frozenType, ordinals, tags, count, null)&lt;/code&gt;.
</description>
<parameter name="frozenType">
<type class="javax.baja.sys.Type"/>
</parameter>
<parameter name="ordinals">
<type class="int" dimension="1"/>
</parameter>
<parameter name="tags">
<type class="java.lang.String" dimension="1"/>
</parameter>
<parameter name="count">
<type class="int"/>
</parameter>
<return>
<type class="javax.baja.sys.BEnumRange"/>
</return>
</method>

<!-- javax.baja.sys.BEnumRange.make(javax.baja.sys.Type, int[], java.lang.String[], int, javax.baja.sys.BFacets) -->
<method name="make"  public="true" static="true">
<description>
Create a BEnumRange with the specified frozen enum&#xa; range and given dynamic range.  The count parameter&#xa; specifies how many pairs are in the dynamic range arrays.
</description>
<parameter name="frozenType">
<type class="javax.baja.sys.Type"/>
</parameter>
<parameter name="ordinals">
<type class="int" dimension="1"/>
</parameter>
<parameter name="tags">
<type class="java.lang.String" dimension="1"/>
</parameter>
<parameter name="count">
<type class="int"/>
</parameter>
<parameter name="options">
<type class="javax.baja.sys.BFacets"/>
</parameter>
<return>
<type class="javax.baja.sys.BEnumRange"/>
</return>
</method>

<!-- javax.baja.sys.BEnumRange.getOrdinals() -->
<method name="getOrdinals"  public="true">
<description>
Get the ordinal list.
</description>
<return>
<type class="int" dimension="1"/>
</return>
</method>

<!-- javax.baja.sys.BEnumRange.isOrdinal(int) -->
<method name="isOrdinal"  public="true">
<description>
Return if the ordinal identifier is in either the&#xa; frozen enum range or dynamic list of ordinal/tag pairs.
</description>
<parameter name="ordinal">
<type class="int"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.sys.BEnumRange.getTag(int) -->
<method name="getTag"  public="true">
<description>
Get the String for the specified ordinal.
</description>
<parameter name="ordinal">
<type class="int"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.sys.BEnumRange.getDisplayTag(int, javax.baja.sys.Context) -->
<method name="getDisplayTag"  public="true">
<description>
Get the display string for the specified ordinal.  If the&#xa; ordinal doesn&#x27;t map to a specific tag then return the ordinal&#xa; as a decimal string.  If the ordinal maps to the frozen type,&#xa; see the behavior of BFrozenEnum.getDisplayTag().  Otherwise if&#xa; the options contains a &#x22;lexicon&#x22; entry then map to a lexicon,&#xa; where module is the string value of the lexicon option, and tag&#xa; is used as the key.  If no lexicon is provided return the&#xa; unescaped tag.
</description>
<parameter name="ordinal">
<type class="int"/>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.sys.BEnumRange.isTag(java.lang.String) -->
<method name="isTag"  public="true">
<description>
Return if the specified tag maps within the range.
</description>
<parameter name="tag">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.sys.BEnumRange.tagToOrdinal(java.lang.String) -->
<method name="tagToOrdinal"  public="true">
<description>
Get the ordinal associated with the specified tag.
</description>
<parameter name="tag">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.sys.BEnumRange.get(int) -->
<method name="get"  public="true">
<description>
Convenience for &lt;code&gt;get(ordinal, true)&lt;/code&gt;.
</description>
<parameter name="ordinal">
<type class="int"/>
</parameter>
<return>
<type class="javax.baja.sys.BEnum"/>
</return>
</method>

<!-- javax.baja.sys.BEnumRange.get(int, boolean) -->
<method name="get"  public="true">
<description>
Get the enum instance for the specified ordinal.  If&#xa; the ordinal is not found in the range and dynamic&#xa; is true then a new BDynamicEnum is created for the&#xa; specified ordinal using this range.  If dynamic is&#xa; false then an InvalidEnumException is thrown.
</description>
<parameter name="ordinal">
<type class="int"/>
</parameter>
<parameter name="dynamic">
<type class="boolean"/>
</parameter>
<return>
<type class="javax.baja.sys.BEnum"/>
</return>
</method>

<!-- javax.baja.sys.BEnumRange.get(java.lang.String) -->
<method name="get"  public="true">
<description>
Get the enum instance for the specified tag.
</description>
<parameter name="tag">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.sys.BEnum"/>
</return>
</method>

<!-- javax.baja.sys.BEnumRange.isFrozenOrdinal(int) -->
<method name="isFrozenOrdinal"  public="true">
<description>
Return true if the give ordinal is a&#xa; valid ordinal in the frozen range.
</description>
<parameter name="ordinal">
<type class="int"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.sys.BEnumRange.isDynamicOrdinal(int) -->
<method name="isDynamicOrdinal"  public="true">
<description>
Return true if the give ordinal is a&#xa; valid ordinal in the dynamic range.
</description>
<parameter name="ordinal">
<type class="int"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.sys.BEnumRange.getFrozenType() -->
<method name="getFrozenType"  public="true">
<description>
Get Type used for the BFrozenEnum range or null&#xa; if this range has no frozen ordinal/tag pairs.
</description>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.sys.BEnumRange.getOptions() -->
<method name="getOptions"  public="true">
<description>
Get the options for this range stored as a BFacets instance.
</description>
<return>
<type class="javax.baja.sys.BFacets"/>
</return>
</method>

<!-- javax.baja.sys.BEnumRange.isNull() -->
<method name="isNull"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
A range is null if it contains no ordinal/tag pairs.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.sys.BEnumRange.hashCode() -->
<method name="hashCode"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
BEnumRange uses its encodeToString() value&#x27;s hash code.
</description>
<tag name="@since">Niagara 3.4</tag>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.sys.BEnumRange.equals(java.lang.Object) -->
<method name="equals"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Equality is based on both fixed and dynamic range.
</description>
<parameter name="o">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.sys.BEnumRange.encode(java.io.DataOutput) -->
<method name="encode"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
BEnumRange is serialized using writeUTF()&#xa; of the string format.
</description>
<parameter name="out">
<type class="java.io.DataOutput"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.sys.BEnumRange.decode(java.io.DataInput) -->
<method name="decode"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
BEnumRange is serialized using readUTF()&#xa; of the string format.
</description>
<parameter name="in">
<type class="java.io.DataInput"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.sys.BEnumRange.encodeToString() -->
<method name="encodeToString"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Write the BEnumRange&#x27;s value and range&#xa; according to the serialization BNF.
</description>
<return>
<type class="java.lang.String"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.sys.BEnumRange.encodeToStringExpanded() -->
<method name="encodeToStringExpanded"  public="true">
<description>
Encode according to grammar, except if this range&#xa; contains a fixed enum type, then the enum type is&#xa; expanded as part of the dynamic range.  This is useful&#xa; when sending this range into an environment which may&#xa; not have access to the Baja type system.
</description>
<return>
<type class="java.lang.String"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.sys.BEnumRange.decodeFromString(java.lang.String) -->
<method name="decodeFromString"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Read the BEnumRange&#x27;s value and range&#xa; according to the serialization BNF.
</description>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.sys.BEnumRange.toDataValue() -->
<method name="toDataValue"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Return this instance since it&#x27;s already a data value.
</description>
<return>
<type class="javax.baja.data.BIDataValue"/>
</return>
</method>

<!-- javax.baja.sys.BEnumRange.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.sys.BEnumRange.NULL -->
<field name="NULL"  public="true" static="true" final="true">
<type class="javax.baja.sys.BEnumRange"/>
<description>
The null instance is an empty range.
</description>
</field>

<!-- javax.baja.sys.BEnumRange.DEFAULT -->
<field name="DEFAULT"  public="true" static="true" final="true">
<type class="javax.baja.sys.BEnumRange"/>
<description>
The default is &lt;code&gt;NULL&lt;/code&gt;.
</description>
</field>

<!-- javax.baja.sys.BEnumRange.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
