<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="baja" runtimeProfile="rt" qualifiedName="javax.baja.sys.BIMixIn" name="BIMixIn" packageName="javax.baja.sys" public="true" interface="true" abstract="true" category="interface">
<description>
BIMixIn is implemented by BValues which are designed to be &#x22;mixed in&#x22;&#xa; with another class.  A MixIn is basically a mechanism to automatically &#xa; add a dynamic slot to a specific type of component within a ComponentSpace.&#xa; MixIns are registered as agents on the type of parent they are designed&#xa; to mix into.  Then something has to enable the MixIn for a given&#xa; ComponentSpace.  Typically this done by a service which enables an&#xa; associated MixIn in its serviceStarted() callback (this is also the&#xa; most efficient time to do it).  Once a MixIn has been added to a component&#xa; it may be easily looked up using &lt;code&gt;BComponent.getMixin(Type)&lt;/code&gt;.
</description>
<tag name="@author">Brian Frank</tag>
<tag name="@creation">23 Feb 05</tag>
<tag name="@version">$Revision: 3$ $Date: 8/17/07 10:36:03 AM EDT$</tag>
<tag name="@since">Baja 1.0</tag>
<implements>
<type class="javax.baja.agent.BIAgent"/>
</implements>
<!-- javax.baja.sys.BIMixIn.getDisplayNameInParent(javax.baja.sys.Context) -->
<method name="getDisplayNameInParent"  public="true" abstract="true">
<description>
Get the display name used for the property this MixIn &#xa; occupies in it&#x27;s parent component.  The programatic name&#xa; always fixed as the type spec with the colon replaced by&#xa; an underbar.
</description>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.sys.BIMixIn.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
