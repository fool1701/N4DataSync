<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="baja" runtimeProfile="rt" qualifiedName="javax.baja.sys.BIPropertySpace" name="BIPropertySpace" packageName="javax.baja.sys" public="true" interface="true" abstract="true" category="interface">
<description>
BIPropertySpace is an interface implemented by spaces that contain&#xa; BIPropertyContainer objects.  It is used for searching the space for objects&#xa; based on their properties.
</description>
<tag name="@author">Scott Hoye</tag>
<tag name="@creation">28 Jun 2009</tag>
<tag name="@version">$Revision: 1$ $Date: 8/18/09 4:26:55 PM EDT$</tag>
<tag name="@since">Niagara 3.5</tag>
<implements>
<type class="javax.baja.sys.BInterface"/>
</implements>
<!-- javax.baja.sys.BIPropertySpace.findObjects(javax.baja.sys.Type, javax.baja.naming.BOrd, java.lang.String, javax.baja.sys.Context) -->
<method name="findObjects"  public="true" abstract="true">
<description>
Find the objects with a property with the specified name.
</description>
<parameter name="objectType">
<type class="javax.baja.sys.Type"/>
<description>
The common type of the objects to return in the result.&#xa;   If null, the result is not filtered by object type.
</description>
</parameter>
<parameter name="baseOrd">
<type class="javax.baja.naming.BOrd"/>
<description>
The base ord from which to start&#xa;   searching (only objects that are descendants of this base&#xa;   will be included in the result).  If null, the search will include the entire space.
</description>
</parameter>
<parameter name="propertyName">
<type class="java.lang.String"/>
<description>
The name of the property to search for.
</description>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
<description>
The context for the search.
</description>
</parameter>
<return>
<parameterizedType class="javax.baja.sys.Cursor">
<args>
<wildcardType class="?">
<bounds kind="extends">
<type class="javax.baja.sys.BIObject"/>
</bounds>
</wildcardType>
</args>
</parameterizedType>
</return>
</method>

<!-- javax.baja.sys.BIPropertySpace.findObjects(javax.baja.sys.Type, javax.baja.naming.BOrd, java.lang.String, javax.baja.sys.Type, javax.baja.sys.Context) -->
<method name="findObjects"  public="true" abstract="true">
<description>
Find the objects with a property with the specified name and type.
</description>
<parameter name="objectType">
<type class="javax.baja.sys.Type"/>
<description>
The common type of the objects to return in the result.&#xa;   If null, the result is not filtered by object type.
</description>
</parameter>
<parameter name="baseOrd">
<type class="javax.baja.naming.BOrd"/>
<description>
The base ord from which to start&#xa;   searching (only objects that are descendants of this base&#xa;   will be included in the result).  If null, the search will include the entire space.
</description>
</parameter>
<parameter name="propertyName">
<type class="java.lang.String"/>
<description>
The name of the property to search for.
</description>
</parameter>
<parameter name="propertyType">
<type class="javax.baja.sys.Type"/>
<description>
The type of the property to search for.  If null,&#xa;   any types will be included that have the given propertyName.
</description>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
<description>
The context for the search.
</description>
</parameter>
<return>
<parameterizedType class="javax.baja.sys.Cursor">
<args>
<wildcardType class="?">
<bounds kind="extends">
<type class="javax.baja.sys.BIObject"/>
</bounds>
</wildcardType>
</args>
</parameterizedType>
</return>
</method>

<!-- javax.baja.sys.BIPropertySpace.findObjects(javax.baja.sys.Type, javax.baja.naming.BOrd, java.lang.String, javax.baja.sys.BValue, javax.baja.sys.Context) -->
<method name="findObjects"  public="true" abstract="true">
<description>
Find the objects with the specified property name and value.
</description>
<parameter name="objectType">
<type class="javax.baja.sys.Type"/>
<description>
The common type of the objects to return in the result.&#xa;   If null, the result is not filtered by object type.
</description>
</parameter>
<parameter name="baseOrd">
<type class="javax.baja.naming.BOrd"/>
<description>
The base ord from which to start&#xa;   searching (only objects that are descendants of this base&#xa;   will be included in the result).  If null, the search will include the entire space.
</description>
</parameter>
<parameter name="propertyName">
<type class="java.lang.String"/>
<description>
The name of the property to search for.
</description>
</parameter>
<parameter name="propertyValue">
<type class="javax.baja.sys.BValue"/>
<description>
The value of the property to search for.
</description>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
<description>
The context for the search.
</description>
</parameter>
<return>
<parameterizedType class="javax.baja.sys.Cursor">
<args>
<wildcardType class="?">
<bounds kind="extends">
<type class="javax.baja.sys.BIObject"/>
</bounds>
</wildcardType>
</args>
</parameterizedType>
</return>
</method>

<!-- javax.baja.sys.BIPropertySpace.findDistinctValues(javax.baja.sys.Type, javax.baja.naming.BOrd, java.lang.String, javax.baja.sys.Context) -->
<method name="findDistinctValues"  public="true" abstract="true">
<description>
Find the distinct values for the specified property name within the space.
</description>
<parameter name="objectType">
<type class="javax.baja.sys.Type"/>
<description>
The common type of the objects to return in the result.&#xa;   If null, the result is not filtered by object type.
</description>
</parameter>
<parameter name="baseOrd">
<type class="javax.baja.naming.BOrd"/>
<description>
The base ord from which to start&#xa;   searching (only objects that are descendants of this base&#xa;   will be included in the result).  If null, the search will include the entire space.
</description>
</parameter>
<parameter name="propertyName">
<type class="java.lang.String"/>
<description>
The name of the property to search for.
</description>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
<description>
The context for the search.
</description>
</parameter>
<return>
<parameterizedType class="javax.baja.sys.Cursor">
<args>
<wildcardType class="?">
<bounds kind="extends">
<type class="javax.baja.sys.BIObject"/>
</bounds>
</wildcardType>
</args>
</parameterizedType>
</return>
</method>

<!-- javax.baja.sys.BIPropertySpace.findDistinctValues(javax.baja.sys.Type, javax.baja.naming.BOrd, java.lang.String, javax.baja.sys.Type, javax.baja.sys.Context) -->
<method name="findDistinctValues"  public="true" abstract="true">
<description>
Find the distinct values for the specified property name and type within the space.
</description>
<parameter name="objectType">
<type class="javax.baja.sys.Type"/>
<description>
The common type of the objects to return in the result.&#xa;   If null, the result is not filtered by object type.
</description>
</parameter>
<parameter name="baseOrd">
<type class="javax.baja.naming.BOrd"/>
<description>
The base ord from which to start&#xa;   searching (only objects that are descendants of this base&#xa;   will be included in the result).  If null, the search will include the entire space.
</description>
</parameter>
<parameter name="propertyName">
<type class="java.lang.String"/>
<description>
The name of the property to search for.
</description>
</parameter>
<parameter name="propertyType">
<type class="javax.baja.sys.Type"/>
<description>
The type of the property to search for.  If null,&#xa;   any types will be included that have the given propertyName.
</description>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
<description>
The context for the search.
</description>
</parameter>
<return>
<parameterizedType class="javax.baja.sys.Cursor">
<args>
<wildcardType class="?">
<bounds kind="extends">
<type class="javax.baja.sys.BIObject"/>
</bounds>
</wildcardType>
</args>
</parameterizedType>
</return>
</method>

<!-- javax.baja.sys.BIPropertySpace.addIndex(java.lang.String, javax.baja.sys.Context) -->
<method name="addIndex"  public="true" abstract="true">
<description>
Index the specified property.  Indexed properties should be more efficient to search.&#xa; Implementation of indexing is optional.
</description>
<parameter name="propertyName">
<type class="java.lang.String"/>
<description>
The name of the property to index.
</description>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
<description>
The context for the operation.
</description>
</parameter>
<return>
<type class="boolean"/>
<description>
Returns true if the requested index was created, false otherwise.
</description>
</return>
</method>

<!-- javax.baja.sys.BIPropertySpace.removeIndex(java.lang.String, javax.baja.sys.Context) -->
<method name="removeIndex"  public="true" abstract="true">
<description>
Remove the index for the specified property.
</description>
<parameter name="propertyName">
<type class="java.lang.String"/>
<description>
The name of the property that should no longer be indexed.
</description>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
<description>
The context for the operation.
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.sys.BIPropertySpace.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
