<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="baja" runtimeProfile="rt" qualifiedName="javax.baja.sys.BIService" name="BIService" packageName="javax.baja.sys" public="true" interface="true" abstract="true" category="interface">
<description>
BIService is the interface implemented by BComponents which&#xa; wish to be managed by the framework&#x27;s service registry.
</description>
<tag name="@author">Brian Frank</tag>
<tag name="@creation">2 May 02</tag>
<tag name="@version">$Revision: 4$ $Date: 3/28/05 9:23:10 AM EST$</tag>
<tag name="@since">Baja 1.0</tag>
<implements>
<type class="javax.baja.sys.BInterface"/>
</implements>
<!-- javax.baja.sys.BIService.getServiceTypes() -->
<method name="getServiceTypes"  public="true" abstract="true">
<description>
Return the types to be registered under.  The service &#xa; will be automatically registered during station bootstrap, &#xa; and unregistered if unmounted.  The component must extend or &#xa; implement all of the types returned by this method.  The &#xa; result of this method should be static, that is it should never&#xa; change across instances nor over time.
</description>
<return>
<type class="javax.baja.sys.Type" dimension="1"/>
</return>
</method>

<!-- javax.baja.sys.BIService.serviceStarted() -->
<method name="serviceStarted"  public="true" abstract="true">
<description>
This method is called during station bootstrap for the service&#xa; to initialize itself.  At this point the service may lookup&#xa; other services using &lt;code&gt;Sys.getService()&lt;/code&gt;, but general&#xa; components have not been started.
</description>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.sys.BIService.serviceStopped() -->
<method name="serviceStopped"  public="true" abstract="true">
<description>
This method is called when a registered service is &#xa; unmounted from the namespace.
</description>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.sys.BIService.completesStarted() -->
<method name="completesStarted"  public="true" default="true">
<description>
If true, &lt;code&gt;<see ref="javax.baja.sys.BIService#whenServiceStarted()">#whenServiceStarted()</see>&lt;/code&gt; is expected&#xa; to be completed for this service by the service itself, otherwise&#xa; the service manager will complete it after it invokes&#xa; &lt;code&gt;<see ref="javax.baja.sys.BIService#serviceStarted()">#serviceStarted()</see>&lt;/code&gt;.
</description>
<tag name="@since">Niagara 4.0</tag>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.sys.BIService.whenServiceStarted() -->
<method name="whenServiceStarted"  public="true" default="true">
<description/>
<tag name="@since">Niagara 4.0</tag>
<return>
<parameterizedType class="java.util.concurrent.CompletableFuture">
<args>
<type class="java.lang.Void"/>
</args>
</parameterizedType>
<description>
a future that completes when this service&#x27;s start finishes
</description>
</return>
</method>

<!-- javax.baja.sys.BIService.completesStopped() -->
<method name="completesStopped"  public="true" default="true">
<description>
If true, &lt;code&gt;<see ref="javax.baja.sys.BIService#whenServiceStopped()">#whenServiceStopped()</see>&lt;/code&gt; is expected&#xa; to be completed for this service by the service itself, otherwise&#xa; the service manager will complete it after it&#xa; invokes &lt;code&gt;<see ref="javax.baja.sys.BIService#serviceStopped()">#serviceStopped()</see>&lt;/code&gt;.
</description>
<tag name="@since">Niagara 4.0</tag>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.sys.BIService.whenServiceStopped() -->
<method name="whenServiceStopped"  public="true" default="true">
<description/>
<tag name="@since">Niagara 4.0</tag>
<return>
<parameterizedType class="java.util.concurrent.CompletableFuture">
<args>
<type class="java.lang.Void"/>
</args>
</parameterizedType>
<description>
a future that completes when this service&#x27;s stop finishes
</description>
</return>
</method>

<!-- javax.baja.sys.BIService.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
