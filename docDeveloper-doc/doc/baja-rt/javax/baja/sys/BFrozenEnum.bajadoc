<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="baja" runtimeProfile="rt" qualifiedName="javax.baja.sys.BFrozenEnum" name="BFrozenEnum" packageName="javax.baja.sys" public="true" abstract="true">
<description>
The BFrozenEnum is the base class of strong typed enums&#xa; defined at compile time.  The range of BFrozenEnums is &#xa; defined using introspection rules.&#xa;&#xa;&lt;pre&gt;&#xa;&amp;#64;NiagaraType&#xa;&amp;#64;NiagaraEnum(&#xa;  range = {&#xa;    &amp;#64;Range(&#x22;tag0&#x22;),&#xa;    &amp;#64;Range(&#x22;tag1&#x22;)&#xa;  },&#xa;  default = &#x22;tag1&#x22;&#xa;)&#xa;public final class BMyEnum&#xa;  extends BFrozenEnum&#xa;{&#xa;}&#xa;&lt;/pre&gt;
</description>
<tag name="@author">Brian Frank</tag>
<tag name="@creation">1 Feb 00</tag>
<tag name="@version">$Revision: 44$ $Date: 3/28/05 9:23:10 AM EST$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="javax.baja.sys.BEnum"/>
</extends>
<annotation><type class="javax.baja.nre.annotations.NoSlotomatic"/>
</annotation>
<!-- javax.baja.sys.BFrozenEnum() -->
<constructor name="BFrozenEnum" protected="true">
<description/>
</constructor>

<!-- javax.baja.sys.BFrozenEnum(int) -->
<constructor name="BFrozenEnum" protected="true">
<parameter name="ordinal">
<type class="int"/>
<description>
int cursor into range.
</description>
</parameter>
<description>
Construct a BFrozenEnum with its ordinal value.  &#xa; No range checking is performed;  it is assumed&#xa; that subclasses only provide a private constructor&#xa; and declare all instances statically.
</description>
</constructor>

<!-- javax.baja.sys.BFrozenEnum.isActive() -->
<method name="isActive"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Default implementation of BEnum is to return false&#xa; for an ordinal of zero and true for all non-zero ordinals.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.sys.BFrozenEnum.getOrdinal() -->
<method name="getOrdinal"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="int"/>
<description>
The ordinal which uniquely identifies this enum.
</description>
</return>
</method>

<!-- javax.baja.sys.BFrozenEnum.getTag() -->
<method name="getTag"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get the String identifier of this enum value.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.sys.BFrozenEnum.getDisplayTag(javax.baja.sys.Context) -->
<method name="getDisplayTag"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get a user readable version of the tag identifier.  &#xa; Display name is resolved according to the same rules as &#xa; &lt;code&gt;Slot.getDisplayName()&lt;/code&gt;.  Display tags are&#xa; defined in the modules lexicon using the tag name as &#xa; the key.  If undefined in the lexicon, then result of&#xa; &lt;code&gt;TextUtil.toFriendly(tag)&lt;/code&gt; is used.
</description>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.sys.BFrozenEnum.getRange() -->
<method name="getRange"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get the range which is the set of instances.
</description>
<return>
<type class="javax.baja.sys.BEnumRange"/>
</return>
</method>

<!-- javax.baja.sys.BFrozenEnum.hashCode() -->
<method name="hashCode"  public="true" final="true">
<description/>
<return>
<type class="int"/>
<description>
integer hash code which is the ordinal.
</description>
</return>
</method>

<!-- javax.baja.sys.BFrozenEnum.equals(java.lang.Object) -->
<method name="equals"  public="true" final="true">
<description/>
<parameter name="obj">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="boolean"/>
<description>
true if obj has the same class type&#xa;   as this, with identical ordinals.
</description>
</return>
</method>

<!-- javax.baja.sys.BFrozenEnum.toString(javax.baja.sys.Context) -->
<method name="toString"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="java.lang.String"/>
<description>
String representation of this BEnum.
</description>
</return>
</method>

<!-- javax.baja.sys.BFrozenEnum.encode(java.io.DataOutput) -->
<method name="encode"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
BEnum is serialized using writeInt() of&#xa; the ordinal value.
</description>
<parameter name="out">
<type class="java.io.DataOutput"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.sys.BFrozenEnum.decode(java.io.DataInput) -->
<method name="decode"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
BEnum is unserialized using readInt() of&#xa; the ordinal value.
</description>
<parameter name="in">
<type class="java.io.DataInput"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.sys.BFrozenEnum.encodeToString() -->
<method name="encodeToString"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Write the primitive in text format using the name.
</description>
<return>
<type class="java.lang.String"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.sys.BFrozenEnum.decodeFromString(java.lang.String) -->
<method name="decodeFromString"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Read the primitive from text format.
</description>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.sys.BFrozenEnum.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.sys.BFrozenEnum.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
