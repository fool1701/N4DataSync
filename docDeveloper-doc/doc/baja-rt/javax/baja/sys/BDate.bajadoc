<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="baja" runtimeProfile="rt" qualifiedName="javax.baja.sys.BDate" name="BDate" packageName="javax.baja.sys" public="true" final="true">
<description>
BDate represents a specific day, month, and year.
</description>
<tag name="@author">Mike Jarmy</tag>
<tag name="@creation">08 Mar 10</tag>
<tag name="@version">$Revision: 3$ $Date: 3/25/10 2:48:57 PM EDT$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="javax.baja.sys.BSimple"/>
</extends>
<implements>
<type class="javax.baja.sys.BIDate"/>
</implements>
<implements>
<type class="javax.baja.sys.BIComparable"/>
</implements>
<annotation><type class="javax.baja.nre.annotations.NoSlotomatic"/>
</annotation>
<!-- javax.baja.sys.BDate.make() -->
<method name="make"  public="true" static="true">
<description>
Construct an instance which maps to the current day.
</description>
<return>
<type class="javax.baja.sys.BDate"/>
</return>
</method>

<!-- javax.baja.sys.BDate.today() -->
<method name="today"  public="true" static="true">
<description>
Construct an instance which maps to the current day.
</description>
<return>
<type class="javax.baja.sys.BDate"/>
</return>
</method>

<!-- javax.baja.sys.BDate.make(javax.baja.sys.BAbsTime) -->
<method name="make"  public="true" static="true">
<description>
Construct a date using the day, month, and year of the given BAbsTime.
</description>
<parameter name="absTime">
<type class="javax.baja.sys.BAbsTime"/>
</parameter>
<return>
<type class="javax.baja.sys.BDate"/>
</return>
</method>

<!-- javax.baja.sys.BDate.make(javax.baja.sys.BAbsTime, javax.baja.timezone.BTimeZone) -->
<method name="make"  public="true" static="true">
<description>
Construct a date using the day, month and year of the given BAbsTime, along with the&#xa; given timezone. This method calls &lt;code&gt;BAbsTime.make(absTime, zone)&lt;/code&gt;, and&#xa; then uses the resulting new BAbsTime&#x27;s day, month and year.
</description>
<parameter name="absTime">
<type class="javax.baja.sys.BAbsTime"/>
</parameter>
<parameter name="zone">
<type class="javax.baja.timezone.BTimeZone"/>
</parameter>
<return>
<type class="javax.baja.sys.BDate"/>
</return>
</method>

<!-- javax.baja.sys.BDate.make(int, javax.baja.sys.BMonth, int) -->
<method name="make"  public="true" static="true">
<description>
Construct a date using the day, month and year.
</description>
<parameter name="year">
<type class="int"/>
</parameter>
<parameter name="month">
<type class="javax.baja.sys.BMonth"/>
</parameter>
<parameter name="day">
<type class="int"/>
</parameter>
<return>
<type class="javax.baja.sys.BDate"/>
</return>
</method>

<!-- javax.baja.sys.BDate.makeDayOfYear(int, int) -->
<method name="makeDayOfYear"  public="true" static="true">
<description>
Construct a BDate for the specified day of the year.
</description>
<parameter name="year">
<type class="int"/>
</parameter>
<parameter name="dayOfYear">
<type class="int"/>
</parameter>
<return>
<type class="javax.baja.sys.BDate"/>
</return>
</method>

<!-- javax.baja.sys.BDate.make(java.lang.String) -->
<method name="make"  public="true" static="true">
<description>
Factory from string encoding.
</description>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.sys.BDate"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.sys.BDate.compareTo(java.lang.Object) -->
<method name="compareTo"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Compare to another BDate.
</description>
<parameter name="obj">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="int"/>
<description>
a negative integer, zero, or a&#xa;    positive integer as this object is less&#xa;    than, equal to, or greater than the&#xa;    specified object.
</description>
</return>
</method>

<!-- javax.baja.sys.BDate.isBefore(javax.baja.sys.BDate) -->
<method name="isBefore"  public="true">
<description/>
<parameter name="x">
<type class="javax.baja.sys.BDate"/>
</parameter>
<return>
<type class="boolean"/>
<description>
true if the specified date is before this date.
</description>
</return>
</method>

<!-- javax.baja.sys.BDate.isAfter(javax.baja.sys.BDate) -->
<method name="isAfter"  public="true">
<description/>
<parameter name="x">
<type class="javax.baja.sys.BDate"/>
</parameter>
<return>
<type class="boolean"/>
<description>
true if the specified date is after this date.
</description>
</return>
</method>

<!-- javax.baja.sys.BDate.hashCode() -->
<method name="hashCode"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
BDate uses its encodeToString() value&#x27;s hash code.
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.sys.BDate.equals(java.lang.Object) -->
<method name="equals"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="obj">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.sys.BDate.toString(javax.baja.sys.Context) -->
<method name="toString"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="java.lang.String"/>
<description>
encodeToString()
</description>
</return>
</method>

<!-- javax.baja.sys.BDate.encode(java.io.DataOutput) -->
<method name="encode"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
BDate is serialized using writeInt()&#xa; for the day, month, and year.
</description>
<parameter name="out">
<type class="java.io.DataOutput"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.sys.BDate.decode(java.io.DataInput) -->
<method name="decode"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
BDate is unserialized using readInt()&#xa; for the day, month, and year.
</description>
<parameter name="in">
<type class="java.io.DataInput"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.sys.BDate.encodeToString() -->
<method name="encodeToString"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Write the date in text format using the ISO 8601&#xa; standard format of &#x22;yyyy-mm-dd&#x22;.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.sys.BDate.decodeFromString(java.lang.String) -->
<method name="decodeFromString"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Read the date from text format. This&#xa; text must strictly conform to the ISO 8601 standard&#xa; format of &#x22;yyyy-mm-dd&#x22;.
</description>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.sys.BDate.isNull() -->
<method name="isNull"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Test for the null value.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.sys.BDate.getYear() -->
<method name="getYear"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="int"/>
<description>
The year as a four digit integer (ie 2001).
</description>
</return>
</method>

<!-- javax.baja.sys.BDate.getMonth() -->
<method name="getMonth"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.BMonth"/>
<description>
the month as a BMonth.
</description>
</return>
</method>

<!-- javax.baja.sys.BDate.getDay() -->
<method name="getDay"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="int"/>
<description>
The day: 1-31.
</description>
</return>
</method>

<!-- javax.baja.sys.BDate.getWeekday() -->
<method name="getWeekday"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.BWeekday"/>
<description>
the weekday as a BWeekday enum.
</description>
</return>
</method>

<!-- javax.baja.sys.BDate.getDayOfYear() -->
<method name="getDayOfYear"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get the day of the year for this BDate.  An&#xa; example is that Feb. 1, 2000 would return 32.  The&#xa; method does account for leap years.
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.sys.BDate.isLeapDay() -->
<method name="isLeapDay"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Return if today is Feb 29.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.sys.BDate.add(int) -->
<method name="add"  public="true">
<description>
Add a number of days to this day, and return the new day.
</description>
<parameter name="days">
<type class="int"/>
</parameter>
<return>
<type class="javax.baja.sys.BDate"/>
</return>
</method>

<!-- javax.baja.sys.BDate.subtract(int) -->
<method name="subtract"  public="true">
<description>
Subtract a number of days from this day, and return the new day.
</description>
<parameter name="days">
<type class="int"/>
</parameter>
<return>
<type class="javax.baja.sys.BDate"/>
</return>
</method>

<!-- javax.baja.sys.BDate.delta(javax.baja.sys.BDate) -->
<method name="delta"  public="true">
<description>
Compute the number of days between this day and the specified day.  If&#xa; d2 is after this day, the result will be positive.  If d2 is before&#xa; this day, the result will be negative.
</description>
<parameter name="d2">
<type class="javax.baja.sys.BDate"/>
<description>
The day to compare against.
</description>
</parameter>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.sys.BDate.nextDay() -->
<method name="nextDay"  public="true">
<description>
The next day.
</description>
<return>
<type class="javax.baja.sys.BDate"/>
</return>
</method>

<!-- javax.baja.sys.BDate.prevDay() -->
<method name="prevDay"  public="true">
<description>
The previous day.
</description>
<return>
<type class="javax.baja.sys.BDate"/>
</return>
</method>

<!-- javax.baja.sys.BDate.nextMonth() -->
<method name="nextMonth"  public="true">
<description>
The same day in the next month.  If&#xa; this day is greater than the last day in the&#xa; next month, then cap the day to the next month&#x27;s&#xa; last day.  If this dates&#x27;s day is the last day&#xa; in this month, then we automatically set the&#xa; month to the next month&#x27;s last day.
</description>
<return>
<type class="javax.baja.sys.BDate"/>
</return>
</method>

<!-- javax.baja.sys.BDate.prevMonth() -->
<method name="prevMonth"  public="true">
<description>
The same day in previous month. If&#xa; this day is greater than the last day in the&#xa; prev month, then cap the day to the prev month&#x27;s&#xa; last day.  If this dates&#x27;s day is the last day&#xa; in this month, then we automatically set the&#xa; month to the prev month&#x27;s last day.
</description>
<return>
<type class="javax.baja.sys.BDate"/>
</return>
</method>

<!-- javax.baja.sys.BDate.nextYear() -->
<method name="nextYear"  public="true">
<description>
Get the day in next year.  If today&#xa; is a leap day, then return next year Feb 28.
</description>
<return>
<type class="javax.baja.sys.BDate"/>
</return>
</method>

<!-- javax.baja.sys.BDate.prevYear() -->
<method name="prevYear"  public="true">
<description>
Get the same day in prev year.  If today&#xa; is a leap day, then return prev year Feb 28.
</description>
<return>
<type class="javax.baja.sys.BDate"/>
</return>
</method>

<!-- javax.baja.sys.BDate.next(javax.baja.sys.BWeekday) -->
<method name="next"  public="true">
<description>
Get the next day of the specified weekday. If&#xa; today is the specified weekday, then return one&#xa; week from now.
</description>
<parameter name="weekday">
<type class="javax.baja.sys.BWeekday"/>
</parameter>
<return>
<type class="javax.baja.sys.BDate"/>
</return>
</method>

<!-- javax.baja.sys.BDate.prev(javax.baja.sys.BWeekday) -->
<method name="prev"  public="true">
<description>
Get the prev day of the specified weekday. If&#xa; today is the specified weekday, then return one&#xa; week before now.
</description>
<parameter name="weekday">
<type class="javax.baja.sys.BWeekday"/>
</parameter>
<return>
<type class="javax.baja.sys.BDate"/>
</return>
</method>

<!-- javax.baja.sys.BDate.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.sys.BDate.DEFAULT -->
<field name="DEFAULT"  public="true" static="true" final="true">
<type class="javax.baja.sys.BDate"/>
<description>
The default BDate constant is Jan 1st, 1970.
</description>
</field>

<!-- javax.baja.sys.BDate.NULL -->
<field name="NULL"  public="true" static="true" final="true">
<type class="javax.baja.sys.BDate"/>
<description>
The default BDate.
</description>
</field>

<!-- javax.baja.sys.BDate.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
