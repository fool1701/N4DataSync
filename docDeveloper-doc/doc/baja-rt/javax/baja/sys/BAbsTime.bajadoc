<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="baja" runtimeProfile="rt" qualifiedName="javax.baja.sys.BAbsTime" name="BAbsTime" packageName="javax.baja.sys" public="true" final="true">
<description>
BAbsTime encapsulates an absolute point in time&#xa; relative to a given time zone.  Its a Baja simple type&#xa; that standardizes to UTC millis since 1 Jan 70 (the&#xa; Java Epoch).
</description>
<tag name="@author">Brian Frank</tag>
<tag name="@creation">11 Feb 00</tag>
<tag name="@version">$Revision: 86$ $Date: 9/21/10 3:59:55 PM EDT$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="javax.baja.sys.BSimple"/>
</extends>
<implements>
<type class="javax.baja.sys.BIDate"/>
</implements>
<implements>
<type class="javax.baja.sys.BITime"/>
</implements>
<implements>
<type class="javax.baja.sys.BIComparable"/>
</implements>
<implements>
<type class="javax.baja.data.BIDataValue"/>
</implements>
<annotation><type class="javax.baja.nre.annotations.NoSlotomatic"/>
</annotation>
<!-- javax.baja.sys.BAbsTime.make() -->
<method name="make"  public="true" static="true">
<description>
Construct an instance which maps to current&#xa; time with the default time zone.
</description>
<return>
<type class="javax.baja.sys.BAbsTime"/>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.now() -->
<method name="now"  public="true" static="true">
<description>
Construct an instance which maps to current&#xa; time with the default time zone.
</description>
<return>
<type class="javax.baja.sys.BAbsTime"/>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.make(long) -->
<method name="make"  public="true" static="true">
<description>
Constructor with a millis since epoch using&#xa; the default time zone.
</description>
<parameter name="millis">
<type class="long"/>
</parameter>
<return>
<type class="javax.baja.sys.BAbsTime"/>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.make(long, javax.baja.timezone.BTimeZone) -->
<method name="make"  public="true" static="true">
<description>
Constructor with millis since epoch, and a&#xa; given time zone.
</description>
<parameter name="millis">
<type class="long"/>
</parameter>
<parameter name="timeZone">
<type class="javax.baja.timezone.BTimeZone"/>
</parameter>
<return>
<type class="javax.baja.sys.BAbsTime"/>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.make(int, javax.baja.sys.BMonth, int) -->
<method name="make"  public="true" static="true">
<description>
Constructor defaulting hours, minutes, seconds and millis&#xa; to zero, and using default timezone.
</description>
<parameter name="year">
<type class="int"/>
</parameter>
<parameter name="month">
<type class="javax.baja.sys.BMonth"/>
</parameter>
<parameter name="day">
<type class="int"/>
</parameter>
<return>
<type class="javax.baja.sys.BAbsTime"/>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.make(int, javax.baja.sys.BMonth, int, int, int) -->
<method name="make"  public="true" static="true">
<description>
Constructor defaulting seconds and millis&#xa; to zero, and using default timezone.
</description>
<parameter name="year">
<type class="int"/>
</parameter>
<parameter name="month">
<type class="javax.baja.sys.BMonth"/>
</parameter>
<parameter name="day">
<type class="int"/>
</parameter>
<parameter name="hour">
<type class="int"/>
</parameter>
<parameter name="min">
<type class="int"/>
</parameter>
<return>
<type class="javax.baja.sys.BAbsTime"/>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.make(int, javax.baja.sys.BMonth, int, int, int, int, int) -->
<method name="make"  public="true" static="true">
<description>
Constructor with all fields using default timezone.
</description>
<parameter name="year">
<type class="int"/>
</parameter>
<parameter name="month">
<type class="javax.baja.sys.BMonth"/>
</parameter>
<parameter name="day">
<type class="int"/>
</parameter>
<parameter name="hour">
<type class="int"/>
</parameter>
<parameter name="min">
<type class="int"/>
</parameter>
<parameter name="sec">
<type class="int"/>
</parameter>
<parameter name="millis">
<type class="int"/>
</parameter>
<return>
<type class="javax.baja.sys.BAbsTime"/>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.make(int, javax.baja.sys.BMonth, int, int, int, int, int, javax.baja.timezone.BTimeZone) -->
<method name="make"  public="true" static="true">
<description>
Constructor for all fields.
</description>
<parameter name="year">
<type class="int"/>
</parameter>
<parameter name="month">
<type class="javax.baja.sys.BMonth"/>
</parameter>
<parameter name="day">
<type class="int"/>
</parameter>
<parameter name="hour">
<type class="int"/>
</parameter>
<parameter name="min">
<type class="int"/>
</parameter>
<parameter name="sec">
<type class="int"/>
</parameter>
<parameter name="millis">
<type class="int"/>
</parameter>
<parameter name="timeZone">
<type class="javax.baja.timezone.BTimeZone"/>
</parameter>
<return>
<type class="javax.baja.sys.BAbsTime"/>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.make(int, javax.baja.sys.BMonth, int, int, int, int, int, javax.baja.timezone.BTimeZone, javax.baja.sys.Context) -->
<method name="make"  public="true" static="true">
<description>
Constructor for all fields.   If the given context contains the &lt;code&gt;TIME_MODE_FACET&lt;/code&gt; facet,&#xa; the time will be interpreted accordingly, otherwise it will be interpreted according to the &#xa; rules for &lt;code&gt;TIME_MODE_DEFAULT&lt;/code&gt;.
</description>
<tag name="@see">BAbsTime#TIME_MODE_FACET</tag>
<tag name="@since">Niagara 3.5</tag>
<parameter name="year">
<type class="int"/>
</parameter>
<parameter name="month">
<type class="javax.baja.sys.BMonth"/>
</parameter>
<parameter name="day">
<type class="int"/>
</parameter>
<parameter name="hour">
<type class="int"/>
</parameter>
<parameter name="min">
<type class="int"/>
</parameter>
<parameter name="sec">
<type class="int"/>
</parameter>
<parameter name="millis">
<type class="int"/>
</parameter>
<parameter name="timeZone">
<type class="javax.baja.timezone.BTimeZone"/>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="javax.baja.sys.BAbsTime"/>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.makeCalendar(int, javax.baja.sys.BMonth, int, int, int, int, int, javax.baja.timezone.BTimeZone, javax.baja.sys.Context) -->
<method name="makeCalendar"  public="true" static="true">
<description>
Returns a java.util.Calendar object for the given date, wall time, and &#xa; BTimeZone.  If the given context contains the &lt;code&gt;TIME_MODE_FACET&lt;/code&gt; facet,&#xa; the time will be interpreted accordingly, otherwise it will be interpreted according to the &#xa; rules for &lt;code&gt;TIME_MODE_DEFAULT&lt;/code&gt;.
</description>
<tag name="@see">BAbsTime#TIME_MODE_FACET</tag>
<tag name="@since">Niagara 3.5</tag>
<parameter name="year">
<type class="int"/>
</parameter>
<parameter name="month">
<type class="javax.baja.sys.BMonth"/>
</parameter>
<parameter name="day">
<type class="int"/>
</parameter>
<parameter name="hour">
<type class="int"/>
</parameter>
<parameter name="min">
<type class="int"/>
</parameter>
<parameter name="sec">
<type class="int"/>
</parameter>
<parameter name="millis">
<type class="int"/>
</parameter>
<parameter name="timeZone">
<type class="javax.baja.timezone.BTimeZone"/>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="java.util.Calendar"/>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.make(javax.baja.sys.BAbsTime, javax.baja.sys.BTime) -->
<method name="make"  public="true" static="true">
<description>
The resulting instance represents the date and timezone of the first&#xa; argument and the time of day of the second.
</description>
<parameter name="date">
<type class="javax.baja.sys.BAbsTime"/>
</parameter>
<parameter name="time">
<type class="javax.baja.sys.BTime"/>
</parameter>
<return>
<type class="javax.baja.sys.BAbsTime"/>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.make(javax.baja.sys.BDate, javax.baja.sys.BTime, javax.baja.timezone.BTimeZone) -->
<method name="make"  public="true" static="true">
<description>
Construct a BAbsTime from a date, time, and timezone.
</description>
<parameter name="date">
<type class="javax.baja.sys.BDate"/>
</parameter>
<parameter name="time">
<type class="javax.baja.sys.BTime"/>
</parameter>
<parameter name="zone">
<type class="javax.baja.timezone.BTimeZone"/>
</parameter>
<return>
<type class="javax.baja.sys.BAbsTime"/>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.make(javax.baja.sys.BAbsTime, javax.baja.timezone.BTimeZone) -->
<method name="make"  public="true" static="true">
<description>
Construct a BAbsTime for the same instant in time&#xa; but relative to another time zone.
</description>
<parameter name="absTime">
<type class="javax.baja.sys.BAbsTime"/>
</parameter>
<parameter name="timeZone">
<type class="javax.baja.timezone.BTimeZone"/>
</parameter>
<return>
<type class="javax.baja.sys.BAbsTime"/>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.makeDayOfYear(int, int, int, int, int, int, javax.baja.timezone.BTimeZone) -->
<method name="makeDayOfYear"  public="true" static="true">
<description>
Construct a BAbsTime for the specified time on the&#xa; specified day of the year.
</description>
<parameter name="year">
<type class="int"/>
</parameter>
<parameter name="dayOfYear">
<type class="int"/>
</parameter>
<parameter name="hour">
<type class="int"/>
</parameter>
<parameter name="min">
<type class="int"/>
</parameter>
<parameter name="sec">
<type class="int"/>
</parameter>
<parameter name="ms">
<type class="int"/>
</parameter>
<parameter name="timeZone">
<type class="javax.baja.timezone.BTimeZone"/>
</parameter>
<return>
<type class="javax.baja.sys.BAbsTime"/>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.make(java.lang.String) -->
<method name="make"  public="true" static="true">
<description>
Factory from string encoding.
</description>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.sys.BAbsTime"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.sys.BAbsTime.getMillis() -->
<method name="getMillis"  public="true">
<description/>
<return>
<type class="long"/>
<description>
millis since the epoch relative to UTC.  This&#xa;    result is independent of this BAbsTime&#x27;s time zone.
</description>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.getYear() -->
<method name="getYear"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="int"/>
<description>
The year as a four digit integer (ie 2001).
</description>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.getMonth() -->
<method name="getMonth"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.BMonth"/>
<description>
the month as a BMonth.
</description>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.getDay() -->
<method name="getDay"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="int"/>
<description>
The day: 1-31.
</description>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.getHour() -->
<method name="getHour"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="int"/>
<description>
The hour: 0-23.
</description>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.getMinute() -->
<method name="getMinute"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="int"/>
<description>
The minute: 0-59.
</description>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.getSecond() -->
<method name="getSecond"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="int"/>
<description>
The seconds: 0-59.
</description>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.getMillisecond() -->
<method name="getMillisecond"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="int"/>
<description>
The milliseconds: 0-999.
</description>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.getWeekday() -->
<method name="getWeekday"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.BWeekday"/>
<description>
the weekday as a BWeekday enum.
</description>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.getWeekday(int, javax.baja.sys.BMonth, int) -->
<method name="getWeekday"  public="true" static="true">
<description>
Get the day of the week for the specified date.
</description>
<parameter name="year">
<type class="int"/>
</parameter>
<parameter name="month">
<type class="javax.baja.sys.BMonth"/>
</parameter>
<parameter name="day">
<type class="int"/>
</parameter>
<return>
<type class="javax.baja.sys.BWeekday"/>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.getTimeOfDayMillis() -->
<method name="getTimeOfDayMillis"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get the number of milliseconds into the day&#xa; for this BAbsTime.  An example is that 1:00 AM&#xa; would return 3600000.
</description>
<return>
<type class="long"/>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.getDayOfYear() -->
<method name="getDayOfYear"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get the day of the year for this BAbsTime.  An&#xa; example is that Feb. 1, 2000 would return 32.  The&#xa; method does account for leap years.
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.getDate() -->
<method name="getDate"  public="true">
<description/>
<return>
<type class="javax.baja.sys.BDate"/>
<description>
A date using the day, month, and year of this BAbsTime,&#xa; relative to this BAbsTime&#x27;s time zone.
</description>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.getTime() -->
<method name="getTime"  public="true">
<description/>
<return>
<type class="javax.baja.sys.BTime"/>
<description>
A time using the hour, minute, second, and millisecond of this BAbsTime,&#xa; relative to this BAbsTime&#x27;s time zone.
</description>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.getTimeZone() -->
<method name="getTimeZone"  public="true">
<description/>
<return>
<type class="javax.baja.timezone.BTimeZone"/>
<description>
BTimeZone this BAbsTime&#x27;s fields are relative to.
</description>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.getTimeZoneOffset() -->
<method name="getTimeZoneOffset"  public="true">
<description/>
<return>
<type class="int"/>
<description>
the offset in millis from GMT taking daylight&#xa; savings time into account if appropriate.
</description>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.inDaylightTime() -->
<method name="inDaylightTime"  public="true">
<description>
Does this time fall in daylight savings time&#xa; based on the current BTimeZone.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.getTimeZoneName(javax.baja.sys.Context) -->
<method name="getTimeZoneName"  public="true">
<description>
Get a localized String for the time zone&#x27;s long name.&#xa; Refer to BTimeZone.getDisplayName() for semantics.
</description>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.getTimeZoneShortName(javax.baja.sys.Context) -->
<method name="getTimeZoneShortName"  public="true">
<description>
Get a localized String for the time zone&#x27;s short name.&#xa; Refer to BTimeZone.getShotDisplayName() for semantics.
</description>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.toLocalTime() -->
<method name="toLocalTime"  public="true">
<description>
Convert this instance to an equivalent instance in the&#xa; current VM&#x27;s local time zone.
</description>
<return>
<type class="javax.baja.sys.BAbsTime"/>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.toUtcTime() -->
<method name="toUtcTime"  public="true">
<description>
Convert this instance to an equivalent instance in UTC.
</description>
<return>
<type class="javax.baja.sys.BAbsTime"/>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.toNormalizedTime() -->
<method name="toNormalizedTime"  public="true">
<description>
&lt;p&gt;&#xa; Convert this instance to a timezoneless time at the same time of day.&#xa; This is useful when normalizing times in different timezones so that&#xa; corresponding values can be compared by time of day.&#xa; &lt;/p&gt;&#xa; &lt;p&gt;&#xa; For example, 8:00AM in PST and 8:00AM in EST would normalize to the same&#xa; BAbsTime value.&#xa; &lt;/p&gt;
</description>
<return>
<type class="javax.baja.sys.BAbsTime"/>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.add(javax.baja.sys.BRelTime) -->
<method name="add"  public="true">
<description>
Add a relative time to this time and return&#xa; the new instant in time.
</description>
<parameter name="relTime">
<type class="javax.baja.sys.BRelTime"/>
</parameter>
<return>
<type class="javax.baja.sys.BAbsTime"/>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.subtract(javax.baja.sys.BRelTime) -->
<method name="subtract"  public="true">
<description>
Subtract a relative time from this time and&#xa; return the new instant in time.
</description>
<parameter name="relTime">
<type class="javax.baja.sys.BRelTime"/>
</parameter>
<return>
<type class="javax.baja.sys.BAbsTime"/>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.delta(javax.baja.sys.BAbsTime) -->
<method name="delta"  public="true">
<description>
Compute the time difference between this time and the specified time.  If&#xa; t2 is after this time, the result will be positive.  If t2 is before&#xa; this time, the result will be negative.
</description>
<parameter name="t2">
<type class="javax.baja.sys.BAbsTime"/>
<description>
The time to compare against.
</description>
</parameter>
<return>
<type class="javax.baja.sys.BRelTime"/>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.timeOfDay(int, int, int, int) -->
<method name="timeOfDay"  public="true">
<description>
Create a new instance on the same date as this instance&#xa; but with a different time.
</description>
<parameter name="hour">
<type class="int"/>
</parameter>
<parameter name="min">
<type class="int"/>
</parameter>
<parameter name="sec">
<type class="int"/>
</parameter>
<parameter name="millis">
<type class="int"/>
</parameter>
<return>
<type class="javax.baja.sys.BAbsTime"/>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.nextDay() -->
<method name="nextDay"  public="true">
<description>
The same time on the next day.
</description>
<return>
<type class="javax.baja.sys.BAbsTime"/>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.prevDay() -->
<method name="prevDay"  public="true">
<description>
The same time on the previous day.
</description>
<return>
<type class="javax.baja.sys.BAbsTime"/>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.nextMonth() -->
<method name="nextMonth"  public="true">
<description>
The same day and time in the next month.  If&#xa; this day is greater than the last day in the&#xa; next month, then cap the day to the next month&#x27;s&#xa; last day.  If this time&#x27;s day is the last day&#xa; in this month, then we automatically set the&#xa; month to the next month&#x27;s last day.
</description>
<return>
<type class="javax.baja.sys.BAbsTime"/>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.prevMonth() -->
<method name="prevMonth"  public="true">
<description>
The same time and day in previous month. If&#xa; this day is greater than the last day in the&#xa; prev month, then cap the day to the prev month&#x27;s&#xa; last day.  If this time&#x27;s day is the last day&#xa; in this month, then we automatically set the&#xa; month to the prev month&#x27;s last day.
</description>
<return>
<type class="javax.baja.sys.BAbsTime"/>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.nextYear() -->
<method name="nextYear"  public="true">
<description>
Get the same time and day in next year.  If today&#xa; is a leap day, then return next year Feb 28.
</description>
<return>
<type class="javax.baja.sys.BAbsTime"/>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.prevYear() -->
<method name="prevYear"  public="true">
<description>
Get the same time and day in prev year.  If today&#xa; is a leap day, then return prev year Feb 28.
</description>
<return>
<type class="javax.baja.sys.BAbsTime"/>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.next(javax.baja.sys.BWeekday) -->
<method name="next"  public="true">
<description>
Get the next day of the specified weekday. If&#xa; today is the specified weekday, then return one&#xa; week from now.
</description>
<parameter name="weekday">
<type class="javax.baja.sys.BWeekday"/>
</parameter>
<return>
<type class="javax.baja.sys.BAbsTime"/>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.prev(javax.baja.sys.BWeekday) -->
<method name="prev"  public="true">
<description>
Get the prev day of the specified weekday. If&#xa; today is the specified weekday, then return one&#xa; week before now.
</description>
<parameter name="weekday">
<type class="javax.baja.sys.BWeekday"/>
</parameter>
<return>
<type class="javax.baja.sys.BAbsTime"/>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.compareTo(java.lang.Object) -->
<method name="compareTo"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Compare to another BAbsTime.
</description>
<parameter name="obj">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="int"/>
<description>
a negative integer, zero, or a&#xa;    positive integer as this object is less&#xa;    than, equal to, or greater than the&#xa;    specified object.
</description>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.isBefore(javax.baja.sys.BAbsTime) -->
<method name="isBefore"  public="true">
<description/>
<parameter name="x">
<type class="javax.baja.sys.BAbsTime"/>
</parameter>
<return>
<type class="boolean"/>
<description>
true if the specified time is before this time.
</description>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.isAfter(javax.baja.sys.BAbsTime) -->
<method name="isAfter"  public="true">
<description/>
<parameter name="x">
<type class="javax.baja.sys.BAbsTime"/>
</parameter>
<return>
<type class="boolean"/>
<description>
true if the specified time is after this time.
</description>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.hashCode() -->
<method name="hashCode"  public="true">
<description>
BAbsTime hash code is based on the&#xa; the absolute time in millis.
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.equals(java.lang.Object) -->
<method name="equals"  public="true">
<description>
Equality is based only on absolute time, not&#xa; the relative time zone.
</description>
<parameter name="obj">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.dateEquals(javax.baja.sys.BAbsTime) -->
<method name="dateEquals"  public="true">
<description>
Is the date of the specified instance equal to the date of this instance?
</description>
<parameter name="other">
<type class="javax.baja.sys.BAbsTime"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.timeEquals(javax.baja.sys.BAbsTime) -->
<method name="timeEquals"  public="true">
<description>
Is the time of the specified instance equal to the date of this instance?
</description>
<parameter name="other">
<type class="javax.baja.sys.BAbsTime"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.isLeapDay() -->
<method name="isLeapDay"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Return if today is Feb 29.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.isLeapYear(int) -->
<method name="isLeapYear"  public="true" static="true">
<description>
Return if the specified year (as a four digit&#xa; number) is a leap year.
</description>
<parameter name="year">
<type class="int"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.getDaysInMonth(int, javax.baja.sys.BMonth) -->
<method name="getDaysInMonth"  public="true" static="true">
<description>
Given a year and month, return the number of days&#xa; in that month taking into consideration leap years.
</description>
<parameter name="year">
<type class="int"/>
</parameter>
<parameter name="month">
<type class="javax.baja.sys.BMonth"/>
</parameter>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.getDaysInYear(int) -->
<method name="getDaysInYear"  public="true" static="true">
<description>
Given a year, return the number of days in that&#xa; year taking into consideration leap years.
</description>
<parameter name="year">
<type class="int"/>
</parameter>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.encode(java.io.DataOutput) -->
<method name="encode"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
BAbsTime is serialized using writeLong()&#xa; of milliseconds since UTC epoch.
</description>
<parameter name="out">
<type class="java.io.DataOutput"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.io.IOException"/>
<description/>
</throws>
</method>

<!-- javax.baja.sys.BAbsTime.decode(java.io.DataInput) -->
<method name="decode"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
BAbsTime is deserialized from an 8 byte long created&#xa; by encode() or from 6 bytes created by  encode48.
</description>
<parameter name="in">
<type class="java.io.DataInput"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
<description/>
</throws>
</method>

<!-- javax.baja.sys.BAbsTime.encode48(java.io.DataOutput) -->
<method name="encode48"  public="true">
<description>
Serialize BAbsTime as 6 byte representaion of milliseconds since UTC epoch.
</description>
<parameter name="out">
<type class="java.io.DataOutput"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.io.IOException"/>
<description/>
</throws>
</method>

<!-- javax.baja.sys.BAbsTime.decode48(java.io.DataInput) -->
<method name="decode48"  public="true">
<description>
Deserialize BAbsTime using decode() which can reverse encoding created by encode48() or encode().
</description>
<parameter name="input">
<type class="java.io.DataInput"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
<description/>
</throws>
</method>

<!-- javax.baja.sys.BAbsTime.decode64(java.io.DataInput) -->
<method name="decode64"  public="true">
<description>
Deserialize BAbsTime by reading a full 64-bit long value that reverses the encoding created by&#xa; encode() only. It does not try to detect if the encoding was created by encode48(). This is&#xa; required when the number of millis is a negative value and it is impossible to distinguish a&#xa; 64-bit and 48-bit encoded value.
</description>
<tag name="@since">Niagara 4.10u4</tag>
<tag name="@since">Niagara 4.12</tag>
<parameter name="in">
<type class="java.io.DataInput"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.sys.BAbsTime.encodeToString() -->
<method name="encodeToString"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Write the simple in text format using the ISO 8601&#xa; standard format of &#x22;yyyy-mm-ddThh:mm:ss.mmm[+/-]hh:mm&#x22;.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.decodeFromString(java.lang.String) -->
<method name="decodeFromString"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Read the simple from text format normalizing&#xa; to the BAbsTime&#x27;s current time zone.  This&#xa; text must strictly conform to the ISO 8601 standard&#xa; format of &#x22;yyyy-mm-ddThh:mm:ss.mmm[+/-]hh:mm&#x22;.
</description>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.sys.BAbsTime.toDataValue() -->
<method name="toDataValue"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Return this instance since it&#x27;s already a data value.
</description>
<return>
<type class="javax.baja.data.BIDataValue"/>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.isNull() -->
<method name="isNull"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Test for the null value.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.toDateString(javax.baja.sys.Context) -->
<method name="toDateString"  public="true">
<description>
Get just the date as a string.
</description>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.toTimeString(javax.baja.sys.Context) -->
<method name="toTimeString"  public="true">
<description>
Get just the time as a string.
</description>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.toString(javax.baja.sys.Context) -->
<method name="toString"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get a formatted string for the time.  Use the following context&#xa; facets to customize the format: SHOW_TIME, SHOW_DATE, SHOW_SECONDS,&#xa; SHOW_MILLISECONDS, SHOW_TIME_ZONE, and TIME_ZONE.
</description>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.sys.BAbsTime.DEFAULT -->
<field name="DEFAULT"  public="true" static="true" final="true">
<type class="javax.baja.sys.BAbsTime"/>
<description>
Get default BAbsTime constant is 0 millis from epoch.
</description>
</field>

<!-- javax.baja.sys.BAbsTime.NULL -->
<field name="NULL"  public="true" static="true" final="true">
<type class="javax.baja.sys.BAbsTime"/>
<description>
The default BAbsTime.
</description>
</field>

<!-- javax.baja.sys.BAbsTime.TIME_MODE_FACET -->
<field name="TIME_MODE_FACET"  public="true" static="true" final="true">
<type class="java.lang.String"/>
<description>
Name of facet used by &lt;code&gt;make(int, BMonth, int, int, int, int, int, BTimeZone, Context)&lt;/code&gt; and&#xa; &lt;code&gt;makeCalendar(int, BMonth, int, int, int, int, int, BTimeZone, Context)&lt;/code&gt;&#xa; to specify how&#xa; the time fields are specified.   Supported facet values are &lt;code&gt;TIME_MODE_DEFAULT&lt;/code&gt;,&#xa; &lt;code&gt;TIME_MODE_WALL_STRICT&lt;/code&gt;, &lt;code&gt;TIME_MODE_STANDARD&lt;/code&gt;, &lt;code&gt;TIME_MODE_DAYLIGHT&lt;/code&gt;, &lt;code&gt;TIME_MODE_UTC&lt;/code&gt;.
</description>
<tag name="@see">BAbsTime#makeCalendar(int, BMonth, int, int, int, int, int, BTimeZone, Context) getCalendar</tag>
<tag name="@see">BAbsTime#make(int, BMonth, int, int, int, int, int, BTimeZone, Context) make</tag>
<tag name="@see">BAbsTime#TIME_MODE_DEFAULT</tag>
<tag name="@see">BAbsTime#TIME_MODE_WALL_STRICT</tag>
<tag name="@see">BAbsTime#TIME_MODE_STANDARD</tag>
<tag name="@see">BAbsTime#TIME_MODE_DAYLIGHT</tag>
<tag name="@see">BAbsTime#TIME_MODE_UTC</tag>
<tag name="@since">Niagara 3.5</tag>
</field>

<!-- javax.baja.sys.BAbsTime.TIME_MODE_DEFAULT -->
<field name="TIME_MODE_DEFAULT"  public="true" static="true" final="true">
<type class="int"/>
<description>
Value for &lt;code&gt;TIME_MODE_FACET&lt;/code&gt; facet that indicates that &lt;code&gt;make(int, BMonth, int, int, int, int, int, BTimeZone, Context)&lt;/code&gt; and&#xa; &lt;code&gt;makeCalendar(int, BMonth, int, int, int, int, int, BTimeZone, Context)&lt;/code&gt; should&#xa; interpret time fields as wall time with the default handling for ambiguous or invalid daylight boundary&#xa; times.  Times that occur during the period of wall time that is skipped as daylight time starts will&#xa; be interpreted as standard time (therefore advancing the clock from the given hour).  The wall times that repeat as&#xa; daylight time ends (times occur first as daylight, then again as standard) are assumed to be standard time.
</description>
<tag name="@see">BAbsTime#makeCalendar(int, BMonth, int, int, int, int, int, BTimeZone, Context) getCalendar</tag>
<tag name="@see">BAbsTime#make(int, BMonth, int, int, int, int, int, BTimeZone, Context) make</tag>
<tag name="@see">BAbsTime#TIME_MODE_FACET</tag>
<tag name="@since">Niagara 3.5</tag>
</field>

<!-- javax.baja.sys.BAbsTime.TIME_MODE_WALL_STRICT -->
<field name="TIME_MODE_WALL_STRICT"  public="true" static="true" final="true">
<type class="int"/>
<description>
Value for &lt;code&gt;TIME_MODE_FACET&lt;/code&gt; facet that indicates that &lt;code&gt;make(int, BMonth, int, int, int, int, int, BTimeZone, Context)&lt;/code&gt; and&#xa; &lt;code&gt;makeCalendar(int, BMonth, int, int, int, int, int, BTimeZone, Context)&lt;/code&gt; should&#xa; interpret time fields as wall time, and that an exception should be thrown if the time is ambiguous (the range of wall time that repeats&#xa; when daylight time ends), or invalid (the range of wall times that is skipped when daylight time starts)
</description>
<tag name="@see">BAbsTime#makeCalendar(int, BMonth, int, int, int, int, int, BTimeZone, Context) getCalendar</tag>
<tag name="@see">BAbsTime#make(int, BMonth, int, int, int, int, int, BTimeZone, Context) make</tag>
<tag name="@see">BAbsTime#TIME_MODE_FACET</tag>
<tag name="@since">Niagara 3.5</tag>
</field>

<!-- javax.baja.sys.BAbsTime.TIME_MODE_STANDARD -->
<field name="TIME_MODE_STANDARD"  public="true" static="true" final="true">
<type class="int"/>
<description>
Value for &lt;code&gt;TIME_MODE_FACET&lt;/code&gt; facet that indicates that &lt;code&gt;make(int, BMonth, int, int, int, int, int, BTimeZone, Context)&lt;/code&gt; and&#xa; &lt;code&gt;makeCalendar(int, BMonth, int, int, int, int, int, BTimeZone, Context)&lt;/code&gt; should&#xa; interpret time fields as standard time.   Even if the time would occur during daylight time according to the time zone&#xa; rules, the time fields are interpreted as not using the daylight offset.
</description>
<tag name="@see">BAbsTime#makeCalendar(int, BMonth, int, int, int, int, int, BTimeZone, Context) getCalendar</tag>
<tag name="@see">BAbsTime#make(int, BMonth, int, int, int, int, int, BTimeZone, Context) make</tag>
<tag name="@see">BAbsTime#TIME_MODE_FACET</tag>
<tag name="@since">Niagara 3.5</tag>
</field>

<!-- javax.baja.sys.BAbsTime.TIME_MODE_DAYLIGHT -->
<field name="TIME_MODE_DAYLIGHT"  public="true" static="true" final="true">
<type class="int"/>
<description>
Value for &lt;code&gt;TIME_MODE_FACET&lt;/code&gt; facet that indicates that &lt;code&gt;make(int, BMonth, int, int, int, int, int, BTimeZone, Context)&lt;/code&gt; and&#xa; &lt;code&gt;makeCalendar(int, BMonth, int, int, int, int, int, BTimeZone, Context)&lt;/code&gt; should&#xa; interpret time fields as daylight time.   Even if the time would occur outside of daylight time according to the time zone&#xa; rules, the time fields are interpreted as using the daylight offset.
</description>
<tag name="@see">BAbsTime#makeCalendar(int, BMonth, int, int, int, int, int, BTimeZone, Context) getCalendar</tag>
<tag name="@see">BAbsTime#make(int, BMonth, int, int, int, int, int, BTimeZone, Context) make</tag>
<tag name="@see">BAbsTime#TIME_MODE_FACET</tag>
<tag name="@since">Niagara 3.5</tag>
</field>

<!-- javax.baja.sys.BAbsTime.TIME_MODE_UTC -->
<field name="TIME_MODE_UTC"  public="true" static="true" final="true">
<type class="int"/>
<description>
Value for &lt;code&gt;TIME_MODE_FACET&lt;/code&gt; facet that indicates that &lt;code&gt;make(int, BMonth, int, int, int, int, int, BTimeZone, Context)&lt;/code&gt; and&#xa; &lt;code&gt;getCalendar(int, BMonth, int, int, int, int, int, BTimeZone, Context)&lt;/code&gt; should&#xa; interpret time fields as UTC time.
</description>
<tag name="@see">BAbsTime#makeCalendar(int, BMonth, int, int, int, int, int, BTimeZone, Context) getCalendar</tag>
<tag name="@see">BAbsTime#make(int, BMonth, int, int, int, int, int, BTimeZone, Context) make</tag>
<tag name="@see">BAbsTime#TIME_MODE_FACET</tag>
<tag name="@since">Niagara 3.5</tag>
</field>

<!-- javax.baja.sys.BAbsTime.TIME_MODE_WALL_SCHD -->
<field name="TIME_MODE_WALL_SCHD"  public="true" static="true" final="true">
<type class="int"/>
<description>
Value for &lt;code&gt;TIME_MODE_FACET&lt;/code&gt; facet that indicates that &lt;code&gt;make(int, BMonth, int, int, int, int, int, BTimeZone, Context)&lt;/code&gt; and&#xa; &lt;code&gt;makeCalendar(int, BMonth, int, int, int, int, int, BTimeZone, Context)&lt;/code&gt; should&#xa; interpret time fields as wall time with the special handling for ambiguous or invalid daylight boundary&#xa; times.  Times that occur during the period of wall time that is skipped as daylight time starts will&#xa; be advanced to the end of the end of the skipped period.  The wall times that repeat as&#xa; daylight time ends (times occur first as daylight, then again as standard) are assumed to be standard time.
</description>
<tag name="@see">BAbsTime#makeCalendar(int, BMonth, int, int, int, int, int, BTimeZone, Context) getCalendar</tag>
<tag name="@see">BAbsTime#make(int, BMonth, int, int, int, int, int, BTimeZone, Context) make</tag>
<tag name="@see">BAbsTime#TIME_MODE_FACET</tag>
<tag name="@since">Niagara 3.5</tag>
</field>

<!-- javax.baja.sys.BAbsTime.END_OF_TIME -->
<field name="END_OF_TIME"  public="true" static="true" final="true">
<type class="javax.baja.sys.BAbsTime"/>
<description>
The end of time.  This is a good value to use as &#x22;never&#x22;.
</description>
</field>

<!-- javax.baja.sys.BAbsTime.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
