<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="baja" runtimeProfile="rt" qualifiedName="javax.baja.sys.BBoolean" name="BBoolean" packageName="javax.baja.sys" public="true" final="true">
<description>
The BBoolean is the wrapper class for primitive&#xa; boolean objects.
</description>
<tag name="@author">Brian Frank</tag>
<tag name="@creation">1 Feb 00</tag>
<tag name="@version">$Revision: 36$ $Date: 11/16/06 3:35:07 PM EST$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="javax.baja.sys.BEnum"/>
</extends>
<implements>
<type class="javax.baja.sys.BIBoolean"/>
</implements>
<implements>
<type class="javax.baja.data.BIDataValue"/>
</implements>
<annotation><type class="javax.baja.nre.annotations.NoSlotomatic"/>
</annotation>
<!-- javax.baja.sys.BBoolean.make(boolean) -->
<method name="make"  public="true" static="true">
<description>
Get the BBoolean instance for the primitive boolean.
</description>
<parameter name="b">
<type class="boolean"/>
</parameter>
<return>
<type class="javax.baja.sys.BBoolean"/>
</return>
</method>

<!-- javax.baja.sys.BBoolean.make(java.lang.String) -->
<method name="make"  public="true" static="true">
<description>
Get the BBoolean instance for the string.
</description>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.sys.BBoolean"/>
</return>
</method>

<!-- javax.baja.sys.BBoolean.getBoolean() -->
<method name="getBoolean"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="boolean"/>
<description>
the boolean value.
</description>
</return>
</method>

<!-- javax.baja.sys.BBoolean.getBooleanFacets() -->
<method name="getBooleanFacets"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.BFacets"/>
<description>
the &lt;code&gt;BFacets.NULL&lt;/code&gt;.
</description>
</return>
</method>

<!-- javax.baja.sys.BBoolean.not() -->
<method name="not"  public="true">
<description/>
<return>
<type class="javax.baja.sys.BBoolean"/>
<description>
the opposite of this boolean.
</description>
</return>
</method>

<!-- javax.baja.sys.BBoolean.and(javax.baja.sys.BBoolean) -->
<method name="and"  public="true">
<description/>
<parameter name="other">
<type class="javax.baja.sys.BBoolean"/>
</parameter>
<return>
<type class="javax.baja.sys.BBoolean"/>
<description>
the &#x27;and&#x27; of this boolean and another.
</description>
</return>
</method>

<!-- javax.baja.sys.BBoolean.or(javax.baja.sys.BBoolean) -->
<method name="or"  public="true">
<description/>
<parameter name="other">
<type class="javax.baja.sys.BBoolean"/>
</parameter>
<return>
<type class="javax.baja.sys.BBoolean"/>
<description>
the &#x27;or&#x27; of this boolean and another.
</description>
</return>
</method>

<!-- javax.baja.sys.BBoolean.getOrdinal() -->
<method name="getOrdinal"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
True is 1 and false is 0.
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.sys.BBoolean.getTag() -->
<method name="getTag"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
True is &#x22;true&#x22; and false is &#x22;false&#x22;.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.sys.BBoolean.getDisplayTag(javax.baja.sys.Context) -->
<method name="getDisplayTag"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
True is &#x22;true&#x22; and false is &#x22;false&#x22;.
</description>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.sys.BBoolean.getRange() -->
<method name="getRange"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Return the range &#x22;{false=0,true=1}&#x22;.
</description>
<return>
<type class="javax.baja.sys.BEnumRange"/>
</return>
</method>

<!-- javax.baja.sys.BBoolean.isActive() -->
<method name="isActive"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
BBoolean is active if it is true.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.sys.BBoolean.hashCode() -->
<method name="hashCode"  public="true">
<description>
BBoolean hashcode is either 1 or 0.
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.sys.BBoolean.equals(java.lang.Object) -->
<method name="equals"  public="true">
<description>
BBoolean equality is based on boolean value equality.
</description>
<parameter name="obj">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.sys.BBoolean.toString(javax.baja.sys.Context) -->
<method name="toString"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Route to &lt;code&gt;BBoolean.toString(boolean, Context)&lt;/code&gt;.
</description>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.sys.BBoolean.encode(java.io.DataOutput) -->
<method name="encode"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
BBoolean is serialized using writeBoolean().
</description>
<parameter name="out">
<type class="java.io.DataOutput"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.sys.BBoolean.decode(java.io.DataInput) -->
<method name="decode"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
BBoolean is unserialized using readBoolean().
</description>
<parameter name="in">
<type class="java.io.DataInput"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.sys.BBoolean.encodeToString() -->
<method name="encodeToString"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Route to &lt;code&gt;BBoolean.encode(boolean)&lt;/code&gt;.
</description>
<return>
<type class="java.lang.String"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.sys.BBoolean.decodeFromString(java.lang.String) -->
<method name="decodeFromString"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Route to &lt;code&gt;BBoolean.decode(String)&lt;/code&gt;.
</description>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.sys.BBoolean.toDataValue() -->
<method name="toDataValue"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Return this instance since it&#x27;s already a data value.
</description>
<return>
<type class="javax.baja.data.BIDataValue"/>
</return>
</method>

<!-- javax.baja.sys.BBoolean.encode(boolean) -->
<method name="encode"  public="true" static="true">
<description>
Encode a boolean primitive value to its&#xa; text format &#x22;true&#x22; or &#x22;false&#x22;.
</description>
<parameter name="value">
<type class="boolean"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.sys.BBoolean.decode(java.lang.String) -->
<method name="decode"  public="true" static="true">
<description>
Decode text format directly to a boolean primitive.
</description>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.sys.BBoolean.toString(boolean, javax.baja.sys.Context) -->
<method name="toString"  public="true" static="true">
<description>
Format the boolean value using the specified Context.&#xa; Use BFacet.TRUE_TEXT or BFacet.FALSE_TEXT if specified,&#xa; otherwise return &#x22;true&#x22; or &#x22;false&#x22;.
</description>
<parameter name="value">
<type class="boolean"/>
</parameter>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.sys.BBoolean.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.sys.BBoolean.TRUE -->
<field name="TRUE"  public="true" static="true" final="true">
<type class="javax.baja.sys.BBoolean"/>
<description>
The &lt;code&gt;true&lt;/code&gt; constant.
</description>
</field>

<!-- javax.baja.sys.BBoolean.FALSE -->
<field name="FALSE"  public="true" static="true" final="true">
<type class="javax.baja.sys.BBoolean"/>
<description>
The &lt;code&gt;false&lt;/code&gt; constant.
</description>
</field>

<!-- javax.baja.sys.BBoolean.DEFAULT -->
<field name="DEFAULT"  public="true" static="true" final="true">
<type class="javax.baja.sys.BBoolean"/>
<description>
The default constant is &lt;code&gt;FALSE&lt;/code&gt;.
</description>
</field>

<!-- javax.baja.sys.BBoolean.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
