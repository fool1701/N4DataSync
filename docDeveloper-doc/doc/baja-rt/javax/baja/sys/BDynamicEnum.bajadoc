<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="baja" runtimeProfile="rt" qualifiedName="javax.baja.sys.BDynamicEnum" name="BDynamicEnum" packageName="javax.baja.sys" public="true" final="true">
<description>
BDynamicEnum stores an ordinal state variable as &#xa; a 32-bit integer.  An instance of BEnumRange&#xa; may be used to specify the range.  String format&#xa; of BDynamicEnum:&#xa; &lt;pre&gt;&#xa;   enum = ordinal [ &#x22;@&#x22; range ]&#xa; &lt;/pre&gt;
</description>
<tag name="@author">Brian Frank</tag>
<tag name="@creation">13 Dec 01</tag>
<tag name="@version">$Revision: 25$ $Date: 1/25/08 4:04:06 PM EST$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="javax.baja.sys.BEnum"/>
</extends>
<implements>
<type class="javax.baja.data.BIDataValue"/>
</implements>
<annotation><type class="javax.baja.nre.annotations.NoSlotomatic"/>
</annotation>
<!-- javax.baja.sys.BDynamicEnum.make(int, javax.baja.sys.BEnumRange) -->
<method name="make"  public="true" static="true">
<description>
Create a BDynamicEnum with the specified ordinal and range.
</description>
<parameter name="ordinal">
<type class="int"/>
</parameter>
<parameter name="range">
<type class="javax.baja.sys.BEnumRange"/>
</parameter>
<return>
<type class="javax.baja.sys.BDynamicEnum"/>
</return>
</method>

<!-- javax.baja.sys.BDynamicEnum.make(int) -->
<method name="make"  public="true" static="true">
<description>
Create a BDynamicEnum with the specified ordinal with a&#xa; range equal to BEnumRange.NULL.
</description>
<parameter name="ordinal">
<type class="int"/>
</parameter>
<return>
<type class="javax.baja.sys.BDynamicEnum"/>
</return>
</method>

<!-- javax.baja.sys.BDynamicEnum.make(javax.baja.sys.BEnum) -->
<method name="make"  public="true" static="true">
<description>
Create a BDynamicEnum using the enum&#x27;s ordinal and range.
</description>
<parameter name="e">
<type class="javax.baja.sys.BEnum"/>
</parameter>
<return>
<type class="javax.baja.sys.BDynamicEnum"/>
</return>
</method>

<!-- javax.baja.sys.BDynamicEnum.make(javax.baja.sys.BEnumRange) -->
<method name="make"  public="true" static="true">
<description>
Returns a valid DynamicEnum based on the first ordinal available in the EnumRange.
</description>
<tag name="@since">Niagara 4.9</tag>
<parameter name="range">
<type class="javax.baja.sys.BEnumRange"/>
</parameter>
<return>
<type class="javax.baja.sys.BDynamicEnum"/>
</return>
</method>

<!-- javax.baja.sys.BDynamicEnum.isActive() -->
<method name="isActive"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Return false for zero and true for all non-zero ordinals.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.sys.BDynamicEnum.getOrdinal() -->
<method name="getOrdinal"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get the ordinal integer identifier.
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.sys.BDynamicEnum.getTag() -->
<method name="getTag"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Route to &lt;code&gt;getRange().getTag(int)&lt;/code&gt;.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.sys.BDynamicEnum.getDisplayTag(javax.baja.sys.Context) -->
<method name="getDisplayTag"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Route to &lt;code&gt;getRange().getDisplayTag(int, cx)&lt;/code&gt;.
</description>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.sys.BDynamicEnum.getRange() -->
<method name="getRange"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Return the range.
</description>
<return>
<type class="javax.baja.sys.BEnumRange"/>
</return>
</method>

<!-- javax.baja.sys.BDynamicEnum.toString(javax.baja.sys.Context) -->
<method name="toString"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
If the context contains a value for BFacets.RANGE, then&#xa; that is used to provide a tag for the ordinal.  Otherwise&#xa; attempt to use the range passed to the factory method.
</description>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.sys.BDynamicEnum.hashCode() -->
<method name="hashCode"  public="true">
<description>
BDynamicEnum uses its encodeToString() value&#x27;s hash code.
</description>
<tag name="@since">Niagara 3.4</tag>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.sys.BDynamicEnum.equals(java.lang.Object) -->
<method name="equals"  public="true">
<description>
Equality is based on ordinal and range.
</description>
<parameter name="o">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.sys.BDynamicEnum.encode(java.io.DataOutput) -->
<method name="encode"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
BDynamicEnum is serialized using writeUTF() &#xa; of the string format.
</description>
<parameter name="out">
<type class="java.io.DataOutput"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.sys.BDynamicEnum.decode(java.io.DataInput) -->
<method name="decode"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
BDynamicEnum is serialized using readUTF() &#xa; of the string format.
</description>
<parameter name="in">
<type class="java.io.DataInput"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.sys.BDynamicEnum.encodeToString() -->
<method name="encodeToString"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Write the BDynamicEnum&#x27;s value and range &#xa; according to the serialization BNF.
</description>
<return>
<type class="java.lang.String"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.sys.BDynamicEnum.decodeFromString(java.lang.String) -->
<method name="decodeFromString"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Read the BDynamicEnum&#x27;s value and range &#xa; according to the serialization BNF.
</description>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.sys.BDynamicEnum.toDataValue() -->
<method name="toDataValue"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Return this instance since it&#x27;s already a data value.
</description>
<return>
<type class="javax.baja.data.BIDataValue"/>
</return>
</method>

<!-- javax.baja.sys.BDynamicEnum.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.sys.BDynamicEnum.DEFAULT -->
<field name="DEFAULT"  public="true" static="true" final="true">
<type class="javax.baja.sys.BDynamicEnum"/>
<description>
The default is an ordinal value of 0 with no range.
</description>
</field>

<!-- javax.baja.sys.BDynamicEnum.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
