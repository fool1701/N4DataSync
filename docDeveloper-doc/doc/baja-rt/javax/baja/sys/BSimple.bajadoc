<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="baja" runtimeProfile="rt" qualifiedName="javax.baja.sys.BSimple" name="BSimple" packageName="javax.baja.sys" public="true" abstract="true">
<description>
BSimple is the required base class for primitive types &#xa; in the Baja object model.  Simples are the basic building &#xa; blocks of the Baja architecture.  They are the atomic &#xa; units in which data is modeled, transfered, and stored.  &#xa; Simples contain no slots themselves, but do have an&#xa; implicit data value which may be serialized to and&#xa; from binary and string formats.  &#xa; &lt;p&gt;&#xa; BSimple&#x27;s must be immutable, under no circustances &#xa; should there be any way to modify the contents of a &#xa; BSimple.  All BSimple must be declared final&#xa; and may not support subclasses.&#xa; &lt;p&gt;&#xa; BSimple must also declare a static final field&#xa; called &lt;code&gt;DEFAULT&lt;/code&gt; which contains the default&#xa; instance of the simple type.
</description>
<tag name="@author">Brian Frank</tag>
<tag name="@creation">1 Feb 00</tag>
<tag name="@version">$Revision: 46$ $Date: 5/14/08 3:14:00 PM EDT$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="javax.baja.sys.BValue"/>
</extends>
<implements>
<type class="javax.baja.io.BIEncodable"/>
</implements>
<!-- javax.baja.sys.BSimple() -->
<constructor name="BSimple" public="true">
<description/>
</constructor>

<!-- javax.baja.sys.BSimple.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.sys.BSimple.toString(javax.baja.sys.Context) -->
<method name="toString"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
The default implementation of toString() is to&#xa; call encodeToString().
</description>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.sys.BSimple.hashCode() -->
<method name="hashCode"  public="true">
<description>
Simple subclasses should override and implement&#xa; the hashCode() method (this is a must do if interning is&#xa; used).  If this method is not overridden and it &#xa; gets called, it will fail fast by throwing an &#xa; UnsupportedOperationException.
</description>
<tag name="@since">Niagara 3.4</tag>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.sys.BSimple.equals(java.lang.Object) -->
<method name="equals"  public="true" abstract="true">
<description>
All simples must support an equality check&#xa; that is true only if the specified obj is of the&#xa; exact same class and the simple&#x27;s contents&#xa; are equal.
</description>
<parameter name="obj">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.sys.BSimple.equivalent(java.lang.Object) -->
<method name="equivalent"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Return the result of equals().
</description>
<parameter name="obj">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.sys.BSimple.newCopy() -->
<method name="newCopy"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Since BSimple&#x27;s are guaranteed immutable, &#xa; the newCopy method always returns itself.
</description>
<return>
<type class="javax.baja.sys.BValue"/>
</return>
</method>

<!-- javax.baja.sys.BSimple.newCopy(boolean) -->
<method name="newCopy"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Since BSimple&#x27;s are guaranteed immutable, &#xa; the newCopy method always returns itself.
</description>
<parameter name="exact">
<type class="boolean"/>
</parameter>
<return>
<type class="javax.baja.sys.BValue"/>
</return>
</method>

<!-- javax.baja.sys.BSimple.newCopy(javax.baja.sys.CopyHints) -->
<method name="newCopy"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Since BSimple&#x27;s are guaranteed immutable, &#xa; the newCopy method always returns itself.
</description>
<parameter name="hints">
<type class="javax.baja.sys.CopyHints"/>
</parameter>
<return>
<type class="javax.baja.sys.BValue"/>
</return>
</method>

<!-- javax.baja.sys.BSimple.encode(java.io.DataOutput) -->
<method name="encode"  public="true" abstract="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Encode the simple type using a binary format&#xa; that can be translated using decode.
</description>
<parameter name="encoder">
<type class="java.io.DataOutput"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.sys.BSimple.decode(java.io.DataInput) -->
<method name="decode"  public="true" abstract="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Decode the simple using the same binary format&#xa; that was written using encode, and return the new &#xa; instance.  Under no circumstances should this &#xa; instance be modified.
</description>
<parameter name="decoder">
<type class="java.io.DataInput"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.sys.BSimple.encodeToString() -->
<method name="encodeToString"  public="true" abstract="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Encode the simple using a String format&#xa; that can be translated using decodeFromString.
</description>
<return>
<type class="java.lang.String"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.sys.BSimple.decodeFromString(java.lang.String) -->
<method name="decodeFromString"  public="true" abstract="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Decode the simple using the same String format&#xa; that was written using encodeToString, and return&#xa; the new instance.  Under no circumstances should &#xa; this instance be modified.
</description>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.sys.BSimple.intern() -->
<method name="intern"  public="true">
<description>
Returns an interned instance of this BSimple.&#xa; A pool of BSimples (organized by Type), initially &#xa; empty, is maintained privately by the class BSimple.&#xa; When this intern() method is invoked, if the pool &#xa; already contains a BSimple equal to this BSimple object &#xa; as determined by the equals(Object) and hashCode() methods, &#xa; then the BSimple instance from the pool is returned. Otherwise, &#xa; this BSimple object is added to the pool and a reference to &#xa; this BSimple object is returned.&#xa; &#xa; It follows that for any two BSimples x and y, &#xa; x.intern() == y.intern() is true if and only if &#xa; x.equals(y) is true AND x.hashCode() == y.hashCode() is&#xa; also true.&#xa; &#xa; NOTE: Interning for a given type can be disabled by specifying&#xa; the type in the System.properties file for the &#xa; &#x22;niagara.intern.excludeTypes&#x22; property.  This optional property &#xa; contains a semicolon delimited list of excluded types.&#xa; When disabled, the intern() method will always return this&#xa; instance.  To disable interning for ALL BSimple types,&#xa; use the system.property &#x22;niagara.intern.disabled=true&#x22;.
</description>
<tag name="@since">Niagara 3.4</tag>
<return>
<type class="javax.baja.sys.BSimple"/>
</return>
</method>

<!-- javax.baja.sys.BSimple.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
