<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="baja" runtimeProfile="rt" qualifiedName="javax.baja.sys.BFloat" name="BFloat" packageName="javax.baja.sys" public="true" final="true">
<description>
The BFloat is the class interface for primitive float objects.
</description>
<tag name="@author">Brian Frank</tag>
<tag name="@creation">1 Feb 00</tag>
<tag name="@version">$Revision: 40$ $Date: 10/25/04 10:04:16 AM EDT$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="javax.baja.sys.BNumber"/>
</extends>
<annotation><type class="javax.baja.nre.annotations.NoSlotomatic"/>
</annotation>
<!-- javax.baja.sys.BFloat.make(float) -->
<method name="make"  public="true" static="true">
<description>
Factory method.
</description>
<parameter name="value">
<type class="float"/>
</parameter>
<return>
<type class="javax.baja.sys.BFloat"/>
</return>
</method>

<!-- javax.baja.sys.BFloat.make(java.lang.String) -->
<method name="make"  public="true" static="true">
<description>
Factory method.
</description>
<parameter name="value">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.sys.BFloat"/>
</return>
</method>

<!-- javax.baja.sys.BFloat.getInt() -->
<method name="getInt"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="int"/>
<description>
the float value cast to an integer.
</description>
</return>
</method>

<!-- javax.baja.sys.BFloat.getLong() -->
<method name="getLong"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="long"/>
<description>
the float value cast to a long.
</description>
</return>
</method>

<!-- javax.baja.sys.BFloat.getFloat() -->
<method name="getFloat"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="float"/>
<description>
the float value.
</description>
</return>
</method>

<!-- javax.baja.sys.BFloat.getDouble() -->
<method name="getDouble"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="double"/>
<description>
the float value cast to a double.
</description>
</return>
</method>

<!-- javax.baja.sys.BFloat.hashCode() -->
<method name="hashCode"  public="true">
<description>
BFloat&#x27;s hash code is the floating value&#x27;s&#xa; integer represention given by the&#xa; Float.floatToIntBits method.
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.sys.BFloat.equals(java.lang.Object) -->
<method name="equals"  public="true">
<description>
BFloat equality is based on float value equality.&#xa; Unlike the standard == operator, two float values&#xa; of Float.NaN are considered equal.
</description>
<parameter name="obj">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.sys.BFloat.equals(float, float) -->
<method name="equals"  public="true" static="true">
<description>
Do a float comparision, but unlike the &#xa; standard == operator, two float values of&#xa; Float.NaN are considered equal.
</description>
<parameter name="a">
<type class="float"/>
</parameter>
<parameter name="b">
<type class="float"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.sys.BFloat.compareTo(java.lang.Object) -->
<method name="compareTo"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Compares this object with the specified object for &#xa; order. Returns a negative integer, zero, or a positive &#xa; integer as this object is less than, equal to, or greater &#xa; than the specified object.
</description>
<parameter name="obj">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.sys.BFloat.toString(javax.baja.sys.Context) -->
<method name="toString"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Route to &lt;code&gt;BFloat.toString(float, Context)&lt;/code&gt;.
</description>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.sys.BFloat.encode(java.io.DataOutput) -->
<method name="encode"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
BFloat is serialized using writeFloat().
</description>
<parameter name="out">
<type class="java.io.DataOutput"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.sys.BFloat.decode(java.io.DataInput) -->
<method name="decode"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
BFloat is unserialized using readFloat().
</description>
<parameter name="in">
<type class="java.io.DataInput"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.sys.BFloat.encodeToString() -->
<method name="encodeToString"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Route to &lt;code&gt;BFloat.encode(float)&lt;/code&gt;.
</description>
<return>
<type class="java.lang.String"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.sys.BFloat.decodeFromString(java.lang.String) -->
<method name="decodeFromString"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Route to &lt;code&gt;BFloat.decode(String)&lt;/code&gt;.
</description>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.sys.BFloat.encode(float) -->
<method name="encode"  public="true" static="true">
<description>
Encode the primitive float into a string.  &#xa; Special values are &#x22;+inf&#x22;, &#x22;-inf&#x22;, and &#x22;nan&#x22;.
</description>
<parameter name="f">
<type class="float"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.sys.BFloat.decode(java.lang.String) -->
<method name="decode"  public="true" static="true">
<description>
Decode the primitive float from a string.  &#xa; Special values are &#x22;+inf&#x22;, &#x22;-inf&#x22;, and &#x22;nan&#x22;.
</description>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="float"/>
</return>
</method>

<!-- javax.baja.sys.BFloat.toString(float, javax.baja.sys.Context) -->
<method name="toString"  public="true" static="true">
<description>
Format the float value using the specified Context.&#xa; If there is a BFacets.PRECISION facet then that determines&#xa; how many digits are displayed after the decimal place.&#xa; The default is to display two digits after the decimal.&#xa; If there is a BFacets.UNITS then the the unit symbol is&#xa; appended.  Special values: &#x22;+inf&#x22;, &#x22;-inf&#x22;, &#x22;nan&#x22;.
</description>
<parameter name="value">
<type class="float"/>
</parameter>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.sys.BFloat.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.sys.BFloat.POSITIVE_INFINITY -->
<field name="POSITIVE_INFINITY"  public="true" static="true" final="true">
<type class="javax.baja.sys.BFloat"/>
<description>
BFloat equal to Float.POSITIVE_INFINITY.
</description>
</field>

<!-- javax.baja.sys.BFloat.NEGATIVE_INFINITY -->
<field name="NEGATIVE_INFINITY"  public="true" static="true" final="true">
<type class="javax.baja.sys.BFloat"/>
<description>
BFloat equal to Float.NEGATIVE_INFINITY.
</description>
</field>

<!-- javax.baja.sys.BFloat.NaN -->
<field name="NaN"  public="true" static="true" final="true">
<type class="javax.baja.sys.BFloat"/>
<description>
BFloat equal to Float.NaN.
</description>
</field>

<!-- javax.baja.sys.BFloat.DEFAULT -->
<field name="DEFAULT"  public="true" static="true" final="true">
<type class="javax.baja.sys.BFloat"/>
<description>
The default float constant is 0.0.
</description>
</field>

<!-- javax.baja.sys.BFloat.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
