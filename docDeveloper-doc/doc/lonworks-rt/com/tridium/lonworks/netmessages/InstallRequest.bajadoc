<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="lonworks" runtimeProfile="rt" qualifiedName="com.tridium.lonworks.netmessages.InstallRequest" name="InstallRequest" packageName="com.tridium.lonworks.netmessages" public="true" abstract="true">
<description>
The InstallRequest class represents the data &#xa; structures in the Install command messages.  &#xa; For more information CEA-709.1-B specification para 13.7.16 &amp; A.29.&#xa; &lt;p&gt;
</description>
<tag name="@author">Robert Adams</tag>
<tag name="@creation">8 Nov 00</tag>
<tag name="@version">$Revision$ $Date$</tag>
<tag name="@since">Niagara 3.0</tag>
<extends>
<type class="javax.baja.lonworks.LonMessage"/>
</extends>
<implements>
<type class="com.tridium.lonworks.netmessages.NetMessages"/>
</implements>
<!-- com.tridium.lonworks.netmessages.InstallRequest() -->
<constructor name="InstallRequest" public="true">
<description>
Construct a default InstallRequest message
</description>
</constructor>

<!-- com.tridium.lonworks.netmessages.InstallRequest.getAppCommand() -->
<method name="getAppCommand"  public="true">
<description>
Get the subcommand of this Wink Request
</description>
<return>
<type class="int"/>
<description>
int  subCommand
</description>
</return>
</method>

<!-- com.tridium.lonworks.netmessages.InstallRequest.setAppCommand(int) -->
<method name="setAppCommand"  public="true">
<description>
Set the subcommand of this Wink Request
</description>
<parameter name="appCommand">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.lonworks.netmessages.InstallRequest.toOutputStream(javax.baja.lonworks.io.LonOutputStream) -->
<method name="toOutputStream"  public="true">
<description>
Create a LonOutputStream representing the &#xa;  data portion of this outgoing message.
</description>
<parameter name="out">
<type class="javax.baja.lonworks.io.LonOutputStream"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.lonworks.netmessages.InstallRequest.writeMessageData(javax.baja.lonworks.io.LonOutputStream) -->
<method name="writeMessageData"  protected="true">
<description/>
<parameter name="out">
<type class="javax.baja.lonworks.io.LonOutputStream"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.lonworks.netmessages.InstallRequest.fromInputStream(javax.baja.lonworks.io.LonInputStream) -->
<method name="fromInputStream"  public="true">
<description>
Extract message data from the LonInputStream&#xa;  representing this incoming message.
</description>
<parameter name="in">
<type class="javax.baja.lonworks.io.LonInputStream"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.netmessages.InstallRequest.readMessageData(javax.baja.lonworks.io.LonInputStream) -->
<method name="readMessageData"  protected="true">
<description/>
<parameter name="in">
<type class="javax.baja.lonworks.io.LonInputStream"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.lonworks.netmessages.InstallRequest.toResponse(javax.baja.lonworks.io.LonInputStream) -->
<method name="toResponse"  public="true">
<description>
This method will take an explicit message check the &#xa;  the message code to determine if it is a valid response.&#xa;  If so then an appropriate response netmessage will be &#xa;  instantiated and return.  If not an exception will&#xa;  be returned.
</description>
<parameter name="in">
<type class="javax.baja.lonworks.io.LonInputStream"/>
</parameter>
<return>
<type class="javax.baja.lonworks.LonMessage"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.netmessages.InstallRequest.toSuccessMessage(javax.baja.lonworks.io.LonInputStream) -->
<method name="toSuccessMessage"  public="true">
<description/>
<parameter name="in">
<type class="javax.baja.lonworks.io.LonInputStream"/>
</parameter>
<return>
<type class="javax.baja.lonworks.LonMessage"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

</class>
</bajadoc>
