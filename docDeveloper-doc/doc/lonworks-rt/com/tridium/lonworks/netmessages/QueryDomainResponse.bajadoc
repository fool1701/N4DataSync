<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="lonworks" runtimeProfile="rt" qualifiedName="com.tridium.lonworks.netmessages.QueryDomainResponse" name="QueryDomainResponse" packageName="com.tridium.lonworks.netmessages" public="true">
<description>
The QueryDomainResponse class represents the data &#xa; structure used in Query Domain Response network management&#xa; messages.  For more information, see the Neuron Chip Data&#xa; Book, section B.1.2.&#xa; &lt;p&gt;
</description>
<tag name="@author">Robert Adams</tag>
<tag name="@creation">8 Nov 00</tag>
<tag name="@version">$Revision$ $Date$</tag>
<tag name="@since">Niagara 3.0</tag>
<extends>
<type class="javax.baja.lonworks.LonMessage"/>
</extends>
<implements>
<type class="com.tridium.lonworks.netmessages.NetMessages"/>
</implements>
<!-- com.tridium.lonworks.netmessages.QueryDomainResponse() -->
<constructor name="QueryDomainResponse" public="true">
<description/>
</constructor>

<!-- com.tridium.lonworks.netmessages.QueryDomainResponse(javax.baja.lonworks.io.LonInputStream) -->
<constructor name="QueryDomainResponse" public="true">
<parameter name="in">
<type class="javax.baja.lonworks.io.LonInputStream"/>
</parameter>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
<description>
Construct an incoming QueryIdResponse message.&#xa;  Note that this constructor ignores the code &#xa;  byte as it is assumed that it has already &#xa;  been decoded to get this far.
</description>
</constructor>

<!-- com.tridium.lonworks.netmessages.QueryDomainResponse.isExtended() -->
<method name="isExtended"  public="true">
<description/>
<return>
<type class="boolean"/>
</return>
</method>

<!-- com.tridium.lonworks.netmessages.QueryDomainResponse.getDomainId() -->
<method name="getDomainId"  public="true">
<description/>
<return>
<type class="byte" dimension="1"/>
</return>
</method>

<!-- com.tridium.lonworks.netmessages.QueryDomainResponse.getNodeId() -->
<method name="getNodeId"  public="true">
<description/>
<return>
<type class="int"/>
</return>
</method>

<!-- com.tridium.lonworks.netmessages.QueryDomainResponse.getSubnet() -->
<method name="getSubnet"  public="true">
<description/>
<return>
<type class="int"/>
</return>
</method>

<!-- com.tridium.lonworks.netmessages.QueryDomainResponse.getLen() -->
<method name="getLen"  public="true">
<description/>
<return>
<type class="int"/>
</return>
</method>

<!-- com.tridium.lonworks.netmessages.QueryDomainResponse.getKey() -->
<method name="getKey"  public="true">
<description/>
<return>
<type class="byte" dimension="1"/>
</return>
</method>

<!-- com.tridium.lonworks.netmessages.QueryDomainResponse.inUse() -->
<method name="inUse"  public="true">
<description/>
<return>
<type class="boolean"/>
</return>
</method>

<!-- com.tridium.lonworks.netmessages.QueryDomainResponse.sameDomain(javax.baja.lonworks.datatypes.BDomainId) -->
<method name="sameDomain"  public="true">
<description>
Returns true if the first length bytes of &#xa;  domain are equal.
</description>
<parameter name="comp">
<type class="javax.baja.lonworks.datatypes.BDomainId"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- com.tridium.lonworks.netmessages.QueryDomainResponse.toOutputStream(javax.baja.lonworks.io.LonOutputStream) -->
<method name="toOutputStream"  public="true">
<description>
Write this message in network byte format to the &#xa;  out stream.  public void toOutputStream(LonOutputStream out)
</description>
<parameter name="out">
<type class="javax.baja.lonworks.io.LonOutputStream"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.lonworks.netmessages.QueryDomainResponse.writeMessageData(javax.baja.lonworks.io.LonOutputStream) -->
<method name="writeMessageData"  protected="true">
<description/>
<parameter name="out">
<type class="javax.baja.lonworks.io.LonOutputStream"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.lonworks.netmessages.QueryDomainResponse.fromInputStream(javax.baja.lonworks.io.LonInputStream) -->
<method name="fromInputStream"  public="true">
<description>
Read this message&#x27;s data from the given input stream.
</description>
<parameter name="in">
<type class="javax.baja.lonworks.io.LonInputStream"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.netmessages.QueryDomainResponse.readMessageData(javax.baja.lonworks.io.LonInputStream) -->
<method name="readMessageData"  protected="true">
<description/>
<parameter name="in">
<type class="javax.baja.lonworks.io.LonInputStream"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.lonworks.netmessages.QueryDomainResponse.toString() -->
<method name="toString"  public="true">
<description/>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- com.tridium.lonworks.netmessages.QueryDomainResponse.id -->
<field name="id"  public="true">
<type class="byte" dimension="1"/>
<description>
domain id
</description>
</field>

<!-- com.tridium.lonworks.netmessages.QueryDomainResponse.subnet -->
<field name="subnet"  public="true">
<type class="int"/>
<description>
subnet ID
</description>
</field>

<!-- com.tridium.lonworks.netmessages.QueryDomainResponse.node -->
<field name="node"  public="true">
<type class="int"/>
<description>
node ID
</description>
</field>

<!-- com.tridium.lonworks.netmessages.QueryDomainResponse.len -->
<field name="len"  public="true">
<type class="int"/>
<description>
length of domain id in bytes, 0xFF indicates not in use
</description>
</field>

<!-- com.tridium.lonworks.netmessages.QueryDomainResponse.key -->
<field name="key"  public="true">
<type class="byte" dimension="1"/>
<description>
authentication key
</description>
</field>

</class>
</bajadoc>
