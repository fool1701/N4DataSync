<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="lonworks" runtimeProfile="rt" qualifiedName="com.tridium.lonworks.netmessages.FetchNvResponse" name="FetchNvResponse" packageName="com.tridium.lonworks.netmessages" public="true">
<description>
The FetchNvResponse class represents the data &#xa; structure used in the Fetch Nv Response network management&#xa; message.  For more information, see the Neuron Chip Data&#xa; Book, section B.1.2.
</description>
<extends>
<type class="javax.baja.lonworks.LonMessage"/>
</extends>
<implements>
<type class="com.tridium.lonworks.netmessages.NetMessages"/>
</implements>
<!-- com.tridium.lonworks.netmessages.FetchNvResponse(int, byte[]) -->
<constructor name="FetchNvResponse" public="true">
<parameter name="nvIndex">
<type class="int"/>
<description>
network variable index
</description>
</parameter>
<parameter name="nvData">
<type class="byte" dimension="1"/>
<description>
network variable data
</description>
</parameter>
<description>
Construct an outgoing Fetch NV Response message
</description>
</constructor>

<!-- com.tridium.lonworks.netmessages.FetchNvResponse(javax.baja.lonworks.io.LonInputStream) -->
<constructor name="FetchNvResponse" public="true">
<parameter name="in">
<type class="javax.baja.lonworks.io.LonInputStream"/>
</parameter>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
<description>
Construct an incoming Fetch Nv Response message
</description>
</constructor>

<!-- com.tridium.lonworks.netmessages.FetchNvResponse.getNvIndex() -->
<method name="getNvIndex"  public="true">
<description/>
<return>
<type class="int"/>
</return>
</method>

<!-- com.tridium.lonworks.netmessages.FetchNvResponse.setNvIndex(int) -->
<method name="setNvIndex"  public="true">
<description/>
<parameter name="nvIndex">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.lonworks.netmessages.FetchNvResponse.getNvData() -->
<method name="getNvData"  public="true">
<description/>
<return>
<type class="byte" dimension="1"/>
</return>
</method>

<!-- com.tridium.lonworks.netmessages.FetchNvResponse.getNvDataLength() -->
<method name="getNvDataLength"  public="true">
<description/>
<return>
<type class="int"/>
</return>
</method>

<!-- com.tridium.lonworks.netmessages.FetchNvResponse.setNvData(byte[]) -->
<method name="setNvData"  public="true">
<description/>
<parameter name="nvData">
<type class="byte" dimension="1"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.lonworks.netmessages.FetchNvResponse.toOutputStream(javax.baja.lonworks.io.LonOutputStream) -->
<method name="toOutputStream"  public="true">
<description>
Create a LonOutputStream representing this &#xa;  Fetch Nv Response
</description>
<parameter name="out">
<type class="javax.baja.lonworks.io.LonOutputStream"/>
<description>
data stream of message
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.lonworks.netmessages.FetchNvResponse.fromInputStream(javax.baja.lonworks.io.LonInputStream) -->
<method name="fromInputStream"  public="true">
<description>
Extract the Fetch Nv Response data from the &#xa;  LonInputStream
</description>
<parameter name="in">
<type class="javax.baja.lonworks.io.LonInputStream"/>
<description>
data stream of message
</description>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

</class>
</bajadoc>
