<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="lonworks" runtimeProfile="rt" qualifiedName="com.tridium.lonworks.netmessages.WinkRequest" name="WinkRequest" packageName="com.tridium.lonworks.netmessages" public="true">
<description>
This class encapsulates a WinkRequest message..&#xa; &lt;p&gt;
</description>
<tag name="@author">Robert Adams</tag>
<tag name="@creation">8 Nov 00</tag>
<tag name="@version">$Revision$ $Date$</tag>
<tag name="@since">Niagara 3.0</tag>
<extends>
<type class="javax.baja.lonworks.LonMessage"/>
</extends>
<implements>
<type class="com.tridium.lonworks.netmessages.NetMessages"/>
</implements>
<!-- com.tridium.lonworks.netmessages.WinkRequest() -->
<constructor name="WinkRequest" public="true">
<description>
Construct a default WinkRequest message
</description>
</constructor>

<!-- com.tridium.lonworks.netmessages.WinkRequest(int, int) -->
<constructor name="WinkRequest" public="true">
<parameter name="subCommand">
<type class="int"/>
</parameter>
<parameter name="networkInterface">
<type class="int"/>
</parameter>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
<description>
Construct an outgoing WinkRequest message.
</description>
</constructor>

<!-- com.tridium.lonworks.netmessages.WinkRequest.getSubCommand() -->
<method name="getSubCommand"  public="true">
<description>
Get the subcommand of this Wink Request
</description>
<return>
<type class="int"/>
<description>
int  subCommand
</description>
</return>
</method>

<!-- com.tridium.lonworks.netmessages.WinkRequest.setSubCommand(int) -->
<method name="setSubCommand"  public="true">
<description>
Set the subcommand of this Wink Request
</description>
<parameter name="subCommand">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.netmessages.WinkRequest.getNetworkInterface() -->
<method name="getNetworkInterface"  public="true">
<description>
Get the network interface for this Wink&#xa;  Request
</description>
<return>
<type class="int"/>
<description>
int  network interface
</description>
</return>
</method>

<!-- com.tridium.lonworks.netmessages.WinkRequest.setNetworkInterface(int) -->
<method name="setNetworkInterface"  public="true">
<description>
Set the network interface for this Wink Request
</description>
<parameter name="networkInterface">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.lonworks.netmessages.WinkRequest.toOutputStream(javax.baja.lonworks.io.LonOutputStream) -->
<method name="toOutputStream"  public="true">
<description>
Create a LonOutputStream representing the &#xa;  data portion of this outgoing Wink&#xa;  Request message
</description>
<parameter name="out">
<type class="javax.baja.lonworks.io.LonOutputStream"/>
<description>
to create
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.lonworks.netmessages.WinkRequest.fromInputStream(javax.baja.lonworks.io.LonInputStream) -->
<method name="fromInputStream"  public="true">
<description>
Extract the Wink data from the&#xa;  LonInputStream representing this incoming&#xa;  message.
</description>
<parameter name="in">
<type class="javax.baja.lonworks.io.LonInputStream"/>
<description>
to decode
</description>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.netmessages.WinkRequest.toResponse(javax.baja.lonworks.io.LonInputStream) -->
<method name="toResponse"  public="true">
<description>
This method will take an explicit message check the &#xa;  the message code to determine if it is a valid response.&#xa;  If so then an appropriate response netmessage will be &#xa;  instantiated and return.  If not an exception will&#xa;  be returned.
</description>
<parameter name="in">
<type class="javax.baja.lonworks.io.LonInputStream"/>
</parameter>
<return>
<type class="javax.baja.lonworks.LonMessage"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.netmessages.WinkRequest.WINK -->
<field name="WINK"  public="true" static="true" final="true">
<type class="int"/>
<description/>
</field>

<!-- com.tridium.lonworks.netmessages.WinkRequest.SEND_ID_INFO -->
<field name="SEND_ID_INFO"  public="true" static="true" final="true">
<type class="int"/>
<description/>
</field>

<!-- com.tridium.lonworks.netmessages.WinkRequest.NV_DEFINE -->
<field name="NV_DEFINE"  public="true" static="true" final="true">
<type class="int"/>
<description/>
</field>

<!-- com.tridium.lonworks.netmessages.WinkRequest.NV_REMOVE -->
<field name="NV_REMOVE"  public="true" static="true" final="true">
<type class="int"/>
<description/>
</field>

<!-- com.tridium.lonworks.netmessages.WinkRequest.QUERY_NV_INFO -->
<field name="QUERY_NV_INFO"  public="true" static="true" final="true">
<type class="int"/>
<description/>
</field>

<!-- com.tridium.lonworks.netmessages.WinkRequest.QUERY_NODE_INFO -->
<field name="QUERY_NODE_INFO"  public="true" static="true" final="true">
<type class="int"/>
<description/>
</field>

<!-- com.tridium.lonworks.netmessages.WinkRequest.UPDATE_NV_INFO -->
<field name="UPDATE_NV_INFO"  public="true" static="true" final="true">
<type class="int"/>
<description/>
</field>

<!-- com.tridium.lonworks.netmessages.WinkRequest.UNUSED_SUBCOMMAND -->
<field name="UNUSED_SUBCOMMAND"  public="true" static="true" final="true">
<type class="int"/>
<description/>
</field>

</class>
</bajadoc>
