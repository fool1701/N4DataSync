<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="lonworks" runtimeProfile="rt" qualifiedName="com.tridium.lonworks.netmessages.UpdateDomainRequest" name="UpdateDomainRequest" packageName="com.tridium.lonworks.netmessages" public="true">
<description>
The UpdateDomainRequest class represents the data &#xa; structure used in Update Domain Request network management&#xa; messages.  For more information, see the Neuron Chip Data&#xa; Book, section B.1.2.&#xa; &lt;p&gt;
</description>
<tag name="@author">Robert Adams</tag>
<tag name="@creation">8 Nov 00</tag>
<tag name="@version">$Revision$ $Date$</tag>
<tag name="@since">Niagara 3.0</tag>
<extends>
<type class="javax.baja.lonworks.LonMessage"/>
</extends>
<implements>
<type class="com.tridium.lonworks.netmessages.NetMessages"/>
</implements>
<!-- com.tridium.lonworks.netmessages.UpdateDomainRequest(int) -->
<constructor name="UpdateDomainRequest" public="true">
<parameter name="domainIndex">
<type class="int"/>
</parameter>
<description>
This constructor is used to create an Update&#xa;  Domain message to deactivate the use of a &#xa;  domain.
</description>
</constructor>

<!-- com.tridium.lonworks.netmessages.UpdateDomainRequest(int, int, int) -->
<constructor name="UpdateDomainRequest" public="true">
<parameter name="domainIndex">
<type class="int"/>
</parameter>
<parameter name="subnet">
<type class="int"/>
</parameter>
<parameter name="node">
<type class="int"/>
</parameter>
<description>
This constructor assumes no domain ID or key
</description>
</constructor>

<!-- com.tridium.lonworks.netmessages.UpdateDomainRequest(int, byte[], int, int, int, byte[]) -->
<constructor name="UpdateDomainRequest" public="true">
<parameter name="domainIndex">
<type class="int"/>
</parameter>
<parameter name="nid">
<type class="byte" dimension="1"/>
</parameter>
<parameter name="subnet">
<type class="int"/>
</parameter>
<parameter name="node">
<type class="int"/>
</parameter>
<parameter name="len">
<type class="int"/>
</parameter>
<parameter name="key">
<type class="byte" dimension="1"/>
</parameter>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
<description>
Constructor specifying subnet/node and domain ID
</description>
</constructor>

<!-- com.tridium.lonworks.netmessages.UpdateDomainRequest.getDomainIndex() -->
<method name="getDomainIndex"  public="true">
<description/>
<return>
<type class="int"/>
</return>
</method>

<!-- com.tridium.lonworks.netmessages.UpdateDomainRequest.setDomainIndex(int) -->
<method name="setDomainIndex"  public="true">
<description/>
<parameter name="domainIndex">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.lonworks.netmessages.UpdateDomainRequest.getId() -->
<method name="getId"  public="true">
<description/>
<return>
<type class="byte" dimension="1"/>
</return>
</method>

<!-- com.tridium.lonworks.netmessages.UpdateDomainRequest.setId(byte[]) -->
<method name="setId"  public="true">
<description/>
<parameter name="id">
<type class="byte" dimension="1"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.lonworks.netmessages.UpdateDomainRequest.getSubnet() -->
<method name="getSubnet"  public="true">
<description/>
<return>
<type class="int"/>
</return>
</method>

<!-- com.tridium.lonworks.netmessages.UpdateDomainRequest.setSubnet(int) -->
<method name="setSubnet"  public="true">
<description/>
<parameter name="subnet">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.lonworks.netmessages.UpdateDomainRequest.getNode() -->
<method name="getNode"  public="true">
<description/>
<return>
<type class="int"/>
</return>
</method>

<!-- com.tridium.lonworks.netmessages.UpdateDomainRequest.setNode(int) -->
<method name="setNode"  public="true">
<description/>
<parameter name="node">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.lonworks.netmessages.UpdateDomainRequest.getLength() -->
<method name="getLength"  public="true">
<description/>
<return>
<type class="int"/>
</return>
</method>

<!-- com.tridium.lonworks.netmessages.UpdateDomainRequest.setLength(int) -->
<method name="setLength"  public="true">
<description/>
<parameter name="len">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.lonworks.netmessages.UpdateDomainRequest.getKey() -->
<method name="getKey"  public="true">
<description/>
<return>
<type class="byte" dimension="1"/>
</return>
</method>

<!-- com.tridium.lonworks.netmessages.UpdateDomainRequest.setKey(byte[]) -->
<method name="setKey"  public="true">
<description/>
<parameter name="key">
<type class="byte" dimension="1"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.lonworks.netmessages.UpdateDomainRequest.toOutputStream(javax.baja.lonworks.io.LonOutputStream) -->
<method name="toOutputStream"  public="true">
<description>
Convert this message to network byte format
</description>
<parameter name="out">
<type class="javax.baja.lonworks.io.LonOutputStream"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.lonworks.netmessages.UpdateDomainRequest.toResponse(javax.baja.lonworks.io.LonInputStream) -->
<method name="toResponse"  public="true">
<description>
This method will take an explicit message check the &#xa;  the message code to determine if it is a valid response.&#xa;  If so then an appropriate response netmessage will be &#xa;  instantiated and return.  If not then and exception will&#xa;  be returned.
</description>
<parameter name="in">
<type class="javax.baja.lonworks.io.LonInputStream"/>
</parameter>
<return>
<type class="javax.baja.lonworks.LonMessage"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.netmessages.UpdateDomainRequest.toString() -->
<method name="toString"  public="true">
<description/>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- com.tridium.lonworks.netmessages.UpdateDomainRequest.DOMAIN_NOT_USED_LEN -->
<field name="DOMAIN_NOT_USED_LEN"  public="true" static="true" final="true">
<type class="int"/>
<description/>
</field>

<!-- com.tridium.lonworks.netmessages.UpdateDomainRequest.domainIndex -->
<field name="domainIndex"  public="true">
<type class="int"/>
<description>
domain index (0 or 1)
</description>
</field>

<!-- com.tridium.lonworks.netmessages.UpdateDomainRequest.id -->
<field name="id"  public="true">
<type class="byte" dimension="1"/>
<description>
domain id
</description>
</field>

<!-- com.tridium.lonworks.netmessages.UpdateDomainRequest.subnet -->
<field name="subnet"  public="true">
<type class="int"/>
<description>
subnet ID
</description>
</field>

<!-- com.tridium.lonworks.netmessages.UpdateDomainRequest.node -->
<field name="node"  public="true">
<type class="int"/>
<description>
node ID
</description>
</field>

<!-- com.tridium.lonworks.netmessages.UpdateDomainRequest.len -->
<field name="len"  public="true">
<type class="int"/>
<description>
length of domain id in bytes, 0xFF indicates not in use
</description>
</field>

<!-- com.tridium.lonworks.netmessages.UpdateDomainRequest.key -->
<field name="key"  public="true">
<type class="byte" dimension="1"/>
<description>
authentication key
</description>
</field>

</class>
</bajadoc>
