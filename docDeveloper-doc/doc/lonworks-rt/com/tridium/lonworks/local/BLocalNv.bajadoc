<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="lonworks" runtimeProfile="rt" qualifiedName="com.tridium.lonworks.local.BLocalNv" name="BLocalNv" packageName="com.tridium.lonworks.local" public="true">
<description>
BLocalNv is a single network variable in a LocalLonDevice. &#xa;  It is represented in the external interface of the local device&#xa;  as presented to other devices on the lonworks trunk.&#xa; &lt;p&gt;
</description>
<tag name="@author">Robert Adams</tag>
<tag name="@creation">18 June 03</tag>
<tag name="@version">$Revision: 4$ $Date: 10/18/01 2:56:44 PM$</tag>
<tag name="@since">Niagara 3.0</tag>
<extends>
<type class="javax.baja.lonworks.BLonComponent"/>
</extends>
<implements>
<type class="javax.baja.lonworks.BINetworkVariable"/>
</implements>
<implements>
<type class="javax.baja.driver.point.BITunable"/>
</implements>
<property name="nvProps" flags="">
<type class="javax.baja.lonworks.datatypes.BNvProps"/>
<description>
Slot for the &lt;code&gt;nvProps&lt;/code&gt; property.&#xa; Properties needed to manage the nv.
</description>
<tag name="@see">#getNvProps</tag>
<tag name="@see">#setNvProps</tag>
</property>

<property name="nvConfigData" flags="">
<type class="javax.baja.lonworks.datatypes.BNvConfigData"/>
<description>
Slot for the &lt;code&gt;nvConfigData&lt;/code&gt; property.&#xa; Nv config table data.
</description>
<tag name="@see">#getNvConfigData</tag>
<tag name="@see">#setNvConfigData</tag>
</property>

<property name="selfDoc" flags="">
<type class="java.lang.String"/>
<description>
Slot for the &lt;code&gt;selfDoc&lt;/code&gt; property.&#xa; Self documentation string.
</description>
<tag name="@see">#getSelfDoc</tag>
<tag name="@see">#setSelfDoc</tag>
</property>

<property name="tuningPolicyName" flags="">
<type class="java.lang.String"/>
<description>
Slot for the &lt;code&gt;tuningPolicyName&lt;/code&gt; property.&#xa; Tuning manages which TuningPolicy to  use for&#xa; reads and writes on this point.
</description>
<tag name="@see">#getTuningPolicyName</tag>
<tag name="@see">#setTuningPolicyName</tag>
</property>

<!-- com.tridium.lonworks.local.BLocalNv() -->
<constructor name="BLocalNv" public="true">
<description>
No arg constructor
</description>
</constructor>

<!-- com.tridium.lonworks.local.BLocalNv(int, int, int, int, int, javax.baja.lonworks.enums.BLonNvDirection, java.lang.String) -->
<constructor name="BLocalNv" public="true">
<parameter name="nvIndex">
<type class="int"/>
</parameter>
<parameter name="snvtType">
<type class="int"/>
</parameter>
<parameter name="objectIndex">
<type class="int"/>
</parameter>
<parameter name="memberIndex">
<type class="int"/>
</parameter>
<parameter name="flags">
<type class="int"/>
</parameter>
<parameter name="direction">
<type class="javax.baja.lonworks.enums.BLonNvDirection"/>
</parameter>
<parameter name="sdoc">
<type class="java.lang.String"/>
</parameter>
<description>
constructor
</description>
</constructor>

<!-- com.tridium.lonworks.local.BLocalNv.getNvProps() -->
<method name="getNvProps"  public="true">
<description>
Get the &lt;code&gt;nvProps&lt;/code&gt; property.&#xa; Properties needed to manage the nv.
</description>
<tag name="@see">#nvProps</tag>
<return>
<type class="javax.baja.lonworks.datatypes.BNvProps"/>
</return>
</method>

<!-- com.tridium.lonworks.local.BLocalNv.setNvProps(javax.baja.lonworks.datatypes.BNvProps) -->
<method name="setNvProps"  public="true">
<description>
Set the &lt;code&gt;nvProps&lt;/code&gt; property.&#xa; Properties needed to manage the nv.
</description>
<tag name="@see">#nvProps</tag>
<parameter name="v">
<type class="javax.baja.lonworks.datatypes.BNvProps"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.lonworks.local.BLocalNv.getNvConfigData() -->
<method name="getNvConfigData"  public="true">
<description>
Get the &lt;code&gt;nvConfigData&lt;/code&gt; property.&#xa; Nv config table data.
</description>
<tag name="@see">#nvConfigData</tag>
<return>
<type class="javax.baja.lonworks.datatypes.BNvConfigData"/>
</return>
</method>

<!-- com.tridium.lonworks.local.BLocalNv.setNvConfigData(javax.baja.lonworks.datatypes.BNvConfigData) -->
<method name="setNvConfigData"  public="true">
<description>
Set the &lt;code&gt;nvConfigData&lt;/code&gt; property.&#xa; Nv config table data.
</description>
<tag name="@see">#nvConfigData</tag>
<parameter name="v">
<type class="javax.baja.lonworks.datatypes.BNvConfigData"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.lonworks.local.BLocalNv.getSelfDoc() -->
<method name="getSelfDoc"  public="true">
<description>
Get the &lt;code&gt;selfDoc&lt;/code&gt; property.&#xa; Self documentation string.
</description>
<tag name="@see">#selfDoc</tag>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- com.tridium.lonworks.local.BLocalNv.setSelfDoc(java.lang.String) -->
<method name="setSelfDoc"  public="true">
<description>
Set the &lt;code&gt;selfDoc&lt;/code&gt; property.&#xa; Self documentation string.
</description>
<tag name="@see">#selfDoc</tag>
<parameter name="v">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.lonworks.local.BLocalNv.getTuningPolicyName() -->
<method name="getTuningPolicyName"  public="true">
<description>
Get the &lt;code&gt;tuningPolicyName&lt;/code&gt; property.&#xa; Tuning manages which TuningPolicy to  use for&#xa; reads and writes on this point.
</description>
<tag name="@see">#tuningPolicyName</tag>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- com.tridium.lonworks.local.BLocalNv.setTuningPolicyName(java.lang.String) -->
<method name="setTuningPolicyName"  public="true">
<description>
Set the &lt;code&gt;tuningPolicyName&lt;/code&gt; property.&#xa; Tuning manages which TuningPolicy to  use for&#xa; reads and writes on this point.
</description>
<tag name="@see">#tuningPolicyName</tag>
<parameter name="v">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.lonworks.local.BLocalNv.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- com.tridium.lonworks.local.BLocalNv.getIcon() -->
<method name="getIcon"  public="true">
<description/>
<return>
<type class="javax.baja.sys.BIcon"/>
</return>
</method>

<!-- com.tridium.lonworks.local.BLocalNv.isParentLegal(javax.baja.sys.BComponent) -->
<method name="isParentLegal"  public="true">
<description>
LocaNv must be child of LocalLonDevice.
</description>
<parameter name="parent">
<type class="javax.baja.sys.BComponent"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- com.tridium.lonworks.local.BLocalNv.lonComponentStarted() -->
<method name="lonComponentStarted"  public="true" final="true">
<description/>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.lonworks.local.BLocalNv.lonComponentStopped() -->
<method name="lonComponentStopped"  public="true" final="true">
<description/>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.lonworks.local.BLocalNv.atSteadyState() -->
<method name="atSteadyState"  public="true">
<description/>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- com.tridium.lonworks.local.BLocalNv.changed(javax.baja.sys.Property, javax.baja.sys.Context) -->
<method name="changed"  public="true">
<description/>
<parameter name="prop">
<type class="javax.baja.sys.Property"/>
</parameter>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.lonworks.local.BLocalNv.dataChanged(javax.baja.sys.Context) -->
<method name="dataChanged"  protected="true">
<description/>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.lonworks.local.BLocalNv.doForceWrite() -->
<method name="doForceWrite"  public="true">
<description>
Implement forceWrite. If nv is a bound output, send an nvUpate.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.lonworks.local.BLocalNv.doForceRead() -->
<method name="doForceRead"  public="true">
<description>
Override to do nothing
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.lonworks.local.BLocalNv.isWriteable() -->
<method name="isWriteable"  public="true">
<description>
Returns true if this is an output nv.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- com.tridium.lonworks.local.BLocalNv.getNvIndex() -->
<method name="getNvIndex"  public="true">
<description>
Get the index of this nv in the lonworks device.
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- com.tridium.lonworks.local.BLocalNv.setNvIndex(int) -->
<method name="setNvIndex"  public="true">
<description>
Set the index of this nv in the lonworks device.
</description>
<parameter name="nvIndex">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.lonworks.local.BLocalNv.getSnvtType() -->
<method name="getSnvtType"  public="true">
<description>
Get the snvt type. If not a snvt return 0.
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- com.tridium.lonworks.local.BLocalNv.setUnbound() -->
<method name="setUnbound"  public="true">
<description>
Set nv to unbound state. Convience method to call &#xa; nvProps.setUnbound(), configData.setUnbound() and unbound().
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.lonworks.local.BLocalNv.isLocalNv() -->
<method name="isLocalNv"  public="true">
<description/>
<tag name="@returns">always true</tag>
<return>
<type class="boolean"/>
</return>
</method>

<!-- com.tridium.lonworks.local.BLocalNv.receiveUpdate(byte[]) -->
<method name="receiveUpdate"  public="true">
<description>
Receive nvUpdate for this nv.
</description>
<parameter name="nvData">
<type class="byte" dimension="1"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.lonworks.local.BLocalNv.configure(javax.baja.lonworks.enums.BLonSnvtType, javax.baja.lonworks.enums.BLonNvDirection, java.lang.String) -->
<method name="configure"  public="true">
<description/>
<parameter name="type">
<type class="javax.baja.lonworks.enums.BLonSnvtType"/>
</parameter>
<parameter name="dir">
<type class="javax.baja.lonworks.enums.BLonNvDirection"/>
</parameter>
<parameter name="sDoc">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.lonworks.local.BLocalNv.getTuning() -->
<method name="getTuning"  public="true">
<description>
Get tuning support instance.
</description>
<return>
<type class="javax.baja.driver.point.Tuning"/>
</return>
</method>

<!-- com.tridium.lonworks.local.BLocalNv.isFatalFault() -->
<method name="isFatalFault"  public="true">
<description>
Return true if the network/device/component has a&#xa; fatal fault which prevents normal operation.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- com.tridium.lonworks.local.BLocalNv.getStatus() -->
<method name="getStatus"  public="true">
<description>
Get the status of the component.  The status should have&#xa; the down bit set if the network or device is down.  The&#xa; status should have the outOfService bit set if the&#xa; network/device/component is out of service.
</description>
<return>
<type class="javax.baja.status.BStatus"/>
</return>
</method>

<!-- com.tridium.lonworks.local.BLocalNv.isSubscribedDesired() -->
<method name="isSubscribedDesired"  public="true">
<description>
Return if the tunable component currently desires&#xa; to be subscribed.  This is independent of any status&#xa; conditions which might be preventing actual subscription.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- com.tridium.lonworks.local.BLocalNv.getMode() -->
<method name="getMode"  public="true">
<description>
Return if the component is readonly, readWrite, or writeOnly.
</description>
<return>
<type class="javax.baja.driver.point.BReadWriteMode"/>
</return>
</method>

<!-- com.tridium.lonworks.local.BLocalNv.readSubscribed(javax.baja.sys.Context) -->
<method name="readSubscribed"  public="true">
<description/>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.lonworks.local.BLocalNv.readUnsubscribed(javax.baja.sys.Context) -->
<method name="readUnsubscribed"  public="true">
<description/>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.lonworks.local.BLocalNv.write(javax.baja.sys.Context) -->
<method name="write"  public="true">
<description>
This callback is made when a write is desired based on the&#xa; current status and tuning. It will filter out writes that&#xa; are not initiated by the user i.e. due to tuning police(maxTime,startup,etc)&#xa; if the nv is not link or if linked and bound.
</description>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- com.tridium.lonworks.local.BLocalNv.setStale(boolean, javax.baja.sys.Context) -->
<method name="setStale"  public="true">
<description>
Pass setStale callback to any proxies attached to this nvs data.
</description>
<parameter name="s">
<type class="boolean"/>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.lonworks.local.BLocalNv.nvProps -->
<field name="nvProps"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;nvProps&lt;/code&gt; property.&#xa; Properties needed to manage the nv.
</description>
<tag name="@see">#getNvProps</tag>
<tag name="@see">#setNvProps</tag>
</field>

<!-- com.tridium.lonworks.local.BLocalNv.nvConfigData -->
<field name="nvConfigData"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;nvConfigData&lt;/code&gt; property.&#xa; Nv config table data.
</description>
<tag name="@see">#getNvConfigData</tag>
<tag name="@see">#setNvConfigData</tag>
</field>

<!-- com.tridium.lonworks.local.BLocalNv.selfDoc -->
<field name="selfDoc"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;selfDoc&lt;/code&gt; property.&#xa; Self documentation string.
</description>
<tag name="@see">#getSelfDoc</tag>
<tag name="@see">#setSelfDoc</tag>
</field>

<!-- com.tridium.lonworks.local.BLocalNv.tuningPolicyName -->
<field name="tuningPolicyName"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;tuningPolicyName&lt;/code&gt; property.&#xa; Tuning manages which TuningPolicy to  use for&#xa; reads and writes on this point.
</description>
<tag name="@see">#getTuningPolicyName</tag>
<tag name="@see">#setTuningPolicyName</tag>
</field>

<!-- com.tridium.lonworks.local.BLocalNv.forceRead -->
<field name="forceRead"  public="true" static="true" final="true">
<type class="javax.baja.sys.Action"/>
<description>
Slot for the &lt;code&gt;forceRead&lt;/code&gt; action.
</description>
<tag name="@see">#forceRead()</tag>
</field>

<!-- com.tridium.lonworks.local.BLocalNv.forceWrite -->
<field name="forceWrite"  public="true" static="true" final="true">
<type class="javax.baja.sys.Action"/>
<description>
Slot for the &lt;code&gt;forceWrite&lt;/code&gt; action.
</description>
<tag name="@see">#forceWrite()</tag>
</field>

<!-- com.tridium.lonworks.local.BLocalNv.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
