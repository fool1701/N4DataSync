<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="lonworks" runtimeProfile="rt" qualifiedName="com.tridium.lonworks.xml.XLonInterfaceFile" name="XLonInterfaceFile" packageName="com.tridium.lonworks.xml" public="true">
<description>
XLonInterfaceFile contains all the data from an LNML file.
</description>
<tag name="@author">Robert Adams</tag>
<tag name="@creation">29 June 01</tag>
<tag name="@version">$Revision: 4$ $Date: 9/28/01 11:22:56 AM$</tag>
<tag name="@since">Niagara 3.0</tag>
<extends>
<type class="com.tridium.lonworks.xml.XLonData"/>
</extends>
<!-- com.tridium.lonworks.xml.XLonInterfaceFile() -->
<constructor name="XLonInterfaceFile" public="true">
<description/>
</constructor>

<!-- com.tridium.lonworks.xml.XLonInterfaceFile.addAttribute(java.lang.String, java.lang.Object) -->
<method name="addAttribute"  public="true">
<description/>
<parameter name="name">
<type class="java.lang.String"/>
</parameter>
<parameter name="obj">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.lonworks.xml.XLonInterfaceFile.setFile(java.lang.String) -->
<method name="setFile"  public="true">
<description>
Set file. The fileName needs to be available to &#xa; allow file path to be available for lnml include file.
</description>
<parameter name="file">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.lonworks.xml.XLonInterfaceFile.getFile() -->
<method name="getFile"  public="true">
<description>
Get file.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- com.tridium.lonworks.xml.XLonInterfaceFile.getLonDevice() -->
<method name="getLonDevice"  public="true">
<description>
Get the first lonDevice.
</description>
<return>
<type class="com.tridium.lonworks.xml.XLonDevice"/>
</return>
</method>

<!-- com.tridium.lonworks.xml.XLonInterfaceFile.resolveTypeDef(com.tridium.lonworks.xml.XTypeDef, java.lang.String) -->
<method name="resolveTypeDef"  public="true">
<description>
This version of the method resolveTypeDef should be used when&#xa; trying to resolve the type of an element that is a member of&#xa; another type (for example a part of a structure).&#xa; &#xa; This overloaded version of the resolveTypeDef method is being&#xa; created to handle the case where a structured type contains a&#xa; reference whose type looks at first glance as the same as the&#xa; structured type string. This method takes extra precaution not&#xa; to return the same XTypeDef reference as the outerType. Doing&#xa; so could cause an infinite recursion (stack overflow) from the&#xa; method resolveRefs on objects of the class XTypeDef as it would&#xa; continually try to resolve the member element to the same type&#xa; as itself, which it is trying to resolve.
</description>
<parameter name="outerType">
<type class="com.tridium.lonworks.xml.XTypeDef"/>
</parameter>
<parameter name="name">
<type class="java.lang.String"/>
<description>
is the name of the element&#x27;s type.
</description>
</parameter>
<return>
<type class="com.tridium.lonworks.xml.XTypeDef"/>
</return>
</method>

<!-- com.tridium.lonworks.xml.XLonInterfaceFile.resolveTypeDef(java.lang.String) -->
<method name="resolveTypeDef"  public="true">
<description/>
<parameter name="name">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="com.tridium.lonworks.xml.XTypeDef"/>
</return>
</method>

<!-- com.tridium.lonworks.xml.XLonInterfaceFile.includes(java.lang.String) -->
<method name="includes"  public="true">
<description/>
<parameter name="lnml">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- com.tridium.lonworks.xml.XLonInterfaceFile.resolveEnumDef(java.lang.String) -->
<method name="resolveEnumDef"  public="true">
<description/>
<parameter name="name">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="com.tridium.lonworks.xml.XEnumDef"/>
</return>
</method>

<!-- com.tridium.lonworks.xml.XLonInterfaceFile.resolveTypeDefToLnml(java.lang.String) -->
<method name="resolveTypeDefToLnml"  public="true">
<description>
Finds the name of an lnml file that defines a type with&#xa; the given name. If the type is not found in this lnml file,&#xa; then this lnml file will search all lnml files that are imported&#xa; at the top of this lnml file.
</description>
<parameter name="name">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="java.lang.String"/>
<description>
String the name of the lnml file that declares an XTypeDef&#xa; whose name is the same as the given name. Null is returned if no&#xa; XTypeDef is found in this lnml or any lnml files that are imported by&#xa; this lnml file.
</description>
</return>
</method>

<!-- com.tridium.lonworks.xml.XLonInterfaceFile.resolveEnumDefToLnml(java.lang.String) -->
<method name="resolveEnumDefToLnml"  public="true">
<description>
Looks for the given enum type.
</description>
<parameter name="name">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="java.lang.String"/>
<description>
String the name of the LNML file file that defines the given enum type.
</description>
</return>
</method>

<!-- com.tridium.lonworks.xml.XLonInterfaceFile.getXType(java.lang.String) -->
<method name="getXType"  public="true">
<description/>
<parameter name="typeScope">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="com.tridium.lonworks.xml.XTypeDef"/>
</return>
</method>

<!-- com.tridium.lonworks.xml.XLonInterfaceFile.getXCpType(java.lang.String) -->
<method name="getXCpType"  public="true">
<description/>
<parameter name="typeScope">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="com.tridium.lonworks.xml.XCpTypeDef"/>
</return>
</method>

<!-- com.tridium.lonworks.xml.XLonInterfaceFile.imports -->
<field name="imports"  public="true">
<parameterizedType class="java.util.Vector">
<args>
<type class="com.tridium.lonworks.xml.XLonInterfaceFile"/>
</args>
</parameterizedType>
<description/>
</field>

<!-- com.tridium.lonworks.xml.XLonInterfaceFile.enums -->
<field name="enums"  public="true">
<parameterizedType class="java.util.Vector">
<args>
<type class="com.tridium.lonworks.xml.XEnumDef"/>
</args>
</parameterizedType>
<description/>
</field>

<!-- com.tridium.lonworks.xml.XLonInterfaceFile.types -->
<field name="types"  public="true">
<parameterizedType class="java.util.Vector">
<args>
<type class="com.tridium.lonworks.xml.XTypeDef"/>
</args>
</parameterizedType>
<description/>
</field>

<!-- com.tridium.lonworks.xml.XLonInterfaceFile.devices -->
<field name="devices"  public="true">
<parameterizedType class="java.util.Vector">
<args>
<type class="com.tridium.lonworks.xml.XLonDevice"/>
</args>
</parameterizedType>
<description/>
</field>

<!-- com.tridium.lonworks.xml.XLonInterfaceFile.protect -->
<field name="protect"  public="true">
<type class="java.lang.String"/>
<description>
Field should contain reason for not regenerating the file.
</description>
</field>

</class>
</bajadoc>
