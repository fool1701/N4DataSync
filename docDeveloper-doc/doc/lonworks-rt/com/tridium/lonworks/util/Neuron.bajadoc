<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="lonworks" runtimeProfile="rt" qualifiedName="com.tridium.lonworks.util.Neuron" name="Neuron" packageName="com.tridium.lonworks.util" public="true">
<description>
This object contains static methods to access structues in the&#xa; Neuron on lonworks devices.
</description>
<extends>
<type class="java.lang.Object"/>
</extends>
<implements>
<type class="com.tridium.lonworks.netmessages.NetMessages"/>
</implements>
<implements>
<type class="com.tridium.lonworks.netmgmt.NetMgmtConst"/>
</implements>
<!-- com.tridium.lonworks.util.Neuron() -->
<constructor name="Neuron" public="true">
<description/>
</constructor>

<!-- com.tridium.lonworks.util.Neuron.uploadDeviceData(javax.baja.lonworks.BLonDevice) -->
<method name="uploadDeviceData"  public="true" static="true">
<description>
Get DeviceData from a lonworks device.&#xa;  hosted,toDomains,addressCount,nvCount
</description>
<parameter name="dev">
<type class="javax.baja.lonworks.BLonDevice"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.Neuron.getProgramId(javax.baja.lonworks.BLonDevice) -->
<method name="getProgramId"  public="true" static="true">
<description>
Get Program Id from ReadOnly memory in specified lonworks device.
</description>
<parameter name="dev">
<type class="javax.baja.lonworks.BLonDevice"/>
</parameter>
<return>
<type class="javax.baja.lonworks.datatypes.BProgramId"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.Neuron.getProgramId(javax.baja.lonworks.LonComm, javax.baja.lonworks.datatypes.LonAddress, boolean) -->
<method name="getProgramId"  public="true" static="true">
<description>
Get Program Id from ReadOnly memory.
</description>
<parameter name="lonComm">
<type class="javax.baja.lonworks.LonComm"/>
</parameter>
<parameter name="sendAddr">
<type class="javax.baja.lonworks.datatypes.LonAddress"/>
</parameter>
<parameter name="auth">
<type class="boolean"/>
</parameter>
<return>
<type class="javax.baja.lonworks.datatypes.BProgramId"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.Neuron.getProgramId(com.tridium.lonworks.BLonRouter, boolean) -->
<method name="getProgramId"  public="true" static="true">
<description>
Get Program Id from ReadOnly memory in specified lonworks router.
</description>
<parameter name="rtr">
<type class="com.tridium.lonworks.BLonRouter"/>
</parameter>
<parameter name="farSide">
<type class="boolean"/>
</parameter>
<return>
<type class="javax.baja.lonworks.datatypes.BProgramId"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.Neuron.getNeuronId(javax.baja.lonworks.BLonDevice) -->
<method name="getNeuronId"  public="true" static="true">
<description>
Get Neuron Id from ReadOnly memory in specified lonworks device.
</description>
<parameter name="dev">
<type class="javax.baja.lonworks.BLonDevice"/>
</parameter>
<return>
<type class="javax.baja.lonworks.datatypes.BNeuronId"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.Neuron.getNeuronId(com.tridium.lonworks.BLonRouter, boolean) -->
<method name="getNeuronId"  public="true" static="true">
<description>
Get Neuron Id from ReadOnly memory in specified router device.
</description>
<parameter name="rtr">
<type class="com.tridium.lonworks.BLonRouter"/>
</parameter>
<parameter name="farSide">
<type class="boolean"/>
</parameter>
<return>
<type class="javax.baja.lonworks.datatypes.BNeuronId"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.Neuron.getNeuronId(javax.baja.lonworks.LonComm, javax.baja.lonworks.datatypes.LonAddress, boolean, boolean) -->
<method name="getNeuronId"  public="true" static="true">
<description/>
<parameter name="lonComm">
<type class="javax.baja.lonworks.LonComm"/>
</parameter>
<parameter name="sendAddr">
<type class="javax.baja.lonworks.datatypes.LonAddress"/>
</parameter>
<parameter name="auth">
<type class="boolean"/>
</parameter>
<parameter name="farSide">
<type class="boolean"/>
</parameter>
<return>
<type class="javax.baja.lonworks.datatypes.BNeuronId"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.Neuron.getSnvtPtr(javax.baja.lonworks.LonComm, javax.baja.lonworks.datatypes.LonAddress, boolean) -->
<method name="getSnvtPtr"  public="true" static="true">
<description>
Get Snvt pointer from ReadOnly memory in a lonworks device.
</description>
<parameter name="lonComm">
<type class="javax.baja.lonworks.LonComm"/>
</parameter>
<parameter name="sendAddr">
<type class="javax.baja.lonworks.datatypes.LonAddress"/>
</parameter>
<parameter name="auth">
<type class="boolean"/>
</parameter>
<return>
<type class="int"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.Neuron.getVersion(javax.baja.lonworks.LonComm, javax.baja.lonworks.datatypes.LonAddress, boolean) -->
<method name="getVersion"  public="true" static="true">
<description>
Get firmware version number from memory location 0.
</description>
<parameter name="lonComm">
<type class="javax.baja.lonworks.LonComm"/>
</parameter>
<parameter name="sendAddr">
<type class="javax.baja.lonworks.datatypes.LonAddress"/>
</parameter>
<parameter name="auth">
<type class="boolean"/>
</parameter>
<return>
<type class="int"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.Neuron.isHostedNode(javax.baja.lonworks.BLonDevice) -->
<method name="isHostedNode"  public="true" static="true">
<description>
Check if lonworks device is a hosted node.
</description>
<parameter name="dev">
<type class="javax.baja.lonworks.BLonDevice"/>
</parameter>
<return>
<type class="boolean"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.Neuron.isHostedNode(javax.baja.lonworks.LonComm, javax.baja.lonworks.datatypes.LonAddress, boolean) -->
<method name="isHostedNode"  public="true" static="true">
<description>
Check if lonworks device is a hosted node.
</description>
<parameter name="lonComm">
<type class="javax.baja.lonworks.LonComm"/>
</parameter>
<parameter name="sendAddr">
<type class="javax.baja.lonworks.datatypes.LonAddress"/>
</parameter>
<parameter name="auth">
<type class="boolean"/>
</parameter>
<return>
<type class="boolean"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.Neuron.isTwoDomains(javax.baja.lonworks.LonComm, javax.baja.lonworks.datatypes.LonAddress, boolean, boolean) -->
<method name="isTwoDomains"  public="true" static="true">
<description>
Get state of twoDomains flag in ReadOnly memory in lonworks&#xa;  device at specified address.
</description>
<parameter name="lonComm">
<type class="javax.baja.lonworks.LonComm"/>
</parameter>
<parameter name="sendAddr">
<type class="javax.baja.lonworks.datatypes.LonAddress"/>
</parameter>
<parameter name="auth">
<type class="boolean"/>
</parameter>
<parameter name="farSide">
<type class="boolean"/>
</parameter>
<return>
<type class="boolean"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.Neuron.getNvCount(javax.baja.lonworks.BLonDevice) -->
<method name="getNvCount"  public="true" static="true">
<description>
Get number of nvs from ReadOnly memory in lonworks device&#xa;  at specified address. This is only valid if not a hosted node.
</description>
<parameter name="dev">
<type class="javax.baja.lonworks.BLonDevice"/>
</parameter>
<return>
<type class="int"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.Neuron.getNvCount(javax.baja.lonworks.LonComm, javax.baja.lonworks.datatypes.LonAddress, boolean) -->
<method name="getNvCount"  public="true" static="true">
<description/>
<parameter name="lonComm">
<type class="javax.baja.lonworks.LonComm"/>
</parameter>
<parameter name="sendAddr">
<type class="javax.baja.lonworks.datatypes.LonAddress"/>
</parameter>
<parameter name="auth">
<type class="boolean"/>
</parameter>
<return>
<type class="int"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.Neuron.getAliasOffset(javax.baja.lonworks.LonComm, javax.baja.lonworks.datatypes.LonAddress, boolean, boolean) -->
<method name="getAliasOffset"  public="true" static="true">
<description>
Get offset into nvConfig of first alias entry.
</description>
<parameter name="lonComm">
<type class="javax.baja.lonworks.LonComm"/>
</parameter>
<parameter name="sendAddr">
<type class="javax.baja.lonworks.datatypes.LonAddress"/>
</parameter>
<parameter name="auth">
<type class="boolean"/>
</parameter>
<parameter name="extended">
<type class="boolean"/>
</parameter>
<return>
<type class="int"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.Neuron.getAddressCount(javax.baja.lonworks.LonComm, javax.baja.lonworks.datatypes.LonAddress, boolean, boolean) -->
<method name="getAddressCount"  public="true" static="true">
<description>
Get address count from ReadOnly memory in lonworks device at&#xa;  specified address.
</description>
<parameter name="lonComm">
<type class="javax.baja.lonworks.LonComm"/>
</parameter>
<parameter name="sendAddr">
<type class="javax.baja.lonworks.datatypes.LonAddress"/>
</parameter>
<parameter name="auth">
<type class="boolean"/>
</parameter>
<parameter name="extended">
<type class="boolean"/>
</parameter>
<return>
<type class="int"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.Neuron.getAliasCount(javax.baja.lonworks.BLonDevice) -->
<method name="getAliasCount"  public="true" static="true">
<description>
Get alias count from ReadOnly memory in specified device
</description>
<parameter name="dev">
<type class="javax.baja.lonworks.BLonDevice"/>
</parameter>
<return>
<type class="int"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.Neuron.getAliasCount(javax.baja.lonworks.LonComm, javax.baja.lonworks.datatypes.LonAddress, boolean) -->
<method name="getAliasCount"  public="true" static="true">
<description>
Get alias count from ReadOnly memory in lonworks device at&#xa;  specified address. NOTE: this field is not used in hosted nodes
</description>
<parameter name="lonComm">
<type class="javax.baja.lonworks.LonComm"/>
</parameter>
<parameter name="sendAddr">
<type class="javax.baja.lonworks.datatypes.LonAddress"/>
</parameter>
<parameter name="auth">
<type class="boolean"/>
</parameter>
<return>
<type class="int"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.Neuron.getChannelId(javax.baja.lonworks.BLonDevice) -->
<method name="getChannelId"  public="true" static="true">
<description>
Read the channel id for the config structure.
</description>
<parameter name="dev">
<type class="javax.baja.lonworks.BLonDevice"/>
</parameter>
<return>
<type class="int"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.Neuron.getChannelId(com.tridium.lonworks.BLonRouter, boolean) -->
<method name="getChannelId"  public="true" static="true">
<description/>
<parameter name="rtr">
<type class="com.tridium.lonworks.BLonRouter"/>
</parameter>
<parameter name="farSide">
<type class="boolean"/>
</parameter>
<return>
<type class="int"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.Neuron.getChannelId(javax.baja.lonworks.LonComm, javax.baja.lonworks.datatypes.LonAddress, boolean, boolean) -->
<method name="getChannelId"  public="true" static="true">
<description/>
<parameter name="lonComm">
<type class="javax.baja.lonworks.LonComm"/>
</parameter>
<parameter name="sendAddr">
<type class="javax.baja.lonworks.datatypes.LonAddress"/>
</parameter>
<parameter name="auth">
<type class="boolean"/>
</parameter>
<parameter name="farSide">
<type class="boolean"/>
</parameter>
<return>
<type class="int"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.Neuron.getReadOnlyStruct(javax.baja.lonworks.LonComm, javax.baja.lonworks.datatypes.LonAddress, boolean, boolean) -->
<method name="getReadOnlyStruct"  public="true" static="true">
<description>
Read the entire ReadOnly structure in lonworks device at&#xa;  specified address.
</description>
<parameter name="lonComm">
<type class="javax.baja.lonworks.LonComm"/>
</parameter>
<parameter name="sendAddr">
<type class="javax.baja.lonworks.datatypes.LonAddress"/>
</parameter>
<parameter name="auth">
<type class="boolean"/>
</parameter>
<parameter name="farSide">
<type class="boolean"/>
</parameter>
<return>
<type class="byte" dimension="1"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.Neuron.getConfigStruct(javax.baja.lonworks.LonComm, javax.baja.lonworks.datatypes.LonAddress, boolean, boolean) -->
<method name="getConfigStruct"  public="true" static="true">
<description>
Read the entire Config structure in lonworks device at&#xa;  specified address.
</description>
<parameter name="lonComm">
<type class="javax.baja.lonworks.LonComm"/>
</parameter>
<parameter name="sendAddr">
<type class="javax.baja.lonworks.datatypes.LonAddress"/>
</parameter>
<parameter name="auth">
<type class="boolean"/>
</parameter>
<parameter name="farSide">
<type class="boolean"/>
</parameter>
<return>
<type class="byte" dimension="1"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.Neuron.readTable(javax.baja.lonworks.LonComm, javax.baja.lonworks.datatypes.LonAddress, int, int, boolean, boolean) -->
<method name="readTable"  public="true" static="true">
<description/>
<parameter name="lonComm">
<type class="javax.baja.lonworks.LonComm"/>
</parameter>
<parameter name="sendAddr">
<type class="javax.baja.lonworks.datatypes.LonAddress"/>
</parameter>
<parameter name="memType">
<type class="int"/>
</parameter>
<parameter name="len">
<type class="int"/>
</parameter>
<parameter name="auth">
<type class="boolean"/>
</parameter>
<parameter name="farSide">
<type class="boolean"/>
</parameter>
<return>
<type class="byte" dimension="1"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.Neuron.updateConfigData(com.tridium.lonworks.netmgmt.BLonNetmgmt, javax.baja.lonworks.BLonDevice) -->
<method name="updateConfigData"  public="true" static="true">
<description/>
<parameter name="nm">
<type class="com.tridium.lonworks.netmgmt.BLonNetmgmt"/>
</parameter>
<parameter name="dev">
<type class="javax.baja.lonworks.BLonDevice"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.Neuron.updateConfigData(com.tridium.lonworks.netmgmt.BLonNetmgmt, com.tridium.lonworks.BLonRouter, boolean) -->
<method name="updateConfigData"  public="true" static="true">
<description/>
<parameter name="nm">
<type class="com.tridium.lonworks.netmgmt.BLonNetmgmt"/>
</parameter>
<parameter name="rtr">
<type class="com.tridium.lonworks.BLonRouter"/>
</parameter>
<parameter name="farSide">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.Neuron.updateConfigData(javax.baja.lonworks.LonComm, javax.baja.lonworks.datatypes.LonAddress, com.tridium.lonworks.netmgmt.BLonNetmgmt, javax.baja.lonworks.datatypes.BDeviceData, boolean) -->
<method name="updateConfigData"  public="true" static="true">
<description/>
<parameter name="lonComm">
<type class="javax.baja.lonworks.LonComm"/>
</parameter>
<parameter name="sendAddr">
<type class="javax.baja.lonworks.datatypes.LonAddress"/>
</parameter>
<parameter name="nm">
<type class="com.tridium.lonworks.netmgmt.BLonNetmgmt"/>
</parameter>
<parameter name="devDat">
<type class="javax.baja.lonworks.datatypes.BDeviceData"/>
</parameter>
<parameter name="farSide">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.Neuron.updateChannelId(javax.baja.lonworks.BLonDevice) -->
<method name="updateChannelId"  public="true" static="true">
<description/>
<parameter name="dev">
<type class="javax.baja.lonworks.BLonDevice"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.Neuron.setNMAuthenticate(javax.baja.lonworks.BLonDevice, boolean) -->
<method name="setNMAuthenticate"  public="true" static="true">
<description>
Authentication utility methods
</description>
<parameter name="dev">
<type class="javax.baja.lonworks.BLonDevice"/>
</parameter>
<parameter name="authOn">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.Neuron.setNMAuthenticate(javax.baja.lonworks.LonComm, javax.baja.lonworks.datatypes.LonAddress, boolean) -->
<method name="setNMAuthenticate"  public="true" static="true">
<description/>
<parameter name="lonComm">
<type class="javax.baja.lonworks.LonComm"/>
</parameter>
<parameter name="sendAddr">
<type class="javax.baja.lonworks.datatypes.LonAddress"/>
</parameter>
<parameter name="authOn">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.Neuron.verifyAuthenticate(javax.baja.lonworks.BLonDevice) -->
<method name="verifyAuthenticate"  public="true" static="true">
<description/>
<parameter name="dev">
<type class="javax.baja.lonworks.BLonDevice"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.Neuron.isNMAuthSet(javax.baja.lonworks.BLonDevice) -->
<method name="isNMAuthSet"  public="true" static="true">
<description/>
<parameter name="dev">
<type class="javax.baja.lonworks.BLonDevice"/>
</parameter>
<return>
<type class="boolean"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.Neuron.isNMAuthSet(javax.baja.lonworks.LonComm, javax.baja.lonworks.datatypes.LonAddress, boolean, boolean) -->
<method name="isNMAuthSet"  public="true" static="true">
<description/>
<parameter name="lonComm">
<type class="javax.baja.lonworks.LonComm"/>
</parameter>
<parameter name="sendAddr">
<type class="javax.baja.lonworks.datatypes.LonAddress"/>
</parameter>
<parameter name="auth">
<type class="boolean"/>
</parameter>
<parameter name="farSide">
<type class="boolean"/>
</parameter>
<return>
<type class="boolean"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.Neuron.isAuthBitSet(byte) -->
<method name="isAuthBitSet"  public="true" static="true">
<description/>
<parameter name="a">
<type class="byte"/>
</parameter>
<return>
<type class="boolean"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.Neuron.setNodePriority(javax.baja.lonworks.BLonDevice, int) -->
<method name="setNodePriority"  public="true" static="true">
<description>
Node priority utility methods
</description>
<parameter name="dev">
<type class="javax.baja.lonworks.BLonDevice"/>
</parameter>
<parameter name="priority">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.Neuron.getNodePriority(javax.baja.lonworks.BLonDevice) -->
<method name="getNodePriority"  public="true" static="true">
<description/>
<parameter name="dev">
<type class="javax.baja.lonworks.BLonDevice"/>
</parameter>
<return>
<type class="int"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.Neuron.setNodePriorityInfo(javax.baja.lonworks.BLonDevice, int, int) -->
<method name="setNodePriorityInfo"  public="true" static="true">
<description>
Node priority utility method. Set node_priorities and channel_priorities.
</description>
<parameter name="dev">
<type class="javax.baja.lonworks.BLonDevice"/>
</parameter>
<parameter name="priority">
<type class="int"/>
</parameter>
<parameter name="numPriorities">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.Neuron.setLocation(javax.baja.lonworks.BLonDevice, java.lang.String) -->
<method name="setLocation"  public="true" static="true">
<description>
Location utility methods
</description>
<parameter name="dev">
<type class="javax.baja.lonworks.BLonDevice"/>
</parameter>
<parameter name="location">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.Neuron.setLocation(com.tridium.lonworks.BLonRouter, java.lang.String, boolean) -->
<method name="setLocation"  public="true" static="true">
<description/>
<parameter name="rtr">
<type class="com.tridium.lonworks.BLonRouter"/>
</parameter>
<parameter name="location">
<type class="java.lang.String"/>
</parameter>
<parameter name="farSide">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.Neuron.setLocation(javax.baja.lonworks.LonComm, javax.baja.lonworks.datatypes.LonAddress, java.lang.String, boolean, boolean) -->
<method name="setLocation"  public="true" static="true">
<description/>
<parameter name="lonComm">
<type class="javax.baja.lonworks.LonComm"/>
</parameter>
<parameter name="sendAddr">
<type class="javax.baja.lonworks.datatypes.LonAddress"/>
</parameter>
<parameter name="location">
<type class="java.lang.String"/>
</parameter>
<parameter name="auth">
<type class="boolean"/>
</parameter>
<parameter name="farSide">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.Neuron.getLocation(javax.baja.lonworks.BLonDevice) -->
<method name="getLocation"  public="true" static="true">
<description/>
<parameter name="dev">
<type class="javax.baja.lonworks.BLonDevice"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.Neuron.getLocation(javax.baja.lonworks.LonComm, javax.baja.lonworks.datatypes.LonAddress, boolean) -->
<method name="getLocation"  public="true" static="true">
<description/>
<parameter name="lonComm">
<type class="javax.baja.lonworks.LonComm"/>
</parameter>
<parameter name="sendAddr">
<type class="javax.baja.lonworks.datatypes.LonAddress"/>
</parameter>
<parameter name="auth">
<type class="boolean"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.Neuron.readMemory(int, javax.baja.lonworks.BLonDevice, int, int) -->
<method name="readMemory"  public="true" static="true">
<description/>
<parameter name="memType">
<type class="int"/>
</parameter>
<parameter name="dev">
<type class="javax.baja.lonworks.BLonDevice"/>
</parameter>
<parameter name="offset">
<type class="int"/>
</parameter>
<parameter name="length">
<type class="int"/>
</parameter>
<return>
<type class="byte" dimension="1"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.Neuron.readMemory(javax.baja.lonworks.LonComm, int, javax.baja.lonworks.datatypes.LonAddress, int, int, boolean) -->
<method name="readMemory"  public="true" static="true">
<description/>
<parameter name="lonComm">
<type class="javax.baja.lonworks.LonComm"/>
</parameter>
<parameter name="memType">
<type class="int"/>
</parameter>
<parameter name="sendAddr">
<type class="javax.baja.lonworks.datatypes.LonAddress"/>
</parameter>
<parameter name="offset">
<type class="int"/>
</parameter>
<parameter name="length">
<type class="int"/>
</parameter>
<parameter name="auth">
<type class="boolean"/>
</parameter>
<return>
<type class="byte" dimension="1"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.Neuron.readMemory(javax.baja.lonworks.LonComm, int, javax.baja.lonworks.datatypes.LonAddress, int, int, boolean, boolean) -->
<method name="readMemory"  public="true" static="true">
<description/>
<parameter name="lonComm">
<type class="javax.baja.lonworks.LonComm"/>
</parameter>
<parameter name="memType">
<type class="int"/>
</parameter>
<parameter name="sendAddr">
<type class="javax.baja.lonworks.datatypes.LonAddress"/>
</parameter>
<parameter name="offset">
<type class="int"/>
</parameter>
<parameter name="length">
<type class="int"/>
</parameter>
<parameter name="auth">
<type class="boolean"/>
</parameter>
<parameter name="farSide">
<type class="boolean"/>
</parameter>
<return>
<type class="byte" dimension="1"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.Neuron.readMemory(javax.baja.lonworks.LonComm, int, javax.baja.lonworks.datatypes.LonAddress, int, int, boolean, boolean, int) -->
<method name="readMemory"  public="true" static="true">
<description/>
<parameter name="lonComm">
<type class="javax.baja.lonworks.LonComm"/>
</parameter>
<parameter name="memType">
<type class="int"/>
</parameter>
<parameter name="sendAddr">
<type class="javax.baja.lonworks.datatypes.LonAddress"/>
</parameter>
<parameter name="offset">
<type class="int"/>
</parameter>
<parameter name="length">
<type class="int"/>
</parameter>
<parameter name="auth">
<type class="boolean"/>
</parameter>
<parameter name="farSide">
<type class="boolean"/>
</parameter>
<parameter name="maxLen">
<type class="int"/>
</parameter>
<return>
<type class="byte" dimension="1"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.Neuron.writeMemory(int, javax.baja.lonworks.BLonDevice, int, int, byte[]) -->
<method name="writeMemory"  public="true" static="true">
<description/>
<parameter name="memType">
<type class="int"/>
</parameter>
<parameter name="dev">
<type class="javax.baja.lonworks.BLonDevice"/>
</parameter>
<parameter name="offset">
<type class="int"/>
</parameter>
<parameter name="form">
<type class="int"/>
</parameter>
<parameter name="data">
<type class="byte" dimension="1"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.Neuron.writeMemory(javax.baja.lonworks.LonComm, int, javax.baja.lonworks.datatypes.LonAddress, int, int, byte[], boolean, boolean) -->
<method name="writeMemory"  public="true" static="true">
<description/>
<parameter name="lonComm">
<type class="javax.baja.lonworks.LonComm"/>
</parameter>
<parameter name="memType">
<type class="int"/>
</parameter>
<parameter name="sendAddr">
<type class="javax.baja.lonworks.datatypes.LonAddress"/>
</parameter>
<parameter name="offset">
<type class="int"/>
</parameter>
<parameter name="form">
<type class="int"/>
</parameter>
<parameter name="data">
<type class="byte" dimension="1"/>
</parameter>
<parameter name="auth">
<type class="boolean"/>
</parameter>
<parameter name="farSide">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.Neuron.querySnvt(javax.baja.lonworks.LonComm, javax.baja.lonworks.datatypes.LonAddress, int, int, boolean, int) -->
<method name="querySnvt"  public="true" static="true">
<description/>
<parameter name="lonComm">
<type class="javax.baja.lonworks.LonComm"/>
</parameter>
<parameter name="sendAddr">
<type class="javax.baja.lonworks.datatypes.LonAddress"/>
</parameter>
<parameter name="offset">
<type class="int"/>
</parameter>
<parameter name="length">
<type class="int"/>
</parameter>
<parameter name="auth">
<type class="boolean"/>
</parameter>
<parameter name="maxLen">
<type class="int"/>
</parameter>
<return>
<type class="byte" dimension="1"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.Neuron.getBufferCount(int) -->
<method name="getBufferCount"  public="true" static="true">
<description/>
<parameter name="val">
<type class="int"/>
</parameter>
<return>
<type class="int"/>
</return>
</method>

<!-- com.tridium.lonworks.util.Neuron.getBufferSize(int) -->
<method name="getBufferSize"  public="true" static="true">
<description/>
<parameter name="val">
<type class="int"/>
</parameter>
<return>
<type class="int"/>
</return>
</method>

<!-- com.tridium.lonworks.util.Neuron.verifyChannelPriorities(javax.baja.lonworks.BLonNetwork) -->
<method name="verifyChannelPriorities"  public="true" static="true">
<description/>
<parameter name="lonworks">
<type class="javax.baja.lonworks.BLonNetwork"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.lonworks.util.Neuron.LOCATION_LENGTH -->
<field name="LOCATION_LENGTH"  public="true" static="true" final="true">
<type class="int"/>
<description/>
</field>

</class>
</bajadoc>
