<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="lonworks" runtimeProfile="rt" qualifiedName="com.tridium.lonworks.util.NameUtil" name="NameUtil" packageName="com.tridium.lonworks.util" public="true">
<description>
NameUtil provides useful utilities for command line tools.
</description>
<tag name="@author">Robert Adams</tag>
<tag name="@creation">17 Dec 02</tag>
<tag name="@version">$Revision: 4$ $Date: 8/27/01 10:28:26 AM$</tag>
<tag name="@since">Niagara 3.0</tag>
<extends>
<type class="java.lang.Object"/>
</extends>
<!-- com.tridium.lonworks.util.NameUtil() -->
<constructor name="NameUtil" public="true">
<description/>
</constructor>

<!-- com.tridium.lonworks.util.NameUtil.toJavaName(java.lang.String, boolean) -->
<method name="toJavaName"  public="true" static="true">
<description>
Convert various name formates to a consistent&#xa; java standard naming formate.&#xa; &#xa;  FOO_BAR   -&gt; fooBar&#xa;  NAME      -&gt; name&#xa;  scene_t   -&gt; sceneT&#xa;  tCALmonth -&gt; tCALmonth&#xa;  _alarm0   -&gt; alarm0&#xa;  XYZ_5ABC  -&gt; xyz5abc ?? xyz5Abc&#xa;  SNVTindex -&gt; SNVTindex&#xa;  nvoSpaceRH -&gt; nvoSpaceRH&#xa;  foo2-4     -&gt; foo2_4
</description>
<parameter name="str">
<type class="java.lang.String"/>
</parameter>
<parameter name="makeFirstUpper">
<type class="boolean"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- com.tridium.lonworks.util.NameUtil.toConstantName(java.lang.String) -->
<method name="toConstantName"  public="true" static="true">
<description>
Take a property name, and translate it into&#xa; a constant name string.  &#xa; For example,&#xa;   fooBar    -&gt; FOO_BAR&#xa;   name      -&gt; NAME&#xa;   URLName   -&gt; URL_NAME&#xa;   under_bar -&gt; UNDER_BAR&#xa;   Has space -&gt; HAS_SPACE&#xa;   In100     -&gt; IN_100_K
</description>
<parameter name="name">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- com.tridium.lonworks.util.NameUtil.uniqueName(java.util.Vector&lt;java.lang.String&gt;, java.lang.String) -->
<method name="uniqueName"  public="true" static="true">
<description>
Return unique name
</description>
<parameter name="names">
<parameterizedType class="java.util.Vector">
<args>
<type class="java.lang.String"/>
</args>
</parameterizedType>
</parameter>
<parameter name="name">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- com.tridium.lonworks.util.NameUtil.getPackageName(java.lang.String) -->
<method name="getPackageName"  public="true" static="true">
<description>
Get the package name for the class.
</description>
<parameter name="className">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- com.tridium.lonworks.util.NameUtil.getClassName(java.lang.String) -->
<method name="getClassName"  public="true" static="true">
<description>
Get the class name for the class but without&#xa; the fully qualified package name.
</description>
<parameter name="className">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- com.tridium.lonworks.util.NameUtil.getClassName(java.lang.Class&lt;?&gt;) -->
<method name="getClassName"  public="true" static="true">
<description>
Get the class name for the class but without&#xa; the fully qualified package name.
</description>
<parameter name="c">
<parameterizedType class="java.lang.Class">
<args>
<wildcardType class="?">
</wildcardType>
</args>
</parameterizedType>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- com.tridium.lonworks.util.NameUtil.capitalize(java.lang.String) -->
<method name="capitalize"  public="true" static="true" final="true">
<description>
Take a property name, and translate it into&#xa; the method name snivet.  For example,&#xa; fooBar -&gt; FooBar.
</description>
<parameter name="name">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- com.tridium.lonworks.util.NameUtil.toEnumName(java.lang.String, java.lang.String) -->
<method name="toEnumName"  public="true" static="true" final="true">
<description>
Create consistent enum names from lnml names &#xa;      PppEnameEnum - Ppp = specified prefix&#xa;                   - Ename = specified ename with first char to upper case
</description>
<parameter name="prefix">
<type class="java.lang.String"/>
</parameter>
<parameter name="ename">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- com.tridium.lonworks.util.NameUtil.toDsName(java.lang.String, java.lang.String) -->
<method name="toDsName"  public="true" static="true" final="true">
<description>
Create consistent dataspecies names from lnml names &#xa;      DsPppDname - Ppp = specified prefix&#xa;                 - Dname = specified dname with first char to upper case
</description>
<parameter name="prefix">
<type class="java.lang.String"/>
</parameter>
<parameter name="dname">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- com.tridium.lonworks.util.NameUtil.dirToClass(java.lang.String) -->
<method name="dirToClass"  public="true" static="true">
<description/>
<parameter name="dirName">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- com.tridium.lonworks.util.NameUtil.classToDir(java.lang.String) -->
<method name="classToDir"  public="true" static="true">
<description/>
<parameter name="dirName">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- com.tridium.lonworks.util.NameUtil.getParent(java.io.File) -->
<method name="getParent"  public="true" static="true">
<description/>
<parameter name="file">
<type class="java.io.File"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NameUtil.getFileNameFromPath(java.lang.String, boolean) -->
<method name="getFileNameFromPath"  public="true" static="true">
<description/>
<parameter name="pathName">
<type class="java.lang.String"/>
</parameter>
<parameter name="removeExtension">
<type class="boolean"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

</class>
</bajadoc>
