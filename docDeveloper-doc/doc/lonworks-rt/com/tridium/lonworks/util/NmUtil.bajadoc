<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="lonworks" runtimeProfile="rt" qualifiedName="com.tridium.lonworks.util.NmUtil" name="NmUtil" packageName="com.tridium.lonworks.util" public="true">
<description>
NmUtil contains a number of utilities used when&#xa;  managing a lonworks network.
</description>
<tag name="@author">Robert Adams</tag>
<tag name="@creation">16 Oct 01</tag>
<tag name="@version">$Revision: 14$ $Date: 10/18/01 2:56:41 PM$</tag>
<tag name="@since">Niagara 3.0</tag>
<extends>
<type class="java.lang.Object"/>
</extends>
<implements>
<type class="com.tridium.lonworks.netmessages.NetMessages"/>
</implements>
<implements>
<type class="com.tridium.lonworks.netmgmt.NetMgmtConst"/>
</implements>
<!-- com.tridium.lonworks.util.NmUtil() -->
<constructor name="NmUtil" public="true">
<description/>
</constructor>

<!-- com.tridium.lonworks.util.NmUtil.setDeviceState(javax.baja.lonworks.BLonDevice, javax.baja.lonworks.enums.BLonNodeState) -->
<method name="setDeviceState"  public="true" static="true">
<description>
Set device to the indicated state.
</description>
<parameter name="dev">
<type class="javax.baja.lonworks.BLonDevice"/>
</parameter>
<parameter name="state">
<type class="javax.baja.lonworks.enums.BLonNodeState"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.setDeviceState(com.tridium.lonworks.BLonRouter, javax.baja.lonworks.enums.BLonNodeState, boolean) -->
<method name="setDeviceState"  public="true" static="true">
<description/>
<parameter name="rtr">
<type class="com.tridium.lonworks.BLonRouter"/>
</parameter>
<parameter name="state">
<type class="javax.baja.lonworks.enums.BLonNodeState"/>
</parameter>
<parameter name="farSide">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.setDeviceState(javax.baja.lonworks.LonComm, javax.baja.lonworks.datatypes.LonAddress, javax.baja.lonworks.enums.BLonNodeState, boolean, boolean, boolean) -->
<method name="setDeviceState"  public="true" static="true">
<description/>
<parameter name="lonComm">
<type class="javax.baja.lonworks.LonComm"/>
</parameter>
<parameter name="destAddr">
<type class="javax.baja.lonworks.datatypes.LonAddress"/>
</parameter>
<parameter name="state">
<type class="javax.baja.lonworks.enums.BLonNodeState"/>
</parameter>
<parameter name="isLocal">
<type class="boolean"/>
</parameter>
<parameter name="auth">
<type class="boolean"/>
</parameter>
<parameter name="farSide">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.wait(int) -->
<method name="wait"  public="true" static="true">
<description/>
<parameter name="mSeconds">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.lonworks.util.NmUtil.getDeviceState(javax.baja.lonworks.BLonDevice) -->
<method name="getDeviceState"  public="true" static="true">
<description>
Get the current state of the specified device.
</description>
<parameter name="dev">
<type class="javax.baja.lonworks.BLonDevice"/>
</parameter>
<return>
<type class="javax.baja.lonworks.enums.BLonNodeState"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.getDeviceState(javax.baja.lonworks.LonComm, javax.baja.lonworks.datatypes.LonAddress, boolean) -->
<method name="getDeviceState"  public="true" static="true">
<description/>
<parameter name="lonComm">
<type class="javax.baja.lonworks.LonComm"/>
</parameter>
<parameter name="destAddr">
<type class="javax.baja.lonworks.datatypes.LonAddress"/>
</parameter>
<parameter name="auth">
<type class="boolean"/>
</parameter>
<return>
<type class="javax.baja.lonworks.enums.BLonNodeState"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.getDeviceState(javax.baja.lonworks.LonComm, javax.baja.lonworks.datatypes.LonAddress, boolean, boolean) -->
<method name="getDeviceState"  public="true" static="true">
<description/>
<parameter name="lonComm">
<type class="javax.baja.lonworks.LonComm"/>
</parameter>
<parameter name="destAddr">
<type class="javax.baja.lonworks.datatypes.LonAddress"/>
</parameter>
<parameter name="auth">
<type class="boolean"/>
</parameter>
<parameter name="farSide">
<type class="boolean"/>
</parameter>
<return>
<type class="javax.baja.lonworks.enums.BLonNodeState"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.resetNode(javax.baja.lonworks.BLonDevice) -->
<method name="resetNode"  public="true" static="true">
<description>
Reset the specified lon device.
</description>
<parameter name="dev">
<type class="javax.baja.lonworks.BLonDevice"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.resetNode(com.tridium.lonworks.BLonRouter) -->
<method name="resetNode"  public="true" static="true">
<description/>
<parameter name="rtr">
<type class="com.tridium.lonworks.BLonRouter"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.resetNode(javax.baja.lonworks.LonComm, javax.baja.lonworks.datatypes.LonAddress, boolean, boolean) -->
<method name="resetNode"  public="true" static="true">
<description/>
<parameter name="lonComm">
<type class="javax.baja.lonworks.LonComm"/>
</parameter>
<parameter name="destAddr">
<type class="javax.baja.lonworks.datatypes.LonAddress"/>
</parameter>
<parameter name="auth">
<type class="boolean"/>
</parameter>
<parameter name="farSide">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.resetLocal(javax.baja.lonworks.LonComm) -->
<method name="resetLocal"  public="true" static="true">
<description>
Reset the local interface
</description>
<parameter name="lonComm">
<type class="javax.baja.lonworks.LonComm"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.receiveServicePin(com.tridium.lonworks.netmgmt.BLonNetmgmt) -->
<method name="receiveServicePin"  public="true" static="true">
<description>
Wait for service pin.
</description>
<parameter name="netMgmt">
<type class="com.tridium.lonworks.netmgmt.BLonNetmgmt"/>
</parameter>
<return>
<type class="com.tridium.lonworks.netmessages.ServicePin"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.sendServicePin(javax.baja.lonworks.BLocalLonDevice) -->
<method name="sendServicePin"  public="true" static="true">
<description/>
<parameter name="locDev">
<type class="javax.baja.lonworks.BLocalLonDevice"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.updateDomainTable(com.tridium.lonworks.netmgmt.BLonNetmgmt, javax.baja.lonworks.BLonDevice) -->
<method name="updateDomainTable"  public="true" static="true">
<description>
Update the domain table in a node. Setup the working domain with&#xa;  correct domainId. ???
</description>
<parameter name="nm">
<type class="com.tridium.lonworks.netmgmt.BLonNetmgmt"/>
</parameter>
<parameter name="dev">
<type class="javax.baja.lonworks.BLonDevice"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.updateDomainTable(com.tridium.lonworks.netmgmt.BLonNetmgmt, javax.baja.lonworks.BLonDevice, boolean) -->
<method name="updateDomainTable"  public="true" static="true">
<description/>
<parameter name="nm">
<type class="com.tridium.lonworks.netmgmt.BLonNetmgmt"/>
</parameter>
<parameter name="dev">
<type class="javax.baja.lonworks.BLonDevice"/>
</parameter>
<parameter name="auth">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.updateDomainTable(javax.baja.lonworks.BLonDevice, javax.baja.lonworks.datatypes.BDomainId, javax.baja.lonworks.datatypes.BAuthenticationKey, boolean) -->
<method name="updateDomainTable"  public="true" static="true">
<description/>
<parameter name="dev">
<type class="javax.baja.lonworks.BLonDevice"/>
</parameter>
<parameter name="domain">
<type class="javax.baja.lonworks.datatypes.BDomainId"/>
</parameter>
<parameter name="key">
<type class="javax.baja.lonworks.datatypes.BAuthenticationKey"/>
</parameter>
<parameter name="auth">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.verifyDomainTable(javax.baja.lonworks.BLonDevice, com.tridium.lonworks.netmgmt.BLonNetmgmt) -->
<method name="verifyDomainTable"  public="true" static="true">
<description>
Verify correctness of domain table in the specified&#xa;  device.
</description>
<parameter name="dev">
<type class="javax.baja.lonworks.BLonDevice"/>
</parameter>
<parameter name="nm">
<type class="com.tridium.lonworks.netmgmt.BLonNetmgmt"/>
</parameter>
<return>
<type class="boolean"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.verifyDomainTable(javax.baja.lonworks.BLonDevice, com.tridium.lonworks.netmgmt.BLonNetmgmt, boolean) -->
<method name="verifyDomainTable"  public="true" static="true">
<description/>
<parameter name="dev">
<type class="javax.baja.lonworks.BLonDevice"/>
</parameter>
<parameter name="nm">
<type class="com.tridium.lonworks.netmgmt.BLonNetmgmt"/>
</parameter>
<parameter name="verifyKey">
<type class="boolean"/>
</parameter>
<return>
<type class="boolean"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.setWorkingDomain(javax.baja.lonworks.BLonDevice, com.tridium.lonworks.netmgmt.BLonNetmgmt) -->
<method name="setWorkingDomain"  public="true" static="true">
<description/>
<parameter name="dev">
<type class="javax.baja.lonworks.BLonDevice"/>
</parameter>
<parameter name="nm">
<type class="com.tridium.lonworks.netmgmt.BLonNetmgmt"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.queryDomain(javax.baja.lonworks.BLonDevice, int) -->
<method name="queryDomain"  public="true" static="true">
<description>
Query in domain table
</description>
<parameter name="dev">
<type class="javax.baja.lonworks.BLonDevice"/>
</parameter>
<parameter name="ndx">
<type class="int"/>
</parameter>
<return>
<type class="com.tridium.lonworks.netmessages.QueryDomainResponse"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.queryDomain(javax.baja.lonworks.LonComm, javax.baja.lonworks.datatypes.LonAddress, int, boolean) -->
<method name="queryDomain"  public="true" static="true">
<description/>
<parameter name="lonComm">
<type class="javax.baja.lonworks.LonComm"/>
</parameter>
<parameter name="destAddr">
<type class="javax.baja.lonworks.datatypes.LonAddress"/>
</parameter>
<parameter name="ndx">
<type class="int"/>
</parameter>
<parameter name="auth">
<type class="boolean"/>
</parameter>
<return>
<type class="com.tridium.lonworks.netmessages.QueryDomainResponse"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.queryDomain(javax.baja.lonworks.LonComm, javax.baja.lonworks.datatypes.LonAddress, int, boolean, boolean) -->
<method name="queryDomain"  public="true" static="true">
<description/>
<parameter name="lonComm">
<type class="javax.baja.lonworks.LonComm"/>
</parameter>
<parameter name="destAddr">
<type class="javax.baja.lonworks.datatypes.LonAddress"/>
</parameter>
<parameter name="ndx">
<type class="int"/>
</parameter>
<parameter name="auth">
<type class="boolean"/>
</parameter>
<parameter name="farSide">
<type class="boolean"/>
</parameter>
<return>
<type class="com.tridium.lonworks.netmessages.QueryDomainResponse"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.queryDomain(javax.baja.lonworks.LonComm, javax.baja.lonworks.datatypes.LonAddress, int, boolean, boolean, boolean) -->
<method name="queryDomain"  public="true" static="true">
<description/>
<parameter name="lonComm">
<type class="javax.baja.lonworks.LonComm"/>
</parameter>
<parameter name="destAddr">
<type class="javax.baja.lonworks.datatypes.LonAddress"/>
</parameter>
<parameter name="ndx">
<type class="int"/>
</parameter>
<parameter name="auth">
<type class="boolean"/>
</parameter>
<parameter name="farSide">
<type class="boolean"/>
</parameter>
<parameter name="extended">
<type class="boolean"/>
</parameter>
<return>
<type class="com.tridium.lonworks.netmessages.QueryDomainResponse"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.initDiscover(javax.baja.lonworks.BLonNetwork, com.tridium.lonworks.netmgmt.BLonNetmgmt, boolean) -->
<method name="initDiscover"  public="true" static="true">
<description>
Set all lon nodes to respond to query except online nodes in the&#xa; specified list. If bothDomains is true then send to our domain and&#xa; the zero length domain if ours is different. If false send to ours only.
</description>
<parameter name="lon">
<type class="javax.baja.lonworks.BLonNetwork"/>
</parameter>
<parameter name="nm">
<type class="com.tridium.lonworks.netmgmt.BLonNetmgmt"/>
</parameter>
<parameter name="bothDomains">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.setRespondToQuery(javax.baja.lonworks.LonComm, int, int) -->
<method name="setRespondToQuery"  public="true" static="true">
<description>
Set respond to query in all devices
</description>
<parameter name="lonComm">
<type class="javax.baja.lonworks.LonComm"/>
</parameter>
<parameter name="mode">
<type class="int"/>
</parameter>
<parameter name="domainNdx">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.setRespondToQuery(javax.baja.lonworks.BLonDevice, int) -->
<method name="setRespondToQuery"  public="true" static="true">
<description>
Set respond to query in specified device
</description>
<parameter name="dev">
<type class="javax.baja.lonworks.BLonDevice"/>
</parameter>
<parameter name="mode">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.setRespondToQuery(javax.baja.lonworks.LonComm, javax.baja.lonworks.datatypes.LonAddress, int) -->
<method name="setRespondToQuery"  public="true" static="true">
<description>
Set respond to query in specified address
</description>
<parameter name="lonComm">
<type class="javax.baja.lonworks.LonComm"/>
</parameter>
<parameter name="destAddr">
<type class="javax.baja.lonworks.datatypes.LonAddress"/>
</parameter>
<parameter name="mode">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.queryStatus(javax.baja.lonworks.BLonDevice, int) -->
<method name="queryStatus"  public="true" static="true">
<description>
Request the status.  Retry specified number of times or until device responses.
</description>
<parameter name="dev">
<type class="javax.baja.lonworks.BLonDevice"/>
</parameter>
<parameter name="retries">
<type class="int"/>
</parameter>
<return>
<type class="com.tridium.lonworks.netmessages.QueryStatusResponse"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.queryStatus(com.tridium.lonworks.BLonRouter, int, boolean) -->
<method name="queryStatus"  public="true" static="true">
<description/>
<parameter name="rtr">
<type class="com.tridium.lonworks.BLonRouter"/>
</parameter>
<parameter name="retries">
<type class="int"/>
</parameter>
<parameter name="farSide">
<type class="boolean"/>
</parameter>
<return>
<type class="com.tridium.lonworks.netmessages.QueryStatusResponse"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.queryStatus(javax.baja.lonworks.LonComm, javax.baja.lonworks.datatypes.LonAddress, int, boolean) -->
<method name="queryStatus"  public="true" static="true">
<description>
Request the status.  Retry specified number of times or until device responses.
</description>
<parameter name="lonComm">
<type class="javax.baja.lonworks.LonComm"/>
</parameter>
<parameter name="destAddr">
<type class="javax.baja.lonworks.datatypes.LonAddress"/>
</parameter>
<parameter name="retries">
<type class="int"/>
</parameter>
<parameter name="auth">
<type class="boolean"/>
</parameter>
<return>
<type class="com.tridium.lonworks.netmessages.QueryStatusResponse"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.queryStatus(javax.baja.lonworks.LonComm, javax.baja.lonworks.datatypes.LonAddress, int, boolean, boolean) -->
<method name="queryStatus"  public="true" static="true">
<description/>
<parameter name="lonComm">
<type class="javax.baja.lonworks.LonComm"/>
</parameter>
<parameter name="destAddr">
<type class="javax.baja.lonworks.datatypes.LonAddress"/>
</parameter>
<parameter name="retries">
<type class="int"/>
</parameter>
<parameter name="auth">
<type class="boolean"/>
</parameter>
<parameter name="farSide">
<type class="boolean"/>
</parameter>
<return>
<type class="com.tridium.lonworks.netmessages.QueryStatusResponse"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.queryId(javax.baja.lonworks.LonComm, int, int) -->
<method name="queryId"  public="true" static="true">
<description>
Broadcast queryId and return response or null if not response.
</description>
<parameter name="lonComm">
<type class="javax.baja.lonworks.LonComm"/>
</parameter>
<parameter name="selector">
<type class="int"/>
</parameter>
<parameter name="domainNdx">
<type class="int"/>
</parameter>
<return>
<type class="com.tridium.lonworks.netmessages.QueryIdResponse"/>
</return>
</method>

<!-- com.tridium.lonworks.util.NmUtil.queryId(javax.baja.lonworks.LonComm, int, com.tridium.lonworks.netmessages.QueryIdRequest) -->
<method name="queryId"  public="true" static="true">
<description>
Broadcast queryId and return response or null if not response.
</description>
<parameter name="lonComm">
<type class="javax.baja.lonworks.LonComm"/>
</parameter>
<parameter name="domainNdx">
<type class="int"/>
</parameter>
<parameter name="qRqst">
<type class="com.tridium.lonworks.netmessages.QueryIdRequest"/>
</parameter>
<return>
<type class="com.tridium.lonworks.netmessages.QueryIdResponse"/>
</return>
</method>

<!-- com.tridium.lonworks.util.NmUtil.clearStatus(javax.baja.lonworks.BLonDevice) -->
<method name="clearStatus"  public="true" static="true">
<description>
Clear status registers in device at specified address
</description>
<parameter name="dev">
<type class="javax.baja.lonworks.BLonDevice"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.clearStatus(com.tridium.lonworks.BLonRouter) -->
<method name="clearStatus"  public="true" static="true">
<description/>
<parameter name="rtr">
<type class="com.tridium.lonworks.BLonRouter"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.clearStatus(javax.baja.lonworks.LonComm, javax.baja.lonworks.datatypes.LonAddress, boolean, boolean) -->
<method name="clearStatus"  public="true" static="true">
<description/>
<parameter name="lonComm">
<type class="javax.baja.lonworks.LonComm"/>
</parameter>
<parameter name="destAddr">
<type class="javax.baja.lonworks.datatypes.LonAddress"/>
</parameter>
<parameter name="auth">
<type class="boolean"/>
</parameter>
<parameter name="farSide">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.recalculateChecksum(javax.baja.lonworks.BLonDevice, int) -->
<method name="recalculateChecksum"  public="true" static="true">
<description>
Recalculate checksum.
</description>
<parameter name="dev">
<type class="javax.baja.lonworks.BLonDevice"/>
</parameter>
<parameter name="type">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.clearAddressTable(javax.baja.lonworks.BLonDevice) -->
<method name="clearAddressTable"  public="true" static="true">
<description>
Clear the Address table in the specified device
</description>
<parameter name="dev">
<type class="javax.baja.lonworks.BLonDevice"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.extAddressTableInitialize(javax.baja.lonworks.BLonDevice, int, int) -->
<method name="extAddressTableInitialize"  public="true" static="true">
<description/>
<parameter name="dev">
<type class="javax.baja.lonworks.BLonDevice"/>
</parameter>
<parameter name="beginIndex">
<type class="int"/>
</parameter>
<parameter name="endIndex">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.updateAddressTable(javax.baja.lonworks.BLonDevice) -->
<method name="updateAddressTable"  public="true" static="true">
<description>
Update the Address table entry in the specified device.
</description>
<parameter name="dev">
<type class="javax.baja.lonworks.BLonDevice"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.updateAddressTable(javax.baja.lonworks.BLonDevice, int) -->
<method name="updateAddressTable"  public="true" static="true">
<description>
Update the indexed Address table entry in the specified device.
</description>
<parameter name="dev">
<type class="javax.baja.lonworks.BLonDevice"/>
</parameter>
<parameter name="index">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.getBAddressTableEntry(javax.baja.lonworks.BLonDevice, int) -->
<method name="getBAddressTableEntry"  public="true" static="true">
<description>
Read the indexed Address table entry in the specified device and create BIAddressEntry.
</description>
<parameter name="dev">
<type class="javax.baja.lonworks.BLonDevice"/>
</parameter>
<parameter name="index">
<type class="int"/>
</parameter>
<return>
<type class="javax.baja.lonworks.datatypes.BIAddressEntry"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.verifyAddressEntry(javax.baja.lonworks.BLonDevice, int) -->
<method name="verifyAddressEntry"  public="true" static="true">
<description>
Verify the device address table matches the database device address table for the specified entry.
</description>
<parameter name="dev">
<type class="javax.baja.lonworks.BLonDevice"/>
</parameter>
<parameter name="index">
<type class="int"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- com.tridium.lonworks.util.NmUtil.getAddressTableEntry(javax.baja.lonworks.BLonDevice, int) -->
<method name="getAddressTableEntry"  public="true" static="true">
<description>
Read the indexed Address table entry in the specified device.
</description>
<parameter name="dev">
<type class="javax.baja.lonworks.BLonDevice"/>
</parameter>
<parameter name="index">
<type class="int"/>
</parameter>
<return>
<type class="com.tridium.lonworks.netmessages.QueryAddrResponse"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.getAddressTableEntry(javax.baja.lonworks.LonComm, javax.baja.lonworks.datatypes.LonAddress, int, boolean, boolean) -->
<method name="getAddressTableEntry"  public="true" static="true">
<description>
Read the indexed Address table entry in the device at the specified address.
</description>
<parameter name="lonComm">
<type class="javax.baja.lonworks.LonComm"/>
</parameter>
<parameter name="addr">
<type class="javax.baja.lonworks.datatypes.LonAddress"/>
</parameter>
<parameter name="index">
<type class="int"/>
</parameter>
<parameter name="auth">
<type class="boolean"/>
</parameter>
<parameter name="extended">
<type class="boolean"/>
</parameter>
<return>
<type class="com.tridium.lonworks.netmessages.QueryAddrResponse"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.getLinkType(int) -->
<method name="getLinkType"  public="true" static="true">
<description>
Get the BLonLinkType that matches the specified descriptor.
</description>
<parameter name="descriptor">
<type class="int"/>
</parameter>
<return>
<type class="javax.baja.lonworks.enums.BLonLinkType"/>
</return>
</method>

<!-- com.tridium.lonworks.util.NmUtil.linkTypeToDescriptor(javax.baja.lonworks.enums.BLonLinkType) -->
<method name="linkTypeToDescriptor"  public="true" static="true">
<description>
Get the descriptor that matches the specified BLonLinkType.
</description>
<parameter name="type">
<type class="javax.baja.lonworks.enums.BLonLinkType"/>
</parameter>
<return>
<type class="int"/>
</return>
</method>

<!-- com.tridium.lonworks.util.NmUtil.getLinkType(javax.baja.lonworks.datatypes.BNvConfigData) -->
<method name="getLinkType"  public="true" static="true">
<description/>
<parameter name="cfg">
<type class="javax.baja.lonworks.datatypes.BNvConfigData"/>
</parameter>
<return>
<type class="javax.baja.lonworks.enums.BLonLinkType"/>
</return>
</method>

<!-- com.tridium.lonworks.util.NmUtil.linkTypeToServiceType(javax.baja.lonworks.enums.BLonLinkType) -->
<method name="linkTypeToServiceType"  public="true" static="true">
<description/>
<parameter name="linkType">
<type class="javax.baja.lonworks.enums.BLonLinkType"/>
</parameter>
<return>
<type class="javax.baja.lonworks.enums.BLonServiceType"/>
</return>
</method>

<!-- com.tridium.lonworks.util.NmUtil.queryNvConfigData(javax.baja.lonworks.BLonDevice, int) -->
<method name="queryNvConfigData"  public="true" static="true">
<description>
Query the NvConfig table in the specified device and return the configData for&#xa; specified NV.
</description>
<parameter name="dev">
<type class="javax.baja.lonworks.BLonDevice"/>
</parameter>
<parameter name="nvIndex">
<type class="int"/>
</parameter>
<return>
<type class="javax.baja.lonworks.datatypes.BNvConfigData"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.queryNvConfigData(javax.baja.lonworks.LonComm, javax.baja.lonworks.datatypes.LonAddress, int, boolean, boolean) -->
<method name="queryNvConfigData"  public="true" static="true">
<description>
Query the NvConfig table in the  device at specified address and return the configData for&#xa; specified NV.
</description>
<parameter name="lonComm">
<type class="javax.baja.lonworks.LonComm"/>
</parameter>
<parameter name="sendAddr">
<type class="javax.baja.lonworks.datatypes.LonAddress"/>
</parameter>
<parameter name="nvIndex">
<type class="int"/>
</parameter>
<parameter name="auth">
<type class="boolean"/>
</parameter>
<parameter name="extended">
<type class="boolean"/>
</parameter>
<return>
<type class="javax.baja.lonworks.datatypes.BNvConfigData"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.extNvInitialize(javax.baja.lonworks.BLonDevice, int, int) -->
<method name="extNvInitialize"  public="true" static="true">
<description/>
<parameter name="dev">
<type class="javax.baja.lonworks.BLonDevice"/>
</parameter>
<parameter name="beginIndex">
<type class="int"/>
</parameter>
<parameter name="endIndex">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.verifyNvConfig(javax.baja.lonworks.BLonDevice, int, javax.baja.lonworks.datatypes.BNvConfigData) -->
<method name="verifyNvConfig"  public="true" static="true">
<description/>
<parameter name="dev">
<type class="javax.baja.lonworks.BLonDevice"/>
</parameter>
<parameter name="nvIndex">
<type class="int"/>
</parameter>
<parameter name="configData">
<type class="javax.baja.lonworks.datatypes.BNvConfigData"/>
</parameter>
<return>
<type class="boolean"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.updateNvConfig(javax.baja.lonworks.BLonDevice, int, javax.baja.lonworks.datatypes.BNvConfigData) -->
<method name="updateNvConfig"  public="true" static="true">
<description>
Update the nvConfig data for the network variable from the specified&#xa; lon point.
</description>
<parameter name="dev">
<type class="javax.baja.lonworks.BLonDevice"/>
</parameter>
<parameter name="nvIndex">
<type class="int"/>
</parameter>
<parameter name="configData">
<type class="javax.baja.lonworks.datatypes.BNvConfigData"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.updateAliasConfig(javax.baja.lonworks.BLonDevice, int, javax.baja.lonworks.datatypes.BAliasConfigData) -->
<method name="updateAliasConfig"  public="true" static="true">
<description>
Update the nvConfig data for the specified alias index.
</description>
<parameter name="dev">
<type class="javax.baja.lonworks.BLonDevice"/>
</parameter>
<parameter name="aliasIndex">
<type class="int"/>
</parameter>
<parameter name="configData">
<type class="javax.baja.lonworks.datatypes.BAliasConfigData"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.extAliasInitialize(javax.baja.lonworks.BLonDevice, int, int) -->
<method name="extAliasInitialize"  public="true" static="true">
<description/>
<parameter name="dev">
<type class="javax.baja.lonworks.BLonDevice"/>
</parameter>
<parameter name="beginIndex">
<type class="int"/>
</parameter>
<parameter name="endIndex">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.verifyAliasNvConfig(javax.baja.lonworks.BLonDevice, int, javax.baja.lonworks.datatypes.BAliasConfigData) -->
<method name="verifyAliasNvConfig"  public="true" static="true">
<description/>
<parameter name="dev">
<type class="javax.baja.lonworks.BLonDevice"/>
</parameter>
<parameter name="aliasIndex">
<type class="int"/>
</parameter>
<parameter name="origConfigData">
<type class="javax.baja.lonworks.datatypes.BAliasConfigData"/>
</parameter>
<return>
<type class="boolean"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.updateAliasTable(javax.baja.lonworks.BLonDevice) -->
<method name="updateAliasTable"  public="true" static="true">
<description/>
<parameter name="dev">
<type class="javax.baja.lonworks.BLonDevice"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.queryAliasConfigData(javax.baja.lonworks.BLonDevice, int) -->
<method name="queryAliasConfigData"  public="true" static="true">
<description>
Query the AliasConfig table in the  device at specified address and return the configData for&#xa; specified alias.
</description>
<parameter name="dev">
<type class="javax.baja.lonworks.BLonDevice"/>
</parameter>
<parameter name="aliasIndex">
<type class="int"/>
</parameter>
<return>
<type class="javax.baja.lonworks.datatypes.BAliasConfigData"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.queryAliasConfigData(javax.baja.lonworks.LonComm, javax.baja.lonworks.datatypes.LonAddress, int, int, boolean, boolean) -->
<method name="queryAliasConfigData"  public="true" static="true">
<description>
Query the AliasConfig table in the  device at specified address and return the response
</description>
<parameter name="lonComm">
<type class="javax.baja.lonworks.LonComm"/>
</parameter>
<parameter name="sendAddr">
<type class="javax.baja.lonworks.datatypes.LonAddress"/>
</parameter>
<parameter name="index">
<type class="int"/>
</parameter>
<parameter name="offset">
<type class="int"/>
</parameter>
<parameter name="auth">
<type class="boolean"/>
</parameter>
<parameter name="isExtended">
<type class="boolean"/>
</parameter>
<return>
<type class="com.tridium.lonworks.netmessages.QueryAliasResponse"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.setOfflineInBind(javax.baja.lonworks.BLonDevice, java.util.Vector&lt;javax.baja.lonworks.BLonDevice&gt;) -->
<method name="setOfflineInBind"  public="true" static="true">
<description>
If the node is online set device and database offline.&#xa;  This is a convience method for use by netmgmt bind.
</description>
<parameter name="dev">
<type class="javax.baja.lonworks.BLonDevice"/>
</parameter>
<parameter name="offDevs">
<parameterizedType class="java.util.Vector">
<args>
<type class="javax.baja.lonworks.BLonDevice"/>
</args>
</parameterizedType>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.getNvLength(javax.baja.lonworks.LonComm, javax.baja.lonworks.datatypes.LonAddress, int, boolean) -->
<method name="getNvLength"  public="true" static="true">
<description>
Send FetchNV message and get the length on the response data
</description>
<parameter name="lonComm">
<type class="javax.baja.lonworks.LonComm"/>
</parameter>
<parameter name="sendAddr">
<type class="javax.baja.lonworks.datatypes.LonAddress"/>
</parameter>
<parameter name="nvIndex">
<type class="int"/>
</parameter>
<parameter name="auth">
<type class="boolean"/>
</parameter>
<return>
<type class="int"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.fetchNv(javax.baja.lonworks.BLonDevice, int) -->
<method name="fetchNv"  public="true" static="true">
<description>
Fetch the value of the specified nv. Use subnet/node addressing if device&#xa; is configured.  Return raw byte data.
</description>
<parameter name="dev">
<type class="javax.baja.lonworks.BLonDevice"/>
</parameter>
<parameter name="nvIndex">
<type class="int"/>
</parameter>
<return>
<type class="byte" dimension="1"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.fetchNv(javax.baja.lonworks.LonComm, javax.baja.lonworks.datatypes.LonAddress, int, boolean) -->
<method name="fetchNv"  public="true" static="true">
<description>
Fetch the value of the
</description>
<parameter name="lonComm">
<type class="javax.baja.lonworks.LonComm"/>
</parameter>
<parameter name="sendAddr">
<type class="javax.baja.lonworks.datatypes.LonAddress"/>
</parameter>
<parameter name="nvIndex">
<type class="int"/>
</parameter>
<parameter name="auth">
<type class="boolean"/>
</parameter>
<return>
<type class="byte" dimension="1"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.pollNv(javax.baja.lonworks.BLonDevice, javax.baja.lonworks.datatypes.BNvConfigData) -->
<method name="pollNv"  public="true" static="true">
<description/>
<parameter name="dev">
<type class="javax.baja.lonworks.BLonDevice"/>
</parameter>
<parameter name="configData">
<type class="javax.baja.lonworks.datatypes.BNvConfigData"/>
</parameter>
<return>
<type class="byte" dimension="1"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.sendNvUpdate(javax.baja.lonworks.BLocalLonDevice, javax.baja.lonworks.datatypes.BNvConfigData, byte[]) -->
<method name="sendNvUpdate"  public="true" static="true">
<description>
Build an nvUpdate(UnprocessedNV) message with the specified BNvConfigData and&#xa;  nv byte data and send to address table entry indexed in configData.
</description>
<parameter name="dev">
<type class="javax.baja.lonworks.BLocalLonDevice"/>
</parameter>
<parameter name="configData">
<type class="javax.baja.lonworks.datatypes.BNvConfigData"/>
</parameter>
<parameter name="data">
<type class="byte" dimension="1"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.setNvValue(javax.baja.lonworks.BLonDevice, javax.baja.lonworks.datatypes.BNvConfigData, byte[]) -->
<method name="setNvValue"  public="true" static="true">
<description>
Build an nvUpdate(UnprocessedNV) message with the specified BNvConfigData and&#xa;  nv byte data and send to specified BLonDevice.
</description>
<parameter name="dev">
<type class="javax.baja.lonworks.BLonDevice"/>
</parameter>
<parameter name="configData">
<type class="javax.baja.lonworks.datatypes.BNvConfigData"/>
</parameter>
<parameter name="data">
<type class="byte" dimension="1"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.setNvValue(javax.baja.lonworks.datatypes.LonAddress, javax.baja.lonworks.LonComm, javax.baja.lonworks.enums.BLonNvDirection, int, javax.baja.lonworks.enums.BLonServiceType, boolean, byte[]) -->
<method name="setNvValue"  public="true" static="true">
<description/>
<parameter name="sendAddr">
<type class="javax.baja.lonworks.datatypes.LonAddress"/>
</parameter>
<parameter name="lonComm">
<type class="javax.baja.lonworks.LonComm"/>
</parameter>
<parameter name="direction">
<type class="javax.baja.lonworks.enums.BLonNvDirection"/>
</parameter>
<parameter name="selector">
<type class="int"/>
</parameter>
<parameter name="serviceType">
<type class="javax.baja.lonworks.enums.BLonServiceType"/>
</parameter>
<parameter name="authenticate">
<type class="boolean"/>
</parameter>
<parameter name="data">
<type class="byte" dimension="1"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.setConfigSrc(javax.baja.lonworks.BLonDevice, javax.baja.lonworks.enums.BLonConfigSourceEnum) -->
<method name="setConfigSrc"  public="true" static="true">
<description/>
<parameter name="dev">
<type class="javax.baja.lonworks.BLonDevice"/>
</parameter>
<parameter name="cfgSrc">
<type class="javax.baja.lonworks.enums.BLonConfigSourceEnum"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.lonworks.util.NmUtil.wink(javax.baja.lonworks.BLonDevice) -->
<method name="wink"  public="true" static="true">
<description>
Send a wink command to the specified device
</description>
<parameter name="dev">
<type class="javax.baja.lonworks.BLonDevice"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.wink(javax.baja.lonworks.LonComm, javax.baja.lonworks.datatypes.LonAddress, boolean) -->
<method name="wink"  public="true" static="true">
<description>
Send a wink command to the specified address
</description>
<parameter name="lonComm">
<type class="javax.baja.lonworks.LonComm"/>
</parameter>
<parameter name="adr">
<type class="javax.baja.lonworks.datatypes.LonAddress"/>
</parameter>
<parameter name="auth">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.getLonDevices(javax.baja.driver.BIDeviceFolder) -->
<method name="getLonDevices"  public="true" static="true">
<description/>
<parameter name="df">
<type class="javax.baja.driver.BIDeviceFolder"/>
</parameter>
<return>
<type class="javax.baja.lonworks.BLonDevice" dimension="1"/>
</return>
</method>

<!-- com.tridium.lonworks.util.NmUtil.getLonRouters(javax.baja.driver.BIDeviceFolder) -->
<method name="getLonRouters"  public="true" static="true">
<description/>
<parameter name="df">
<type class="javax.baja.driver.BIDeviceFolder"/>
</parameter>
<return>
<type class="com.tridium.lonworks.BLonRouter" dimension="1"/>
</return>
</method>

<!-- com.tridium.lonworks.util.NmUtil.isExtended(javax.baja.lonworks.BLonDevice) -->
<method name="isExtended"  public="true" static="true">
<description>
Check if specified device supports extended network management messages.
</description>
<parameter name="dev">
<type class="javax.baja.lonworks.BLonDevice"/>
</parameter>
<return>
<type class="boolean"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.isExtended(javax.baja.lonworks.LonComm, javax.baja.lonworks.datatypes.LonAddress, boolean) -->
<method name="isExtended"  public="true" static="true">
<description>
Check if specified device supports extended network management messages.&#xa;  See CEA-709.1-B  B.5.4
</description>
<parameter name="lonComm">
<type class="javax.baja.lonworks.LonComm"/>
</parameter>
<parameter name="sndAdr">
<type class="javax.baja.lonworks.datatypes.LonAddress"/>
</parameter>
<parameter name="auth">
<type class="boolean"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- com.tridium.lonworks.util.NmUtil.validateNeuronId(javax.baja.lonworks.datatypes.BNeuronId, javax.baja.sys.BComponent) -->
<method name="validateNeuronId"  public="true" static="true">
<description>
Make sure neuronId not in use except by specified device
</description>
<parameter name="nid">
<type class="javax.baja.lonworks.datatypes.BNeuronId"/>
</parameter>
<parameter name="spDev">
<type class="javax.baja.sys.BComponent"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.lonworks.LonException"/>
</throws>
</method>

<!-- com.tridium.lonworks.util.NmUtil.threadState() -->
<method name="threadState"  public="true" static="true">
<description/>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.lonworks.util.NmUtil.toBool(byte, int) -->
<method name="toBool"  public="true" static="true">
<description/>
<parameter name="b">
<type class="byte"/>
</parameter>
<parameter name="offset">
<type class="int"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- com.tridium.lonworks.util.NmUtil.sendFailedResponse(com.tridium.lonworks.loncomm.NLonComm, javax.baja.lonworks.LonMessage) -->
<method name="sendFailedResponse"  public="true" static="true">
<description/>
<parameter name="lonComm">
<type class="com.tridium.lonworks.loncomm.NLonComm"/>
</parameter>
<parameter name="msg">
<type class="javax.baja.lonworks.LonMessage"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.lonworks.util.NmUtil.getLonNetwork(javax.baja.sys.BComponent) -->
<method name="getLonNetwork"  public="true" static="true">
<description>
Convience method to find BLonNetwork that specified component&#xa; is a child of.
</description>
<parameter name="c">
<type class="javax.baja.sys.BComponent"/>
</parameter>
<return>
<type class="javax.baja.lonworks.BLonNetwork"/>
</return>
</method>

<!-- com.tridium.lonworks.util.NmUtil.getLonDevice(javax.baja.sys.BComponent) -->
<method name="getLonDevice"  public="true" static="true">
<description>
Convience method to find BLonDevice that specified component&#xa; is a child of.
</description>
<parameter name="c">
<type class="javax.baja.sys.BComponent"/>
</parameter>
<return>
<type class="javax.baja.lonworks.BLonDevice"/>
</return>
</method>

<!-- com.tridium.lonworks.util.NmUtil.getLonObject(javax.baja.sys.BComponent) -->
<method name="getLonObject"  public="true" static="true">
<description>
Convience method to find BLonObject that specified component&#xa; is a child of.
</description>
<parameter name="c">
<type class="javax.baja.sys.BComponent"/>
</parameter>
<return>
<type class="javax.baja.lonworks.BLonObject"/>
</return>
</method>

<!-- com.tridium.lonworks.util.NmUtil.getParent(javax.baja.sys.BComponent, javax.baja.sys.Type) -->
<method name="getParent"  public="true" static="true">
<description>
Convience to get the parent of the specified type for&#xa; the given child.
</description>
<parameter name="child">
<type class="javax.baja.sys.BComponent"/>
</parameter>
<parameter name="parentType">
<type class="javax.baja.sys.Type"/>
</parameter>
<return>
<type class="javax.baja.sys.BComponent"/>
</return>
</method>

<!-- com.tridium.lonworks.util.NmUtil.getDecendantsByClass(javax.baja.sys.BComponent, java.lang.Class&lt;?&gt;) -->
<method name="getDecendantsByClass"  public="true" static="true">
<description/>
<parameter name="c">
<type class="javax.baja.sys.BComponent"/>
</parameter>
<parameter name="cls">
<parameterizedType class="java.lang.Class">
<args>
<wildcardType class="?">
</wildcardType>
</args>
</parameterizedType>
</parameter>
<return>
<type class="java.lang.Object" dimension="1"/>
</return>
</method>

<!-- com.tridium.lonworks.util.NmUtil.getSendAddress(javax.baja.lonworks.BLonDevice) -->
<method name="getSendAddress"  public="true" static="true">
<description>
Get the appropriate send address object - always use NeuronId address.
</description>
<parameter name="dev">
<type class="javax.baja.lonworks.BLonDevice"/>
</parameter>
<return>
<type class="javax.baja.lonworks.datatypes.LonAddress"/>
</return>
</method>

<!-- com.tridium.lonworks.util.NmUtil.getSendAddress(com.tridium.lonworks.BLonRouter) -->
<method name="getSendAddress"  public="true" static="true">
<description>
Get the appropriate send address object - always use NeuronId address.
</description>
<parameter name="rtr">
<type class="com.tridium.lonworks.BLonRouter"/>
</parameter>
<return>
<type class="javax.baja.lonworks.datatypes.LonAddress"/>
</return>
</method>

<!-- com.tridium.lonworks.util.NmUtil.debugTimeStamp() -->
<method name="debugTimeStamp"  public="true" static="true">
<description/>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- com.tridium.lonworks.util.NmUtil.timeStamp() -->
<method name="timeStamp"  public="true" static="true">
<description/>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- com.tridium.lonworks.util.NmUtil.showSecs -->
<field name="showSecs"  public="true" static="true" final="true">
<type class="javax.baja.sys.BFacets"/>
<description/>
</field>

<!-- com.tridium.lonworks.util.NmUtil.showMilliSecs -->
<field name="showMilliSecs"  public="true" static="true" final="true">
<type class="javax.baja.sys.BFacets"/>
<description/>
</field>

</class>
</bajadoc>
