<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="lonworks" runtimeProfile="rt" qualifiedName="javax.baja.lonworks.util.SnvtUtil" name="SnvtUtil" packageName="javax.baja.lonworks.util" public="true">
<description>
This class contains static methods used to manage Snvt&#xa;  datatypes.&#xa; &lt;p&gt;
</description>
<tag name="@author">Robert Adams</tag>
<tag name="@creation">25 June 01</tag>
<tag name="@version">$Revision: 2$ $Date: 9/28/01 11:22:58 AM$</tag>
<tag name="@since">Niagara 3.0</tag>
<extends>
<type class="java.lang.Object"/>
</extends>
<!-- javax.baja.lonworks.util.SnvtUtil() -->
<constructor name="SnvtUtil" public="true">
<description/>
</constructor>

<!-- javax.baja.lonworks.util.SnvtUtil.getLonData(int, int) -->
<method name="getLonData"  public="true" static="true">
<description>
Construct the LonData component for the specified snvt type&#xa; from the data in the standard.lnml file. If the snvtType is &#xa; not defined return a BLonByteArray of the specified size.
</description>
<parameter name="snvtType">
<type class="int"/>
</parameter>
<parameter name="size">
<type class="int"/>
</parameter>
<return>
<type class="javax.baja.lonworks.londata.BLonData"/>
</return>
</method>

<!-- javax.baja.lonworks.util.SnvtUtil.getLonData(int) -->
<method name="getLonData"  public="true" static="true">
<description>
Construct the LonData component for the specified snvt type&#xa; from the data in the standard.lnml file.
</description>
<parameter name="snvtType">
<type class="int"/>
</parameter>
<return>
<type class="javax.baja.lonworks.londata.BLonData"/>
</return>
</method>

<!-- javax.baja.lonworks.util.SnvtUtil.getLonData(int, boolean) -->
<method name="getLonData"  public="true" static="true">
<description>
Construct the LonData component for the specified snvt type&#xa; from the data in the standard.lnml file. &#xa; &lt;p&gt;&#xa; Diff flag indicates that any temperature elements are temp diff.&#xa; Engineering units will be modified accordingly.
</description>
<parameter name="snvtType">
<type class="int"/>
</parameter>
<parameter name="diff">
<type class="boolean"/>
</parameter>
<return>
<type class="javax.baja.lonworks.londata.BLonData"/>
</return>
</method>

<!-- javax.baja.lonworks.util.SnvtUtil.getStandard() -->
<method name="getStandard"  public="true" static="true">
<description>
DEPRECATE - use XUtil.getStandard()
</description>
<return>
<type class="java.lang.Object"/>
</return>
</method>

<!-- javax.baja.lonworks.util.SnvtUtil.getLonData(java.lang.Object, java.lang.Object) -->
<method name="getLonData"  public="true" static="true">
<description>
DEPRECATE - use XUtil.getLonDataNv()
</description>
<parameter name="xnv">
<type class="java.lang.Object"/>
</parameter>
<parameter name="root">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="javax.baja.lonworks.londata.BLonData"/>
</return>
</method>

<!-- javax.baja.lonworks.util.SnvtUtil.getStandardEnum(java.lang.String) -->
<method name="getStandardEnum"  public="true" static="true">
<description>
Create a BLonEnum for specified standard enumType
</description>
<parameter name="enumType">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.lonworks.londata.BLonEnum"/>
</return>
</method>

</class>
</bajadoc>
