<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="lonworks" runtimeProfile="rt" qualifiedName="javax.baja.lonworks.io.LonOutputStream" name="LonOutputStream" packageName="javax.baja.lonworks.io" public="true">
<description>
The LonOutputStream is an extension of the standard&#xa;  ByteArrayOutputStream for use in building LonMessage &#xa;  messages.  It contains utility methods to convert&#xa;  various types and pass them to the data stream.
</description>
<tag name="@author">Robert Adams</tag>
<tag name="@creation">5 Jan 01</tag>
<tag name="@version">$Revision: 5$ $Date: 9/18/01 9:49:38 AM$</tag>
<tag name="@since">Niagara 3.0</tag>
<extends>
<type class="java.io.ByteArrayOutputStream"/>
</extends>
<!-- javax.baja.lonworks.io.LonOutputStream() -->
<constructor name="LonOutputStream" public="true">
<description>
Construct a LonOutputStream with no initial &#xa;  capacity
</description>
</constructor>

<!-- javax.baja.lonworks.io.LonOutputStream(int) -->
<constructor name="LonOutputStream" public="true">
<parameter name="size">
<type class="int"/>
<description>
initial capacity in bytes
</description>
</parameter>
<description>
Construct a LonOutputStream with the specified&#xa;  initial capacity.
</description>
</constructor>

<!-- javax.baja.lonworks.io.LonOutputStream.writeByteArray(byte[]) -->
<method name="writeByteArray"  public="true">
<description>
Writes the entire array to the output stream.
</description>
<parameter name="byteArray">
<type class="byte" dimension="1"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.lonworks.io.LonOutputStream.writeByteArray(byte[], int) -->
<method name="writeByteArray"  public="true">
<description>
Writes the specifiec number of bytes to the output stream&#xa;  from the given array. Pad with 0&#x27;s to fill out count.
</description>
<parameter name="byteArray">
<type class="byte" dimension="1"/>
</parameter>
<parameter name="count">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.lonworks.io.LonOutputStream.writeCharArray(java.lang.String, int) -->
<method name="writeCharArray"  public="true">
<description>
Writes the specified number of characters to the output &#xa;  stream from the given String. Pad with 0&#x27;s to fill out count.
</description>
<parameter name="str">
<type class="java.lang.String"/>
</parameter>
<parameter name="count">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.lonworks.io.LonOutputStream.writeString(java.lang.String) -->
<method name="writeString"  public="true">
<description>
Writes a null terminated string to the output stream.
</description>
<parameter name="str">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.lonworks.io.LonOutputStream.writeBooleanBit(boolean, int, int, int) -->
<method name="writeBooleanBit"  public="true">
<description>
Write boolean value to a bit field in the output stream. &#xa; If true write 1 else write 0.
</description>
<tag name="@see">javax.baja.lonworks.io.LonOutputStream#writeBit</tag>
<parameter name="val">
<type class="boolean"/>
</parameter>
<parameter name="byteOffset">
<type class="int"/>
</parameter>
<parameter name="bitOffset">
<type class="int"/>
</parameter>
<parameter name="bitCount">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.lonworks.io.LonOutputStream.writeBit(int, int, int, int) -->
<method name="writeBit"  public="true">
<description>
Write an unsigned value to a bit field. Multiple calls to &#xa; writeBit with the same byteOffset is supported.  &lt;p&gt;&#xa; Does not support bit fields which overlap multiple bytes.&lt;p&gt;
</description>
<parameter name="val">
<type class="int"/>
</parameter>
<parameter name="byteOffset">
<type class="int"/>
<description>
Offset from first byte in output stream
</description>
</parameter>
<parameter name="bitOffset">
<type class="int"/>
<description>
Number of positions (0-7) to shift value. O if value in lsb.
</description>
</parameter>
<parameter name="bitCount">
<type class="int"/>
<description>
The number of bits in bit field
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.lonworks.io.LonOutputStream.writeSignedBit(int, int, int, int) -->
<method name="writeSignedBit"  public="true">
<description>
Write a signed value to a bit field. Multiple calls to &#xa; writeBit with the same byteOffset is supported.  &lt;p&gt;&#xa; Does not support bit fields which overlap multiple bytes.&lt;p&gt;
</description>
<parameter name="val">
<type class="int"/>
</parameter>
<parameter name="byteOffset">
<type class="int"/>
<description>
Offset from first byte in output stream
</description>
</parameter>
<parameter name="bitOffset">
<type class="int"/>
<description>
Number of positions (0-7) to shift value. O if value in lsb.
</description>
</parameter>
<parameter name="bitCount">
<type class="int"/>
<description>
The number of bits in bit field
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.lonworks.io.LonOutputStream.writeBoolean(boolean) -->
<method name="writeBoolean"  public="true">
<description>
Write a 8 bit boolean value to the output stream. &#xa; If true write 1 else write 0.
</description>
<parameter name="b">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.lonworks.io.LonOutputStream.writeSigned16(int) -->
<method name="writeSigned16"  public="true">
<description>
Write a 16 bit signed value to the output stream.&#xa; Valid values (-32768 to 32767)
</description>
<parameter name="l">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.lonworks.io.LonOutputStream.writeUnsigned16(int) -->
<method name="writeUnsigned16"  public="true">
<description>
Write a 16 bit unsigned value to the output stream&#xa; Valid values (0 to 65535)
</description>
<parameter name="l">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.lonworks.io.LonOutputStream.writeSigned8(int) -->
<method name="writeSigned8"  public="true">
<description>
Write a 8 bit signed value to the output stream&#xa; Valid values (-128 to 127)
</description>
<parameter name="i">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.lonworks.io.LonOutputStream.writeUnsigned8(int) -->
<method name="writeUnsigned8"  public="true">
<description>
Write a 8 bit unsigned value to the output stream&#xa; Valid values (0 to 255)
</description>
<parameter name="i">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.lonworks.io.LonOutputStream.writeSigned32(int) -->
<method name="writeSigned32"  public="true">
<description>
Writes a 32-bit value to the output stream.
</description>
<parameter name="i">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.lonworks.io.LonOutputStream.writeUnsigned32(long) -->
<method name="writeUnsigned32"  public="true">
<description>
Writes an unsigned 32-bit value to the output stream.
</description>
<parameter name="i">
<type class="long"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.lonworks.io.LonOutputStream.writeSigned64(long) -->
<method name="writeSigned64"  public="true">
<description>
Writes a 64-bit value to the output stream.
</description>
<parameter name="i">
<type class="long"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.lonworks.io.LonOutputStream.writeUnsigned64(java.math.BigInteger) -->
<method name="writeUnsigned64"  public="true">
<description>
Writes a long val as 64-bit unsigned value to the output stream.
</description>
<parameter name="val">
<type class="java.math.BigInteger"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.lonworks.io.LonOutputStream.writeFloat(float) -->
<method name="writeFloat"  public="true">
<description>
Writes a 32-bit value to the output stream,&#xa;  high-order byte first.
</description>
<parameter name="value">
<type class="float"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.lonworks.io.LonOutputStream.writeDouble(double) -->
<method name="writeDouble"  public="true">
<description>
Writes a 32-bit value to the output stream,&#xa;  high-order byte first.
</description>
<parameter name="value">
<type class="double"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.lonworks.io.LonOutputStream.setBitFieldMark() -->
<method name="setBitFieldMark"  public="true">
<description>
For internal use.&lt;p&gt;&#xa; Used to mark bit field  count at entry in nested LonData structs&#xa; to allow correct handling of byteOffsets.
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.lonworks.io.LonOutputStream.resetBitFieldMark(int) -->
<method name="resetBitFieldMark"  public="true">
<description>
For internal use.&lt;p&gt;&#xa; Used to reset bit field count at exit from nested LonData structs&#xa; to allow correct handling of byteOffsets.
</description>
<parameter name="orig">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.lonworks.io.LonOutputStream.setPosition(int) -->
<method name="setPosition"  public="true">
<description>
Write bytes to ensure next byte writes to position.
</description>
<parameter name="position">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

</class>
</bajadoc>
