<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="lonworks" runtimeProfile="rt" qualifiedName="javax.baja.lonworks.io.LonInputStream" name="LonInputStream" packageName="javax.baja.lonworks.io" public="true">
<description>
The LonInputStream is an extension of the standard&#xa;  ByteArrayInputStream for use in parsing LonMessage &#xa;  messages.  It contains utility methods to extract&#xa;  various types from the data stream.
</description>
<tag name="@author">Robert Adams</tag>
<tag name="@creation">5 Jan 01</tag>
<tag name="@version">$Revision: 5$ $Date: 9/18/01 9:49:38 AM$</tag>
<tag name="@since">Niagara 3.0</tag>
<extends>
<type class="java.io.ByteArrayInputStream"/>
</extends>
<!-- javax.baja.lonworks.io.LonInputStream(byte[]) -->
<constructor name="LonInputStream" public="true">
<parameter name="buf">
<type class="byte" dimension="1"/>
</parameter>
<description>
Construct an input stream that reads data from&#xa;  the given byte array.
</description>
</constructor>

<!-- javax.baja.lonworks.io.LonInputStream.readBoolean() -->
<method name="readBoolean"  public="true">
<description>
Reads a 8 bit boolean value from the input stream.
</description>
<return>
<type class="boolean"/>
<description>
If bit field=0 return false else return true.
</description>
</return>
</method>

<!-- javax.baja.lonworks.io.LonInputStream.readSigned32() -->
<method name="readSigned32"  public="true">
<description>
Reads a 32 bit value from the input stream.
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.lonworks.io.LonInputStream.readUnsigned32() -->
<method name="readUnsigned32"  public="true">
<description>
Reads a 32 bit unsigned value from the input stream.
</description>
<return>
<type class="long"/>
</return>
</method>

<!-- javax.baja.lonworks.io.LonInputStream.readSigned64() -->
<method name="readSigned64"  public="true">
<description/>
<return>
<type class="long"/>
</return>
</method>

<!-- javax.baja.lonworks.io.LonInputStream.readUnsigned64() -->
<method name="readUnsigned64"  public="true">
<description/>
<return>
<type class="java.math.BigInteger"/>
</return>
</method>

<!-- javax.baja.lonworks.io.LonInputStream.readUnsigned16() -->
<method name="readUnsigned16"  public="true">
<description>
Read an 16 bit unsigned value from the input stream.
</description>
<return>
<type class="int"/>
<description>
int (0 to 65535)
</description>
</return>
</method>

<!-- javax.baja.lonworks.io.LonInputStream.readSigned16() -->
<method name="readSigned16"  public="true">
<description>
Read a 16 bit signed value from the input stream
</description>
<return>
<type class="int"/>
<description>
int (-32768 to 32767)
</description>
</return>
</method>

<!-- javax.baja.lonworks.io.LonInputStream.readSigned8() -->
<method name="readSigned8"  public="true">
<description>
Read an 8 bit signed value from the input stream
</description>
<return>
<type class="int"/>
<description>
int (-128 to 127)
</description>
</return>
</method>

<!-- javax.baja.lonworks.io.LonInputStream.readUnsigned8() -->
<method name="readUnsigned8"  public="true">
<description>
Read an 8 bit unsigned value from the input stream
</description>
<return>
<type class="int"/>
<description>
int (0 to 255)
</description>
</return>
</method>

<!-- javax.baja.lonworks.io.LonInputStream.readBit(int, int, int) -->
<method name="readBit"  public="true">
<description>
Read an unsigned value from a bit field. The stream pos &#xa; will be set to byteOffset to allow multiple readBit calls&#xa; to access bit fields in the same byte. &lt;p&gt;&#xa; Does not support bit fields which overlap multiple bytes.&lt;p&gt;
</description>
<parameter name="byteOffset">
<type class="int"/>
<description>
Offset from first byte in output stream
</description>
</parameter>
<parameter name="bitOffset">
<type class="int"/>
<description>
Number of positions (0-7) to shift value. O if value in lsb.
</description>
</parameter>
<parameter name="bitCount">
<type class="int"/>
<description>
The number of bits in bit field
</description>
</parameter>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.lonworks.io.LonInputStream.readSignedBit(int, int, int) -->
<method name="readSignedBit"  public="true">
<description>
Read an signed value from a bit field. The stream pos &#xa; will be set to byteOffset to allow multiple readBit calls&#xa; to access bit fields in the same byte. &lt;p&gt;&#xa; Does not support bit fields which overlap multiple bytes.&lt;p&gt;
</description>
<parameter name="byteOffset">
<type class="int"/>
<description>
Offset from first byte in output stream
</description>
</parameter>
<parameter name="bitOffset">
<type class="int"/>
<description>
Number of positions (0-7) to shift value. O if value in lsb.
</description>
</parameter>
<parameter name="bitCount">
<type class="int"/>
<description>
The number of bits in bit field
</description>
</parameter>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.lonworks.io.LonInputStream.readBooleanBit(int, int, int) -->
<method name="readBooleanBit"  public="true">
<description>
Read the bit field and return the result as a boolean.
</description>
<tag name="@see">javax.baja.lonworks.io.LonInputStream#readBit</tag>
<parameter name="byteOffset">
<type class="int"/>
</parameter>
<parameter name="bitOffset">
<type class="int"/>
</parameter>
<parameter name="bitCount">
<type class="int"/>
</parameter>
<return>
<type class="boolean"/>
<description>
If bit field=0 return false else return true.
</description>
</return>
</method>

<!-- javax.baja.lonworks.io.LonInputStream.readString() -->
<method name="readString"  public="true">
<description>
Reads in a null terminated string from the &#xa; input stream. Discard null termination &#x27;\0&#x27;. Next read&#xa; begins at byte following null termination.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.lonworks.io.LonInputStream.readCharArray(int) -->
<method name="readCharArray"  public="true">
<description>
Reads no more than the specified number of &#xa; chars from the input stream to create a string.&#xa; If len is greater then the number of available&#xa; chars then it is reduced to that number.&lt;p&gt;
</description>
<parameter name="len">
<type class="int"/>
<description>
the maximum number of chars to read from stream..
</description>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.lonworks.io.LonInputStream.readByteArray(int) -->
<method name="readByteArray"  public="true">
<description>
Reads no more than the specified number of bytes &#xa; from the input stream. If len is greater then the&#xa; number of available bytes then it is reduced to &#xa; that number.&lt;p&gt;
</description>
<parameter name="len">
<type class="int"/>
<description>
the maximum number of bytes to read from stream.
</description>
</parameter>
<return>
<type class="byte" dimension="1"/>
</return>
</method>

<!-- javax.baja.lonworks.io.LonInputStream.readByteArray() -->
<method name="readByteArray"  public="true">
<description>
Reads the remaining bytes in the stream.
</description>
<return>
<type class="byte" dimension="1"/>
</return>
</method>

<!-- javax.baja.lonworks.io.LonInputStream.readFloat() -->
<method name="readFloat"  public="true">
<description>
Read a 32 bit float value from the input stream.
</description>
<return>
<type class="float"/>
</return>
</method>

<!-- javax.baja.lonworks.io.LonInputStream.readDouble() -->
<method name="readDouble"  public="true">
<description>
Read a 64 bit double value from the input stream.
</description>
<return>
<type class="double"/>
</return>
</method>

<!-- javax.baja.lonworks.io.LonInputStream.reset() -->
<method name="reset"  public="true">
<description>
Reposition stream at beginning of message.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.lonworks.io.LonInputStream.reset(int) -->
<method name="reset"  public="true">
<description>
Reposition stream at specified offset.
</description>
<parameter name="position">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.lonworks.io.LonInputStream.setBitFieldMark() -->
<method name="setBitFieldMark"  public="true">
<description>
For internal use.&lt;p&gt;&#xa; Used to mark bit field  position at entry in nested LonData structs&#xa; to allow correct handling of byteOffsets.
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.lonworks.io.LonInputStream.resetBitFieldMark(int) -->
<method name="resetBitFieldMark"  public="true">
<description>
For internal use.&lt;p&gt;&#xa; Used to resetbit field  position at exit from nested LonData structs&#xa; to allow correct handling of byteOffsets.
</description>
<parameter name="orig">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.lonworks.io.LonInputStream.position() -->
<method name="position"  public="true">
<description/>
<return>
<type class="int"/>
</return>
</method>

</class>
</bajadoc>
