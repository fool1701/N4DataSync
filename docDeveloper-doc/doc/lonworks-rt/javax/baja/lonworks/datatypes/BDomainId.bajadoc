<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="lonworks" runtimeProfile="rt" qualifiedName="javax.baja.lonworks.datatypes.BDomainId" name="BDomainId" packageName="javax.baja.lonworks.datatypes" public="true" final="true">
<description>
Domain Id as defined in Neuron Chip Data Book A.2.1.
</description>
<tag name="@author">Robert Adams</tag>
<tag name="@creation">11 Feb 02</tag>
<tag name="@version">$Revision: 1$ $Date: 9/12/01 2:04:40 PM$</tag>
<tag name="@since">Niagara 3.0</tag>
<extends>
<type class="javax.baja.sys.BSimple"/>
</extends>
<annotation><type class="javax.baja.nre.annotations.NoSlotomatic"/>
</annotation>
<!-- javax.baja.lonworks.datatypes.BDomainId.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.lonworks.datatypes.BDomainId.make(int, byte[]) -->
<method name="make"  public="true" static="true">
<description>
Create a BDomainId with the given byte array of the specified length.
</description>
<parameter name="len">
<type class="int"/>
</parameter>
<parameter name="b">
<type class="byte" dimension="1"/>
</parameter>
<return>
<type class="javax.baja.lonworks.datatypes.BDomainId"/>
</return>
</method>

<!-- javax.baja.lonworks.datatypes.BDomainId.makeFrom(int, byte[]) -->
<method name="makeFrom"  public="true">
<description/>
<parameter name="len">
<type class="int"/>
</parameter>
<parameter name="b">
<type class="byte" dimension="1"/>
</parameter>
<return>
<type class="javax.baja.lonworks.datatypes.BDomainId"/>
</return>
</method>

<!-- javax.baja.lonworks.datatypes.BDomainId.getDomainId() -->
<method name="getDomainId"  public="true">
<description>
Get domainId byte array.
</description>
<return>
<type class="byte" dimension="1"/>
</return>
</method>

<!-- javax.baja.lonworks.datatypes.BDomainId.getLength() -->
<method name="getLength"  public="true">
<description>
Get domainId length.
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.lonworks.datatypes.BDomainId.isZeroLength() -->
<method name="isZeroLength"  public="true">
<description>
Is this the zero length domain?
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.lonworks.datatypes.BDomainId.equals(java.lang.Object) -->
<method name="equals"  public="true">
<description>
Test if the obj is equal in value to this BDomainId.
</description>
<parameter name="obj">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.lonworks.datatypes.BDomainId.toString(javax.baja.sys.Context) -->
<method name="toString"  public="true">
<description/>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.lonworks.datatypes.BDomainId.encode(java.io.DataOutput) -->
<method name="encode"  public="true">
<description>
Serialized).
</description>
<parameter name="out">
<type class="java.io.DataOutput"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.lonworks.datatypes.BDomainId.decode(java.io.DataInput) -->
<method name="decode"  public="true">
<description>
Deserialized .
</description>
<parameter name="in">
<type class="java.io.DataInput"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.lonworks.datatypes.BDomainId.encodeToString() -->
<method name="encodeToString"  public="true">
<description>
Write the primitive in String format.
</description>
<return>
<type class="java.lang.String"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.lonworks.datatypes.BDomainId.decodeFromString(java.lang.String) -->
<method name="decodeFromString"  public="true">
<description>
Read the primitive from String format.
</description>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.lonworks.datatypes.BDomainId.DEFAULT -->
<field name="DEFAULT"  public="true" static="true" final="true">
<type class="javax.baja.lonworks.datatypes.BDomainId"/>
<description/>
</field>

<!-- javax.baja.lonworks.datatypes.BDomainId.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

<!-- javax.baja.lonworks.datatypes.BDomainId.MAX_DOMAIN_LENGTH -->
<field name="MAX_DOMAIN_LENGTH"  public="true" static="true" final="true">
<type class="int"/>
<description/>
</field>

</class>
</bajadoc>
