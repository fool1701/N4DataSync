<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="lonworks" runtimeProfile="rt" qualifiedName="javax.baja.lonworks.BNetworkVariable" name="BNetworkVariable" packageName="javax.baja.lonworks" public="true">
<description>
BNetworkVariable represents a single network variable&#xa;  in a LonDevice. It provides specific support for runtime&#xa;  updates and contains data needed to support network managment.&#xa; &lt;p&gt;
</description>
<tag name="@author">Robert Adams</tag>
<tag name="@creation">8 Nov 00</tag>
<tag name="@version">$Revision: 4$ $Date: 10/18/01 2:56:44 PM$</tag>
<tag name="@since">Niagara 3.0</tag>
<extends>
<type class="javax.baja.lonworks.BLonComponent"/>
</extends>
<implements>
<type class="javax.baja.lonworks.BINetworkVariable"/>
</implements>
<implements>
<type class="javax.baja.driver.point.BITunable"/>
</implements>
<implements>
<type class="javax.baja.driver.util.BIPollable"/>
</implements>
<property name="nvProps" flags="">
<type class="javax.baja.lonworks.datatypes.BNvProps"/>
<description>
Slot for the &lt;code&gt;nvProps&lt;/code&gt; property.&#xa; Properties needed to manage the nv.
</description>
<tag name="@see">#getNvProps</tag>
<tag name="@see">#setNvProps</tag>
</property>

<property name="nvConfigData" flags="">
<type class="javax.baja.lonworks.datatypes.BNvConfigData"/>
<description>
Slot for the &lt;code&gt;nvConfigData&lt;/code&gt; property.&#xa; Shadows data in the devices nv config table.
</description>
<tag name="@see">#getNvConfigData</tag>
<tag name="@see">#setNvConfigData</tag>
</property>

<property name="tuningPolicyName" flags="">
<type class="java.lang.String"/>
<description>
Slot for the &lt;code&gt;tuningPolicyName&lt;/code&gt; property.&#xa; Tuning manages which TuningPolicy to  use for&#xa; reads and writes on this point.
</description>
<tag name="@see">#getTuningPolicyName</tag>
<tag name="@see">#setTuningPolicyName</tag>
</property>

<action name="nvUpdate" flags="h">
<return>
<type class="void"/>
</return>
<description>
Slot for the &lt;code&gt;nvUpdate&lt;/code&gt; action.
</description>
<tag name="@see">#nvUpdate()</tag>
</action>

<topic name="receivedUpdate" flags="">
<eventType>
<type class="javax.baja.sys.BValue"/>
</eventType><description>
Slot for the &lt;code&gt;receivedUpdate&lt;/code&gt; topic.&#xa; Fired in receiveUpdate after all elements updated.&#xa; Added in 3.6.27 and 3.5.35
</description>
<tag name="@see">#fireReceivedUpdate</tag>
</topic>

<!-- javax.baja.lonworks.BNetworkVariable() -->
<constructor name="BNetworkVariable" public="true">
<description>
No arg constructor
</description>
</constructor>

<!-- javax.baja.lonworks.BNetworkVariable(int, int, int, int, int, javax.baja.lonworks.enums.BLonNvDirection) -->
<constructor name="BNetworkVariable" public="true">
<parameter name="nvIndex">
<type class="int"/>
</parameter>
<parameter name="snvtType">
<type class="int"/>
</parameter>
<parameter name="objectIndex">
<type class="int"/>
</parameter>
<parameter name="memberIndex">
<type class="int"/>
</parameter>
<parameter name="flags">
<type class="int"/>
</parameter>
<parameter name="direction">
<type class="javax.baja.lonworks.enums.BLonNvDirection"/>
</parameter>
<description>
constructor
</description>
</constructor>

<!-- javax.baja.lonworks.BNetworkVariable(int, javax.baja.lonworks.londata.BLonData, int, int, int, javax.baja.lonworks.enums.BLonNvDirection) -->
<constructor name="BNetworkVariable" public="true">
<parameter name="nvIndex">
<type class="int"/>
</parameter>
<parameter name="data">
<type class="javax.baja.lonworks.londata.BLonData"/>
</parameter>
<parameter name="objectIndex">
<type class="int"/>
</parameter>
<parameter name="memberIndex">
<type class="int"/>
</parameter>
<parameter name="flags">
<type class="int"/>
</parameter>
<parameter name="direction">
<type class="javax.baja.lonworks.enums.BLonNvDirection"/>
</parameter>
<description>
constructor
</description>
</constructor>

<!-- javax.baja.lonworks.BNetworkVariable.getNvProps() -->
<method name="getNvProps"  public="true">
<description>
Get the &lt;code&gt;nvProps&lt;/code&gt; property.&#xa; Properties needed to manage the nv.
</description>
<tag name="@see">#nvProps</tag>
<return>
<type class="javax.baja.lonworks.datatypes.BNvProps"/>
</return>
</method>

<!-- javax.baja.lonworks.BNetworkVariable.setNvProps(javax.baja.lonworks.datatypes.BNvProps) -->
<method name="setNvProps"  public="true">
<description>
Set the &lt;code&gt;nvProps&lt;/code&gt; property.&#xa; Properties needed to manage the nv.
</description>
<tag name="@see">#nvProps</tag>
<parameter name="v">
<type class="javax.baja.lonworks.datatypes.BNvProps"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.lonworks.BNetworkVariable.getNvConfigData() -->
<method name="getNvConfigData"  public="true">
<description>
Get the &lt;code&gt;nvConfigData&lt;/code&gt; property.&#xa; Shadows data in the devices nv config table.
</description>
<tag name="@see">#nvConfigData</tag>
<return>
<type class="javax.baja.lonworks.datatypes.BNvConfigData"/>
</return>
</method>

<!-- javax.baja.lonworks.BNetworkVariable.setNvConfigData(javax.baja.lonworks.datatypes.BNvConfigData) -->
<method name="setNvConfigData"  public="true">
<description>
Set the &lt;code&gt;nvConfigData&lt;/code&gt; property.&#xa; Shadows data in the devices nv config table.
</description>
<tag name="@see">#nvConfigData</tag>
<parameter name="v">
<type class="javax.baja.lonworks.datatypes.BNvConfigData"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.lonworks.BNetworkVariable.getTuningPolicyName() -->
<method name="getTuningPolicyName"  public="true">
<description>
Get the &lt;code&gt;tuningPolicyName&lt;/code&gt; property.&#xa; Tuning manages which TuningPolicy to  use for&#xa; reads and writes on this point.
</description>
<tag name="@see">#tuningPolicyName</tag>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.lonworks.BNetworkVariable.setTuningPolicyName(java.lang.String) -->
<method name="setTuningPolicyName"  public="true">
<description>
Set the &lt;code&gt;tuningPolicyName&lt;/code&gt; property.&#xa; Tuning manages which TuningPolicy to  use for&#xa; reads and writes on this point.
</description>
<tag name="@see">#tuningPolicyName</tag>
<parameter name="v">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.lonworks.BNetworkVariable.nvUpdate() -->
<method name="nvUpdate"  public="true">
<description>
Invoke the &lt;code&gt;nvUpdate&lt;/code&gt; action.
</description>
<tag name="@see">#nvUpdate</tag>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.lonworks.BNetworkVariable.fireReceivedUpdate(javax.baja.sys.BValue) -->
<method name="fireReceivedUpdate"  public="true">
<description>
Fire an event for the &lt;code&gt;receivedUpdate&lt;/code&gt; topic.&#xa; Fired in receiveUpdate after all elements updated.&#xa; Added in 3.6.27 and 3.5.35
</description>
<tag name="@see">#receivedUpdate</tag>
<parameter name="event">
<type class="javax.baja.sys.BValue"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.lonworks.BNetworkVariable.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.lonworks.BNetworkVariable.setFlags(javax.baja.lonworks.datatypes.BNvProps, javax.baja.lonworks.datatypes.BNvConfigData, int) -->
<method name="setFlags"  public="true" static="true">
<description/>
<parameter name="nvProps">
<type class="javax.baja.lonworks.datatypes.BNvProps"/>
</parameter>
<parameter name="nvCfg">
<type class="javax.baja.lonworks.datatypes.BNvConfigData"/>
</parameter>
<parameter name="flags">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.lonworks.BNetworkVariable.isNetworkVariable() -->
<method name="isNetworkVariable"  public="true">
<description/>
<return>
<type class="boolean"/>
<description>
always true
</description>
</return>
</method>

<!-- javax.baja.lonworks.BNetworkVariable.getNvIndex() -->
<method name="getNvIndex"  public="true">
<description>
Get the index of this nv in the lonworks device.
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.lonworks.BNetworkVariable.setNvIndex(int) -->
<method name="setNvIndex"  public="true">
<description>
Set the index of this nv in the lonworks device.
</description>
<parameter name="nvIndex">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.lonworks.BNetworkVariable.getSnvtType() -->
<method name="getSnvtType"  public="true">
<description>
Get the snvt type. If not a snvt return 0.
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.lonworks.BNetworkVariable.setUnbound() -->
<method name="setUnbound"  public="true">
<description>
Set nv to unbound state. Convience method to call&#xa; nvProps.setUnbound(), nvConfigData.setUnbound() and unbound().
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.lonworks.BNetworkVariable.unbound(int) -->
<method name="unbound"  public="true">
<description>
Callback during bind process when nv taken to unbound state.
</description>
<parameter name="sel">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.lonworks.BNetworkVariable.bound() -->
<method name="bound"  public="true">
<description>
Callback during bind process when nv taken to bound state.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.lonworks.BNetworkVariable.lonComponentStarted() -->
<method name="lonComponentStarted"  public="true">
<description/>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.lonworks.BNetworkVariable.lonComponentStopped() -->
<method name="lonComponentStopped"  public="true">
<description/>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.lonworks.BNetworkVariable.atSteadyState() -->
<method name="atSteadyState"  public="true">
<description/>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.lonworks.BNetworkVariable.requiresPrioritySlot() -->
<method name="requiresPrioritySlot"  public="true">
<description>
Does this nv require a priority slot (i.e. bound, ouput nv, with priority bit set)
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.lonworks.BNetworkVariable.getPollFrequency() -->
<method name="getPollFrequency"  public="true">
<description>
Convenience method to get poll frequency from tunning policy.
</description>
<return>
<type class="javax.baja.driver.util.BPollFrequency"/>
</return>
</method>

<!-- javax.baja.lonworks.BNetworkVariable.getWriteDelay() -->
<method name="getWriteDelay"  public="true">
<description>
Convenience method to get writeDelay from tunning policy.&#xa; Added 3.7.30
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.lonworks.BNetworkVariable.pollNv() -->
<method name="pollNv"  public="true">
<description>
If the device is online and nvProps.pollEnable flag set or subscribed,&#xa; read the data from the device.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.lonworks.BNetworkVariable.lonComponentSubscribed() -->
<method name="lonComponentSubscribed"  protected="true">
<description>
LonComponent transition from 0 to 1 subscriber
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.lonworks.BNetworkVariable.lonComponentUnsubscribed() -->
<method name="lonComponentUnsubscribed"  protected="true">
<description>
LonComponent transition from 1 to 0 subscriber
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.lonworks.BNetworkVariable.changed(javax.baja.sys.Property, javax.baja.sys.Context) -->
<method name="changed"  public="true">
<description>
Override for changed().
</description>
<parameter name="prop">
<type class="javax.baja.sys.Property"/>
</parameter>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.lonworks.BNetworkVariable.dataChanged(javax.baja.sys.Context) -->
<method name="dataChanged"  protected="true">
<description>
Respond to property changes.&lt;p&gt; If the prop=data and&#xa; the context!=BLonNetwork.lonNoWrite then update the nv&#xa; data in the device.
</description>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.lonworks.BNetworkVariable.propagateLinks() -->
<method name="propagateLinks"  protected="true">
<description/>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.lonworks.BNetworkVariable.doForceRead() -->
<method name="doForceRead"  public="true">
<description>
Read the data from the device.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.lonworks.BNetworkVariable.doNvUpdate() -->
<method name="doNvUpdate"  public="true">
<description/>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.lonworks.BNetworkVariable.doForceWrite() -->
<method name="doForceWrite"  public="true">
<description>
Write data to device.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.lonworks.BNetworkVariable.isWriteable() -->
<method name="isWriteable"  public="true">
<description>
Does this component represent a writable value in device.&#xa;  Returns true if this is an input nv.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.lonworks.BNetworkVariable.receiveUpdate(byte[]) -->
<method name="receiveUpdate"  public="true">
<description>
Receive nvUpdate for this nv.
</description>
<parameter name="nvData">
<type class="byte" dimension="1"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.lonworks.BNetworkVariable.lonKnobAdded(javax.baja.sys.Knob) -->
<method name="lonKnobAdded"  public="true">
<description>
A knob was added to the londevice with this nv as source. For internal use.
</description>
<parameter name="knob">
<type class="javax.baja.sys.Knob"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.lonworks.BNetworkVariable.lonKnobRemove(javax.baja.sys.Knob) -->
<method name="lonKnobRemove"  public="true">
<description>
A knob was removed from the londevice which had this nv as source. For internal use.
</description>
<parameter name="knob">
<type class="javax.baja.sys.Knob"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.lonworks.BNetworkVariable.lonLinkAdded() -->
<method name="lonLinkAdded"  public="true">
<description>
A lonLink was added to the londevice with this nv as destination. For internal use.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.lonworks.BNetworkVariable.lonLinkRemoved() -->
<method name="lonLinkRemoved"  public="true">
<description>
A lonLink was removed from the londevice which had this nv as destination. For internal use.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.lonworks.BNetworkVariable.evaluateLinkedState() -->
<method name="evaluateLinkedState"  protected="true">
<description>
Determine if nv is linked and if so is it linked to pseudoNv
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.lonworks.BNetworkVariable.isLinked() -->
<method name="isLinked"  protected="true">
<description/>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.lonworks.BNetworkVariable.getTuning() -->
<method name="getTuning"  public="true">
<description>
Get tuning support instance.
</description>
<return>
<type class="javax.baja.driver.point.Tuning"/>
</return>
</method>

<!-- javax.baja.lonworks.BNetworkVariable.isFatalFault() -->
<method name="isFatalFault"  public="true">
<description>
Return true if the network/device/component has a&#xa; fatal fault which prevents normal operation.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.lonworks.BNetworkVariable.getStatus() -->
<method name="getStatus"  public="true">
<description>
Get the status of the component.  The status should have&#xa; the down bit set if the network or device is down.  The&#xa; status should have the outOfService bit set if the&#xa; network/device/component is out of service.
</description>
<return>
<type class="javax.baja.status.BStatus"/>
</return>
</method>

<!-- javax.baja.lonworks.BNetworkVariable.isSubscribedDesired() -->
<method name="isSubscribedDesired"  public="true">
<description>
This always returns false so that tuning will not change subscribe state.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.lonworks.BNetworkVariable.getMode() -->
<method name="getMode"  public="true">
<description>
Return if the component is readonly, readWrite, or writeOnly.
</description>
<return>
<type class="javax.baja.driver.point.BReadWriteMode"/>
</return>
</method>

<!-- javax.baja.lonworks.BNetworkVariable.readSubscribed(javax.baja.sys.Context) -->
<method name="readSubscribed"  public="true">
<description/>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.lonworks.BNetworkVariable.readUnsubscribed(javax.baja.sys.Context) -->
<method name="readUnsubscribed"  public="true">
<description/>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.lonworks.BNetworkVariable.write(javax.baja.sys.Context) -->
<method name="write"  public="true">
<description>
This callback is made when a write is desired based on the&#xa; current status and tuning. It will filter out writes that&#xa; are not initiated by the user i.e. due to tuning police(maxTime,startup,etc)&#xa; if the nv is not link or if linked and bound.
</description>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.lonworks.BNetworkVariable.setStale(boolean, javax.baja.sys.Context) -->
<method name="setStale"  public="true">
<description>
Pass setStale callback to any proxies attached to this nvs data.
</description>
<parameter name="s">
<type class="boolean"/>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.lonworks.BNetworkVariable.spy(javax.baja.spy.SpyWriter) -->
<method name="spy"  public="true">
<description/>
<parameter name="out">
<type class="javax.baja.spy.SpyWriter"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.lonworks.BNetworkVariable.getLinksToPropagate(boolean) -->
<method name="getLinksToPropagate"  protected="true">
<description/>
<parameter name="create">
<type class="boolean"/>
</parameter>
<return>
<parameterizedType class="javax.baja.nre.util.Array">
<args>
<type class="javax.baja.lonworks.BLonLink"/>
</args>
</parameterizedType>
</return>
</method>

<!-- javax.baja.lonworks.BNetworkVariable.getIcon() -->
<method name="getIcon"  public="true">
<description/>
<return>
<type class="javax.baja.sys.BIcon"/>
</return>
</method>

<!-- javax.baja.lonworks.BNetworkVariable.nvProps -->
<field name="nvProps"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;nvProps&lt;/code&gt; property.&#xa; Properties needed to manage the nv.
</description>
<tag name="@see">#getNvProps</tag>
<tag name="@see">#setNvProps</tag>
</field>

<!-- javax.baja.lonworks.BNetworkVariable.nvConfigData -->
<field name="nvConfigData"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;nvConfigData&lt;/code&gt; property.&#xa; Shadows data in the devices nv config table.
</description>
<tag name="@see">#getNvConfigData</tag>
<tag name="@see">#setNvConfigData</tag>
</field>

<!-- javax.baja.lonworks.BNetworkVariable.tuningPolicyName -->
<field name="tuningPolicyName"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;tuningPolicyName&lt;/code&gt; property.&#xa; Tuning manages which TuningPolicy to  use for&#xa; reads and writes on this point.
</description>
<tag name="@see">#getTuningPolicyName</tag>
<tag name="@see">#setTuningPolicyName</tag>
</field>

<!-- javax.baja.lonworks.BNetworkVariable.nvUpdate -->
<field name="nvUpdate"  public="true" static="true" final="true">
<type class="javax.baja.sys.Action"/>
<description>
Slot for the &lt;code&gt;nvUpdate&lt;/code&gt; action.
</description>
<tag name="@see">#nvUpdate()</tag>
</field>

<!-- javax.baja.lonworks.BNetworkVariable.receivedUpdate -->
<field name="receivedUpdate"  public="true" static="true" final="true">
<type class="javax.baja.sys.Topic"/>
<description>
Slot for the &lt;code&gt;receivedUpdate&lt;/code&gt; topic.&#xa; Fired in receiveUpdate after all elements updated.&#xa; Added in 3.6.27 and 3.5.35
</description>
<tag name="@see">#fireReceivedUpdate</tag>
</field>

<!-- javax.baja.lonworks.BNetworkVariable.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
