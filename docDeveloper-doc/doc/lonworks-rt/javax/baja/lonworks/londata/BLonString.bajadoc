<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="lonworks" runtimeProfile="rt" qualifiedName="javax.baja.lonworks.londata.BLonString" name="BLonString" packageName="javax.baja.lonworks.londata" public="true" final="true">
<description>
BLonString extends BLonPrimitive to&#xa; represent a string element in a lonworks&#xa; nv, nci, or config data structure.
</description>
<tag name="@author">Robert Adams</tag>
<tag name="@creation">8 June 01</tag>
<tag name="@version">$Revision: 9$ $Date: 9/28/01 11:21:36 AM$</tag>
<tag name="@since">Niagara 3.0</tag>
<extends>
<type class="javax.baja.lonworks.londata.BLonPrimitive"/>
</extends>
<annotation><type class="javax.baja.nre.annotations.NoSlotomatic"/>
</annotation>
<!-- javax.baja.lonworks.londata.BLonString.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonString.make(java.lang.String) -->
<method name="make"  public="true" static="true">
<description/>
<parameter name="value">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.lonworks.londata.BLonString"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonString.getString() -->
<method name="getString"  public="true">
<description/>
<return>
<type class="java.lang.String"/>
<description>
the String value.
</description>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonString.hashCode() -->
<method name="hashCode"  public="true">
<description>
BLonString uses its String value&#x27;s hash code.
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonString.equals(java.lang.Object) -->
<method name="equals"  public="true">
<description>
BLonString equality is based on String value equality.
</description>
<parameter name="obj">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonString.compareTo(java.lang.Object) -->
<method name="compareTo"  public="true">
<description>
Compares this object with the specified object for &#xa; order. Returns a negative integer, zero, or a positive &#xa; integer as this object is less than, equal to, or greater &#xa; than the specified object.
</description>
<parameter name="obj">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonString.toString(javax.baja.sys.Context) -->
<method name="toString"  public="true">
<description>
To string method.
</description>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonString.encode(java.io.DataOutput) -->
<method name="encode"  public="true">
<description>
BLonString is encoded as using writeUTF().
</description>
<parameter name="out">
<type class="java.io.DataOutput"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.lonworks.londata.BLonString.decode(java.io.DataInput) -->
<method name="decode"  public="true">
<description>
BLonString is decoded using readUTF().
</description>
<parameter name="in">
<type class="java.io.DataInput"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.lonworks.londata.BLonString.encodeToString() -->
<method name="encodeToString"  public="true">
<description>
Write the simple in text format.
</description>
<return>
<type class="java.lang.String"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.lonworks.londata.BLonString.decodeFromString(java.lang.String) -->
<method name="decodeFromString"  public="true">
<description>
Read the simple from text format.
</description>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.lonworks.londata.BLonString.toOutputStream(javax.baja.lonworks.io.LonOutputStream, javax.baja.lonworks.londata.BLonElementQualifiers) -->
<method name="toOutputStream"  public="true">
<description>
Converts data to network byte format
</description>
<parameter name="out">
<type class="javax.baja.lonworks.io.LonOutputStream"/>
</parameter>
<parameter name="e">
<type class="javax.baja.lonworks.londata.BLonElementQualifiers"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonString.fromInputStream(javax.baja.lonworks.io.LonInputStream, javax.baja.lonworks.londata.BLonElementQualifiers) -->
<method name="fromInputStream"  public="true">
<description>
Translates from network bytes. Sets the&#xa;  value of the object to the state represented&#xa;  by the given bytes.
</description>
<parameter name="in">
<type class="javax.baja.lonworks.io.LonInputStream"/>
</parameter>
<parameter name="e">
<type class="javax.baja.lonworks.londata.BLonElementQualifiers"/>
</parameter>
<return>
<type class="javax.baja.lonworks.londata.BLonPrimitive"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonString.getDataAsDouble() -->
<method name="getDataAsDouble"  public="true">
<description>
Get the value of this element as a &lt;code&gt;float&lt;/code&gt;. If string&#xa;  is not a valid float then return Float.NaN
</description>
<return>
<type class="double"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonString.makeFromDouble(double, javax.baja.lonworks.londata.BLonElementQualifiers) -->
<method name="makeFromDouble"  public="true">
<description>
Create a &lt;code&gt;BLonString&lt;/code&gt; from a &lt;code&gt;float&lt;/code&gt;.
</description>
<parameter name="value">
<type class="double"/>
</parameter>
<parameter name="e">
<type class="javax.baja.lonworks.londata.BLonElementQualifiers"/>
</parameter>
<return>
<type class="javax.baja.lonworks.londata.BLonPrimitive"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonString.getDataAsBoolean() -->
<method name="getDataAsBoolean"  public="true">
<description>
Get the value of this element as a &lt;code&gt;boolean&lt;/code&gt;.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonString.makeFromBoolean(boolean) -->
<method name="makeFromBoolean"  public="true">
<description>
Create a &lt;code&gt;BLonString&lt;/code&gt; from a &lt;code&gt;boolean&lt;/code&gt;.
</description>
<parameter name="boolValue">
<type class="boolean"/>
</parameter>
<return>
<type class="javax.baja.lonworks.londata.BLonPrimitive"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonString.getDataAsString() -->
<method name="getDataAsString"  public="true">
<description>
Get the value of this element as a &lt;code&gt;String&lt;/code&gt;.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonString.makeFromString(java.lang.String) -->
<method name="makeFromString"  public="true">
<description>
Create a &lt;code&gt;BLonString&lt;/code&gt; from a &lt;code&gt;String&lt;/code&gt;.
</description>
<parameter name="stringValue">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.lonworks.londata.BLonPrimitive"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonString.getDataAsEnum(javax.baja.sys.BEnum) -->
<method name="getDataAsEnum"  public="true">
<description/>
<parameter name="en">
<type class="javax.baja.sys.BEnum"/>
</parameter>
<return>
<type class="javax.baja.sys.BEnum"/>
<description>
a &lt;code&gt;BEnum&lt;/code&gt; created using the current value as the tag.
</description>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonString.makeFromEnum(javax.baja.sys.BEnum) -->
<method name="makeFromEnum"  public="true">
<description>
Return a new &lt;code&gt;BLonString&lt;/code&gt; with the tag of the specified &lt;code&gt;BEnum&lt;/code&gt;.
</description>
<parameter name="v">
<type class="javax.baja.sys.BEnum"/>
</parameter>
<return>
<type class="javax.baja.lonworks.londata.BLonPrimitive"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonString.DEFAULT -->
<field name="DEFAULT"  public="true" static="true" final="true">
<type class="javax.baja.lonworks.londata.BLonString"/>
<description>
The default string constant is &#x22;&#x22;.
</description>
</field>

<!-- javax.baja.lonworks.londata.BLonString.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
