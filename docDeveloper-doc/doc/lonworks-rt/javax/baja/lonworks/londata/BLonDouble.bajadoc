<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="lonworks" runtimeProfile="rt" qualifiedName="javax.baja.lonworks.londata.BLonDouble" name="BLonDouble" packageName="javax.baja.lonworks.londata" public="true" final="true">
<description>
BLonDouble extends BLonPrimitive to&#xa; represent a float64 and unsigned32 element in a lonworks&#xa; nv, nci, or config data structure.
</description>
<tag name="@author">Robert Adams</tag>
<tag name="@creation">13 April 07</tag>
<tag name="@version">$Revision: 9$ $Date: 9/28/01 10:20:44 AM$</tag>
<tag name="@since">Niagara 3.0</tag>
<extends>
<type class="javax.baja.lonworks.londata.BLonPrimitive"/>
</extends>
<implements>
<type class="javax.baja.sys.BINumeric"/>
</implements>
<annotation><type class="javax.baja.nre.annotations.NoSlotomatic"/>
</annotation>
<!-- javax.baja.lonworks.londata.BLonDouble.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonDouble.make(double) -->
<method name="make"  public="true" static="true">
<description>
Factory method.
</description>
<parameter name="value">
<type class="double"/>
</parameter>
<return>
<type class="javax.baja.lonworks.londata.BLonDouble"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonDouble.getDouble() -->
<method name="getDouble"  public="true">
<description/>
<return>
<type class="double"/>
<description>
the double value.
</description>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonDouble.getInt() -->
<method name="getInt"  public="true">
<description/>
<return>
<type class="int"/>
<description>
the double value cast to an integer.
</description>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonDouble.toString(double, javax.baja.sys.Context) -->
<method name="toString"  public="true" static="true">
<description>
Format the double value using the specified Context.&#xa; If there is a BFacets.PRECISION facet then that determines&#xa; how many digits are displayed after the decimal place.&#xa; The default is to display two digits after the decimal.&#xa; If there is a BFacets.UNITS then the the unit symbol is&#xa; appended.  Special values: &#x22;+inf&#x22;, &#x22;-inf&#x22;, &#x22;nan&#x22;.
</description>
<parameter name="value">
<type class="double"/>
</parameter>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonDouble.hashCode() -->
<method name="hashCode"  public="true">
<description>
BLonDouble&#x27;s hash code is the double value&#x27;s&#xa; integer represention given by the&#xa; Double.doubleToIntBits method.
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonDouble.equals(java.lang.Object) -->
<method name="equals"  public="true">
<description>
BLonDouble equality is based on double value equality.&#xa; Unlike the standard == operator, two double values&#xa; of Double.NaN are considered equal.
</description>
<parameter name="obj">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonDouble.equals(double, double) -->
<method name="equals"  public="true" static="true">
<description>
Do a double comparision, but unlike the &#xa; standard == operator, two double values of&#xa; Double.NaN are considered equal.
</description>
<parameter name="a">
<type class="double"/>
</parameter>
<parameter name="b">
<type class="double"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonDouble.compareTo(java.lang.Object) -->
<method name="compareTo"  public="true">
<description>
Compares this object with the specified object for &#xa; order. Returns a negative integer, zero, or a positive &#xa; integer as this object is less than, equal to, or greater &#xa; than the specified object.
</description>
<parameter name="obj">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonDouble.toString(javax.baja.sys.Context) -->
<method name="toString"  public="true">
<description>
Route to &lt;code&gt;BLonDouble.toString(double, Context)&lt;/code&gt;.
</description>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonDouble.encode(java.io.DataOutput) -->
<method name="encode"  public="true">
<description>
BLonDouble is serialized using writeDouble().
</description>
<parameter name="out">
<type class="java.io.DataOutput"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.lonworks.londata.BLonDouble.decode(java.io.DataInput) -->
<method name="decode"  public="true">
<description>
BLonDouble is unserialized using readDouble().
</description>
<parameter name="in">
<type class="java.io.DataInput"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.lonworks.londata.BLonDouble.encodeToString() -->
<method name="encodeToString"  public="true">
<description>
Write the primitive in String format.  Special&#xa; values:  &#x22;+inf&#x22;, &#x22;-inf&#x22;, &#x22;nan&#x22;.
</description>
<return>
<type class="java.lang.String"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.lonworks.londata.BLonDouble.encodeToString(double) -->
<method name="encodeToString"  public="true" static="true">
<description>
Write the primitive double in String format.
</description>
<parameter name="value">
<type class="double"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.lonworks.londata.BLonDouble.decodeFromString(java.lang.String) -->
<method name="decodeFromString"  public="true">
<description>
Read the primitive from String format.
</description>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.lonworks.londata.BLonDouble.doubleFromString(java.lang.String) -->
<method name="doubleFromString"  public="true" static="true">
<description>
Parse the String format directly to a primitive double.
</description>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="double"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.lonworks.londata.BLonDouble.toOutputStream(javax.baja.lonworks.io.LonOutputStream, javax.baja.lonworks.londata.BLonElementQualifiers) -->
<method name="toOutputStream"  public="true">
<description>
Converts data to network byte format
</description>
<parameter name="out">
<type class="javax.baja.lonworks.io.LonOutputStream"/>
</parameter>
<parameter name="e">
<type class="javax.baja.lonworks.londata.BLonElementQualifiers"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonDouble.fromInputStream(javax.baja.lonworks.io.LonInputStream, javax.baja.lonworks.londata.BLonElementQualifiers) -->
<method name="fromInputStream"  public="true">
<description>
Translates from network bytes. Sets the&#xa;  value of the object to the state represented&#xa;  by the given bytes.
</description>
<parameter name="in">
<type class="javax.baja.lonworks.io.LonInputStream"/>
</parameter>
<parameter name="e">
<type class="javax.baja.lonworks.londata.BLonElementQualifiers"/>
</parameter>
<return>
<type class="javax.baja.lonworks.londata.BLonPrimitive"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonDouble.getDataAsDouble() -->
<method name="getDataAsDouble"  public="true">
<description>
Get the value of this element as a &lt;code&gt;double&lt;/code&gt;.
</description>
<return>
<type class="double"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonDouble.makeFromDouble(double, javax.baja.lonworks.londata.BLonElementQualifiers) -->
<method name="makeFromDouble"  public="true">
<description>
Create a BLonDouble from a &lt;code&gt;double&lt;/code&gt;.
</description>
<parameter name="v">
<type class="double"/>
</parameter>
<parameter name="e">
<type class="javax.baja.lonworks.londata.BLonElementQualifiers"/>
</parameter>
<return>
<type class="javax.baja.lonworks.londata.BLonPrimitive"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonDouble.isNumeric() -->
<method name="isNumeric"  public="true" final="true">
<description>
Returns true.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonDouble.getDataAsBoolean() -->
<method name="getDataAsBoolean"  public="true">
<description>
Get the value of this element as a &lt;code&gt;boolean&lt;/code&gt;.
</description>
<return>
<type class="boolean"/>
<description>
If the value=0.0 return false else true.
</description>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonDouble.makeFromBoolean(boolean) -->
<method name="makeFromBoolean"  public="true">
<description>
Create a BLonDouble from a &lt;code&gt;boolean&lt;/code&gt;. &#xa; If true then set to 1.0 else set to 0.0.
</description>
<parameter name="v">
<type class="boolean"/>
</parameter>
<return>
<type class="javax.baja.lonworks.londata.BLonPrimitive"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonDouble.getDataAsString() -->
<method name="getDataAsString"  public="true">
<description>
Get the value of this element as a &lt;code&gt;String&lt;/code&gt;.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonDouble.makeFromString(java.lang.String) -->
<method name="makeFromString"  public="true">
<description>
Create a BLonDouble from a &lt;code&gt;String&lt;/code&gt;. If string&#xa;  is not a valid double then set to Double.NaN
</description>
<parameter name="v">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.lonworks.londata.BLonPrimitive"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonDouble.getDataAsEnum(javax.baja.sys.BEnum) -->
<method name="getDataAsEnum"  public="true">
<description/>
<parameter name="en">
<type class="javax.baja.sys.BEnum"/>
</parameter>
<return>
<type class="javax.baja.sys.BEnum"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonDouble.makeFromEnum(javax.baja.sys.BEnum) -->
<method name="makeFromEnum"  public="true">
<description/>
<parameter name="v">
<type class="javax.baja.sys.BEnum"/>
</parameter>
<return>
<type class="javax.baja.lonworks.londata.BLonPrimitive"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonDouble.getIntValue() -->
<method name="getIntValue"  public="true">
<description>
Get the status element as a String.&#xa;  public final String toString(Context context)&#xa;  {&#xa;    return Double.toString(value);&#xa;  }
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonDouble.getNumeric() -->
<method name="getNumeric"  public="true">
<description>
Get the numeric as double value.
</description>
<return>
<type class="double"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonDouble.getNumericFacets() -->
<method name="getNumericFacets"  public="true">
<description>
Facets not accessible - return BFacets.NULL.
</description>
<return>
<type class="javax.baja.sys.BFacets"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonDouble.DEFAULT -->
<field name="DEFAULT"  public="true" static="true" final="true">
<type class="javax.baja.lonworks.londata.BLonDouble"/>
<description>
The default double constant is 0.0.
</description>
</field>

<!-- javax.baja.lonworks.londata.BLonDouble.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

<!-- javax.baja.lonworks.londata.BLonDouble.POSITIVE_INFINITY -->
<field name="POSITIVE_INFINITY"  public="true" static="true" final="true">
<type class="javax.baja.lonworks.londata.BLonDouble"/>
<description>
BLonDouble equal to Double.POSITIVE_INFINITY.
</description>
</field>

<!-- javax.baja.lonworks.londata.BLonDouble.NEGATIVE_INFINITY -->
<field name="NEGATIVE_INFINITY"  public="true" static="true" final="true">
<type class="javax.baja.lonworks.londata.BLonDouble"/>
<description>
BLonDouble equal to Double.NEGATIVE_INFINITY.
</description>
</field>

<!-- javax.baja.lonworks.londata.BLonDouble.NaN -->
<field name="NaN"  public="true" static="true" final="true">
<type class="javax.baja.lonworks.londata.BLonDouble"/>
<description>
BLonDouble equal to Double.NaN.
</description>
</field>

</class>
</bajadoc>
