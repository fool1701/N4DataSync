<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="lonworks" runtimeProfile="rt" qualifiedName="javax.baja.lonworks.londata.BLonInteger" name="BLonInteger" packageName="javax.baja.lonworks.londata" public="true" final="true">
<description>
BLonInteger extends BLonPrimitive to&#xa; represent an integer element in a lonworks&#xa; nv, nci, or config data structure.
</description>
<tag name="@author">Robert Adams</tag>
<tag name="@creation">5 Jan 01</tag>
<tag name="@version">$Revision: 2$ $Date: 9/28/01 10:20:46 AM$</tag>
<tag name="@since">Niagara 3.0</tag>
<extends>
<type class="javax.baja.lonworks.londata.BLonPrimitive"/>
</extends>
<implements>
<type class="javax.baja.sys.BINumeric"/>
</implements>
<annotation><type class="javax.baja.nre.annotations.NoSlotomatic"/>
</annotation>
<!-- javax.baja.lonworks.londata.BLonInteger.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonInteger.make(int) -->
<method name="make"  public="true" static="true">
<description>
Factory method.
</description>
<parameter name="value">
<type class="int"/>
</parameter>
<return>
<type class="javax.baja.lonworks.londata.BLonInteger"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonInteger.getInt() -->
<method name="getInt"  public="true">
<description/>
<return>
<type class="int"/>
<description>
the integer value.
</description>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonInteger.getFloat() -->
<method name="getFloat"  public="true">
<description/>
<return>
<type class="float"/>
<description>
the integer value cast to a float.
</description>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonInteger.hashCode() -->
<method name="hashCode"  public="true">
<description>
BLonInteger hash code is it integer value.
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonInteger.equals(java.lang.Object) -->
<method name="equals"  public="true">
<description>
BLonInteger equality is based on integer value equality.
</description>
<parameter name="obj">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonInteger.compareTo(java.lang.Object) -->
<method name="compareTo"  public="true">
<description>
Compares this object with the specified object for &#xa; order. Returns a negative integer, zero, or a positive &#xa; integer as this object is less than, equal to, or greater &#xa; than the specified object.
</description>
<parameter name="obj">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonInteger.toString(javax.baja.sys.Context) -->
<method name="toString"  public="true">
<description>
To string.
</description>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonInteger.encode(java.io.DataOutput) -->
<method name="encode"  public="true">
<description>
BLonInteger is serialized using writeInt().
</description>
<parameter name="out">
<type class="java.io.DataOutput"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.lonworks.londata.BLonInteger.decode(java.io.DataInput) -->
<method name="decode"  public="true">
<description>
BLonInteger is unserialized using readInt().
</description>
<parameter name="in">
<type class="java.io.DataInput"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.lonworks.londata.BLonInteger.encodeToString() -->
<method name="encodeToString"  public="true">
<description>
Write the simple in text format.
</description>
<return>
<type class="java.lang.String"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.lonworks.londata.BLonInteger.encodeToString(int) -->
<method name="encodeToString"  public="true" static="true">
<description>
Encode a int primitive value to its text format.
</description>
<parameter name="value">
<type class="int"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonInteger.decodeFromString(java.lang.String) -->
<method name="decodeFromString"  public="true">
<description>
Read the simple from text format.
</description>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.lonworks.londata.BLonInteger.intFromString(java.lang.String) -->
<method name="intFromString"  public="true" static="true">
<description>
Parse the text format directly to a primitive int.
</description>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="int"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.lonworks.londata.BLonInteger.toOutputStream(javax.baja.lonworks.io.LonOutputStream, javax.baja.lonworks.londata.BLonElementQualifiers) -->
<method name="toOutputStream"  public="true">
<description>
Converts data to network byte format
</description>
<parameter name="out">
<type class="javax.baja.lonworks.io.LonOutputStream"/>
</parameter>
<parameter name="e">
<type class="javax.baja.lonworks.londata.BLonElementQualifiers"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonInteger.fromInputStream(javax.baja.lonworks.io.LonInputStream, javax.baja.lonworks.londata.BLonElementQualifiers) -->
<method name="fromInputStream"  public="true">
<description>
Translates from network bytes. Sets the&#xa;  value of the object to the state represented&#xa;  by the given bytes.
</description>
<parameter name="in">
<type class="javax.baja.lonworks.io.LonInputStream"/>
</parameter>
<parameter name="e">
<type class="javax.baja.lonworks.londata.BLonElementQualifiers"/>
</parameter>
<return>
<type class="javax.baja.lonworks.londata.BLonPrimitive"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonInteger.getDataAsDouble() -->
<method name="getDataAsDouble"  public="true">
<description>
Get the value of this element as a &lt;code&gt;float&lt;/code&gt;.
</description>
<return>
<type class="double"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonInteger.makeFromDouble(double, javax.baja.lonworks.londata.BLonElementQualifiers) -->
<method name="makeFromDouble"  public="true">
<description>
Create a &lt;code&gt;BLonInteger&lt;/code&gt; from a &lt;code&gt;float&lt;/code&gt;.
</description>
<parameter name="value">
<type class="double"/>
</parameter>
<parameter name="e">
<type class="javax.baja.lonworks.londata.BLonElementQualifiers"/>
</parameter>
<return>
<type class="javax.baja.lonworks.londata.BLonPrimitive"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonInteger.isNumeric() -->
<method name="isNumeric"  public="true" final="true">
<description>
Returns true.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonInteger.getDataAsBoolean() -->
<method name="getDataAsBoolean"  public="true">
<description>
Get the value of this element as a &lt;code&gt;boolean&lt;/code&gt;.
</description>
<return>
<type class="boolean"/>
<description>
If the value=0.0 return false else true.
</description>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonInteger.makeFromBoolean(boolean) -->
<method name="makeFromBoolean"  public="true">
<description>
Create a BLonInteger from a &lt;code&gt;boolean&lt;/code&gt;. &#xa; If true then set to 1 else set to 0.
</description>
<parameter name="v">
<type class="boolean"/>
</parameter>
<return>
<type class="javax.baja.lonworks.londata.BLonPrimitive"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonInteger.getDataAsString() -->
<method name="getDataAsString"  public="true">
<description>
Get the value of this element as a &lt;code&gt;String&lt;/code&gt;.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonInteger.makeFromString(java.lang.String) -->
<method name="makeFromString"  public="true">
<description>
Create a &lt;code&gt;BLonInteger&lt;/code&gt; from a &lt;code&gt;String&lt;/code&gt;. If string&#xa;  is not a valid integer then do not modify this element.
</description>
<parameter name="stringValue">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.lonworks.londata.BLonPrimitive"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonInteger.getNumeric() -->
<method name="getNumeric"  public="true">
<description>
Get the numeric as double value.
</description>
<return>
<type class="double"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonInteger.getNumericFacets() -->
<method name="getNumericFacets"  public="true">
<description>
Facets not accessible - return BFacets.NULL.
</description>
<return>
<type class="javax.baja.sys.BFacets"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonInteger.DEFAULT -->
<field name="DEFAULT"  public="true" static="true" final="true">
<type class="javax.baja.lonworks.londata.BLonInteger"/>
<description/>
</field>

<!-- javax.baja.lonworks.londata.BLonInteger.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
