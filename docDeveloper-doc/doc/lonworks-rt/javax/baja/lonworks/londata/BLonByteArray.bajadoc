<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="lonworks" runtimeProfile="rt" qualifiedName="javax.baja.lonworks.londata.BLonByteArray" name="BLonByteArray" packageName="javax.baja.lonworks.londata" public="true" final="true">
<description>
BLonByteArray extends &lt;code&gt;BLonPrimitive&lt;/code&gt; to&#xa; represent a byte array in a lonworks&#xa; nv, nci, or config data structure.
</description>
<tag name="@author">Robert Adams</tag>
<tag name="@creation">8 June 01</tag>
<tag name="@version">$Revision: 9$ $Date: 9/28/01 10:20:40 AM$</tag>
<tag name="@since">Niagara 3.0</tag>
<extends>
<type class="javax.baja.lonworks.londata.BLonPrimitive"/>
</extends>
<annotation><type class="javax.baja.nre.annotations.NoSlotomatic"/>
</annotation>
<!-- javax.baja.lonworks.londata.BLonByteArray.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonByteArray.make(int) -->
<method name="make"  public="true" static="true">
<description>
Get a BLonByteArray with the specified byte array.
</description>
<parameter name="size">
<type class="int"/>
</parameter>
<return>
<type class="javax.baja.lonworks.londata.BLonByteArray"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonByteArray.make(byte[]) -->
<method name="make"  public="true" static="true">
<description>
Get a BLonByteArray with the given length.
</description>
<parameter name="v">
<type class="byte" dimension="1"/>
</parameter>
<return>
<type class="javax.baja.lonworks.londata.BLonByteArray"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonByteArray.equals(java.lang.Object) -->
<method name="equals"  public="true">
<description>
Test if the obj is equal in value to this BLonByteArray.
</description>
<parameter name="obj">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonByteArray.toString(javax.baja.sys.Context) -->
<method name="toString"  public="true">
<description/>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="java.lang.String"/>
<description>
String for byte array value.
</description>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonByteArray.encode(java.io.DataOutput) -->
<method name="encode"  public="true">
<description>
BLonByteArray is serialized.
</description>
<parameter name="out">
<type class="java.io.DataOutput"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.lonworks.londata.BLonByteArray.decode(java.io.DataInput) -->
<method name="decode"  public="true">
<description>
BLonByteArray is unserialized.
</description>
<parameter name="in">
<type class="java.io.DataInput"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.lonworks.londata.BLonByteArray.encodeToString() -->
<method name="encodeToString"  public="true">
<description>
Write the primitive in String format.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonByteArray.decodeFromString(java.lang.String) -->
<method name="decodeFromString"  public="true">
<description>
Read the primitive from String format.
</description>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonByteArray.getBytes() -->
<method name="getBytes"  public="true">
<description/>
<return>
<type class="byte" dimension="1"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonByteArray.toOutputStream(javax.baja.lonworks.io.LonOutputStream, javax.baja.lonworks.londata.BLonElementQualifiers) -->
<method name="toOutputStream"  public="true">
<description>
Converts data to network byte format
</description>
<parameter name="out">
<type class="javax.baja.lonworks.io.LonOutputStream"/>
</parameter>
<parameter name="e">
<type class="javax.baja.lonworks.londata.BLonElementQualifiers"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonByteArray.fromInputStream(javax.baja.lonworks.io.LonInputStream, javax.baja.lonworks.londata.BLonElementQualifiers) -->
<method name="fromInputStream"  public="true">
<description>
Translates from network bytes. Sets the &#xa;  value of the object to the state represented &#xa;  by the given bytes.
</description>
<parameter name="in">
<type class="javax.baja.lonworks.io.LonInputStream"/>
</parameter>
<parameter name="e">
<type class="javax.baja.lonworks.londata.BLonElementQualifiers"/>
</parameter>
<return>
<type class="javax.baja.lonworks.londata.BLonPrimitive"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonByteArray.getDataAsString() -->
<method name="getDataAsString"  public="true">
<description>
Get the value of this element as a &lt;code&gt;String&lt;/code&gt;.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonByteArray.makeFromString(java.lang.String) -->
<method name="makeFromString"  public="true">
<description>
Create a BLonByteArray from a &lt;code&gt;String&lt;/code&gt;.&#xa; If stringValue can not be decode to a &lt;code&gt;BLonByteArray&lt;/code&gt; &#xa; then do not modify this element this element.
</description>
<parameter name="stringValue">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.lonworks.londata.BLonPrimitive"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonByteArray.DEFAULT -->
<field name="DEFAULT"  public="true" static="true" final="true">
<type class="javax.baja.lonworks.londata.BLonByteArray"/>
<description>
The default BLonByteArray constant is zero length array.
</description>
</field>

<!-- javax.baja.lonworks.londata.BLonByteArray.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
