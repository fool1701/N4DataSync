<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="lonworks" runtimeProfile="rt" qualifiedName="javax.baja.lonworks.londata.BLonEnum" name="BLonEnum" packageName="javax.baja.lonworks.londata" public="true" final="true">
<description>
BLonEnum extends BLonPrimitive to&#xa; represent an Enumerated element in a lonworks&#xa; nv, nci, or config data structure.
</description>
<tag name="@author">Robert Adams</tag>
<tag name="@creation">29 May 01</tag>
<tag name="@version">$Revision: 9$ $Date: 9/28/01 10:20:43 AM$</tag>
<tag name="@since">Niagara 3.0</tag>
<extends>
<type class="javax.baja.lonworks.londata.BLonPrimitive"/>
</extends>
<implements>
<type class="javax.baja.sys.BIEnum"/>
</implements>
<implements>
<type class="javax.baja.sys.BINumeric"/>
</implements>
<implements>
<type class="javax.baja.sys.BIBoolean"/>
</implements>
<annotation><type class="javax.baja.nre.annotations.NoSlotomatic"/>
</annotation>
<!-- javax.baja.lonworks.londata.BLonEnum.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonEnum.make(javax.baja.sys.BEnum) -->
<method name="make"  public="true" static="true">
<description>
Factory method for creating BLonEnum from BEnum
</description>
<parameter name="d">
<type class="javax.baja.sys.BEnum"/>
</parameter>
<return>
<type class="javax.baja.lonworks.londata.BLonEnum"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonEnum.equals(java.lang.Object) -->
<method name="equals"  public="true">
<description>
Test if the obj is equal in value to this BLonEnum.
</description>
<parameter name="obj">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonEnum.compare(javax.baja.sys.BEnum) -->
<method name="compare"  public="true">
<description/>
<parameter name="d">
<type class="javax.baja.sys.BEnum"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonEnum.toString(javax.baja.sys.Context) -->
<method name="toString"  public="true">
<description/>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonEnum.encodeToString() -->
<method name="encodeToString"  public="true">
<description>
Encode value to its text format.
</description>
<return>
<type class="java.lang.String"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.lonworks.londata.BLonEnum.decodeFromString(java.lang.String) -->
<method name="decodeFromString"  public="true">
<description>
Read the primitive from text format.
</description>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.lonworks.londata.BLonEnum.encode(java.io.DataOutput) -->
<method name="encode"  public="true">
<description>
BLonEnum is encoded as using writeUTF().
</description>
<parameter name="out">
<type class="java.io.DataOutput"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.lonworks.londata.BLonEnum.decode(java.io.DataInput) -->
<method name="decode"  public="true">
<description>
BLonEnum is decoded using readUTF().
</description>
<parameter name="in">
<type class="java.io.DataInput"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.lonworks.londata.BLonEnum.toOutputStream(javax.baja.lonworks.io.LonOutputStream, javax.baja.lonworks.londata.BLonElementQualifiers) -->
<method name="toOutputStream"  public="true">
<description>
Converts data to network byte format
</description>
<parameter name="out">
<type class="javax.baja.lonworks.io.LonOutputStream"/>
</parameter>
<parameter name="e">
<type class="javax.baja.lonworks.londata.BLonElementQualifiers"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonEnum.fromInputStream(javax.baja.lonworks.io.LonInputStream, javax.baja.lonworks.londata.BLonElementQualifiers) -->
<method name="fromInputStream"  public="true">
<description>
Translates from network bytes. Sets the&#xa;  value of the object to the state represented&#xa;  by the given bytes.
</description>
<parameter name="in">
<type class="javax.baja.lonworks.io.LonInputStream"/>
</parameter>
<parameter name="e">
<type class="javax.baja.lonworks.londata.BLonElementQualifiers"/>
</parameter>
<return>
<type class="javax.baja.lonworks.londata.BLonPrimitive"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonEnum.getDataAsDouble() -->
<method name="getDataAsDouble"  public="true">
<description>
Get the value of this element as a &lt;code&gt;double&lt;/code&gt;.
</description>
<return>
<type class="double"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonEnum.makeFromDouble(double, javax.baja.lonworks.londata.BLonElementQualifiers) -->
<method name="makeFromDouble"  public="true">
<description>
Make BEnum of same type from ordinal.&#xa;  If ordinal is not a valid for current &lt;code&gt;BLonEnum&lt;/code&gt; return null.
</description>
<parameter name="ordinal">
<type class="double"/>
</parameter>
<parameter name="e">
<type class="javax.baja.lonworks.londata.BLonElementQualifiers"/>
</parameter>
<return>
<type class="javax.baja.lonworks.londata.BLonPrimitive"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonEnum.getDataAsBoolean() -->
<method name="getDataAsBoolean"  public="true">
<description>
Get the value of this element as a &lt;code&gt;boolean&lt;/code&gt;.
</description>
<return>
<type class="boolean"/>
<description>
If the current ordinal is 0 return true else false.
</description>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonEnum.makeFromBoolean(boolean) -->
<method name="makeFromBoolean"  public="true">
<description>
Create a &lt;code&gt;BLonEnum&lt;/code&gt; from a &lt;code&gt;boolean&lt;/code&gt;.&#xa; If true then enum with ordinal=1 else enum with ordinal=0.&#xa; Return null if this does not map to a valid enum.
</description>
<parameter name="boolValue">
<type class="boolean"/>
</parameter>
<return>
<type class="javax.baja.lonworks.londata.BLonPrimitive"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonEnum.getDataAsString() -->
<method name="getDataAsString"  public="true">
<description>
Get the value of this element as a &lt;code&gt;String&lt;/code&gt;.
</description>
<return>
<type class="java.lang.String"/>
<description>
the tag of the current enum.
</description>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonEnum.makeFromString(java.lang.String) -->
<method name="makeFromString"  public="true">
<description>
Make a &lt;code&gt;BLonEnum&lt;/code&gt; with specified tag.&#xa;  If tag is not valid for this enum return null.
</description>
<parameter name="tag">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.lonworks.londata.BLonPrimitive"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonEnum.getDataAsEnum(javax.baja.sys.BEnum) -->
<method name="getDataAsEnum"  public="true">
<description>
Get the value of this element as a &lt;code&gt;BEnum&lt;/code&gt;.
</description>
<parameter name="e">
<type class="javax.baja.sys.BEnum"/>
</parameter>
<return>
<type class="javax.baja.sys.BEnum"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonEnum.makeFromEnum(javax.baja.sys.BEnum) -->
<method name="makeFromEnum"  public="true">
<description>
Return a new &lt;code&gt;BLonEnum&lt;/code&gt; created with the specified &lt;code&gt;BLonEnum&lt;/code&gt;.
</description>
<parameter name="v">
<type class="javax.baja.sys.BEnum"/>
</parameter>
<return>
<type class="javax.baja.lonworks.londata.BLonPrimitive"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonEnum.makeFromOrdinal(int) -->
<method name="makeFromOrdinal"  public="true">
<description>
Return a &lt;code&gt;BLonEnum&lt;/code&gt; with of the same &lt;code&gt;BLonEnum&lt;/code&gt; range with the specified ordinal.
</description>
<parameter name="ord">
<type class="int"/>
</parameter>
<return>
<type class="javax.baja.lonworks.londata.BLonPrimitive"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonEnum.getEnum() -->
<method name="getEnum"  public="true">
<description>
Get the enum value.
</description>
<return>
<type class="javax.baja.sys.BEnum"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonEnum.getEnumFacets() -->
<method name="getEnumFacets"  public="true">
<description>
Facets not accessible - return BFacets.NULL.
</description>
<return>
<type class="javax.baja.sys.BFacets"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonEnum.getNumeric() -->
<method name="getNumeric"  public="true">
<description>
Get the numeric as double value.
</description>
<return>
<type class="double"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonEnum.getNumericFacets() -->
<method name="getNumericFacets"  public="true">
<description>
Facets not accessible - return BFacets.NULL.
</description>
<return>
<type class="javax.baja.sys.BFacets"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonEnum.getBoolean() -->
<method name="getBoolean"  public="true">
<description>
Get the boolean value.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonEnum.getBooleanFacets() -->
<method name="getBooleanFacets"  public="true">
<description>
Facets not accessible - return BFacets.NULL.
</description>
<return>
<type class="javax.baja.sys.BFacets"/>
</return>
</method>

<!-- javax.baja.lonworks.londata.BLonEnum.DEFAULT -->
<field name="DEFAULT"  public="true" static="true" final="true">
<type class="javax.baja.lonworks.londata.BLonEnum"/>
<description>
The default enum is LonNilEnum.
</description>
</field>

<!-- javax.baja.lonworks.londata.BLonEnum.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
