<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="videoDriver" runtimeProfile="wb" qualifiedName="com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder" name="VideoDecoder" packageName="com.tridium.videoDriver.ui.videoStream.decoder" public="true" abstract="true">
<description>
This is a base class that implements IVideoDecoder. Drivers may extend this&#xa; class to implement their own video decoder. To implement the video decoder,&#xa; the driver&#x27;s descendant class should override one or more of the following&#xa; methods:&#xa; &#xa;     &lt;code&gt;<see ref="com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder#initVideoStream()">#initVideoStream()</see>&lt;/code&gt;&#xa;     &lt;code&gt;<see ref="com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder#frameStarting()">#frameStarting()</see>&lt;/code&gt;&#xa;     &lt;code&gt;<see ref="com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder#readFrameData(com.tridium.videoDriver.videoStream.decoder.VidFrame)">#readFrameData(com.tridium.videoDriver.videoStream.decoder.VidFrame vf)</see>&lt;/code&gt;&#xa;     &lt;code&gt;<see ref="com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder#decodeFrame(com.tridium.videoDriver.videoStream.decoder.VidFrame)">#decodeFrame(com.tridium.videoDriver.videoStream.decoder.VidFrame vf)</see>&lt;/code&gt;&#xa;     &lt;code&gt;<see ref="com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder#frameFinished()">#frameFinished()</see>&lt;/code&gt;&#xa;     &lt;code&gt;<see ref="com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder#gracefulEndOfVideoStream()">#gracefulEndOfVideoStream()</see>&lt;/code&gt;
</description>
<tag name="@author">Tridium Inc.</tag>
<extends>
<type class="java.lang.Object"/>
</extends>
<implements>
<type class="com.tridium.videoDriver.videoStream.decoder.IVideoDecoder"/>
</implements>
<implements>
<type class="java.lang.Runnable"/>
</implements>
<!-- com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder() -->
<constructor name="VideoDecoder" public="true">
<description/>
</constructor>

<!-- com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder.getMultistreamDecoder() -->
<method name="getMultistreamDecoder"  public="true">
<description>
Gets the IVideoMultistreamDecoder that this decoder is working for&#xa; or null if this decoder is not part of a multistream decoding scheme.
</description>
<return>
<type class="com.tridium.videoDriver.videoStream.decoder.IVideoMultistreamDecoder"/>
</return>
</method>

<!-- com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder.setMultistreamDecoder(com.tridium.videoDriver.videoStream.decoder.IVideoMultistreamDecoder) -->
<method name="setMultistreamDecoder"  public="true">
<description/>
<parameter name="multistreamDecoder">
<type class="com.tridium.videoDriver.videoStream.decoder.IVideoMultistreamDecoder"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder.init(com.tridium.videoDriver.videoStream.BIVideoSource, com.tridium.videoDriver.BIVideoPlayer, javax.baja.sys.BRelTime, com.tridium.videoDriver.videoStream.IVideoSession) -->
<method name="init"  public="true">
<description>
Descendant classes must call super.init(...) if they extend this method.
</description>
<parameter name="videoSource">
<type class="com.tridium.videoDriver.videoStream.BIVideoSource"/>
</parameter>
<parameter name="videoPlayer">
<type class="com.tridium.videoDriver.BIVideoPlayer"/>
</parameter>
<parameter name="stopDecodingTimeout">
<type class="javax.baja.sys.BRelTime"/>
</parameter>
<parameter name="videoSession">
<type class="com.tridium.videoDriver.videoStream.IVideoSession"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder.isFinished() -->
<method name="isFinished"  public="true">
<description>
Indicates whether the decoder has finished decoding.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder.stopDecoding(com.tridium.videoDriver.videoStream.WaitForStopDecoding) -->
<method name="stopDecoding"  public="true">
<description>
The core videoDriver framework calls this method when it no longer&#xa; requires the video stream to be decoded.&#xa; &#xa; The default implementation stops the decoder thread and closes the&#xa; video stream.
</description>
<parameter name="stopMonitor">
<type class="com.tridium.videoDriver.videoStream.WaitForStopDecoding"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder.keepAlive() -->
<method name="keepAlive"  public="true">
<description>
The core videoDriver framework, more specifically the video player&#xa; widget, calls this method periodically to let the decoder know that&#xa; it is still being used. This is part of a watchdog-like mechanism&#xa; that is intended to keep video decoder threads from consuming resources&#xa; when video is no longer required yet there no graceful call to the&#xa; &lt;code&gt;<see ref="com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder#stopDecoding()">#stopDecoding()</see>&lt;/code&gt; method
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder.makeInputStreamForDecoder(com.tridium.videoDriver.videoStream.IVideoStream) -->
<method name="makeInputStreamForDecoder"  protected="true">
<description>
Creates an input stream for the decoder. This returns the given&#xa; IVideoStream&#x27;s internal input stream. If necessary, custom decoder&#xa; may override this to meet their needs.
</description>
<parameter name="videoStream">
<type class="com.tridium.videoDriver.videoStream.IVideoStream"/>
</parameter>
<return>
<type class="java.io.InputStream"/>
</return>
</method>

<!-- com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder.receiveVideoStream(com.tridium.videoDriver.videoStream.IVideoStream) -->
<method name="receiveVideoStream"  public="true">
<description>
The driver&#x27;s BIVideoSource calls this method when the video stream is&#xa; available from the field-device. Descendant classes must call super.receiveVideoFrame&#xa; if they extend this method.
</description>
<parameter name="videoStream">
<type class="com.tridium.videoDriver.videoStream.IVideoStream"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder.videoStreamTimeout() -->
<method name="videoStreamTimeout"  public="true">
<description>
The driver&#x27;s BIVideoSource calls this method when the attempt to retrieve&#xa; the video stream from the field-device times out. Descendant classes must&#xa; call super.videoStreamTimeout if they extend this method.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder.getVideoSession() -->
<method name="getVideoSession"  public="true">
<description/>
<return>
<type class="com.tridium.videoDriver.videoStream.IVideoSession"/>
</return>
</method>

<!-- com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder.getVideoSource() -->
<method name="getVideoSource"  public="true">
<description/>
<return>
<type class="com.tridium.videoDriver.videoStream.BIVideoSource"/>
</return>
</method>

<!-- com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder.getHttpContentType() -->
<method name="getHttpContentType"  public="true">
<description>
Gets the content-type field from the http response header that is hopefully&#xa; encoded in the HttpRspHeader property of the video stream&#x27;s playback&#xa; parameter.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder.isSingleImage() -->
<method name="isSingleImage"  public="true">
<description>
Indicates whether the content-type as returned by called &lt;code&gt;<see ref="com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder#getHttpContentType()">#getHttpContentType()</see>&lt;/code&gt;&#xa; indicates that the Http stream contains a single image only.
</description>
<return>
<type class="boolean"/>
<description>
getHttpContentType()!=null &amp;&amp; getHttpContentType().startsWith(SINGLE_IMAGE_PATTERN);
</description>
</return>
</method>

<!-- com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder.getHttpPushBoundary() -->
<method name="getHttpPushBoundary"  public="true">
<description>
Gets the HTTP push boundary string. This is only valid assuming that the video&#xa; stream is an HttpVideoStream whose content-type indicates mime multi-part encoding.
</description>
<return>
<type class="java.lang.String"/>
<description>
scans the HttpVideoStream&#x27;s content-type string and returns whatever text&#xa; is located to the right of the &#x22;boundary=&#x22; string. This is how DVR&#xa; delimits video frames. Let&#x27;s hope this is a pseudo-standard. If not, then the &#xa; driver developer may override this method and provide his or her own functionality.
</description>
</return>
</method>

<!-- com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder.isMultiPartMime() -->
<method name="isMultiPartMime"  public="true">
<description>
Indicates whether the underyling video input stream is an Http&#xa; multi-part mime stream
</description>
<return>
<type class="boolean"/>
<description>
true if the underlying video input stream is an Http&#xa; input stream (this is implicitly determined by reviewing the&#xa; IVideoStream videoFacets for a content-type key. If found, then&#xa; it is assumed to be an Http stream
</description>
</return>
</method>

<!-- com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder.getImpliedBoundaryPrefix() -->
<method name="getImpliedBoundaryPrefix"  protected="true">
<description>
This string is prepended to the http push boundary that is returned from&#xa; the call to &lt;code&gt;<see ref="com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder#getHttpPushBoundary()">#getHttpPushBoundary()</see>&lt;/code&gt;p
</description>
<return>
<type class="java.lang.String"/>
<description>
&#x22;\n--&#x22; by default. Developers may override if they wish.
</description>
</return>
</method>

<!-- com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder.getImpliedBoundarySuffix() -->
<method name="getImpliedBoundarySuffix"  protected="true">
<description>
This string is appended to the http push boundary that is returned from&#xa; the call to &lt;code&gt;<see ref="com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder#getHttpPushBoundary()">#getHttpPushBoundary()</see>&lt;/code&gt;p
</description>
<return>
<type class="java.lang.String"/>
<description>
&#x22;\n&#x22; by default. Developers may override if they wish.
</description>
</return>
</method>

<!-- com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder.run() -->
<method name="run"  public="true">
<description/>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder.gracefulEndOfVideoStream() -->
<method name="gracefulEndOfVideoStream"  protected="true">
<description>
This is called just before the run method exits&#xa; in the event that no unexpected exceptions are&#xa; thrown.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder.initVideoStream() -->
<method name="initVideoStream"  protected="true">
<description>
This method is called when the decoder&#x27;s thread starts.&#xa; &#xa; By default this sets this.decoding = true
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder.updateImageFromStream() -->
<method name="updateImageFromStream"  protected="true">
<description>
This method is called in a loop on the decoder&#x27;s thread. It must&#xa; read from video stream until it recognized the next video frame.&#xa; This should return a VidFrame containing the BImage raster of the next video frame, even&#xa; if the video protocol only transmits delta information, then this&#xa; should return the BImage raster that would result when applying&#xa; the delta information to the know image.&#xa; &#xa; NOTE: Descendants must override this method. Descendants must __NOT__&#xa; call super.updateImageFromStream(...) as the default implementation&#xa; just sleeps one second and returns a default image.&#xa; &#xa; NOTE: Descendants should also call &#x27;setTimeIndex&#x27; and pass in &#xa; a String representation of the time index that corresponds to&#xa; the image.
</description>
<return>
<type class="com.tridium.videoDriver.videoStream.decoder.VidFrame"/>
<description>
a VidFrame containing the current frame from the video&#xa; stream.
</description>
</return>
<throws>
<type class="java.io.IOException"/>
<description>
the custom implementation may pass along&#xa; any IOException that occurs as a result of reading video data&#xa; from the video stream.
</description>
</throws>
<throws>
<type class="java.io.InterruptedIOException"/>
<description>
the custom implementation may&#xa; pass along any InterruptedIOException that occurs as a result&#xa; of reading video data from the stream.
</description>
</throws>
</method>

<!-- com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder.initVidFrame() -->
<method name="initVidFrame"  protected="true">
<description>
Override point to allow subclasses to extend VidFrame which is&#xa; passed during frame reception, decoding and display.  Note this&#xa; is overridden in VideoMultistreamDecoder.
</description>
<return>
<type class="com.tridium.videoDriver.videoStream.decoder.VidFrame"/>
</return>
</method>

<!-- com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder.readFrameData(com.tridium.videoDriver.videoStream.decoder.VidFrame) -->
<method name="readFrameData"  public="true" abstract="true">
<description>
Subclasses must provide an implementation of this method to extract raw video&#xa;  from from the video stream and set vidFrame.rawData. &lt;p&gt;&#xa;  If a time stamp is a available for the frame this should be extracted to vidFrame.timeIndex.
</description>
<parameter name="vf">
<type class="com.tridium.videoDriver.videoStream.decoder.VidFrame"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder.decodeFrame(com.tridium.videoDriver.videoStream.decoder.VidFrame) -->
<method name="decodeFrame"  public="true" abstract="true">
<description>
Subclasses must provide an implementation of this method to convert raw video data to a BImage.
</description>
<parameter name="vf">
<type class="com.tridium.videoDriver.videoStream.decoder.VidFrame"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
<description/>
</throws>
</method>

<!-- com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder.processImageFromStream(com.tridium.videoDriver.videoStream.decoder.VidFrame) -->
<method name="processImageFromStream"  protected="true">
<description>
This method is called on the main thread as each decoded image&#xa; is made available.
</description>
<parameter name="newFrame">
<type class="com.tridium.videoDriver.videoStream.decoder.VidFrame"/>
<description>
- contains the latest image and timeIndex
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder.frameStarting() -->
<method name="frameStarting"  protected="true">
<description>
This method is called immediately before reading each frame with call to&#xa;  updateImageFromStream().&#xa; &#xa; The driver may override this method to perform any initialization or preparation&#xa; before actually receiving a frame.
</description>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder.frameFinished() -->
<method name="frameFinished"  protected="true">
<description>
This method is called at the end of the loop for the decoder thread which&#xa; loops continually to receive video frames.&#xa; &#xa; The driver may override this method to perform any cleanup after receiving&#xa; a frame.
</description>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder.closeStream() -->
<method name="closeStream"  protected="true">
<description>
This is called from the &#x27;stopDecoding&#x27; method, when the framework  determines&#xa; that the video decoding process needs to stop (probably as a result of an&#xa; end-user pressing a &#x27;stop&#x27; button or navigating away from a screen that&#xa; displays video.&#xa; &#xa; The default implementation should suffice. The default implementation calls&#xa; videoStream.closeVideoStream(). However, drivers may extend/override method&#xa; at their own risk!
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder.isStillBeingViewed() -->
<method name="isStillBeingViewed"  public="true">
<description>
Indicates whether the decoder is still being videoPlayer.isRunning().
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder.getVideoStream() -->
<method name="getVideoStream"  public="true">
<description>
Gets the BIVideoStream that was passed to the &lt;code&gt;<see ref="com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder#startDecoding(IVideoStream, BRelTime, BIVideoPlayer)">#startDecoding(IVideoStream, BRelTime, BIVideoPlayer)</see>&lt;/code&gt; method
</description>
<return>
<type class="com.tridium.videoDriver.videoStream.IVideoStream"/>
</return>
</method>

<!-- com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder.getVideoDecoder() -->
<method name="getVideoDecoder"  public="true">
<description>
Satisfies the IVideoDestination interface.
</description>
<return>
<type class="com.tridium.videoDriver.videoStream.decoder.IVideoDecoder"/>
<description>
&#x27;this&#x27;
</description>
</return>
</method>

<!-- com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder.getStopDecodingTimeout() -->
<method name="getStopDecodingTimeout"  public="true">
<description>
Gets the BRelTime that was passed to the &lt;code&gt;<see ref="com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder#startDecoding(IVideoStream, BRelTime, BIVideoPlayer)">#startDecoding(IVideoStream, BRelTime, BIVideoPlayer)</see>&lt;/code&gt; method
</description>
<return>
<type class="javax.baja.sys.BRelTime"/>
</return>
</method>

<!-- com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder.getVideoPlayer() -->
<method name="getVideoPlayer"  public="true">
<description>
Gets the BIVideoPlayer that was passed to the &lt;code&gt;<see ref="com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder#startDecoding(IVideoStream, BRelTime, BIVideoPlayer)">#startDecoding(IVideoStream, BRelTime, BIVideoPlayer)</see>&lt;/code&gt; method
</description>
<return>
<type class="com.tridium.videoDriver.BIVideoPlayer"/>
</return>
</method>

<!-- com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder.trace(java.lang.String) -->
<method name="trace"  protected="true">
<description/>
<parameter name="memo">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder.trace(java.lang.String, java.lang.Throwable) -->
<method name="trace"  protected="true">
<description/>
<parameter name="memo">
<type class="java.lang.String"/>
</parameter>
<parameter name="e">
<type class="java.lang.Throwable"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder.videoSource -->
<field name="videoSource"  protected="true">
<type class="com.tridium.videoDriver.videoStream.BIVideoSource"/>
<description>
The BIVideoSource that was passed to the &lt;code&gt;<see ref="com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder#startDecoding(IVideoStream, BRelTime, BIVideoPlayer)">#startDecoding(IVideoStream, BRelTime, BIVideoPlayer)</see>&lt;/code&gt; method
</description>
</field>

<!-- com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder.waitForStopMonitors -->
<field name="waitForStopMonitors"  protected="true">
<parameterizedType class="javax.baja.nre.util.Array">
<args>
<type class="com.tridium.videoDriver.videoStream.WaitForStopDecoding"/>
</args>
</parameterizedType>
<description/>
</field>

<!-- com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder.videoStream -->
<field name="videoStream"  protected="true">
<type class="com.tridium.videoDriver.videoStream.IVideoStream"/>
<description>
The BIVideoStream that was passed to the &lt;code&gt;<see ref="com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder#startDecoding(IVideoStream, BRelTime, BIVideoPlayer)">#startDecoding(IVideoStream, BRelTime, BIVideoPlayer)</see>&lt;/code&gt; method
</description>
</field>

<!-- com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder.videoSession -->
<field name="videoSession"  protected="true">
<type class="com.tridium.videoDriver.videoStream.IVideoSession"/>
<description/>
</field>

<!-- com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder.videoIn -->
<field name="videoIn"  protected="true">
<type class="java.io.InputStream"/>
<description/>
</field>

<!-- com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder.stopDecodingTimeout -->
<field name="stopDecodingTimeout"  protected="true">
<type class="javax.baja.sys.BRelTime"/>
<description>
The BRelTime that was passed to the &lt;code&gt;<see ref="com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder#startDecoding(IVideoStream, BRelTime, BIVideoPlayer)">#startDecoding(IVideoStream, BRelTime, BIVideoPlayer)</see>&lt;/code&gt; method
</description>
</field>

<!-- com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder.timeIndex -->
<field name="timeIndex"  protected="true">
<type class="javax.baja.sys.BAbsTime"/>
<description>
Keeps track of the current time index in the locality that the video&#xa; source itself is located. In other words, this is the time index string&#xa; from the video source itself
</description>
</field>

<!-- com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder.httpContentType -->
<field name="httpContentType"  protected="true">
<type class="java.lang.String"/>
<description>
This is the value of the Http content-type. This is assigned in the&#xa; &lt;code&gt;<see ref="com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder#receiveVideoStream(com.tridium.videoDriver.videoStream.IVideoStream)">#receiveVideoStream(IVideoStream)</see>&lt;/code&gt; method. This is extracted&#xa; from the IVideoStream&#x27;s videoFacets from its _content-type_ key  &#xa; &#xa; Please call the getter, &lt;code&gt;<see ref="com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder#getHttpContentType()">#getHttpContentType()</see>&lt;/code&gt; to access this&#xa; value as it will parse the content type upon the initial call&#xa; to &lt;code&gt;<see ref="com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder#getHttpContentType()">#getHttpContentType()</see>&lt;/code&gt;
</description>
</field>

<!-- com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder.httpPushBoundary -->
<field name="httpPushBoundary"  protected="true">
<type class="java.lang.String"/>
<description>
This is the push boundary string that is stuffed on the end of the&#xa; content-type field in the event that the content type is mime multipart.&#xa; &#xa; Please call the getter, &lt;code&gt;<see ref="com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder#getHttpPushBoundary()">#getHttpPushBoundary()</see>&lt;/code&gt; to access this&#xa; value as it will parse the video push boundary upon the intial call&#xa; to &lt;code&gt;<see ref="com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder#httpPushBoundary">#httpPushBoundary</see>&lt;/code&gt;
</description>
</field>

<!-- com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder.videoPlayer -->
<field name="videoPlayer"  protected="true">
<type class="com.tridium.videoDriver.BIVideoPlayer"/>
<description>
The BIVideoPlayer that was passed to the &lt;code&gt;<see ref="com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder#startDecoding(IVideoStream, BRelTime, BIVideoPlayer)">#startDecoding(IVideoStream, BRelTime, BIVideoPlayer)</see>&lt;/code&gt; method
</description>
</field>

<!-- com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder.subscriptionTicks -->
<field name="subscriptionTicks"  protected="true">
<type class="long"/>
<description>
This is the baja Clock ticks of the most recent call to the &#x27;nextImage&#x27; method. This&#xa; is part of the logic that ensures that the the decoder shuts down when the image is&#xa; no longer being looked at. This allows the decoder to clean up even in the event that&#xa; a Baja view does not clean up after itself properly.
</description>
</field>

<!-- com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder.requestToStop -->
<field name="requestToStop"  protected="true">
<type class="boolean"/>
<description/>
</field>

<!-- com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder.decodeThread -->
<field name="decodeThread"  protected="true">
<type class="java.lang.Thread"/>
<description>
This is a reference to the Thread that is kicked off from the &lt;code&gt;<see ref="com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder#startDecoding(IVideoStream, BRelTime, BIVideoPlayer)">#startDecoding(IVideoStream, BRelTime, BIVideoPlayer)</see>&lt;/code&gt; method.&#xa; &#xa; This thread calls the &lt;code&gt;<see ref="com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder#run()">#run()</see>&lt;/code&gt; method for the instance of this class.
</description>
</field>

<!-- com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder.multistreamDecoder -->
<field name="multistreamDecoder"  protected="true">
<type class="com.tridium.videoDriver.videoStream.decoder.IVideoMultistreamDecoder"/>
<description/>
</field>

<!-- com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder.nextThreadId -->
<field name="nextThreadId"  protected="true" static="true">
<type class="int"/>
<description>
This is used to help name the video decoder threads. This is important because it distinguishes between threads if more than one decoder of this class is being used.
</description>
</field>

<!-- com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder.DISCONNECTED_IMAGE -->
<field name="DISCONNECTED_IMAGE"  public="true" static="true" final="true">
<type class="javax.baja.gx.BImage"/>
<description>
This is the image that will be displayed if the video decoder is not connected.
</description>
</field>

<!-- com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder.DOTS -->
<field name="DOTS"  public="true" static="true" final="true">
<type class="java.lang.String" dimension="1"/>
<description/>
</field>

<!-- com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder.MULTIPART_START_PATTERN -->
<field name="MULTIPART_START_PATTERN"  public="true" static="true" final="true">
<type class="java.lang.String"/>
<description/>
</field>

<!-- com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder.CONTENT_TYPE_KEY -->
<field name="CONTENT_TYPE_KEY"  public="true" static="true" final="true">
<type class="java.lang.String"/>
<description/>
</field>

<!-- com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder.SINGLE_IMAGE_PATTERN -->
<field name="SINGLE_IMAGE_PATTERN"  public="true" static="true" final="true">
<type class="java.lang.String"/>
<description/>
</field>

<!-- com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder.log -->
<field name="log"  protected="true" static="true" final="true">
<type class="java.util.logging.Logger"/>
<description/>
</field>

<!-- com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder.keepAliveLog -->
<field name="keepAliveLog"  protected="true" static="true" final="true">
<type class="java.util.logging.Logger"/>
<description/>
</field>

<!-- com.tridium.videoDriver.ui.videoStream.decoder.VideoDecoder.LEX -->
<field name="LEX"  public="true" static="true" final="true">
<type class="javax.baja.util.Lexicon"/>
<description/>
</field>

</class>
</bajadoc>
