<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="seriesTransform" runtimeProfile="rt" qualifiedName="javax.baja.seriestransform.graph.BTransformFunction" name="BTransformFunction" packageName="javax.baja.seriestransform.graph" public="true" abstract="true">
<description>
A transform function performs a function on a given set of data (records) and&#xa; from that data derives a single value. This value is then stored as part&#xa; of a new resulting data record.&#xa; &#xa; E.g., a Find Maximum function takes a series of data and returns the&#xa; greatest value of that data set. &#xa; &#xa; For transform functions, the series of data given is guaranteed to be a &#xa; list of &lt;code&gt;<see ref="javax.baja.sys.BComplex">BComplex</see>&lt;/code&gt; objects. The values that the function will &#xa; use as data are stored as properties on each BComplex record.
</description>
<tag name="@author">J. Spangler</tag>
<tag name="@creation">Nov 3, 2010</tag>
<tag name="@version">1</tag>
<tag name="@since">Niagara 3.7</tag>
<extends>
<type class="javax.baja.sys.BObject"/>
</extends>
<!-- javax.baja.seriestransform.graph.BTransformFunction() -->
<constructor name="BTransformFunction" public="true">
<description/>
</constructor>

<!-- javax.baja.seriestransform.graph.BTransformFunction.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.seriestransform.graph.BTransformFunction.applyFunction(java.util.Map&lt;java.lang.String, java.util.List&lt;? extends javax.baja.sys.BComplex&gt;&gt;, java.lang.String[], javax.baja.sys.Property, javax.baja.sys.BComplex) -->
<method name="applyFunction"  public="true" abstract="true">
<description/>
<parameter name="series">
<parameterizedType class="java.util.Map">
<args>
<type class="java.lang.String"/>
<parameterizedType class="java.util.List">
<args>
<wildcardType class="?">
<bounds kind="extends">
<type class="javax.baja.sys.BComplex"/>
</bounds>
</wildcardType>
</args>
</parameterizedType>
</args>
</parameterizedType>
<description>
- Map of &lt;code&gt;<see ref="javax.baja.sys.BComplex">BComplex</see>&lt;/code&gt; objects that represent the records being&#xa;            processed by the function. The map is keyed by the name of&#xa;            the data series from which the record object originates:&#xa;            &lt;p&gt;&#xa;            &lt;code&gt;&amp;amp;lt;String seriesName , List &amp;amp;lt;BComplex&amp;amp;gt; &amp;amp;gt;&lt;/code&gt;&#xa;            &lt;/p&gt;
</description>
</parameter>
<parameter name="argFields">
<type class="java.lang.String" dimension="1"/>
<description>
- Array of String names of the record fields to use to&#xa;            perform the function calculation.
</description>
</parameter>
<parameter name="destField">
<type class="javax.baja.sys.Property"/>
<description>
- &lt;code&gt;<see ref="javax.baja.sys.Property">Property</see>&lt;/code&gt; slot to store the function result in the &#xa;            &lt;code&gt;<see ref="javax.baja.sys.BComplex">BComplex</see>&lt;/code&gt; result record.
</description>
</parameter>
<parameter name="resultRecord">
<type class="javax.baja.sys.BComplex"/>
<description>
- The &lt;code&gt;<see ref="javax.baja.sys.BComplex">BComplex</see>&lt;/code&gt; record object that contains the return&#xa;            function values of previous applied functions for the&#xa;            given series and where the result of this function will be &#xa;            stored in the given destProp slot.
</description>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.seriestransform.exceptions.TransformException"/>
<description>
- If the function cannot be resolved, a transform exception should&#xa;            be thrown.
</description>
</throws>
</method>

<!-- javax.baja.seriestransform.graph.BTransformFunction.getFunctionName() -->
<method name="getFunctionName"  public="true" abstract="true">
<description>
This method returns the simple name of the function being applied to the&#xa; data set. E.g., Max for a function that derives the max&#xa; value of a set of data points.
</description>
<return>
<type class="java.lang.String"/>
<description>
String short hand name of the function function.
</description>
</return>
</method>

<!-- javax.baja.seriestransform.graph.BTransformFunction.getFunctionDesc() -->
<method name="getFunctionDesc"  public="true" abstract="true">
<description>
This method returns a description of the function for UI purposes.
</description>
<return>
<type class="java.lang.String"/>
<description>
String
</description>
</return>
</method>

<!-- javax.baja.seriestransform.graph.BTransformFunction.getReturnType() -->
<method name="getReturnType"  public="true" abstract="true">
<description>
This method returns the &lt;code&gt;<see ref="javax.baja.sys.Type">Type</see>&lt;/code&gt; of the function return type.
</description>
<return>
<type class="javax.baja.sys.Type"/>
<description>
&lt;code&gt;<see ref="javax.baja.sys.Type">Type</see>&lt;/code&gt;
</description>
</return>
</method>

<!-- javax.baja.seriestransform.graph.BTransformFunction.getArgumentTypes() -->
<method name="getArgumentTypes"  public="true" abstract="true">
<description>
Get the list of &lt;code&gt;<see ref="javax.baja.sys.Type">Type</see>&lt;/code&gt; values that may be used as arguement values&#xa; for this function. This allows the editor to perform type checking of the&#xa; arguments at graph design time.
</description>
<return>
<type class="javax.baja.sys.Type" dimension="1"/>
<description>
Array of valid argument &lt;code&gt;<see ref="javax.baja.sys.Type">Type</see>&lt;/code&gt; values.
</description>
</return>
</method>

<!-- javax.baja.seriestransform.graph.BTransformFunction.isCumulative() -->
<method name="isCumulative"  public="true">
<description>
This field indicates that the function can be used cumulatively over&#xa; a range of time to create a final value, such as is performed during&#xa; a Rollup. &#xa; &#xa; An example of a non-cumulative function is the Passthrough function&#xa; which provides a unique value at a given time interval.
</description>
<tag name="@since">3.7u1</tag>
<return>
<type class="boolean"/>
<description>
boolean true if function can be used in Rollup; else false.
</description>
</return>
</method>

<!-- javax.baja.seriestransform.graph.BTransformFunction.getSeriesRecords(java.util.Map&lt;java.lang.String, java.util.List&lt;? extends javax.baja.sys.BComplex&gt;&gt;, java.lang.String) -->
<method name="getSeriesRecords"  public="true" final="true">
<description>
This method returns all records for a given series name in the given&#xa; data map. If the series name is null, an empty list is returned.
</description>
<parameter name="series">
<parameterizedType class="java.util.Map">
<args>
<type class="java.lang.String"/>
<parameterizedType class="java.util.List">
<args>
<wildcardType class="?">
<bounds kind="extends">
<type class="javax.baja.sys.BComplex"/>
</bounds>
</wildcardType>
</args>
</parameterizedType>
</args>
</parameterizedType>
<description>
- &lt;code&gt;<see ref="java.util.Map">Map</see>&lt;/code&gt; of records associated with series names.
</description>
</parameter>
<parameter name="seriesName">
<type class="java.lang.String"/>
<description>
- String name of the series (e.g. history) to pull records for.
</description>
</parameter>
<return>
<parameterizedType class="java.util.List">
<args>
<wildcardType class="?">
<bounds kind="extends">
<type class="javax.baja.sys.BComplex"/>
</bounds>
</wildcardType>
</args>
</parameterizedType>
<description>
&lt;code&gt;<see ref="java.util.List">List</see>&lt;/code&gt; of records associated with the given series.
</description>
</return>
</method>

<!-- javax.baja.seriestransform.graph.BTransformFunction.getUnits(javax.baja.sys.Property) -->
<method name="getUnits"  public="true" static="true" final="true">
<description>
This method retrieves the slot Unit facet information if present. If no &#xa; unit facets exist, returns BUnit.NULL
</description>
<parameter name="slot">
<type class="javax.baja.sys.Property"/>
<description>
- &lt;code&gt;<see ref="javax.baja.sys.Property">Property</see>&lt;/code&gt; to retrieve unit facets from.
</description>
</parameter>
<return>
<type class="javax.baja.units.BUnit"/>
<description>
&lt;code&gt;<see ref="javax.baja.units.BUnit">BUnit</see>&lt;/code&gt;
</description>
</return>
</method>

<!-- javax.baja.seriestransform.graph.BTransformFunction.setRecordValue(javax.baja.sys.BComplex, javax.baja.sys.Property, javax.baja.sys.BValue) -->
<method name="setRecordValue"  public="true" static="true" final="true">
<description>
Sets the given BValue for the given property name on the record object. If&#xa; the destination property slot is not present on the result record and the&#xa; result record is not a &lt;code&gt;<see ref="javax.baja.sys.BComponent">BComponent</see>&lt;/code&gt; that can have dynamic properties&#xa; added, a schema exception is thrown.&#xa; &lt;p&gt;&#xa; This method does not return a value. Instead, it populates the&#xa; result record with the appropriate values.
</description>
<parameter name="record">
<type class="javax.baja.sys.BComplex"/>
<description>
- &lt;code&gt;<see ref="javax.baja.sys.BComplex">BComplex</see>&lt;/code&gt; record object to populate with the given property.
</description>
</parameter>
<parameter name="destProp">
<type class="javax.baja.sys.Property"/>
<description>
- &lt;code&gt;<see ref="javax.baja.sys.Property">Property</see>&lt;/code&gt; slot to set our value for in our record.
</description>
</parameter>
<parameter name="value">
<type class="javax.baja.sys.BValue"/>
<description>
- &lt;code&gt;<see ref="javax.baja.sys.BValue">BValue</see>&lt;/code&gt; to set as the property value for the record.
</description>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="javax.baja.seriestransform.exceptions.SchemaException"/>
</throws>
</method>

<!-- javax.baja.seriestransform.graph.BTransformFunction.convertToUnits(javax.baja.sys.BNumber, javax.baja.units.BUnit, javax.baja.units.BUnit) -->
<method name="convertToUnits"  public="true" static="true" final="true">
<description>
&lt;p&gt;&#xa; This method converts the given value into a value of the target unit type&#xa; provided that the original unit type of the value is convertible to the&#xa; target unit type. If the conversion cannot be performed, this method &#xa; returns BDouble.NaN to indicate that no conversion could be performed.&#xa; &lt;p&gt;&#xa; &lt;i&gt;&lt;b&gt;Note:&lt;/b&gt; This method assumes that the value given is of type BNumber. &lt;/i&gt;
</description>
<parameter name="value">
<type class="javax.baja.sys.BNumber"/>
<description>
&lt;code&gt;<see ref="javax.baja.sys.BNumber">BNumber</see>&lt;/code&gt;
</description>
</parameter>
<parameter name="sourceUnit">
<type class="javax.baja.units.BUnit"/>
<description>
&lt;code&gt;<see ref="javax.baja.units.BUnit">BUnit</see>&lt;/code&gt; BUnit of the Source property that the value is &#xa;          obtained from.
</description>
</parameter>
<parameter name="targetUnit">
<type class="javax.baja.units.BUnit"/>
<description>
&lt;code&gt;<see ref="javax.baja.units.BUnit">BUnit</see>&lt;/code&gt; BUnit of the destination property.
</description>
</parameter>
<return>
<type class="javax.baja.sys.BNumber"/>
<description>
&lt;code&gt;<see ref="javax.baja.sys.BNumber">BNumber</see>&lt;/code&gt;
</description>
</return>
<throws>
<type class="javax.baja.seriestransform.exceptions.SourceException"/>
</throws>
</method>

<!-- javax.baja.seriestransform.graph.BTransformFunction.getSeriesName(java.lang.String) -->
<method name="getSeriesName"  public="true" static="true" final="true">
<description>
This method takes a fully qualified name of the format &#xa; &lt;pre&gt;SeriesName.FieldName&lt;/pre&gt; and retrieves the SeriesName. If&#xa; the qualified name is null, it returns and empty String.
</description>
<parameter name="qualifiedName">
<type class="java.lang.String"/>
<description>
- String
</description>
</parameter>
<return>
<type class="java.lang.String"/>
<description>
String
</description>
</return>
</method>

<!-- javax.baja.seriestransform.graph.BTransformFunction.getFieldName(java.lang.String) -->
<method name="getFieldName"  public="true" static="true" final="true">
<description>
This method takes a fully qualified name of the format &#xa; &lt;pre&gt;SeriesName.FieldName&lt;/pre&gt; and retrieves the FieldName. If&#xa; the qualified name is null, it returns an empty String.
</description>
<parameter name="qualifiedName">
<type class="java.lang.String"/>
<description>
- String
</description>
</parameter>
<return>
<type class="java.lang.String"/>
<description>
String
</description>
</return>
</method>

<!-- javax.baja.seriestransform.graph.BTransformFunction.getFunction(javax.baja.util.BTypeSpec) -->
<method name="getFunction"  public="true" static="true" final="true">
<description>
This method returns the &lt;code&gt;<see ref="javax.baja.seriestransform.graph.BTransformFunction">BTransformFunction</see>&lt;/code&gt; concrete implementation&#xa; for the given &lt;code&gt;<see ref="javax.baja.util.BTypeSpec">BTypeSpec</see>&lt;/code&gt; argument.
</description>
<parameter name="functionSpec">
<type class="javax.baja.util.BTypeSpec"/>
<description>
&lt;code&gt;<see ref="javax.baja.util.BTypeSpec">BTypeSpec</see>&lt;/code&gt; identifying which &lt;code&gt;<see ref="javax.baja.seriestransform.graph.BTransformFunction">BTransformFunction</see>&lt;/code&gt; to return.
</description>
</parameter>
<return>
<type class="javax.baja.seriestransform.graph.BTransformFunction"/>
<description>
&lt;code&gt;<see ref="javax.baja.seriestransform.graph.BTransformFunction">BTransformFunction</see>&lt;/code&gt;
</description>
</return>
</method>

<!-- javax.baja.seriestransform.graph.BTransformFunction.getAllFunctions() -->
<method name="getAllFunctions"  public="true" static="true" final="true">
<description>
This method returns a list of all concrete transform function &#xa; implementations found in the &lt;code&gt;<see ref="javax.baja.registry.Registry">Registry</see>&lt;/code&gt;.
</description>
<return>
<parameterizedType class="java.util.List">
<args>
<type class="javax.baja.seriestransform.graph.BTransformFunction"/>
</args>
</parameterizedType>
<description>
List of &lt;code&gt;<see ref="javax.baja.seriestransform.graph.BTransformFunction">BTransformFunction</see>&lt;/code&gt; objects
</description>
</return>
</method>

<!-- javax.baja.seriestransform.graph.BTransformFunction.toString(javax.baja.sys.Context) -->
<method name="toString"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.seriestransform.graph.BTransformFunction.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

<!-- javax.baja.seriestransform.graph.BTransformFunction.log -->
<field name="log"  public="true" static="true" final="true">
<type class="java.util.logging.Logger"/>
<description/>
</field>

<!-- javax.baja.seriestransform.graph.BTransformFunction.lex -->
<field name="lex"  public="true" static="true" final="true">
<type class="javax.baja.util.Lexicon"/>
<description/>
</field>

</class>
</bajadoc>
