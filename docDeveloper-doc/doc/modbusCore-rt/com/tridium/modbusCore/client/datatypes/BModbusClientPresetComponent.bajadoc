<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="modbusCore" runtimeProfile="rt" qualifiedName="com.tridium.modbusCore.client.datatypes.BModbusClientPresetComponent" name="BModbusClientPresetComponent" packageName="com.tridium.modbusCore.client.datatypes" public="true" abstract="true">
<description>
BModbusClientPresetComponent is a superclass component for writing preset Modbus data (i.e. holding registers, coils)&#xa; to a ModbusClientDevice.  Entries (BModbusClientPresetRegister or BModbusClientPresetCoil objects) can be dynamically &#xa; added as children of this component to specify the preset values to write.  Writing occurs when the linkable &#x27;write&#x27;&#xa; action is fired.  Values specified in the dynamic children are written to the device using the specified starting &#xa; (absolute) address, and the slot order of the children determines what address is assigned to their values.
</description>
<tag name="@author">Scott Hoye</tag>
<tag name="@creation">18 Mar 04</tag>
<tag name="@version">$Revision: 1$ $Date: 03/18/04 12:47:14 PM$</tag>
<tag name="@since">Niagara 3.0 modbusCore 1.0</tag>
<extends>
<type class="javax.baja.sys.BComponent"/>
</extends>
<property name="startingAddress" flags="">
<type class="com.tridium.modbusCore.datatypes.BFlexAddress"/>
<description>
Slot for the &lt;code&gt;startingAddress&lt;/code&gt; property.&#xa; The starting Modbus address.&#xa; This is not the actual address&#xa; used when writing to the device,&#xa; the absolute one is.  This user&#xa; specified address is used in&#xa; determining the absolute one.
</description>
<tag name="@see">#getStartingAddress</tag>
<tag name="@see">#setStartingAddress</tag>
</property>

<property name="absoluteStartingAddress" flags="rt">
<type class="com.tridium.modbusCore.datatypes.BFlexAddress"/>
<description>
Slot for the &lt;code&gt;absoluteStartingAddress&lt;/code&gt; property.&#xa; The absolute starting Modbus address.&#xa; Uses the appropriate offset provided&#xa; in the BModbusClientDevice.
</description>
<tag name="@see">#getAbsoluteStartingAddress</tag>
<tag name="@see">#setAbsoluteStartingAddress</tag>
</property>

<property name="status" flags="rtd">
<type class="javax.baja.status.BStatus"/>
<description>
Slot for the &lt;code&gt;status&lt;/code&gt; property.&#xa; The status of writing the preset data values to the&#xa; ModbusClientDevice.  Fault if there was a problem&#xa; somewhere when trying to write the values, down&#xa; if the starting address is invalid.
</description>
<tag name="@see">#getStatus</tag>
<tag name="@see">#setStatus</tag>
</property>

<property name="writeOnInputChange" flags="">
<type class="boolean"/>
<description>
Slot for the &lt;code&gt;writeOnInputChange&lt;/code&gt; property.&#xa; When true, a change to any of the inputs will cause the&#xa; write action to be fired.  When false, the write action&#xa; must be explicitly triggered.
</description>
<tag name="@see">#getWriteOnInputChange</tag>
<tag name="@see">#setWriteOnInputChange</tag>
</property>

<action name="write" flags="as">
<return>
<type class="void"/>
</return>
<description>
Slot for the &lt;code&gt;write&lt;/code&gt; action.
</description>
<tag name="@see">#write()</tag>
</action>

<topic name="writeSuccessful" flags="s">
<eventType>
<type class="javax.baja.sys.BValue"/>
</eventType><description>
Slot for the &lt;code&gt;writeSuccessful&lt;/code&gt; topic.
</description>
<tag name="@see">#fireWriteSuccessful</tag>
</topic>

</class>
</bajadoc>
