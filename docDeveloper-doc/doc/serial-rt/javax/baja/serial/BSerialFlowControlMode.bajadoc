<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="serial" runtimeProfile="rt" qualifiedName="javax.baja.serial.BSerialFlowControlMode" name="BSerialFlowControlMode" packageName="javax.baja.serial" public="true" final="true">
<description>
BSerialFlowControlMode represents the flow control settings&#xa; for a comm port.&#xa; &lt;p&gt;
</description>
<tag name="@author">Scott Hoye</tag>
<tag name="@creation">30 Sep 02</tag>
<tag name="@version">$Revision: 3$ $Date: 9/30/08 5:09:02 PM EDT$</tag>
<tag name="@since">Niagara 3.0 serial 1.0</tag>
<extends>
<type class="javax.baja.sys.BBitString"/>
</extends>
<annotation><type class="javax.baja.nre.annotations.NoSlotomatic"/>
</annotation>
<!-- javax.baja.serial.BSerialFlowControlMode.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.serial.BSerialFlowControlMode.make(int) -->
<method name="make"  public="true" static="true">
<description>
Factory method for creating flow control &#xa; status from bit mask.
</description>
<parameter name="bits">
<type class="int"/>
</parameter>
<return>
<type class="javax.baja.serial.BSerialFlowControlMode"/>
</return>
</method>

<!-- javax.baja.serial.BSerialFlowControlMode.make(javax.baja.serial.BSerialFlowControlMode, int, boolean) -->
<method name="make"  public="true" static="true">
<description>
Returns flow control status instance equal to the &#xa; given status with the given bit set or cleared
</description>
<parameter name="orig">
<type class="javax.baja.serial.BSerialFlowControlMode"/>
</parameter>
<parameter name="bit">
<type class="int"/>
</parameter>
<parameter name="bitState">
<type class="boolean"/>
</parameter>
<return>
<type class="javax.baja.serial.BSerialFlowControlMode"/>
</return>
</method>

<!-- javax.baja.serial.BSerialFlowControlMode.makeRtsCtsOnInput(javax.baja.serial.BSerialFlowControlMode, boolean) -->
<method name="makeRtsCtsOnInput"  public="true" static="true">
<description>
Convenience for &lt;code&gt;make(orig, RTS_CTS_ON_INPUT, state)&lt;/code&gt;.
</description>
<parameter name="orig">
<type class="javax.baja.serial.BSerialFlowControlMode"/>
</parameter>
<parameter name="state">
<type class="boolean"/>
</parameter>
<return>
<type class="javax.baja.serial.BSerialFlowControlMode"/>
</return>
</method>

<!-- javax.baja.serial.BSerialFlowControlMode.makeRtsCtsOnOutput(javax.baja.serial.BSerialFlowControlMode, boolean) -->
<method name="makeRtsCtsOnOutput"  public="true" static="true">
<description>
Convenience for &lt;code&gt;make(orig, RTS_CTS_ON_OUTPUT, state)&lt;/code&gt;.
</description>
<parameter name="orig">
<type class="javax.baja.serial.BSerialFlowControlMode"/>
</parameter>
<parameter name="state">
<type class="boolean"/>
</parameter>
<return>
<type class="javax.baja.serial.BSerialFlowControlMode"/>
</return>
</method>

<!-- javax.baja.serial.BSerialFlowControlMode.makeXonXoffOnInput(javax.baja.serial.BSerialFlowControlMode, boolean) -->
<method name="makeXonXoffOnInput"  public="true" static="true">
<description>
Convenience for &lt;code&gt;make(orig, XON_XOFF_ON_INPUT, state)&lt;/code&gt;.
</description>
<parameter name="orig">
<type class="javax.baja.serial.BSerialFlowControlMode"/>
</parameter>
<parameter name="state">
<type class="boolean"/>
</parameter>
<return>
<type class="javax.baja.serial.BSerialFlowControlMode"/>
</return>
</method>

<!-- javax.baja.serial.BSerialFlowControlMode.makeXonXoffOnOutput(javax.baja.serial.BSerialFlowControlMode, boolean) -->
<method name="makeXonXoffOnOutput"  public="true" static="true">
<description>
Convenience for &lt;code&gt;make(orig, XON_XOFF_ON_OUTPUT, state)&lt;/code&gt;.
</description>
<parameter name="orig">
<type class="javax.baja.serial.BSerialFlowControlMode"/>
</parameter>
<parameter name="state">
<type class="boolean"/>
</parameter>
<return>
<type class="javax.baja.serial.BSerialFlowControlMode"/>
</return>
</method>

<!-- javax.baja.serial.BSerialFlowControlMode.getBits() -->
<method name="getBits"  public="true">
<description>
Get the flow control status bit mask.
</description>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.serial.BSerialFlowControlMode.isNone() -->
<method name="isNone"  public="true">
<description>
Return true if the bits are equal to 0.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.serial.BSerialFlowControlMode.isRtsCtsOnInput() -->
<method name="isRtsCtsOnInput"  public="true">
<description>
Returning true indicates that the RtsCtsOnInput&#xa; flow control mode is enabled.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.serial.BSerialFlowControlMode.isRtsCtsOnOutput() -->
<method name="isRtsCtsOnOutput"  public="true">
<description>
Returning true indicates that the RtsCtsOnOutput&#xa; flow control mode is enabled.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.serial.BSerialFlowControlMode.isXonXoffOnInput() -->
<method name="isXonXoffOnInput"  public="true">
<description>
Returning true indicates that the XonXoffOnInput&#xa; flow control mode is enabled.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.serial.BSerialFlowControlMode.isXonXoffOnOutput() -->
<method name="isXonXoffOnOutput"  public="true">
<description>
Returning true indicates that the XonXoffOnOutput&#xa; flow control mode is enabled.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.serial.BSerialFlowControlMode.getBit(int) -->
<method name="getBit"  public="true">
<description>
Return if the bit specified by the given ordinal is set.
</description>
<parameter name="ordinal">
<type class="int"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.serial.BSerialFlowControlMode.getBit(java.lang.String) -->
<method name="getBit"  public="true">
<description>
Return if the bit specified by the given tag is set.
</description>
<parameter name="tag">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.serial.BSerialFlowControlMode.getOrdinals() -->
<method name="getOrdinals"  public="true">
<description>
Get an array enumerating the list of all known&#xa; ordinal values of this bitstring instance.
</description>
<return>
<type class="int" dimension="1"/>
</return>
</method>

<!-- javax.baja.serial.BSerialFlowControlMode.isOrdinal(int) -->
<method name="isOrdinal"  public="true">
<description>
Is the specified ordinal value included in this&#xa; bitstring&#x27;s range of valid ordinals.
</description>
<parameter name="ordinal">
<type class="int"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.serial.BSerialFlowControlMode.getTag(int) -->
<method name="getTag"  public="true">
<description>
Get the tag identifier for an ordinal value.
</description>
<parameter name="ordinal">
<type class="int"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.serial.BSerialFlowControlMode.getDisplayTag(int, javax.baja.sys.Context) -->
<method name="getDisplayTag"  public="true">
<description>
Get the user readable tag for an ordinal value.
</description>
<parameter name="ordinal">
<type class="int"/>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.serial.BSerialFlowControlMode.getInstance(int[]) -->
<method name="getInstance"  public="true">
<description>
Get the BBitString instance which maps to the &#xa; specified set of ordinal values.
</description>
<parameter name="ordinals">
<type class="int" dimension="1"/>
</parameter>
<return>
<type class="javax.baja.sys.BBitString"/>
</return>
</method>

<!-- javax.baja.serial.BSerialFlowControlMode.isTag(java.lang.String) -->
<method name="isTag"  public="true">
<description>
Return true if the specified tag is contained by the range.
</description>
<parameter name="tag">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.serial.BSerialFlowControlMode.tagToOrdinal(java.lang.String) -->
<method name="tagToOrdinal"  public="true">
<description>
Get the ordinal associated with the specified tag.
</description>
<parameter name="tag">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.serial.BSerialFlowControlMode.isEmpty() -->
<method name="isEmpty"  public="true">
<description>
Empty is the same as ok (bits are 0).
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.serial.BSerialFlowControlMode.getEmptyTag() -->
<method name="getEmptyTag"  public="true">
<description>
The empty tag is &#x22;none&#x22;.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.serial.BSerialFlowControlMode.hashCode() -->
<method name="hashCode"  public="true">
<description>
BSerialFlowControlMode hash code.
</description>
<tag name="@since">Niagara 3.4</tag>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.serial.BSerialFlowControlMode.equals(java.lang.Object) -->
<method name="equals"  public="true">
<description>
Equality is based on bitmask equality.
</description>
<parameter name="obj">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.serial.BSerialFlowControlMode.toString(javax.baja.sys.Context) -->
<method name="toString"  public="true">
<description>
To string.
</description>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.serial.BSerialFlowControlMode.encode(java.io.DataOutput) -->
<method name="encode"  public="true">
<description>
Binary encoding is writeInt(bits).
</description>
<parameter name="out">
<type class="java.io.DataOutput"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.serial.BSerialFlowControlMode.decode(java.io.DataInput) -->
<method name="decode"  public="true">
<description>
Binary decoding is make(readInt()).
</description>
<parameter name="in">
<type class="java.io.DataInput"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.serial.BSerialFlowControlMode.encodeToString() -->
<method name="encodeToString"  public="true">
<description>
Text format is the bit mask in hex.
</description>
<return>
<type class="java.lang.String"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.serial.BSerialFlowControlMode.decodeFromString(java.lang.String) -->
<method name="decodeFromString"  public="true">
<description>
Read the bit mask as hex.
</description>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.serial.BSerialFlowControlMode.none -->
<field name="none"  public="true" static="true" final="true">
<type class="javax.baja.serial.BSerialFlowControlMode"/>
<description/>
</field>

<!-- javax.baja.serial.BSerialFlowControlMode.DEFAULT -->
<field name="DEFAULT"  public="true" static="true" final="true">
<type class="javax.baja.serial.BSerialFlowControlMode"/>
<description/>
</field>

<!-- javax.baja.serial.BSerialFlowControlMode.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

<!-- javax.baja.serial.BSerialFlowControlMode.RTS_CTS_ON_INPUT -->
<field name="RTS_CTS_ON_INPUT"  public="true" static="true" final="true">
<type class="int"/>
<description>
Get the BTypeSpec for this type&#x27;s BPlugin.
</description>
</field>

<!-- javax.baja.serial.BSerialFlowControlMode.RTS_CTS_ON_OUTPUT -->
<field name="RTS_CTS_ON_OUTPUT"  public="true" static="true" final="true">
<type class="int"/>
<description/>
</field>

<!-- javax.baja.serial.BSerialFlowControlMode.XON_XOFF_ON_INPUT -->
<field name="XON_XOFF_ON_INPUT"  public="true" static="true" final="true">
<type class="int"/>
<description/>
</field>

<!-- javax.baja.serial.BSerialFlowControlMode.XON_XOFF_ON_OUTPUT -->
<field name="XON_XOFF_ON_OUTPUT"  public="true" static="true" final="true">
<type class="int"/>
<description/>
</field>

<!-- javax.baja.serial.BSerialFlowControlMode.rtsCtsOnInput -->
<field name="rtsCtsOnInput"  public="true" static="true" final="true">
<type class="javax.baja.serial.BSerialFlowControlMode"/>
<description/>
</field>

<!-- javax.baja.serial.BSerialFlowControlMode.rtsCtsOnOutput -->
<field name="rtsCtsOnOutput"  public="true" static="true" final="true">
<type class="javax.baja.serial.BSerialFlowControlMode"/>
<description/>
</field>

<!-- javax.baja.serial.BSerialFlowControlMode.xonXoffOnInput -->
<field name="xonXoffOnInput"  public="true" static="true" final="true">
<type class="javax.baja.serial.BSerialFlowControlMode"/>
<description/>
</field>

<!-- javax.baja.serial.BSerialFlowControlMode.xonXoffOnOutput -->
<field name="xonXoffOnOutput"  public="true" static="true" final="true">
<type class="javax.baja.serial.BSerialFlowControlMode"/>
<description/>
</field>

</class>
</bajadoc>
