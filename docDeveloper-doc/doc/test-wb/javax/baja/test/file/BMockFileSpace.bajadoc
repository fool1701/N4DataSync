<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="test" runtimeProfile="wb" qualifiedName="javax.baja.test.file.BMockFileSpace" name="BMockFileSpace" packageName="javax.baja.test.file" public="true">
<description/>
<extends>
<type class="javax.baja.file.BFileSpace"/>
</extends>
<!-- javax.baja.test.file.BMockFileSpace(javax.baja.test.BMockSession) -->
<constructor name="BMockFileSpace" public="true">
<parameter name="session">
<type class="javax.baja.test.BMockSession"/>
</parameter>
<description/>
</constructor>

<!-- javax.baja.test.file.BMockFileSpace.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.test.file.BMockFileSpace.makeFileSpace(java.lang.String) -->
<method name="makeFileSpace"  public="true" static="true">
<description/>
<parameter name="sessionName">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.test.file.BMockFileSpace"/>
</return>
</method>

<!-- javax.baja.test.file.BMockFileSpace.clear() -->
<method name="clear"  public="true">
<description/>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.test.file.BMockFileSpace.getChildren(javax.baja.file.FilePath) -->
<method name="getChildren"  public="true">
<description/>
<parameter name="parentPath">
<type class="javax.baja.file.FilePath"/>
</parameter>
<return>
<type class="javax.baja.file.BIFile" dimension="1"/>
</return>
</method>

<!-- javax.baja.test.file.BMockFileSpace.mockFile(javax.baja.file.FilePath, boolean) -->
<method name="mockFile"  public="true">
<description/>
<parameter name="path">
<type class="javax.baja.file.FilePath"/>
</parameter>
<parameter name="isDirectory">
<type class="boolean"/>
</parameter>
<return>
<type class="javax.baja.file.BIFile"/>
</return>
</method>

<!-- javax.baja.test.file.BMockFileSpace.mockFile(java.lang.String) -->
<method name="mockFile"  public="true">
<description/>
<parameter name="pathBody">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.file.BIFile"/>
</return>
</method>

<!-- javax.baja.test.file.BMockFileSpace.mockDirectory(java.lang.String) -->
<method name="mockDirectory"  public="true">
<description/>
<parameter name="pathBody">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.file.BDirectory"/>
</return>
</method>

<!-- javax.baja.test.file.BMockFileSpace.mockFiles(java.lang.String...) -->
<method name="mockFiles"  public="true" isVarargs="true">
<description/>
<parameter name="paths">
<type class="java.lang.String" dimension="1"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.test.file.BMockFileSpace.hasNavChildren() -->
<method name="hasNavChildren"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Return is any children have been added.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.test.file.BMockFileSpace.getNavChild(java.lang.String) -->
<method name="getNavChild"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get the child by the specified name, or&#xa; return null if not found.
</description>
<parameter name="navName">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.nav.BINavNode"/>
</return>
</method>

<!-- javax.baja.test.file.BMockFileSpace.getNavChildren() -->
<method name="getNavChildren"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get the children nodes for this navigation node.&#xa; Return an array of length zero if there are no&#xa; children.
</description>
<return>
<type class="javax.baja.nav.BINavNode" dimension="1"/>
</return>
</method>

<!-- javax.baja.test.file.BMockFileSpace.getNavParent() -->
<method name="getNavParent"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
If this instance has been mounted under another&#xa; BNavContainer, then return it.  Otherwise the default&#xa; implementation is to return null.
</description>
<return>
<type class="javax.baja.nav.BINavNode"/>
</return>
</method>

<!-- javax.baja.test.file.BMockFileSpace.getOrdInSession() -->
<method name="getOrdInSession"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get the ord of this space relative to its session.
</description>
<return>
<type class="javax.baja.naming.BOrd"/>
</return>
</method>

<!-- javax.baja.test.file.BMockFileSpace.getOrdInHost() -->
<method name="getOrdInHost"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get the ord of this space relative to its host.
</description>
<return>
<type class="javax.baja.naming.BOrd"/>
</return>
</method>

<!-- javax.baja.test.file.BMockFileSpace.getHost() -->
<method name="getHost"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
If this space is mounted, then return its parent&#xa; host, otherwise return null.
</description>
<return>
<type class="javax.baja.naming.BHost"/>
</return>
</method>

<!-- javax.baja.test.file.BMockFileSpace.getSession() -->
<method name="getSession"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
If this space is mounted, then return its parent&#xa; session, otherwise return null.
</description>
<return>
<type class="javax.baja.naming.BISession"/>
</return>
</method>

<!-- javax.baja.test.file.BMockFileSpace.makeDir(javax.baja.file.FilePath, javax.baja.sys.Context) -->
<method name="makeDir"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Make a directory for the specified path or return&#xa; the existing directory.  This creates zero or more&#xa; directories as needed.  Check security permissions&#xa; if context maps to a user.
</description>
<parameter name="path">
<type class="javax.baja.file.FilePath"/>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="javax.baja.file.BDirectory"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.test.file.BMockFileSpace.makeFile(javax.baja.file.FilePath, javax.baja.sys.Context) -->
<method name="makeFile"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Make a file for the specified path or return the&#xa; existing file.  This creates zero or more directories&#xa; as needed.  Check security permissions if context&#xa; maps to a user.
</description>
<parameter name="path">
<type class="javax.baja.file.FilePath"/>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="javax.baja.file.BIFile"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.test.file.BMockFileSpace.move(javax.baja.file.FilePath, javax.baja.file.FilePath, javax.baja.sys.Context) -->
<method name="move"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Unsupported
</description>
<parameter name="from">
<type class="javax.baja.file.FilePath"/>
</parameter>
<parameter name="to">
<type class="javax.baja.file.FilePath"/>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.test.file.BMockFileSpace.delete(javax.baja.file.FilePath, javax.baja.sys.Context) -->
<method name="delete"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Recursively delete the specified file.  Ignore&#xa; the call if the path doesn&#x27;t exist.  Check security&#xa; permissions if context maps to a user.
</description>
<parameter name="path">
<type class="javax.baja.file.FilePath"/>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.test.file.BMockFileSpace.findStore(javax.baja.file.FilePath) -->
<method name="findStore"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Map a FilePath to an instanceof of BIFileStore.  If the&#xa; path doesn&#x27;t map to a file in this space, then return null.
</description>
<parameter name="path">
<type class="javax.baja.file.FilePath"/>
</parameter>
<return>
<type class="javax.baja.file.BIFileStore"/>
</return>
</method>

<!-- javax.baja.test.file.BMockFileSpace.findFile(javax.baja.file.FilePath) -->
<method name="findFile"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="path">
<type class="javax.baja.file.FilePath"/>
</parameter>
<return>
<type class="javax.baja.file.BIFile"/>
</return>
</method>

<!-- javax.baja.test.file.BMockFileSpace.getChild(javax.baja.file.BIFile, java.lang.String) -->
<method name="getChild"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get the child file of the specified parent or&#xa; return null if not found.
</description>
<parameter name="parent">
<type class="javax.baja.file.BIFile"/>
</parameter>
<parameter name="childName">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.file.BIFile"/>
</return>
</method>

<!-- javax.baja.test.file.BMockFileSpace.getChildren(javax.baja.file.BIFile) -->
<method name="getChildren"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get the children files of the specified parent&#xa; or return an empty array.
</description>
<parameter name="parent">
<type class="javax.baja.file.BIFile"/>
</parameter>
<return>
<type class="javax.baja.file.BIFile" dimension="1"/>
</return>
</method>

<!-- javax.baja.test.file.BMockFileSpace.listFiles() -->
<method name="listFiles"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get the list of containing files.
</description>
<return>
<type class="javax.baja.file.BIFile" dimension="1"/>
</return>
</method>

<!-- javax.baja.test.file.BMockFileSpace.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

<!-- javax.baja.test.file.BMockFileSpace.NO_FILES -->
<field name="NO_FILES"  public="true" static="true" final="true">
<type class="javax.baja.file.BIFile" dimension="1"/>
<description/>
</field>

</class>
</bajadoc>
