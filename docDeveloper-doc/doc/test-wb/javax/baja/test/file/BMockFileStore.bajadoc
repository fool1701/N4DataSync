<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="test" runtimeProfile="wb" qualifiedName="javax.baja.test.file.BMockFileStore" name="BMockFileStore" packageName="javax.baja.test.file" public="true">
<description/>
<extends>
<type class="javax.baja.sys.BObject"/>
</extends>
<implements>
<type class="javax.baja.file.BIFileStore"/>
</implements>
<!-- javax.baja.test.file.BMockFileStore(javax.baja.test.file.BMockFileSpace, java.lang.String, boolean) -->
<constructor name="BMockFileStore" public="true">
<parameter name="space">
<type class="javax.baja.test.file.BMockFileSpace"/>
</parameter>
<parameter name="pathBody">
<type class="java.lang.String"/>
</parameter>
<parameter name="isDirectory">
<type class="boolean"/>
</parameter>
<description/>
</constructor>

<!-- javax.baja.test.file.BMockFileStore.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.test.file.BMockFileStore.setSize(long) -->
<method name="setSize"  public="true">
<description/>
<parameter name="value">
<type class="long"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.test.file.BMockFileStore.setReadonly(boolean) -->
<method name="setReadonly"  public="true">
<description/>
<parameter name="value">
<type class="boolean"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.test.file.BMockFileStore.setCrc(long) -->
<method name="setCrc"  public="true">
<description/>
<parameter name="value">
<type class="long"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.test.file.BMockFileStore.setPermissions(javax.baja.security.BPermissions) -->
<method name="setPermissions"  public="true">
<description/>
<parameter name="value">
<type class="javax.baja.security.BPermissions"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.test.file.BMockFileStore.setInputStreamSupplier(java.util.function.Supplier&lt;java.io.InputStream&gt;) -->
<method name="setInputStreamSupplier"  public="true">
<description>
Set the input stream supplier for this file
</description>
<parameter name="value">
<parameterizedType class="java.util.function.Supplier">
<args>
<type class="java.io.InputStream"/>
</args>
</parameterizedType>
<description>
supplies the input stream for this file
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.test.file.BMockFileStore.setInputStreamSupplier(java.util.function.Consumer&lt;java.io.OutputStream&gt;) -->
<method name="setInputStreamSupplier"  public="true">
<description>
Set the input stream supplier for this file using an OutputStream consumer.
</description>
<parameter name="value">
<parameterizedType class="java.util.function.Consumer">
<args>
<type class="java.io.OutputStream"/>
</args>
</parameterizedType>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.test.file.BMockFileStore.toString(javax.baja.sys.Context) -->
<method name="toString"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.test.file.BMockFileStore.getFileSpace() -->
<method name="getFileSpace"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get the file space containing this file.&#xa; Return null if not mounted.
</description>
<return>
<type class="javax.baja.file.BFileSpace"/>
</return>
</method>

<!-- javax.baja.test.file.BMockFileStore.getFilePath() -->
<method name="getFilePath"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get the file path of this file in its space.  The&#xa; result of BISpaceEntry.getOrdInSpace() should match&#xa; this path query.  Return null if not mounted.
</description>
<return>
<type class="javax.baja.file.FilePath"/>
</return>
</method>

<!-- javax.baja.test.file.BMockFileStore.getFileName() -->
<method name="getFileName"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get the simple file name.  This name should be&#xa; the same as &lt;code&gt;getFilePath().getName()&lt;/code&gt;.
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.test.file.BMockFileStore.getExtension() -->
<method name="getExtension"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get the extension for this file. The extension&#xa; appears after the last &#x27;.&#x27; in the file name.&#xa; Return null if no &#x27;.&#x27; appears in the file name.&#xa; Implementers should use FileUtil.getExtension().
</description>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.test.file.BMockFileStore.isDirectory() -->
<method name="isDirectory"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Return true if this a file that contains other files.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.test.file.BMockFileStore.getSize() -->
<method name="getSize"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get the size of the file in bytes, or&#xa; return -1 if not a data file.
</description>
<return>
<type class="long"/>
</return>
</method>

<!-- javax.baja.test.file.BMockFileStore.getLastModified() -->
<method name="getLastModified"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get the last modification time of this&#xa; file as a BAbsTime instance.  Return&#xa; BAbsTime.NULL if last modified unknown.
</description>
<return>
<type class="javax.baja.sys.BAbsTime"/>
</return>
</method>

<!-- javax.baja.test.file.BMockFileStore.setLastModified(javax.baja.sys.BAbsTime) -->
<method name="setLastModified"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Sets file&#x27;s lastModified absTime to nearest second.
</description>
<tag name="@since">Niagara 4.0</tag>
<parameter name="absTime">
<type class="javax.baja.sys.BAbsTime"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.test.file.BMockFileStore.isReadonly() -->
<method name="isReadonly"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Is the file readonly.
</description>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.test.file.BMockFileStore.getPermissions(javax.baja.file.BIFile, javax.baja.sys.Context) -->
<method name="getPermissions"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get the permissions for the specified file using the user&#xa; from the specified context.  This is a delegation from&#xa; BIFile&#x27;s implementation of BIProtected.getPermissions().
</description>
<parameter name="file">
<type class="javax.baja.file.BIFile"/>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="javax.baja.security.BPermissions"/>
</return>
</method>

<!-- javax.baja.test.file.BMockFileStore.getInputStream() -->
<method name="getInputStream"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Returns an input stream for the file, if one has been set up using&#xa; &lt;code&gt;<see ref="javax.baja.test.file.BMockFileStore#setInputStreamSupplier(java.util.function.Supplier&lt;java.io.InputStream&gt;)">#setInputStreamSupplier(java.util.function.Supplier)</see>&lt;/code&gt;, otherwise throws&#xa; UnsupportedOperationException.
</description>
<return>
<type class="java.io.InputStream"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.test.file.BMockFileStore.read() -->
<method name="read"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="byte" dimension="1"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.test.file.BMockFileStore.getOutputStream() -->
<method name="getOutputStream"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="java.io.OutputStream"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.test.file.BMockFileStore.write(byte[]) -->
<method name="write"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="content">
<type class="byte" dimension="1"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.test.file.BMockFileStore.getCrc() -->
<method name="getCrc"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get the CRC of the contents of this file.
</description>
<tag name="@since">Niagara 4.0</tag>
<return>
<type class="long"/>
<description>
CRC
</description>
</return>
<throws>
<type class="java.io.IOException"/>
<description/>
</throws>
</method>

<!-- javax.baja.test.file.BMockFileStore.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
