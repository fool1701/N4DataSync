<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="test" runtimeProfile="wb" qualifiedName="javax.baja.test.BMockHost" name="BMockHost" packageName="javax.baja.test" public="true">
<description>
BMockHost is a singleton host under which mock sessions and spaces can be mounted
</description>
<tag name="@author">Matt Boon</tag>
<tag name="@since">Niagara 4.0</tag>
<extends>
<type class="javax.baja.naming.BHost"/>
</extends>
<annotation><type class="javax.baja.nre.annotations.NiagaraSingleton"/>
</annotation>
<!-- javax.baja.test.BMockHost.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.test.BMockHost.clearSessions() -->
<method name="clearSessions"  public="true">
<description/>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.test.BMockHost.makeSession(java.lang.String) -->
<method name="makeSession"  public="true">
<description/>
<parameter name="sessionName">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.test.BMockSession"/>
</return>
</method>

<!-- javax.baja.test.BMockHost.removeSession(java.lang.String) -->
<method name="removeSession"  public="true">
<description/>
<parameter name="sessionName">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.test.BMockHost.openSocket(int) -->
<method name="openSocket"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
No IP Support
</description>
<parameter name="port">
<type class="int"/>
</parameter>
<return>
<type class="java.net.Socket"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.test.BMockHost.openSocket(int, javax.net.SocketFactory) -->
<method name="openSocket"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
No IP Support
</description>
<parameter name="port">
<type class="int"/>
</parameter>
<parameter name="socketFactory">
<type class="javax.net.SocketFactory"/>
</parameter>
<return>
<type class="java.net.Socket"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.test.BMockHost.openSocket(int, javax.net.SocketFactory, int) -->
<method name="openSocket"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
No IP Support
</description>
<parameter name="port">
<type class="int"/>
</parameter>
<parameter name="socketFactory">
<type class="javax.net.SocketFactory"/>
</parameter>
<parameter name="timeout">
<type class="int"/>
</parameter>
<return>
<type class="java.net.Socket"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.test.BMockHost.openDatagramSocket(int) -->
<method name="openDatagramSocket"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
No IP Support
</description>
<parameter name="port">
<type class="int"/>
</parameter>
<return>
<type class="java.net.DatagramSocket"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.test.BMockHost.getAbsoluteOrd() -->
<method name="getAbsoluteOrd"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Get host&#x27;s ord.
</description>
<return>
<type class="javax.baja.naming.BOrd"/>
</return>
</method>

<!-- javax.baja.test.BMockHost.INSTANCE -->
<field name="INSTANCE"  public="true" static="true" final="true">
<type class="javax.baja.test.BMockHost"/>
<description/>
</field>

<!-- javax.baja.test.BMockHost.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
