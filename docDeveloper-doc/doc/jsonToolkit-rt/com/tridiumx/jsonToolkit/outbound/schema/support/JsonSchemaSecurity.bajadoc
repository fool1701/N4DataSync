<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="jsonToolkit" runtimeProfile="rt" qualifiedName="com.tridiumx.jsonToolkit.outbound.schema.support.JsonSchemaSecurity" name="JsonSchemaSecurity" packageName="com.tridiumx.jsonToolkit.outbound.schema.support" public="true" final="true">
<description>
Security related logic for applying user permissions to ord targets / child of bound objects etc&#xa;&#xa; The approach to permissions checking is:&#xa;&#xa; Json schema will pass the context onto any ord resolution from bound members / queries&#xa;    If the action to generate json / run queries was run by a user the users context is applied&#xa;      If the user has changed since last time we clear caches throughout the schema to discard any data the new user might not have perms for&#xa;    If not triggered by a user we delegate to the &lt;code&gt;<see ref="com.tridiumx.jsonToolkit.outbound.schema.support.BJsonSchemaService">BJsonSchemaService</see>&lt;/code&gt; runAsUser to populate our context&#xa;      The service is &lt;code&gt;<see ref="javax.baja.security.BIProtected">javax.baja.security.BIProtected</see>&lt;/code&gt; to only live under services and no duplicates&#xa;      The runAsUser slot can not be edited by operators.&#xa;    If this is not defined then we run without a context and so effectively superuser perms.&#xa; We then use the supplied context to check permissions on ord targets / children of ord targets when populating json&#xa; If running with option jsonschema.escalatePermissionsViolation=true then any permissions violations result in json schema failing to generate&#xa; If not running with this option then any illegal targets become empty strings in the output.
</description>
<tag name="@author">Nick Dodd</tag>
<extends>
<type class="java.lang.Object"/>
</extends>
<!-- com.tridiumx.jsonToolkit.outbound.schema.support.JsonSchemaSecurity.&lt;T&gt;permissionsCheck(com.tridiumx.jsonToolkit.outbound.schema.BJsonSchema, T) -->
<method name="permissionsCheck"  public="true" static="true">
<typeParameters>
<typeVariable class="T">
<description>
the type of the target
</description>
</typeVariable>
</typeParameters>
<description>
Check the user has permission for the given target
</description>
<parameter name="schema">
<type class="com.tridiumx.jsonToolkit.outbound.schema.BJsonSchema"/>
<description>
the schema for which the target was resolved
</description>
</parameter>
<parameter name="target">
<typeVariable class="T"/>
<description>
the target object to check permissions against
</description>
</parameter>
<return>
<typeVariable class="T"/>
<description>
the target if the user has permissions, else null
</description>
</return>
</method>

<!-- com.tridiumx.jsonToolkit.outbound.schema.support.JsonSchemaSecurity.userHasReadPermission(javax.baja.sys.BValue, javax.baja.sys.Context) -->
<method name="userHasReadPermission"  public="true" static="true">
<description/>
<parameter name="value">
<type class="javax.baja.sys.BValue"/>
</parameter>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
<description>
the supplied context to check permissions against
</description>
</parameter>
<return>
<type class="boolean"/>
<description>
true if the user has read permissions for the given baja value
</description>
</return>
</method>

<!-- com.tridiumx.jsonToolkit.outbound.schema.support.JsonSchemaSecurity.userHasWritePermission(javax.baja.sys.BValue, javax.baja.sys.Context) -->
<method name="userHasWritePermission"  public="true" static="true">
<description/>
<parameter name="value">
<type class="javax.baja.sys.BValue"/>
</parameter>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
<description>
the supplied context to check permissions against
</description>
</parameter>
<return>
<type class="boolean"/>
<description>
true if the user has write permissions for the given baja value
</description>
</return>
</method>

<!-- com.tridiumx.jsonToolkit.outbound.schema.support.JsonSchemaSecurity.createServiceContext() -->
<method name="createServiceContext"  public="true" static="true">
<description>
Create a context based upon the runAs user in the &lt;code&gt;<see ref="com.tridiumx.jsonToolkit.outbound.schema.support.BJsonSchemaService">BJsonSchemaService</see>&lt;/code&gt;
</description>
<return>
<type class="javax.baja.sys.Context"/>
<description>
a context based upon the runAs user in the &lt;code&gt;<see ref="com.tridiumx.jsonToolkit.outbound.schema.support.BJsonSchemaService">BJsonSchemaService</see>&lt;/code&gt; or null if not defined.
</description>
</return>
</method>

</class>
</bajadoc>
