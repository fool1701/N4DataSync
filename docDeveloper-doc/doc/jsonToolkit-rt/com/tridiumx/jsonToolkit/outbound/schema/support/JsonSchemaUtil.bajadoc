<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="jsonToolkit" runtimeProfile="rt" qualifiedName="com.tridiumx.jsonToolkit.outbound.schema.support.JsonSchemaUtil" name="JsonSchemaUtil" packageName="com.tridiumx.jsonToolkit.outbound.schema.support" public="true" final="true">
<description>
Singleton Utils methods for json schemas including conversion from niagara type to json type.&#xa; &lt;p&gt;&#xa; Class is final due to BIUnlinkable filtering
</description>
<tag name="@author">Nick Dodd / Jason Woollard</tag>
<extends>
<type class="java.lang.Object"/>
</extends>
<!-- com.tridiumx.jsonToolkit.outbound.schema.support.JsonSchemaUtil.toBValue(java.lang.Object) -->
<method name="toBValue"  public="true" static="true">
<description>
Wrap any primitives as a BValue, so they can be passed as an argument for BTypeOverrides
</description>
<parameter name="value">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="javax.baja.sys.BValue"/>
</return>
<throws>
<type class="com.tridiumx.jsonToolkit.outbound.schema.support.UnsupportedConversionTypeException"/>
</throws>
</method>

<!-- com.tridiumx.jsonToolkit.outbound.schema.support.JsonSchemaUtil.toStatusValue(java.lang.Object) -->
<method name="toStatusValue"  public="true" static="true">
<description>
Convert an object into a StatusValue.
</description>
<tag name="@since">Niagara 4.11</tag>
<parameter name="value">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="javax.baja.status.BStatusValue"/>
<description>
a StatusValue to represent the passed value.
</description>
</return>
<throws>
<type class="com.tridiumx.jsonToolkit.outbound.schema.support.UnsupportedConversionTypeException"/>
</throws>
</method>

<!-- com.tridiumx.jsonToolkit.outbound.schema.support.JsonSchemaUtil.jsonToString(java.lang.Object, javax.baja.sys.BString) -->
<method name="jsonToString"  public="true" static="true">
<description>
Checks whether the json object is of a given type and returns the string representation of the JSON.
</description>
<tag name="@since">Niagara 4.13</tag>
<parameter name="json">
<type class="java.lang.Object"/>
<description>
Json object being compared.
</description>
</parameter>
<parameter name="message">
<type class="javax.baja.sys.BString"/>
<description>
displays the exception message
</description>
</parameter>
<return>
<type class="java.lang.String"/>
<description>
true if the json object is of any given type
</description>
</return>
<throws>
<type class="com.tridiumx.jsonToolkit.inbound.routing.RoutingFailedException"/>
</throws>
</method>

<!-- com.tridiumx.jsonToolkit.outbound.schema.support.JsonSchemaUtil.checkExcludedValue(java.lang.Object) -->
<method name="checkExcludedValue"  public="true" static="true">
<description>
Filter BPassword, BCode or Permissions Map etc..
</description>
<parameter name="value">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="com.tridiumx.jsonToolkit.outbound.schema.support.ExcludedJsonTypeException"/>
</throws>
</method>

<!-- com.tridiumx.jsonToolkit.outbound.schema.support.JsonSchemaUtil.excludeFromEgress(java.lang.Object) -->
<method name="excludeFromEgress"  public="true" static="true">
<description/>
<parameter name="resultCandidate">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- com.tridiumx.jsonToolkit.outbound.schema.support.JsonSchemaUtil.toJsonType(java.lang.Object, com.tridiumx.jsonToolkit.outbound.schema.config.folder.BJsonSchemaConfigFolder) -->
<method name="toJsonType"  public="true" static="true">
<description>
For a given input object returns a value appropriate for native json output.&#xa; &lt;p&gt;&#xa; e.g:&#xa; Number&#xa; String&#xa; Boolean&#xa; &lt;p&gt;&#xa; Checks the value against excluded types which are not permitted e.g sensitive data.&#xa; Then converts to a BValue.&#xa; Then a copy of the value is passed through the BTypeOverride instances&#xa; Another exclude type check&#xa; Then the value is finally matched against various types to convert to the&#xa; correct native json type with modifications applied such as decimal precision length.&#xa; &lt;p&gt;&#xa; If no match is found the value is toString()&#x27;ed
</description>
<parameter name="value">
<type class="java.lang.Object"/>
</parameter>
<parameter name="config">
<type class="com.tridiumx.jsonToolkit.outbound.schema.config.folder.BJsonSchemaConfigFolder"/>
</parameter>
<return>
<type class="java.lang.Object"/>
</return>
</method>

<!-- com.tridiumx.jsonToolkit.outbound.schema.support.JsonSchemaUtil.getSlotPath(java.lang.Object) -->
<method name="getSlotPath"  public="true" static="true">
<description/>
<parameter name="obj">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- com.tridiumx.jsonToolkit.outbound.schema.support.JsonSchemaUtil.getSlotPath(javax.baja.sys.BObject) -->
<method name="getSlotPath"  public="true" static="true">
<description/>
<parameter name="object">
<type class="javax.baja.sys.BObject"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- com.tridiumx.jsonToolkit.outbound.schema.support.JsonSchemaUtil.getSlotPath(javax.baja.naming.OrdTarget) -->
<method name="getSlotPath"  public="true" static="true">
<description/>
<parameter name="ordTarget">
<type class="javax.baja.naming.OrdTarget"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- com.tridiumx.jsonToolkit.outbound.schema.support.JsonSchemaUtil.currentBasePath(com.tridiumx.jsonToolkit.outbound.schema.BJsonSchema) -->
<method name="currentBasePath"  public="true" static="true">
<description/>
<parameter name="schema">
<type class="com.tridiumx.jsonToolkit.outbound.schema.BJsonSchema"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- com.tridiumx.jsonToolkit.outbound.schema.support.JsonSchemaUtil.getFacetsForTarget(javax.baja.sys.BObject) -->
<method name="getFacetsForTarget"  public="true" static="true">
<description/>
<parameter name="target">
<type class="javax.baja.sys.BObject"/>
</parameter>
<return>
<type class="javax.baja.sys.BFacets"/>
</return>
</method>

<!-- com.tridiumx.jsonToolkit.outbound.schema.support.JsonSchemaUtil.getPropertyResetValue(javax.baja.sys.Property) -->
<method name="getPropertyResetValue"  public="true" static="true">
<description>
Get the default value to which a slot should be reset.
</description>
<tag name="@since">Niagara 4.11</tag>
<parameter name="property">
<type class="javax.baja.sys.Property"/>
<description>
the property to default.
</description>
</parameter>
<return>
<type class="javax.baja.sys.BValue"/>
<description>
the default value to which the slot should be reset.
</description>
</return>
</method>

<!-- com.tridiumx.jsonToolkit.outbound.schema.support.JsonSchemaUtil.logger -->
<field name="logger"  public="true" static="true" final="true">
<type class="java.util.logging.Logger"/>
<description/>
</field>

</class>
</bajadoc>
