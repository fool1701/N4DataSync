<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="jsonToolkit" runtimeProfile="rt" qualifiedName="com.tridiumx.jsonToolkit.outbound.schema.BJsonSchemaMember" name="BJsonSchemaMember" packageName="com.tridiumx.jsonToolkit.outbound.schema" public="true" abstract="true">
<description/>
<extends>
<type class="javax.baja.sys.BComponent"/>
</extends>
<implements>
<type class="com.tridiumx.jsonToolkit.outbound.schema.BIJsonSchemaMember"/>
</implements>
<action name="handleSchemaEvent" flags="ahA">
<parameter name="parameter">
<type class="com.tridiumx.jsonToolkit.outbound.schema.support.BSchemaEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
<description>
Slot for the &lt;code&gt;handleSchemaEvent&lt;/code&gt; action.
</description>
<tag name="@see">#handleSchemaEvent(BSchemaEvent parameter)</tag>
</action>

<!-- com.tridiumx.jsonToolkit.outbound.schema.BJsonSchemaMember() -->
<constructor name="BJsonSchemaMember" public="true">
<description/>
</constructor>

<!-- com.tridiumx.jsonToolkit.outbound.schema.BJsonSchemaMember.handleSchemaEvent(com.tridiumx.jsonToolkit.outbound.schema.support.BSchemaEvent) -->
<method name="handleSchemaEvent"  public="true">
<description>
Invoke the &lt;code&gt;handleSchemaEvent&lt;/code&gt; action.
</description>
<tag name="@see">#handleSchemaEvent</tag>
<parameter name="parameter">
<type class="com.tridiumx.jsonToolkit.outbound.schema.support.BSchemaEvent"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridiumx.jsonToolkit.outbound.schema.BJsonSchemaMember.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- com.tridiumx.jsonToolkit.outbound.schema.BJsonSchemaMember.started() -->
<method name="started"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridiumx.jsonToolkit.outbound.schema.BJsonSchemaMember.changed(javax.baja.sys.Property, javax.baja.sys.Context) -->
<method name="changed"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="property">
<type class="javax.baja.sys.Property"/>
</parameter>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridiumx.jsonToolkit.outbound.schema.BJsonSchemaMember.added(javax.baja.sys.Property, javax.baja.sys.Context) -->
<method name="added"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="property">
<type class="javax.baja.sys.Property"/>
</parameter>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridiumx.jsonToolkit.outbound.schema.BJsonSchemaMember.isChildLegal(javax.baja.sys.BComponent) -->
<method name="isChildLegal"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Any BIJsonSchemaMember impl can be a child of any other by default - with the exception of the property&#xa; types which cannot have children. Override to introduce specific differences to this rule.
</description>
<parameter name="child">
<type class="javax.baja.sys.BComponent"/>
<description>
the child component
</description>
</parameter>
<return>
<type class="boolean"/>
<description>
is the component is a valid child of this schema member
</description>
</return>
</method>

<!-- com.tridiumx.jsonToolkit.outbound.schema.BJsonSchemaMember.isParentLegal(javax.baja.sys.BComponent) -->
<method name="isParentLegal"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="parent">
<type class="javax.baja.sys.BComponent"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- com.tridiumx.jsonToolkit.outbound.schema.BJsonSchemaMember.getIcon() -->
<method name="getIcon"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.BIcon"/>
</return>
</method>

<!-- com.tridiumx.jsonToolkit.outbound.schema.BJsonSchemaMember.post(javax.baja.sys.Action, javax.baja.sys.BValue, javax.baja.sys.Context) -->
<method name="post"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="action">
<type class="javax.baja.sys.Action"/>
</parameter>
<parameter name="argument">
<type class="javax.baja.sys.BValue"/>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="javax.baja.util.IFuture"/>
</return>
</method>

<!-- com.tridiumx.jsonToolkit.outbound.schema.BJsonSchemaMember.renamed(javax.baja.sys.Property, java.lang.String, javax.baja.sys.Context) -->
<method name="renamed"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="property">
<type class="javax.baja.sys.Property"/>
</parameter>
<parameter name="oldName">
<type class="java.lang.String"/>
</parameter>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridiumx.jsonToolkit.outbound.schema.BJsonSchemaMember.getSchemaPath() -->
<method name="getSchemaPath"  public="true">
<description>
Recursively build the path to this json schema member. Should only be called on running station components&#xa; as it traverses up through parents.
</description>
<return>
<type class="java.lang.String"/>
<description>
the path to this schema member in the form root/parent/...this using component names
</description>
</return>
</method>

<!-- com.tridiumx.jsonToolkit.outbound.schema.BJsonSchemaMember.getSchema() -->
<method name="getSchema"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="com.tridiumx.jsonToolkit.outbound.schema.BJsonSchema"/>
</return>
</method>

<!-- com.tridiumx.jsonToolkit.outbound.schema.BJsonSchemaMember.doHandleSchemaEvent(com.tridiumx.jsonToolkit.outbound.schema.support.BSchemaEvent) -->
<method name="doHandleSchemaEvent"  public="true">
<annotation><type class="java.lang.SuppressWarnings"/>
<elementValue name="value">
<annotationValue kind="array">
<elementArray>
<annotationValue kind="expr">
<expression>&#x22;unused&#x22;</expression>
</annotationValue>
</elementArray>
</annotationValue>
</elementValue>
</annotation>
<description>
Handle an event generated by the parent json schema, or a member above this one in the tree
</description>
<parameter name="event">
<type class="com.tridiumx.jsonToolkit.outbound.schema.support.BSchemaEvent"/>
<description>
the event generated by the parent see: &lt;code&gt;<see ref="com.tridiumx.jsonToolkit.outbound.schema.support.BSchemaEvent">BSchemaEvent</see>&lt;/code&gt;
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridiumx.jsonToolkit.outbound.schema.BJsonSchemaMember.synchronousSchemaEvent(com.tridiumx.jsonToolkit.outbound.schema.support.BSchemaEvent) -->
<method name="synchronousSchemaEvent"  public="true">
<description>
Recursively handle a schema event in all children, but perform synchronously
</description>
<parameter name="event">
<type class="com.tridiumx.jsonToolkit.outbound.schema.support.BSchemaEvent"/>
<description>
the event generated by the parent see: &lt;code&gt;<see ref="com.tridiumx.jsonToolkit.outbound.schema.support.BSchemaEvent">BSchemaEvent</see>&lt;/code&gt;
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridiumx.jsonToolkit.outbound.schema.BJsonSchemaMember.schemaName() -->
<method name="schemaName"  public="true">
<description/>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- com.tridiumx.jsonToolkit.outbound.schema.BJsonSchemaMember.getLastSchemaEventTime() -->
<method name="getLastSchemaEventTime"  public="true">
<description/>
<return>
<type class="java.util.Date"/>
</return>
</method>

<!-- com.tridiumx.jsonToolkit.outbound.schema.BJsonSchemaMember.handleSchemaEvent -->
<field name="handleSchemaEvent"  public="true" static="true" final="true">
<type class="javax.baja.sys.Action"/>
<description>
Slot for the &lt;code&gt;handleSchemaEvent&lt;/code&gt; action.
</description>
<tag name="@see">#handleSchemaEvent(BSchemaEvent parameter)</tag>
</field>

<!-- com.tridiumx.jsonToolkit.outbound.schema.BJsonSchemaMember.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
