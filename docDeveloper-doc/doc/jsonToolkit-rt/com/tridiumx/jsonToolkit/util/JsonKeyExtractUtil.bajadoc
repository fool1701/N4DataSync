<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="jsonToolkit" runtimeProfile="rt" qualifiedName="com.tridiumx.jsonToolkit.util.JsonKeyExtractUtil" name="JsonKeyExtractUtil" packageName="com.tridiumx.jsonToolkit.util" public="true" interface="true" abstract="true" category="interface">
<description>
Utility class for reading keys from Json Input
</description>
<tag name="@author">Jason Woollard</tag>
<!-- com.tridiumx.jsonToolkit.util.JsonKeyExtractUtil.lookupKey(java.lang.String, java.util.logging.Logger, boolean, java.lang.String) -->
<method name="lookupKey"  public="true" default="true">
<description>
Allows the extraction of keys from a json object in msg
</description>
<parameter name="message">
<type class="java.lang.String"/>
<description>
JSON Input
</description>
</parameter>
<parameter name="log">
<type class="java.util.logging.Logger"/>
<description>
logger
</description>
</parameter>
<parameter name="allowEmptyValue">
<type class="boolean"/>
</parameter>
<parameter name="key">
<type class="java.lang.String"/>
<description>
the key to read
</description>
</parameter>
<return>
<type class="java.lang.Object"/>
<description>
array of objects representing the values associated with each key or null if allowMissingValue = true
</description>
</return>
</method>

<!-- com.tridiumx.jsonToolkit.util.JsonKeyExtractUtil.lookupKeys(java.lang.String, java.util.logging.Logger, boolean, java.lang.String...) -->
<method name="lookupKeys"  public="true" isVarargs="true" default="true">
<description>
Allows the extraction of keys from a json object in msg
</description>
<parameter name="message">
<type class="java.lang.String"/>
<description>
JSON Input
</description>
</parameter>
<parameter name="log">
<type class="java.util.logging.Logger"/>
<description>
logger
</description>
</parameter>
<parameter name="allowMissingValue">
<type class="boolean"/>
</parameter>
<parameter name="keys">
<type class="java.lang.String" dimension="1"/>
<description>
the keys to read (vararg)
</description>
</parameter>
<return>
<type class="java.lang.Object" dimension="1"/>
<description>
array of objects representing the values associated with each key or null if allowMissingValue = true
</description>
</return>
</method>

<!-- com.tridiumx.jsonToolkit.util.JsonKeyExtractUtil.lookupKeyValues(java.lang.String, java.util.logging.Logger, java.lang.String...) -->
<method name="lookupKeyValues"  public="true" isVarargs="true" default="true">
<description>
Extract a given set of key value pairs from the top level of a json payload
</description>
<parameter name="message">
<type class="java.lang.String"/>
<description>
JSON Input
</description>
</parameter>
<parameter name="log">
<type class="java.util.logging.Logger"/>
<description>
logger
</description>
</parameter>
<parameter name="keys">
<type class="java.lang.String" dimension="1"/>
<description>
the keys to read (vararg)
</description>
</parameter>
<return>
<parameterizedType class="java.util.Map">
<args>
<type class="java.lang.String"/>
<type class="java.lang.Object"/>
</args>
</parameterizedType>
<description>
array of objects
</description>
</return>
</method>

<!-- com.tridiumx.jsonToolkit.util.JsonKeyExtractUtil.lookupKeyValues(java.lang.String) -->
<method name="lookupKeyValues"  public="true" default="true">
<description>
Extract all the key value pairs from the top level of a json payload
</description>
<parameter name="message">
<type class="java.lang.String"/>
<description>
JSON Input
</description>
</parameter>
<return>
<parameterizedType class="java.util.Map">
<args>
<type class="java.lang.String"/>
<type class="java.lang.Object"/>
</args>
</parameterizedType>
<description>
array of objects
</description>
</return>
</method>

<!-- com.tridiumx.jsonToolkit.util.JsonKeyExtractUtil.hasKey(java.lang.String, java.util.logging.Logger, java.lang.String) -->
<method name="hasKey"  public="true" default="true">
<description>
Indicates if a key is present in the top level of a message
</description>
<parameter name="message">
<type class="java.lang.String"/>
</parameter>
<parameter name="log">
<type class="java.util.logging.Logger"/>
</parameter>
<parameter name="key">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="boolean"/>
<description>
true if they key exists
</description>
</return>
</method>

<!-- com.tridiumx.jsonToolkit.util.JsonKeyExtractUtil.atArrayIndex(java.lang.String, java.util.logging.Logger, int) -->
<method name="atArrayIndex"  public="true" default="true">
<description/>
<parameter name="message">
<type class="java.lang.String"/>
</parameter>
<parameter name="log">
<type class="java.util.logging.Logger"/>
</parameter>
<parameter name="index">
<type class="int"/>
</parameter>
<return>
<type class="java.lang.Object"/>
</return>
</method>

<!-- com.tridiumx.jsonToolkit.util.JsonKeyExtractUtil.indexOfKey(java.lang.String, java.lang.String, java.util.logging.Logger) -->
<method name="indexOfKey"  public="true" default="true">
<description/>
<parameter name="message">
<type class="java.lang.String"/>
</parameter>
<parameter name="key">
<type class="java.lang.String"/>
</parameter>
<parameter name="log">
<type class="java.util.logging.Logger"/>
</parameter>
<return>
<type class="int"/>
</return>
</method>

<!-- com.tridiumx.jsonToolkit.util.JsonKeyExtractUtil.&lt;T&gt;parse(java.lang.String, java.lang.Class&lt;T&gt;) -->
<method name="parse"  public="true" default="true">
<annotation><type class="java.lang.SuppressWarnings"/>
<elementValue name="value">
<annotationValue kind="array">
<elementArray>
<annotationValue kind="expr">
<expression>&#x22;unused&#x22;</expression>
</annotationValue>
</elementArray>
</annotationValue>
</elementValue>
</annotation>
<typeParameters>
<typeVariable class="T">
<description>
type expected to return
</description>
</typeVariable>
</typeParameters>
<description>
Parse a json message into the expected Json type
</description>
<parameter name="message">
<type class="java.lang.String"/>
<description>
json string
</description>
</parameter>
<parameter name="expectedType">
<parameterizedType class="java.lang.Class">
<args>
<typeVariable class="T"/>
</args>
</parameterizedType>
<description>
class of type expected to return. The value can be a Boolean, Double, Integer,&#xa; JSONArray, JSONObject, Long, or String, or the JSONObject.NULL object.
</description>
</parameter>
<return>
<typeVariable class="T"/>
<description>
the json value.
</description>
</return>
</method>

<!-- com.tridiumx.jsonToolkit.util.JsonKeyExtractUtil.sanityCheck(java.lang.String) -->
<method name="sanityCheck"  public="true" default="true">
<description>
Check if we should proceed with looking for a key in this string
</description>
<parameter name="msg">
<type class="java.lang.String"/>
<description>
the json string to be parsed
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridiumx.jsonToolkit.util.JsonKeyExtractUtil.failSanity(java.lang.String, java.lang.String) -->
<method name="failSanity"  public="true" default="true">
<description/>
<parameter name="why">
<type class="java.lang.String"/>
<description>
reasons
</description>
</parameter>
<parameter name="msg">
<type class="java.lang.String"/>
<description>
triggering payload
</description>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- com.tridiumx.jsonToolkit.util.JsonKeyExtractUtil.loggableJson(java.lang.String) -->
<method name="loggableJson"  public="true" default="true">
<description/>
<parameter name="message">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- com.tridiumx.jsonToolkit.util.JsonKeyExtractUtil.WHITESPACE -->
<field name="WHITESPACE"  public="true" static="true" final="true">
<type class="java.util.regex.Pattern"/>
<description/>
</field>

<!-- com.tridiumx.jsonToolkit.util.JsonKeyExtractUtil.log -->
<field name="log"  public="true" static="true" final="true">
<type class="java.util.logging.Logger"/>
<description/>
</field>

</class>
</bajadoc>
