<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="batchJob" runtimeProfile="rt" qualifiedName="javax.baja.batchJob.BJobStage" name="BJobStage" packageName="javax.baja.batchJob" public="true" abstract="true">
<description>
Section of a BBatchJob which has one or more steps.
</description>
<tag name="@author">Matt Boon</tag>
<tag name="@creation">9 Jul 07</tag>
<tag name="@version">$Revision$ $Date$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="javax.baja.sys.BComponent"/>
</extends>
<property name="stageName" flags="r">
<type class="java.lang.String"/>
<description>
Slot for the &lt;code&gt;stageName&lt;/code&gt; property.
</description>
<tag name="@see">#getStageName</tag>
<tag name="@see">#setStageName</tag>
</property>

<property name="stageState" flags="r">
<type class="javax.baja.job.BJobState"/>
<description>
Slot for the &lt;code&gt;stageState&lt;/code&gt; property.&#xa; Stores the current state of this stage&#x27;s lifecycle
</description>
<tag name="@see">#getStageState</tag>
<tag name="@see">#setStageState</tag>
</property>

<!-- javax.baja.batchJob.BJobStage() -->
<constructor name="BJobStage" public="true">
<description/>
</constructor>

<!-- javax.baja.batchJob.BJobStage(java.lang.String) -->
<constructor name="BJobStage" public="true">
<parameter name="stageName">
<type class="java.lang.String"/>
</parameter>
<description/>
</constructor>

<!-- javax.baja.batchJob.BJobStage.getStageName() -->
<method name="getStageName"  public="true">
<description>
Get the &lt;code&gt;stageName&lt;/code&gt; property.
</description>
<tag name="@see">#stageName</tag>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStage.setStageName(java.lang.String) -->
<method name="setStageName"  public="true">
<description>
Set the &lt;code&gt;stageName&lt;/code&gt; property.
</description>
<tag name="@see">#stageName</tag>
<parameter name="v">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStage.getStageState() -->
<method name="getStageState"  public="true">
<description>
Get the &lt;code&gt;stageState&lt;/code&gt; property.&#xa; Stores the current state of this stage&#x27;s lifecycle
</description>
<tag name="@see">#stageState</tag>
<return>
<type class="javax.baja.job.BJobState"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStage.setStageState(javax.baja.job.BJobState) -->
<method name="setStageState"  public="true">
<description>
Set the &lt;code&gt;stageState&lt;/code&gt; property.&#xa; Stores the current state of this stage&#x27;s lifecycle
</description>
<tag name="@see">#stageState</tag>
<parameter name="v">
<type class="javax.baja.job.BJobState"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStage.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStage.getJob() -->
<method name="getJob"  public="true">
<description>
Return this stage&#x27;s job
</description>
<return>
<type class="javax.baja.batchJob.BBatchJob"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStage.doRun(javax.baja.batchJob.BBatchJobService, javax.baja.batchJob.BBatchJob, javax.baja.batchJob.BatchJobOp) -->
<method name="doRun"  public="true" abstract="true">
<description>
Run each of this stage&#x27;s steps one or more times
</description>
<parameter name="service">
<type class="javax.baja.batchJob.BBatchJobService"/>
</parameter>
<parameter name="job">
<type class="javax.baja.batchJob.BBatchJob"/>
</parameter>
<parameter name="op">
<type class="javax.baja.batchJob.BatchJobOp"/>
</parameter>
<return>
<type class="javax.baja.job.BJobState"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStage.getJobStepDetails() -->
<method name="getJobStepDetails"  public="true">
<description>
Return details for all of the step executions
</description>
<return>
<type class="javax.baja.batchJob.BJobStepDetails" dimension="1"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStage.addStep(javax.baja.batchJob.BJobStep) -->
<method name="addStep"  public="true" abstract="true">
<description>
Add a step to this stage at the end
</description>
<parameter name="step">
<type class="javax.baja.batchJob.BJobStep"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStage.removeAllSteps() -->
<method name="removeAllSteps"  public="true" abstract="true">
<description>
Remove all steps from this stage
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStage.getAllSteps() -->
<method name="getAllSteps"  public="true" abstract="true">
<description>
Return all the steps in this stage, in order of execution
</description>
<return>
<type class="javax.baja.batchJob.BJobStep" dimension="1"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStage.prepareStage(javax.baja.sys.BObject) -->
<method name="prepareStage"  public="true">
<description>
Makes any changes necessary to the stage and its steps to run on the&#xa; VM where &#x22;target&#x22; exists.&#xa; &#xa; The client is responsible for invoking prepareJob before sending&#xa; the job to the target host for submitting
</description>
<parameter name="target">
<type class="javax.baja.sys.BObject"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.batchJob.BJobStage.jobComplete(javax.baja.batchJob.BatchJobOp) -->
<method name="jobComplete"  public="true">
<description>
Callback invoked on the stage when the job is complete (all stages have been run)
</description>
<parameter name="op">
<type class="javax.baja.batchJob.BatchJobOp"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStage.doDispose(javax.baja.sys.Context) -->
<method name="doDispose"  public="true">
<description>
Release any resources, such as step details log files, that are associated&#xa; with this stage
</description>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStage.stageName -->
<field name="stageName"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;stageName&lt;/code&gt; property.
</description>
<tag name="@see">#getStageName</tag>
<tag name="@see">#setStageName</tag>
</field>

<!-- javax.baja.batchJob.BJobStage.stageState -->
<field name="stageState"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;stageState&lt;/code&gt; property.&#xa; Stores the current state of this stage&#x27;s lifecycle
</description>
<tag name="@see">#getStageState</tag>
<tag name="@see">#setStageState</tag>
</field>

<!-- javax.baja.batchJob.BJobStage.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

<!-- javax.baja.batchJob.BJobStage.JOB_RUN_DELAY -->
<field name="JOB_RUN_DELAY"  protected="true" final="true">
<type class="long"/>
<description/>
</field>

</class>
</bajadoc>
