<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="batchJob" runtimeProfile="rt" qualifiedName="javax.baja.batchJob.BBatchJobService" name="BBatchJobService" packageName="javax.baja.batchJob" public="true">
<description>
Service that runs batch jobs on a supervisor station.   BBatchJobService differs from BJobService in the&#xa; following ways:&#xa; &lt;ul&gt;&#xa; &lt;li&gt;All jobs run by BBatchJobService extend BBatchJob&lt;/li&gt;&#xa; &lt;li&gt;BBatchJobService requires the &#x22;provisioning&#x22; feature to be licensed, where BJobService can exist in&#xa; any Niagara runtime&lt;li&gt;&#xa; &lt;li&gt;Execution summary information about BBatchService&#x27;s jobs is stored permanently until disposed, where&#xa; BJobService&#x27;s execution summaries become unavailable relatively quickly, and do not survive station restart&lt;/li&gt;&#xa; &lt;li&gt;Alerts can be generated by the alarm service as BBatchService&#x27;s jobs complete&lt;/li&gt;&#xa; &lt;/ul&gt;
</description>
<tag name="@author">Matt Boon</tag>
<tag name="@creation">17 Jun 05</tag>
<tag name="@version">$Revision$ $Date$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="javax.baja.sys.BAbstractService"/>
</extends>
<implements>
<type class="javax.baja.alarm.BIAlarmSource"/>
</implements>
<implements>
<type class="javax.baja.util.BIRestrictedComponent"/>
</implements>
<property name="jobQueue" flags="">
<type class="javax.baja.batchJob.BThreadPoolJobQueue"/>
<description>
Slot for the &lt;code&gt;jobQueue&lt;/code&gt; property.&#xa; constrains execution of all submitted BBatchJobs.  Its&#xa; maxThreads property can be increased to allow more than one&#xa; BBatchJob to run concurrently
</description>
<tag name="@see">#getJobQueue</tag>
<tag name="@see">#setJobQueue</tag>
</property>

<property name="alarmClass" flags="">
<type class="java.lang.String"/>
<description>
Slot for the &lt;code&gt;alarmClass&lt;/code&gt; property.&#xa; alarm class that will be used when a job terminates.   Jobs do not&#xa; accept alarm acknowledgements
</description>
<tag name="@see">#getAlarmClass</tag>
<tag name="@see">#setAlarmClass</tag>
</property>

<property name="summaryManagerType" flags="r">
<type class="javax.baja.util.BTypeSpec"/>
<description>
Slot for the &lt;code&gt;summaryManagerType&lt;/code&gt; property.
</description>
<tag name="@see">#getSummaryManagerType</tag>
<tag name="@see">#setSummaryManagerType</tag>
</property>

<property name="initialSummaryManagerType" flags="rh">
<type class="javax.baja.util.BTypeSpec"/>
<description>
Slot for the &lt;code&gt;initialSummaryManagerType&lt;/code&gt; property.
</description>
<tag name="@see">#getInitialSummaryManagerType</tag>
<tag name="@see">#setInitialSummaryManagerType</tag>
</property>

<property name="maxProvisioningThreads" flags="">
<type class="int"/>
<description>
Slot for the &lt;code&gt;maxProvisioningThreads&lt;/code&gt; property.
</description>
<tag name="@see">#getMaxProvisioningThreads</tag>
<tag name="@see">#setMaxProvisioningThreads</tag>
</property>

<action name="submitJobAction" flags="h">
<parameter name="parameter">
<type class="javax.baja.batchJob.BBatchJob"/>
</parameter>
<return>
<type class="javax.baja.naming.BOrd"/>
</return>
<description>
Slot for the &lt;code&gt;submitJobAction&lt;/code&gt; action.&#xa; for internal use, callers should use submitJob()
</description>
<tag name="@see">#submitJobAction(BBatchJob parameter)</tag>
</action>

<action name="makeTempFilePath" flags="h">
<parameter name="parameter">
<type class="javax.baja.sys.BString"/>
</parameter>
<return>
<type class="javax.baja.sys.BString"/>
</return>
<description>
Slot for the &lt;code&gt;makeTempFilePath&lt;/code&gt; action.&#xa; create a temp file with the given extension and return its&#xa; path
</description>
<tag name="@see">#makeTempFilePath(BString parameter)</tag>
</action>

<action name="disposeJob" flags="h">
<parameter name="parameter">
<type class="javax.baja.sys.BAbsTime"/>
</parameter>
<return>
<type class="void"/>
</return>
<description>
Slot for the &lt;code&gt;disposeJob&lt;/code&gt; action.&#xa; free up all of the resources associated with the job having&#xa; the given start time
</description>
<tag name="@see">#disposeJob(BAbsTime parameter)</tag>
</action>

<action name="ackAlarm" flags="h">
<parameter name="parameter">
<type class="javax.baja.alarm.BAlarmRecord"/>
</parameter>
<return>
<type class="javax.baja.sys.BBoolean"/>
</return>
<description>
Slot for the &lt;code&gt;ackAlarm&lt;/code&gt; action.
</description>
<tag name="@see">#ackAlarm(BAlarmRecord parameter)</tag>
</action>

<action name="purgeDisposedHistory" flags="h">
<return>
<type class="void"/>
</return>
<description>
Slot for the &lt;code&gt;purgeDisposedHistory&lt;/code&gt; action.
</description>
<tag name="@see">#purgeDisposedHistory()</tag>
</action>

<action name="performHousekeeping" flags="h">
<return>
<type class="void"/>
</return>
<description>
Slot for the &lt;code&gt;performHousekeeping&lt;/code&gt; action.
</description>
<tag name="@see">#performHousekeeping()</tag>
</action>

<topic name="jobDisposed" flags="h">
<eventType>
<type class="javax.baja.sys.BAbsTime"/>
</eventType><description>
Slot for the &lt;code&gt;jobDisposed&lt;/code&gt; topic.&#xa; the start time for every disposed BBatchJob is fired&#xa; as a topic
</description>
<tag name="@see">#fireJobDisposed</tag>
</topic>

<!-- javax.baja.batchJob.BBatchJobService() -->
<constructor name="BBatchJobService" public="true">
<description/>
</constructor>

<!-- javax.baja.batchJob.BBatchJobService.getJobQueue() -->
<method name="getJobQueue"  public="true">
<description>
Get the &lt;code&gt;jobQueue&lt;/code&gt; property.&#xa; constrains execution of all submitted BBatchJobs.  Its&#xa; maxThreads property can be increased to allow more than one&#xa; BBatchJob to run concurrently
</description>
<tag name="@see">#jobQueue</tag>
<return>
<type class="javax.baja.batchJob.BThreadPoolJobQueue"/>
</return>
</method>

<!-- javax.baja.batchJob.BBatchJobService.setJobQueue(javax.baja.batchJob.BThreadPoolJobQueue) -->
<method name="setJobQueue"  public="true">
<description>
Set the &lt;code&gt;jobQueue&lt;/code&gt; property.&#xa; constrains execution of all submitted BBatchJobs.  Its&#xa; maxThreads property can be increased to allow more than one&#xa; BBatchJob to run concurrently
</description>
<tag name="@see">#jobQueue</tag>
<parameter name="v">
<type class="javax.baja.batchJob.BThreadPoolJobQueue"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BBatchJobService.getAlarmClass() -->
<method name="getAlarmClass"  public="true">
<description>
Get the &lt;code&gt;alarmClass&lt;/code&gt; property.&#xa; alarm class that will be used when a job terminates.   Jobs do not&#xa; accept alarm acknowledgements
</description>
<tag name="@see">#alarmClass</tag>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.batchJob.BBatchJobService.setAlarmClass(java.lang.String) -->
<method name="setAlarmClass"  public="true">
<description>
Set the &lt;code&gt;alarmClass&lt;/code&gt; property.&#xa; alarm class that will be used when a job terminates.   Jobs do not&#xa; accept alarm acknowledgements
</description>
<tag name="@see">#alarmClass</tag>
<parameter name="v">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BBatchJobService.getSummaryManagerType() -->
<method name="getSummaryManagerType"  public="true">
<description>
Get the &lt;code&gt;summaryManagerType&lt;/code&gt; property.
</description>
<tag name="@see">#summaryManagerType</tag>
<return>
<type class="javax.baja.util.BTypeSpec"/>
</return>
</method>

<!-- javax.baja.batchJob.BBatchJobService.setSummaryManagerType(javax.baja.util.BTypeSpec) -->
<method name="setSummaryManagerType"  public="true">
<description>
Set the &lt;code&gt;summaryManagerType&lt;/code&gt; property.
</description>
<tag name="@see">#summaryManagerType</tag>
<parameter name="v">
<type class="javax.baja.util.BTypeSpec"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BBatchJobService.getInitialSummaryManagerType() -->
<method name="getInitialSummaryManagerType"  public="true">
<description>
Get the &lt;code&gt;initialSummaryManagerType&lt;/code&gt; property.
</description>
<tag name="@see">#initialSummaryManagerType</tag>
<return>
<type class="javax.baja.util.BTypeSpec"/>
</return>
</method>

<!-- javax.baja.batchJob.BBatchJobService.setInitialSummaryManagerType(javax.baja.util.BTypeSpec) -->
<method name="setInitialSummaryManagerType"  public="true">
<description>
Set the &lt;code&gt;initialSummaryManagerType&lt;/code&gt; property.
</description>
<tag name="@see">#initialSummaryManagerType</tag>
<parameter name="v">
<type class="javax.baja.util.BTypeSpec"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BBatchJobService.getMaxProvisioningThreads() -->
<method name="getMaxProvisioningThreads"  public="true">
<description>
Get the &lt;code&gt;maxProvisioningThreads&lt;/code&gt; property.
</description>
<tag name="@see">#maxProvisioningThreads</tag>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.batchJob.BBatchJobService.setMaxProvisioningThreads(int) -->
<method name="setMaxProvisioningThreads"  public="true">
<description>
Set the &lt;code&gt;maxProvisioningThreads&lt;/code&gt; property.
</description>
<tag name="@see">#maxProvisioningThreads</tag>
<parameter name="v">
<type class="int"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BBatchJobService.submitJobAction(javax.baja.batchJob.BBatchJob) -->
<method name="submitJobAction"  public="true">
<description>
Invoke the &lt;code&gt;submitJobAction&lt;/code&gt; action.&#xa; for internal use, callers should use submitJob()
</description>
<tag name="@see">#submitJobAction</tag>
<parameter name="parameter">
<type class="javax.baja.batchJob.BBatchJob"/>
</parameter>
<return>
<type class="javax.baja.naming.BOrd"/>
</return>
</method>

<!-- javax.baja.batchJob.BBatchJobService.makeTempFilePath(javax.baja.sys.BString) -->
<method name="makeTempFilePath"  public="true">
<description>
Invoke the &lt;code&gt;makeTempFilePath&lt;/code&gt; action.&#xa; create a temp file with the given extension and return its&#xa; path
</description>
<tag name="@see">#makeTempFilePath</tag>
<parameter name="parameter">
<type class="javax.baja.sys.BString"/>
</parameter>
<return>
<type class="javax.baja.sys.BString"/>
</return>
</method>

<!-- javax.baja.batchJob.BBatchJobService.disposeJob(javax.baja.sys.BAbsTime) -->
<method name="disposeJob"  public="true">
<description>
Invoke the &lt;code&gt;disposeJob&lt;/code&gt; action.&#xa; free up all of the resources associated with the job having&#xa; the given start time
</description>
<tag name="@see">#disposeJob</tag>
<parameter name="parameter">
<type class="javax.baja.sys.BAbsTime"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BBatchJobService.ackAlarm(javax.baja.alarm.BAlarmRecord) -->
<method name="ackAlarm"  public="true">
<description>
Invoke the &lt;code&gt;ackAlarm&lt;/code&gt; action.
</description>
<tag name="@see">#ackAlarm</tag>
<parameter name="parameter">
<type class="javax.baja.alarm.BAlarmRecord"/>
</parameter>
<return>
<type class="javax.baja.sys.BBoolean"/>
</return>
</method>

<!-- javax.baja.batchJob.BBatchJobService.purgeDisposedHistory() -->
<method name="purgeDisposedHistory"  public="true">
<description>
Invoke the &lt;code&gt;purgeDisposedHistory&lt;/code&gt; action.
</description>
<tag name="@see">#purgeDisposedHistory</tag>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BBatchJobService.performHousekeeping() -->
<method name="performHousekeeping"  public="true">
<description>
Invoke the &lt;code&gt;performHousekeeping&lt;/code&gt; action.
</description>
<tag name="@see">#performHousekeeping</tag>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BBatchJobService.fireJobDisposed(javax.baja.sys.BAbsTime) -->
<method name="fireJobDisposed"  public="true">
<description>
Fire an event for the &lt;code&gt;jobDisposed&lt;/code&gt; topic.&#xa; the start time for every disposed BBatchJob is fired&#xa; as a topic
</description>
<tag name="@see">#jobDisposed</tag>
<parameter name="event">
<type class="javax.baja.sys.BAbsTime"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BBatchJobService.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.batchJob.BBatchJobService.makeTempFile(java.lang.String) -->
<method name="makeTempFile"  public="true">
<description/>
<parameter name="extension">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.file.BIFile"/>
</return>
</method>

<!-- javax.baja.batchJob.BBatchJobService.started() -->
<method name="started"  public="true">
<description/>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.batchJob.BBatchJobService.stopped() -->
<method name="stopped"  public="true">
<description/>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BBatchJobService.changed(javax.baja.sys.Property, javax.baja.sys.Context) -->
<method name="changed"  public="true">
<description/>
<parameter name="property">
<type class="javax.baja.sys.Property"/>
</parameter>
<parameter name="context">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BBatchJobService.getServiceTypes() -->
<method name="getServiceTypes"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type" dimension="1"/>
</return>
</method>

<!-- javax.baja.batchJob.BBatchJobService.serviceStarted() -->
<method name="serviceStarted"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BBatchJobService.completesStarted() -->
<method name="completesStarted"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.batchJob.BBatchJobService.whenServiceStarted() -->
<method name="whenServiceStarted"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<parameterizedType class="java.util.concurrent.CompletableFuture">
<args>
<type class="java.lang.Void"/>
</args>
</parameterizedType>
</return>
</method>

<!-- javax.baja.batchJob.BBatchJobService.serviceStopped() -->
<method name="serviceStopped"  public="true">
<description/>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BBatchJobService.doPurgeDisposedHistory(javax.baja.sys.Context) -->
<method name="doPurgeDisposedHistory"  public="true">
<description/>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.batchJob.BBatchJobService.doPerformHousekeeping(javax.baja.sys.Context) -->
<method name="doPerformHousekeeping"  public="true">
<description/>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.batchJob.BBatchJobService.checkParentForRestrictedComponent(javax.baja.sys.BComponent, javax.baja.sys.Context) -->
<method name="checkParentForRestrictedComponent"  public="true" final="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Only one allowed to live under the station&#x27;s BServiceContainer.
</description>
<parameter name="parent">
<type class="javax.baja.sys.BComponent"/>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BBatchJobService.submitJob(javax.baja.batchJob.BBatchJob, javax.baja.sys.Context) -->
<method name="submitJob"  public="true">
<description>
Client method which prepares a job for execution, then&#xa; submits it to the remote host&#x27;s job service
</description>
<parameter name="localJobCopy">
<type class="javax.baja.batchJob.BBatchJob"/>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="javax.baja.batchJob.BBatchJob"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.batchJob.BBatchJobService.doSubmitJobAction(javax.baja.batchJob.BBatchJob, javax.baja.sys.Context) -->
<method name="doSubmitJobAction"  public="true">
<description>
Server: submitJob
</description>
<parameter name="job">
<type class="javax.baja.batchJob.BBatchJob"/>
</parameter>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="javax.baja.naming.BOrd"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.batchJob.BBatchJobService.doDisposeJob(javax.baja.sys.BAbsTime) -->
<method name="doDisposeJob"  public="true">
<description>
Dispose of the BBatchJob that has the given startTime
</description>
<parameter name="jobStartTime">
<type class="javax.baja.sys.BAbsTime"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.batchJob.BBatchJobService.notifyDisposed(javax.baja.batchJob.BBatchJob) -->
<method name="notifyDisposed"  public="true">
<description>
BBatchJob.doDispose will use this callback in its&#xa; invocation
</description>
<parameter name="job">
<type class="javax.baja.batchJob.BBatchJob"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BBatchJobService.doMakeTempFilePath(javax.baja.sys.BString) -->
<method name="doMakeTempFilePath"  public="true" synchronized="true">
<description>
Creates a temp file and returns its path
</description>
<parameter name="extension">
<type class="javax.baja.sys.BString"/>
</parameter>
<return>
<type class="javax.baja.sys.BString"/>
</return>
</method>

<!-- javax.baja.batchJob.BBatchJobService.getQueryManager(javax.baja.batchJob.BIBatchJobSummary) -->
<method name="getQueryManager"  public="true" static="true">
<description>
Returns an instance of BIJobQueryManager that&#x27;s appropriate for the given summary object.
</description>
<parameter name="summary">
<type class="javax.baja.batchJob.BIBatchJobSummary"/>
</parameter>
<return>
<type class="javax.baja.batchJob.BIJobQueryManager"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.batchJob.BBatchJobService.getQueryManager(javax.baja.batchJob.BIJobStepSummary) -->
<method name="getQueryManager"  public="true" static="true">
<description>
Returns an instance of BIJobQueryManager that&#x27;s appropriate for the given summary object.
</description>
<parameter name="summary">
<type class="javax.baja.batchJob.BIJobStepSummary"/>
</parameter>
<return>
<type class="javax.baja.batchJob.BIJobQueryManager"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.batchJob.BBatchJobService.getJobSummaryManager() -->
<method name="getJobSummaryManager"  public="true">
<description/>
<return>
<type class="javax.baja.batchJob.BIJobSummaryManager"/>
</return>
</method>

<!-- javax.baja.batchJob.BBatchJobService.getJobQueryManager() -->
<method name="getJobQueryManager"  public="true">
<description/>
<return>
<type class="javax.baja.batchJob.BIJobQueryManager"/>
</return>
</method>

<!-- javax.baja.batchJob.BBatchJobService.newAlert(java.lang.String, javax.baja.naming.BOrd) -->
<method name="newAlert"  public="true">
<description/>
<parameter name="messageText">
<type class="java.lang.String"/>
</parameter>
<parameter name="hyperlinkOrd">
<type class="javax.baja.naming.BOrd"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BBatchJobService.doAckAlarm(javax.baja.alarm.BAlarmRecord) -->
<method name="doAckAlarm"  public="true">
<description/>
<parameter name="ack">
<type class="javax.baja.alarm.BAlarmRecord"/>
</parameter>
<return>
<type class="javax.baja.sys.BBoolean"/>
</return>
</method>

<!-- javax.baja.batchJob.BBatchJobService.getExecutor() -->
<method name="getExecutor"  public="true">
<description>
Get the default search executor.
</description>
<return>
<type class="java.util.concurrent.Executor"/>
</return>
</method>

<!-- javax.baja.batchJob.BBatchJobService.getIcon() -->
<method name="getIcon"  public="true">
<description/>
<return>
<type class="javax.baja.sys.BIcon"/>
</return>
</method>

<!-- javax.baja.batchJob.BBatchJobService.jobQueue -->
<field name="jobQueue"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;jobQueue&lt;/code&gt; property.&#xa; constrains execution of all submitted BBatchJobs.  Its&#xa; maxThreads property can be increased to allow more than one&#xa; BBatchJob to run concurrently
</description>
<tag name="@see">#getJobQueue</tag>
<tag name="@see">#setJobQueue</tag>
</field>

<!-- javax.baja.batchJob.BBatchJobService.alarmClass -->
<field name="alarmClass"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;alarmClass&lt;/code&gt; property.&#xa; alarm class that will be used when a job terminates.   Jobs do not&#xa; accept alarm acknowledgements
</description>
<tag name="@see">#getAlarmClass</tag>
<tag name="@see">#setAlarmClass</tag>
</field>

<!-- javax.baja.batchJob.BBatchJobService.summaryManagerType -->
<field name="summaryManagerType"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;summaryManagerType&lt;/code&gt; property.
</description>
<tag name="@see">#getSummaryManagerType</tag>
<tag name="@see">#setSummaryManagerType</tag>
</field>

<!-- javax.baja.batchJob.BBatchJobService.initialSummaryManagerType -->
<field name="initialSummaryManagerType"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;initialSummaryManagerType&lt;/code&gt; property.
</description>
<tag name="@see">#getInitialSummaryManagerType</tag>
<tag name="@see">#setInitialSummaryManagerType</tag>
</field>

<!-- javax.baja.batchJob.BBatchJobService.maxProvisioningThreads -->
<field name="maxProvisioningThreads"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;maxProvisioningThreads&lt;/code&gt; property.
</description>
<tag name="@see">#getMaxProvisioningThreads</tag>
<tag name="@see">#setMaxProvisioningThreads</tag>
</field>

<!-- javax.baja.batchJob.BBatchJobService.submitJobAction -->
<field name="submitJobAction"  public="true" static="true" final="true">
<type class="javax.baja.sys.Action"/>
<description>
Slot for the &lt;code&gt;submitJobAction&lt;/code&gt; action.&#xa; for internal use, callers should use submitJob()
</description>
<tag name="@see">#submitJobAction(BBatchJob parameter)</tag>
</field>

<!-- javax.baja.batchJob.BBatchJobService.makeTempFilePath -->
<field name="makeTempFilePath"  public="true" static="true" final="true">
<type class="javax.baja.sys.Action"/>
<description>
Slot for the &lt;code&gt;makeTempFilePath&lt;/code&gt; action.&#xa; create a temp file with the given extension and return its&#xa; path
</description>
<tag name="@see">#makeTempFilePath(BString parameter)</tag>
</field>

<!-- javax.baja.batchJob.BBatchJobService.disposeJob -->
<field name="disposeJob"  public="true" static="true" final="true">
<type class="javax.baja.sys.Action"/>
<description>
Slot for the &lt;code&gt;disposeJob&lt;/code&gt; action.&#xa; free up all of the resources associated with the job having&#xa; the given start time
</description>
<tag name="@see">#disposeJob(BAbsTime parameter)</tag>
</field>

<!-- javax.baja.batchJob.BBatchJobService.ackAlarm -->
<field name="ackAlarm"  public="true" static="true" final="true">
<type class="javax.baja.sys.Action"/>
<description>
Slot for the &lt;code&gt;ackAlarm&lt;/code&gt; action.
</description>
<tag name="@see">#ackAlarm(BAlarmRecord parameter)</tag>
</field>

<!-- javax.baja.batchJob.BBatchJobService.purgeDisposedHistory -->
<field name="purgeDisposedHistory"  public="true" static="true" final="true">
<type class="javax.baja.sys.Action"/>
<description>
Slot for the &lt;code&gt;purgeDisposedHistory&lt;/code&gt; action.
</description>
<tag name="@see">#purgeDisposedHistory()</tag>
</field>

<!-- javax.baja.batchJob.BBatchJobService.performHousekeeping -->
<field name="performHousekeeping"  public="true" static="true" final="true">
<type class="javax.baja.sys.Action"/>
<description>
Slot for the &lt;code&gt;performHousekeeping&lt;/code&gt; action.
</description>
<tag name="@see">#performHousekeeping()</tag>
</field>

<!-- javax.baja.batchJob.BBatchJobService.jobDisposed -->
<field name="jobDisposed"  public="true" static="true" final="true">
<type class="javax.baja.sys.Topic"/>
<description>
Slot for the &lt;code&gt;jobDisposed&lt;/code&gt; topic.&#xa; the start time for every disposed BBatchJob is fired&#xa; as a topic
</description>
<tag name="@see">#fireJobDisposed</tag>
</field>

<!-- javax.baja.batchJob.BBatchJobService.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

<!-- javax.baja.batchJob.BBatchJobService.logger -->
<field name="logger"  public="true" static="true" final="true">
<type class="java.util.logging.Logger"/>
<description/>
</field>

</class>
</bajadoc>
