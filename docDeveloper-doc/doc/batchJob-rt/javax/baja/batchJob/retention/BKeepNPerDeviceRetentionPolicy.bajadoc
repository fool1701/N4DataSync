<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="batchJob" runtimeProfile="rt" qualifiedName="javax.baja.batchJob.retention.BKeepNPerDeviceRetentionPolicy" name="BKeepNPerDeviceRetentionPolicy" packageName="javax.baja.batchJob.retention" public="true" final="true">
<description>
Retention policy which applies a successful and unsuccessful retention limit&#xa; against devices in DeviceNetworkJobs
</description>
<tag name="@author">Matt Boon</tag>
<tag name="@since">Niagara 4.0</tag>
<extends>
<type class="javax.baja.retention.BRetentionPolicy"/>
</extends>
<implements>
<type class="javax.baja.retention.BIDomainRetentionPolicy"/>
</implements>
<annotation><type class="javax.baja.nre.annotations.NoSlotomatic"/>
</annotation>
<!-- javax.baja.batchJob.retention.BKeepNPerDeviceRetentionPolicy() -->
<constructor name="BKeepNPerDeviceRetentionPolicy" public="true">
<description/>
</constructor>

<!-- javax.baja.batchJob.retention.BKeepNPerDeviceRetentionPolicy(int, int) -->
<constructor name="BKeepNPerDeviceRetentionPolicy" public="true">
<parameter name="successfulRetentionLimit">
<type class="int"/>
</parameter>
<parameter name="unsuccessfulRetentionLimit">
<type class="int"/>
</parameter>
<description/>
</constructor>

<!-- javax.baja.batchJob.retention.BKeepNPerDeviceRetentionPolicy.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.batchJob.retention.BKeepNPerDeviceRetentionPolicy.getSuccessfulRetentionLimit() -->
<method name="getSuccessfulRetentionLimit"  public="true">
<description/>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.batchJob.retention.BKeepNPerDeviceRetentionPolicy.getUnsuccessfulRetentionLimit() -->
<method name="getUnsuccessfulRetentionLimit"  public="true">
<description/>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.batchJob.retention.BKeepNPerDeviceRetentionPolicy.getApplicableDomainTypes() -->
<method name="getApplicableDomainTypes"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Domain types which can use this policy, used as a hint for smart editors
</description>
<return>
<type class="javax.baja.sys.Type" dimension="1"/>
</return>
</method>

<!-- javax.baja.batchJob.retention.BKeepNPerDeviceRetentionPolicy.executePolicy(javax.baja.retention.BIRetentionPolicyDomain) -->
<method name="executePolicy"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Apply the policy to a domain
</description>
<parameter name="domain">
<type class="javax.baja.retention.BIRetentionPolicyDomain"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.retention.BKeepNPerDeviceRetentionPolicy.getApplicableRetainableTypes() -->
<method name="getApplicableRetainableTypes"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Retainable types which can use this policy, used as a hint for smart editors.
</description>
<return>
<type class="javax.baja.sys.Type" dimension="1"/>
</return>
</method>

<!-- javax.baja.batchJob.retention.BKeepNPerDeviceRetentionPolicy.equals(java.lang.Object) -->
<method name="equals"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
All simples must support an equality check&#xa; that is true only if the specified obj is of the&#xa; exact same class and the simple&#x27;s contents&#xa; are equal.
</description>
<parameter name="obj">
<type class="java.lang.Object"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.batchJob.retention.BKeepNPerDeviceRetentionPolicy.hashCode() -->
<method name="hashCode"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="int"/>
</return>
</method>

<!-- javax.baja.batchJob.retention.BKeepNPerDeviceRetentionPolicy.encode(java.io.DataOutput) -->
<method name="encode"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Encode the simple type using a binary format&#xa; that can be translated using decode.
</description>
<parameter name="encoder">
<type class="java.io.DataOutput"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.batchJob.retention.BKeepNPerDeviceRetentionPolicy.decode(java.io.DataInput) -->
<method name="decode"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Decode the simple using the same binary format&#xa; that was written using encode, and return the new&#xa; instance.  Under no circumstances should this&#xa; instance be modified.
</description>
<parameter name="decoder">
<type class="java.io.DataInput"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.batchJob.retention.BKeepNPerDeviceRetentionPolicy.encodeToString() -->
<method name="encodeToString"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Encode the simple using a String format&#xa; that can be translated using decodeFromString.
</description>
<return>
<type class="java.lang.String"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.batchJob.retention.BKeepNPerDeviceRetentionPolicy.decodeFromString(java.lang.String) -->
<method name="decodeFromString"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description>
Decode the simple using the same String format&#xa; that was written using encodeToString, and return&#xa; the new instance.  Under no circumstances should&#xa; this instance be modified.
</description>
<parameter name="s">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="javax.baja.sys.BObject"/>
</return>
<throws>
<type class="java.io.IOException"/>
</throws>
</method>

<!-- javax.baja.batchJob.retention.BKeepNPerDeviceRetentionPolicy.toString(javax.baja.sys.Context) -->
<method name="toString"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.batchJob.retention.BKeepNPerDeviceRetentionPolicy.DEFAULT -->
<field name="DEFAULT"  public="true" static="true" final="true">
<type class="javax.baja.batchJob.retention.BKeepNPerDeviceRetentionPolicy"/>
<description/>
</field>

<!-- javax.baja.batchJob.retention.BKeepNPerDeviceRetentionPolicy.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

<!-- javax.baja.batchJob.retention.BKeepNPerDeviceRetentionPolicy.DESCENDING_START_TIME -->
<field name="DESCENDING_START_TIME"  public="true" static="true" final="true">
<parameterizedType class="java.util.Comparator">
<args>
<wildcardType class="?">
<bounds kind="super">
<type class="javax.baja.batchJob.driver.BDeviceNetworkJob"/>
</bounds>
</wildcardType>
</args>
</parameterizedType>
<description/>
</field>

</class>
</bajadoc>
