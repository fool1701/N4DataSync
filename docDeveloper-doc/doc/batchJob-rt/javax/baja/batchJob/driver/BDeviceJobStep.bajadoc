<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="batchJob" runtimeProfile="rt" qualifiedName="javax.baja.batchJob.driver.BDeviceJobStep" name="BDeviceJobStep" packageName="javax.baja.batchJob.driver" public="true" abstract="true">
<description>
Base class for a job step that is to be run for each device&#xa; in a BForEachDeviceStage&#xa; &#xa; The step creates a BDeviceStepDetails for each device it &#xa; processes during stage execution.
</description>
<tag name="@author">Matt Boon</tag>
<tag name="@creation">20 Feb 06</tag>
<tag name="@version">$Revision$ $Date$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="javax.baja.batchJob.BJobStep"/>
</extends>
<!-- javax.baja.batchJob.driver.BDeviceJobStep() -->
<constructor name="BDeviceJobStep" public="true">
<description/>
</constructor>

<!-- javax.baja.batchJob.driver.BDeviceJobStep.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.batchJob.driver.BDeviceJobStep.prepareStep(javax.baja.sys.BObject) -->
<method name="prepareStep"  public="true">
<description>
Callback used to take any steps necessary to prepare the step&#xa; to run, if it is to be submitted on a different host than the one&#xa; where it was created.  For instance, if the step uses a file that&#xa; exists in a workbench client&#x27;s host, the file is copied to the&#xa; remote host where the job will be summitted, and the reference to&#xa; the file changed accordingly.
</description>
<parameter name="target">
<type class="javax.baja.sys.BObject"/>
<description>
object in the session where the job will be submitted
</description>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.batchJob.driver.BDeviceJobStep.makeDetails(javax.baja.driver.BDevice) -->
<method name="makeDetails"  protected="true">
<description>
Create a BDeviceStepDetails for the given device
</description>
<parameter name="device">
<type class="javax.baja.driver.BDevice"/>
</parameter>
<return>
<type class="javax.baja.batchJob.driver.BDeviceStepDetails"/>
</return>
</method>

<!-- javax.baja.batchJob.driver.BDeviceJobStep.getJobStepDetails() -->
<method name="getJobStepDetails"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.batchJob.BJobStepDetails" dimension="1"/>
</return>
</method>

<!-- javax.baja.batchJob.driver.BDeviceJobStep.run(javax.baja.batchJob.BBatchJobService, javax.baja.driver.BDevice, javax.baja.batchJob.driver.DeviceNetworkJobOp) -->
<method name="run"  public="true" final="true">
<description>
Invoked by the BForEachDeviceStage to run this step for a given&#xa; device
</description>
<parameter name="svc">
<type class="javax.baja.batchJob.BBatchJobService"/>
<description>
this VM&#x27;s batch service instance
</description>
</parameter>
<parameter name="device">
<type class="javax.baja.driver.BDevice"/>
<description>
device to run with
</description>
</parameter>
<parameter name="op">
<type class="javax.baja.batchJob.driver.DeviceNetworkJobOp"/>
<description>
execution context
</description>
</parameter>
<return>
<type class="javax.baja.batchJob.driver.BDeviceStepDetails"/>
</return>
</method>

<!-- javax.baja.batchJob.driver.BDeviceJobStep.doInit(javax.baja.batchJob.BBatchJobService, javax.baja.batchJob.driver.DeviceNetworkJobOp) -->
<method name="doInit"  protected="true">
<annotation><type class="java.lang.SuppressWarnings"/>
<elementValue name="value">
<annotationValue kind="array">
<elementArray>
<annotationValue kind="expr">
<expression>&#x22;UnusedParameters&#x22;</expression>
</annotationValue>
</elementArray>
</annotationValue>
</elementValue>
</annotation>
<description/>
<parameter name="svc">
<type class="javax.baja.batchJob.BBatchJobService"/>
</parameter>
<parameter name="op">
<type class="javax.baja.batchJob.driver.DeviceNetworkJobOp"/>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.batchJob.driver.BDeviceJobStep.doRun(javax.baja.batchJob.BBatchJobService, javax.baja.batchJob.driver.BDeviceStepDetails, javax.baja.driver.BDevice, javax.baja.batchJob.driver.DeviceNetworkJobOp) -->
<method name="doRun"  protected="true" abstract="true">
<description>
Executes the step for a single device.   This method will be&#xa; invoked once for each device in the job for which no prior&#xa; steps failed.
</description>
<parameter name="svc">
<type class="javax.baja.batchJob.BBatchJobService"/>
<description>
this VM&#x27;s batch service instance
</description>
</parameter>
<parameter name="details">
<type class="javax.baja.batchJob.driver.BDeviceStepDetails"/>
<description>
details of this step&#x27;s execution for the device
</description>
</parameter>
<parameter name="device">
<type class="javax.baja.driver.BDevice"/>
<description>
device to run with
</description>
</parameter>
<parameter name="op">
<type class="javax.baja.batchJob.driver.DeviceNetworkJobOp"/>
<description>
execution context
</description>
</parameter>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.batchJob.driver.BDeviceJobStep.canCombine(javax.baja.batchJob.driver.BDeviceJobStep) -->
<method name="canCombine"  public="true">
<description>
Return true if the given step can be combined with this one
</description>
<parameter name="step">
<type class="javax.baja.batchJob.driver.BDeviceJobStep"/>
</parameter>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.batchJob.driver.BDeviceJobStep.combine(javax.baja.batchJob.driver.BDeviceJobStep) -->
<method name="combine"  public="true">
<description>
Combine the given step with this one.  Once combined,&#xa; this step will do the work of both steps.
</description>
<parameter name="step">
<type class="javax.baja.batchJob.driver.BDeviceJobStep"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.driver.BDeviceJobStep.isCanceled() -->
<method name="isCanceled"  public="true">
<description/>
<return>
<type class="boolean"/>
</return>
</method>

<!-- javax.baja.batchJob.driver.BDeviceJobStep.deviceJobStepComplete(javax.baja.batchJob.driver.BDeviceStepDetails, javax.baja.batchJob.driver.DeviceNetworkJobOp) -->
<method name="deviceJobStepComplete"  public="true">
<description>
Callback invoked each time when the step has been completed.
</description>
<parameter name="details">
<type class="javax.baja.batchJob.driver.BDeviceStepDetails"/>
</parameter>
<parameter name="op">
<type class="javax.baja.batchJob.driver.DeviceNetworkJobOp"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.driver.BDeviceJobStep.deviceNetworkJobComplete(javax.baja.batchJob.driver.DeviceNetworkJobOp) -->
<method name="deviceNetworkJobComplete"  public="true">
<description>
Callback invoked when the job is complete.
</description>
<parameter name="op">
<type class="javax.baja.batchJob.driver.DeviceNetworkJobOp"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.driver.BDeviceJobStep.getJob() -->
<method name="getJob"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.batchJob.BBatchJob"/>
</return>
</method>

<!-- javax.baja.batchJob.driver.BDeviceJobStep.getStage() -->
<method name="getStage"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.batchJob.BJobStage"/>
</return>
</method>

<!-- javax.baja.batchJob.driver.BDeviceJobStep.getForEachDeviceStage() -->
<method name="getForEachDeviceStage"  public="true">
<description/>
<return>
<type class="javax.baja.batchJob.driver.BForEachDeviceStage"/>
</return>
</method>

<!-- javax.baja.batchJob.driver.BDeviceJobStep.checkCanceled(javax.baja.driver.BDevice) -->
<method name="checkCanceled"  protected="true">
<description>
Throw a JobCancelException if the job&#x27;s state is canceling&#xa; or canceled.
</description>
<parameter name="device">
<type class="javax.baja.driver.BDevice"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.driver.BDeviceJobStep.getParallelExecutionConflicts(javax.baja.batchJob.BBatchJobService, javax.baja.driver.BDevice, java.util.Set&lt;javax.baja.driver.BDevice&gt;, javax.baja.batchJob.driver.DeviceNetworkJobOp) -->
<method name="getParallelExecutionConflicts"  public="true">
<description>
This method is called before this step is executed / run on the given device to&#xa; determine if there are any parallel execution conflicts.&#xa; It returns any devices that must be prevented from executing any other steps&#xa; while this step executes on the given device. Using this information, the batch job&#xa; task scheduler will arrange the execution of steps on devices so that these&#xa; conflicts are avoided.&#xa;&#xa; Unless otherwise overridden, this method returns&#xa; of all of the devices, preventing this step from executing in parallel with&#xa; any other devices and steps.
</description>
<tag name="@since">Niagara 4.7</tag>
<parameter name="svc">
<type class="javax.baja.batchJob.BBatchJobService"/>
<description/>
</parameter>
<parameter name="device">
<type class="javax.baja.driver.BDevice"/>
<description>
the device to check for conflicts with other devices
</description>
</parameter>
<parameter name="allDevices">
<parameterizedType class="java.util.Set">
<args>
<type class="javax.baja.driver.BDevice"/>
</args>
</parameterizedType>
<description>
all of the devices that are (or will) be executing steps in parallel
</description>
</parameter>
<parameter name="op">
<type class="javax.baja.batchJob.driver.DeviceNetworkJobOp"/>
<description/>
</parameter>
<return>
<parameterizedType class="java.util.Set">
<args>
<type class="javax.baja.driver.BDevice"/>
</args>
</parameterizedType>
<description>
the list of devices that could conflict when this step is executed on the given device
</description>
</return>
</method>

<!-- javax.baja.batchJob.driver.BDeviceJobStep.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

</class>
</bajadoc>
