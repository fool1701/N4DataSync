<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="batchJob" runtimeProfile="rt" qualifiedName="javax.baja.batchJob.BJobStepDetails" name="BJobStepDetails" packageName="javax.baja.batchJob" public="true" abstract="true">
<description>
Implementing classes provide a record of a single BJobStep execution
</description>
<tag name="@author">Matt Boon</tag>
<tag name="@creation">9 Jul 07</tag>
<tag name="@version">$Revision$ $Date$</tag>
<tag name="@since">Baja 1.0</tag>
<extends>
<type class="javax.baja.sys.BComponent"/>
</extends>
<property name="stageName" flags="r">
<type class="java.lang.String"/>
<description>
Slot for the &lt;code&gt;stageName&lt;/code&gt; property.
</description>
<tag name="@see">#getStageName</tag>
<tag name="@see">#setStageName</tag>
</property>

<property name="stepType" flags="r">
<type class="javax.baja.util.BTypeSpec"/>
<description>
Slot for the &lt;code&gt;stepType&lt;/code&gt; property.
</description>
<tag name="@see">#getStepType</tag>
<tag name="@see">#setStepType</tag>
</property>

<property name="stepDescription" flags="r">
<type class="java.lang.String"/>
<description>
Slot for the &lt;code&gt;stepDescription&lt;/code&gt; property.
</description>
<tag name="@see">#getStepDescription</tag>
<tag name="@see">#setStepDescription</tag>
</property>

<property name="state" flags="r">
<type class="javax.baja.job.BJobState"/>
<description>
Slot for the &lt;code&gt;state&lt;/code&gt; property.&#xa; Stores the current state of the step&#x27;s lifecycle&#xa; for the device
</description>
<tag name="@see">#getState</tag>
<tag name="@see">#setState</tag>
</property>

<property name="startTime" flags="r">
<type class="javax.baja.sys.BAbsTime"/>
<description>
Slot for the &lt;code&gt;startTime&lt;/code&gt; property.&#xa; Time when step started exection.
</description>
<tag name="@see">#getStartTime</tag>
<tag name="@see">#setStartTime</tag>
</property>

<property name="endTime" flags="r">
<type class="javax.baja.sys.BAbsTime"/>
<description>
Slot for the &lt;code&gt;endTime&lt;/code&gt; property.&#xa; Time when step completed.
</description>
<tag name="@see">#getEndTime</tag>
<tag name="@see">#setEndTime</tag>
</property>

<action name="readLog" flags="">
<return>
<type class="javax.baja.sys.BString"/>
</return>
<description>
Slot for the &lt;code&gt;readLog&lt;/code&gt; action.&#xa; Read the current contents of the step log via JobLog.encode().
</description>
<tag name="@see">#readLog()</tag>
</action>

<action name="cancel" flags="h">
<return>
<type class="void"/>
</return>
<description>
Slot for the &lt;code&gt;cancel&lt;/code&gt; action.
</description>
<tag name="@see">#cancel()</tag>
</action>

<action name="dispose" flags="h">
<return>
<type class="void"/>
</return>
<description>
Slot for the &lt;code&gt;dispose&lt;/code&gt; action.&#xa; Remove all resources associated with this record
</description>
<tag name="@see">#dispose()</tag>
</action>

<!-- javax.baja.batchJob.BJobStepDetails() -->
<constructor name="BJobStepDetails" public="true">
<description/>
</constructor>

<!-- javax.baja.batchJob.BJobStepDetails(javax.baja.batchJob.BJobStep) -->
<constructor name="BJobStepDetails" public="true">
<parameter name="jobStep">
<type class="javax.baja.batchJob.BJobStep"/>
</parameter>
<description/>
</constructor>

<!-- javax.baja.batchJob.BJobStepDetails.getStageName() -->
<method name="getStageName"  public="true">
<description>
Get the &lt;code&gt;stageName&lt;/code&gt; property.
</description>
<tag name="@see">#stageName</tag>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.setStageName(java.lang.String) -->
<method name="setStageName"  public="true">
<description>
Set the &lt;code&gt;stageName&lt;/code&gt; property.
</description>
<tag name="@see">#stageName</tag>
<parameter name="v">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.getStepType() -->
<method name="getStepType"  public="true">
<description>
Get the &lt;code&gt;stepType&lt;/code&gt; property.
</description>
<tag name="@see">#stepType</tag>
<return>
<type class="javax.baja.util.BTypeSpec"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.setStepType(javax.baja.util.BTypeSpec) -->
<method name="setStepType"  public="true">
<description>
Set the &lt;code&gt;stepType&lt;/code&gt; property.
</description>
<tag name="@see">#stepType</tag>
<parameter name="v">
<type class="javax.baja.util.BTypeSpec"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.getStepDescription() -->
<method name="getStepDescription"  public="true">
<description>
Get the &lt;code&gt;stepDescription&lt;/code&gt; property.
</description>
<tag name="@see">#stepDescription</tag>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.setStepDescription(java.lang.String) -->
<method name="setStepDescription"  public="true">
<description>
Set the &lt;code&gt;stepDescription&lt;/code&gt; property.
</description>
<tag name="@see">#stepDescription</tag>
<parameter name="v">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.getState() -->
<method name="getState"  public="true">
<description>
Get the &lt;code&gt;state&lt;/code&gt; property.&#xa; Stores the current state of the step&#x27;s lifecycle&#xa; for the device
</description>
<tag name="@see">#state</tag>
<return>
<type class="javax.baja.job.BJobState"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.setState(javax.baja.job.BJobState) -->
<method name="setState"  public="true">
<description>
Set the &lt;code&gt;state&lt;/code&gt; property.&#xa; Stores the current state of the step&#x27;s lifecycle&#xa; for the device
</description>
<tag name="@see">#state</tag>
<parameter name="v">
<type class="javax.baja.job.BJobState"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.getStartTime() -->
<method name="getStartTime"  public="true">
<description>
Get the &lt;code&gt;startTime&lt;/code&gt; property.&#xa; Time when step started exection.
</description>
<tag name="@see">#startTime</tag>
<return>
<type class="javax.baja.sys.BAbsTime"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.setStartTime(javax.baja.sys.BAbsTime) -->
<method name="setStartTime"  public="true">
<description>
Set the &lt;code&gt;startTime&lt;/code&gt; property.&#xa; Time when step started exection.
</description>
<tag name="@see">#startTime</tag>
<parameter name="v">
<type class="javax.baja.sys.BAbsTime"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.getEndTime() -->
<method name="getEndTime"  public="true">
<description>
Get the &lt;code&gt;endTime&lt;/code&gt; property.&#xa; Time when step completed.
</description>
<tag name="@see">#endTime</tag>
<return>
<type class="javax.baja.sys.BAbsTime"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.setEndTime(javax.baja.sys.BAbsTime) -->
<method name="setEndTime"  public="true">
<description>
Set the &lt;code&gt;endTime&lt;/code&gt; property.&#xa; Time when step completed.
</description>
<tag name="@see">#endTime</tag>
<parameter name="v">
<type class="javax.baja.sys.BAbsTime"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.readLog() -->
<method name="readLog"  public="true">
<description>
Invoke the &lt;code&gt;readLog&lt;/code&gt; action.&#xa; Read the current contents of the step log via JobLog.encode().
</description>
<tag name="@see">#readLog</tag>
<return>
<type class="javax.baja.sys.BString"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.cancel() -->
<method name="cancel"  public="true">
<description>
Invoke the &lt;code&gt;cancel&lt;/code&gt; action.
</description>
<tag name="@see">#cancel</tag>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.dispose() -->
<method name="dispose"  public="true">
<description>
Invoke the &lt;code&gt;dispose&lt;/code&gt; action.&#xa; Remove all resources associated with this record
</description>
<tag name="@see">#dispose</tag>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.getType() -->
<method name="getType"  public="true">
<annotation><type class="java.lang.Override"/>
</annotation>
<description/>
<return>
<type class="javax.baja.sys.Type"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.getStep() -->
<method name="getStep"  public="true">
<description/>
<return>
<type class="javax.baja.batchJob.BJobStep"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.getJob() -->
<method name="getJob"  public="true">
<description/>
<return>
<type class="javax.baja.batchJob.BBatchJob"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.getStage(javax.baja.batchJob.BBatchJob) -->
<method name="getStage"  public="true">
<description/>
<parameter name="job">
<type class="javax.baja.batchJob.BBatchJob"/>
</parameter>
<return>
<type class="javax.baja.batchJob.BJobStage"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.getStage() -->
<method name="getStage"  public="true">
<description/>
<return>
<type class="javax.baja.batchJob.BJobStage"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.doReadLog() -->
<method name="doReadLog"  public="true" abstract="true">
<description/>
<return>
<type class="javax.baja.sys.BString"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.doCancel() -->
<method name="doCancel"  public="true" abstract="true">
<description/>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.doDispose() -->
<method name="doDispose"  public="true">
<description/>
<return>
<type class="void"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.success() -->
<method name="success"  public="true">
<description/>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.failed(java.lang.Throwable) -->
<method name="failed"  public="true">
<description/>
<parameter name="cause">
<type class="java.lang.Throwable"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.canceled() -->
<method name="canceled"  public="true">
<description/>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.complete(javax.baja.job.BJobState) -->
<method name="complete"  public="true">
<description/>
<parameter name="state">
<type class="javax.baja.job.BJobState"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.setLogFile(javax.baja.file.BIFile) -->
<method name="setLogFile"  public="true" abstract="true">
<description/>
<parameter name="value">
<type class="javax.baja.file.BIFile"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.getLogFile() -->
<method name="getLogFile"  public="true" abstract="true">
<description/>
<return>
<type class="javax.baja.file.BIFile"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.findLogFile(javax.baja.sys.BObject) -->
<method name="findLogFile"  public="true" abstract="true">
<description/>
<parameter name="base">
<type class="javax.baja.sys.BObject"/>
</parameter>
<return>
<type class="javax.baja.file.BIFile"/>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.start(java.lang.String, java.lang.String, java.lang.String[]) -->
<method name="start"  public="true">
<description/>
<parameter name="appendLexModule">
<type class="java.lang.String"/>
</parameter>
<parameter name="appendLexKey">
<type class="java.lang.String"/>
</parameter>
<parameter name="appendLexArgPatterns">
<type class="java.lang.String" dimension="1"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.start(java.lang.String, java.lang.String, java.lang.String) -->
<method name="start"  public="true">
<description/>
<parameter name="appendLexModule">
<type class="java.lang.String"/>
</parameter>
<parameter name="appendLexKey">
<type class="java.lang.String"/>
</parameter>
<parameter name="appendLexArgPattern">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.start(java.lang.String, java.lang.String) -->
<method name="start"  public="true">
<description/>
<parameter name="appendLexModule">
<type class="java.lang.String"/>
</parameter>
<parameter name="appendLexKey">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.endSuccess(java.lang.String, java.lang.String, java.lang.String[]) -->
<method name="endSuccess"  public="true">
<description/>
<parameter name="appendLexModule">
<type class="java.lang.String"/>
</parameter>
<parameter name="appendLexKey">
<type class="java.lang.String"/>
</parameter>
<parameter name="appendLexArgPatterns">
<type class="java.lang.String" dimension="1"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.endSuccess() -->
<method name="endSuccess"  public="true">
<description/>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.endFailed(java.lang.String, java.lang.String, java.lang.String[], java.lang.Throwable) -->
<method name="endFailed"  public="true">
<description/>
<parameter name="appendLexModule">
<type class="java.lang.String"/>
</parameter>
<parameter name="appendLexKey">
<type class="java.lang.String"/>
</parameter>
<parameter name="appendLexArgPatterns">
<type class="java.lang.String" dimension="1"/>
</parameter>
<parameter name="exception">
<type class="java.lang.Throwable"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.endFailed(java.lang.Throwable) -->
<method name="endFailed"  public="true">
<description/>
<parameter name="exception">
<type class="java.lang.Throwable"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.endFailed(java.lang.String, java.lang.String, java.lang.String[]) -->
<method name="endFailed"  public="true">
<description/>
<parameter name="appendLexModule">
<type class="java.lang.String"/>
</parameter>
<parameter name="appendLexKey">
<type class="java.lang.String"/>
</parameter>
<parameter name="appendLexArgPatterns">
<type class="java.lang.String" dimension="1"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.end(int, java.lang.String, java.lang.String, java.lang.String[], java.lang.Throwable) -->
<method name="end"  public="true">
<description/>
<parameter name="id">
<type class="int"/>
</parameter>
<parameter name="appendLexModule">
<type class="java.lang.String"/>
</parameter>
<parameter name="appendLexKey">
<type class="java.lang.String"/>
</parameter>
<parameter name="appendLexArgPatterns">
<type class="java.lang.String" dimension="1"/>
</parameter>
<parameter name="exception">
<type class="java.lang.Throwable"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.message(java.lang.String) -->
<method name="message"  public="true">
<description/>
<parameter name="msg">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.message(java.lang.String, java.lang.String, java.lang.String[]) -->
<method name="message"  public="true">
<description/>
<parameter name="lexModule">
<type class="java.lang.String"/>
</parameter>
<parameter name="lexKey">
<type class="java.lang.String"/>
</parameter>
<parameter name="lexArgPatterns">
<type class="java.lang.String" dimension="1"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.message(java.lang.String, java.lang.String, java.lang.String) -->
<method name="message"  public="true">
<description/>
<parameter name="lexModule">
<type class="java.lang.String"/>
</parameter>
<parameter name="lexKey">
<type class="java.lang.String"/>
</parameter>
<parameter name="lexArgPattern">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.message(java.lang.String, java.lang.String) -->
<method name="message"  public="true">
<description/>
<parameter name="lexModule">
<type class="java.lang.String"/>
</parameter>
<parameter name="lexKey">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.vaMessage(java.lang.String, java.lang.String...) -->
<method name="vaMessage"  public="true" isVarargs="true">
<description>
message() method that takes advantage of varargs, and&#xa; defaults to using the lexicon of whatever&#xa; module the BJobStep is defined in.
</description>
<parameter name="lexKey">
<type class="java.lang.String"/>
<description/>
</parameter>
<parameter name="messageArgs">
<type class="java.lang.String" dimension="1"/>
<description/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.success(java.lang.String, java.lang.String, java.lang.String[]) -->
<method name="success"  public="true">
<description/>
<parameter name="lexModule">
<type class="java.lang.String"/>
</parameter>
<parameter name="lexKey">
<type class="java.lang.String"/>
</parameter>
<parameter name="lexArgPatterns">
<type class="java.lang.String" dimension="1"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.success(java.lang.String, java.lang.String, java.lang.String) -->
<method name="success"  public="true">
<description/>
<parameter name="lexModule">
<type class="java.lang.String"/>
</parameter>
<parameter name="lexKey">
<type class="java.lang.String"/>
</parameter>
<parameter name="lexArgPattern">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.success(java.lang.String, java.lang.String) -->
<method name="success"  public="true">
<description/>
<parameter name="lexModule">
<type class="java.lang.String"/>
</parameter>
<parameter name="lexKey">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.vaSuccess(java.lang.String, java.lang.String...) -->
<method name="vaSuccess"  public="true" isVarargs="true">
<description>
success() method that takes advantage of varargs, and&#xa; defaults to using the lexicon of whatever&#xa; module the BJobStep is defined in.
</description>
<parameter name="lexKey">
<type class="java.lang.String"/>
<description/>
</parameter>
<parameter name="messageArgs">
<type class="java.lang.String" dimension="1"/>
<description/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.failed(java.lang.String, java.lang.String, java.lang.String[], java.lang.Throwable) -->
<method name="failed"  public="true">
<description/>
<parameter name="lexModule">
<type class="java.lang.String"/>
</parameter>
<parameter name="lexKey">
<type class="java.lang.String"/>
</parameter>
<parameter name="lexArgPatterns">
<type class="java.lang.String" dimension="1"/>
</parameter>
<parameter name="exception">
<type class="java.lang.Throwable"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.failed(java.lang.String, java.lang.String, java.lang.String, java.lang.Throwable) -->
<method name="failed"  public="true">
<description/>
<parameter name="lexModule">
<type class="java.lang.String"/>
</parameter>
<parameter name="lexKey">
<type class="java.lang.String"/>
</parameter>
<parameter name="lexArgPattern">
<type class="java.lang.String"/>
</parameter>
<parameter name="exception">
<type class="java.lang.Throwable"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.failed(java.lang.String, java.lang.String, java.lang.Throwable) -->
<method name="failed"  public="true">
<description/>
<parameter name="lexModule">
<type class="java.lang.String"/>
</parameter>
<parameter name="lexKey">
<type class="java.lang.String"/>
</parameter>
<parameter name="exception">
<type class="java.lang.Throwable"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.failed(java.lang.String, java.lang.String, java.lang.String[]) -->
<method name="failed"  public="true">
<description/>
<parameter name="lexModule">
<type class="java.lang.String"/>
</parameter>
<parameter name="lexKey">
<type class="java.lang.String"/>
</parameter>
<parameter name="lexArgPatterns">
<type class="java.lang.String" dimension="1"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.failed(java.lang.String, java.lang.String, java.lang.String) -->
<method name="failed"  public="true">
<description/>
<parameter name="lexModule">
<type class="java.lang.String"/>
</parameter>
<parameter name="lexKey">
<type class="java.lang.String"/>
</parameter>
<parameter name="lexArgPattern">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.failed(java.lang.String, java.lang.String) -->
<method name="failed"  public="true">
<description/>
<parameter name="lexModule">
<type class="java.lang.String"/>
</parameter>
<parameter name="lexKey">
<type class="java.lang.String"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.vaFailed(java.lang.String, java.lang.String...) -->
<method name="vaFailed"  public="true" isVarargs="true">
<description>
failed() method that takes advantage of varargs, and&#xa; defaults to using the lexicon of whatever&#xa; module the BJobStep is defined in.
</description>
<parameter name="lexKey">
<type class="java.lang.String"/>
<description/>
</parameter>
<parameter name="messageArgs">
<type class="java.lang.String" dimension="1"/>
<description/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.add(javax.baja.job.JobLogItem) -->
<method name="add"  public="true">
<description/>
<parameter name="item">
<type class="javax.baja.job.JobLogItem"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.log() -->
<method name="log"  public="true">
<description>
Get the JobLog to use for generating a list of job items.
</description>
<return>
<type class="javax.baja.job.JobLog"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.resetLog() -->
<method name="resetLog"  public="true">
<description/>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.getFailureAlarmMessage(javax.baja.sys.Context) -->
<method name="getFailureAlarmMessage"  public="true">
<description/>
<parameter name="cx">
<type class="javax.baja.sys.Context"/>
</parameter>
<return>
<type class="java.lang.String"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.setDisplayTimeZone(javax.baja.timezone.BTimeZone) -->
<method name="setDisplayTimeZone"  public="true">
<description>
Set the time zone to use for the start, end, and heartbeat times.&#xa; &#xa; If this job object was deserialized from a bog file using BLocalTimeUtil,&#xa; its timestamps will use time zones created for the job&#x27;s local time zone,&#xa; which may be different from the time zone the client wants to use when&#xa; displaying them.
</description>
<parameter name="displayTz">
<type class="javax.baja.timezone.BTimeZone"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.setStartTimeLocalZone(javax.baja.timezone.BTimeZone) -->
<method name="setStartTimeLocalZone"  public="true">
<description/>
<parameter name="localTz">
<type class="javax.baja.timezone.BTimeZone"/>
</parameter>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.getLocalStartTime() -->
<method name="getLocalStartTime"  public="true">
<description>
Return the job&#x27;s start time using a BAbsTime object that has the local&#xa; time zone, if it&#x27;s available.
</description>
<return>
<type class="javax.baja.sys.BAbsTime"/>
</return>
</method>

<!-- javax.baja.batchJob.BJobStepDetails.stageName -->
<field name="stageName"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;stageName&lt;/code&gt; property.
</description>
<tag name="@see">#getStageName</tag>
<tag name="@see">#setStageName</tag>
</field>

<!-- javax.baja.batchJob.BJobStepDetails.stepType -->
<field name="stepType"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;stepType&lt;/code&gt; property.
</description>
<tag name="@see">#getStepType</tag>
<tag name="@see">#setStepType</tag>
</field>

<!-- javax.baja.batchJob.BJobStepDetails.stepDescription -->
<field name="stepDescription"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;stepDescription&lt;/code&gt; property.
</description>
<tag name="@see">#getStepDescription</tag>
<tag name="@see">#setStepDescription</tag>
</field>

<!-- javax.baja.batchJob.BJobStepDetails.state -->
<field name="state"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;state&lt;/code&gt; property.&#xa; Stores the current state of the step&#x27;s lifecycle&#xa; for the device
</description>
<tag name="@see">#getState</tag>
<tag name="@see">#setState</tag>
</field>

<!-- javax.baja.batchJob.BJobStepDetails.startTime -->
<field name="startTime"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;startTime&lt;/code&gt; property.&#xa; Time when step started exection.
</description>
<tag name="@see">#getStartTime</tag>
<tag name="@see">#setStartTime</tag>
</field>

<!-- javax.baja.batchJob.BJobStepDetails.endTime -->
<field name="endTime"  public="true" static="true" final="true">
<type class="javax.baja.sys.Property"/>
<description>
Slot for the &lt;code&gt;endTime&lt;/code&gt; property.&#xa; Time when step completed.
</description>
<tag name="@see">#getEndTime</tag>
<tag name="@see">#setEndTime</tag>
</field>

<!-- javax.baja.batchJob.BJobStepDetails.readLog -->
<field name="readLog"  public="true" static="true" final="true">
<type class="javax.baja.sys.Action"/>
<description>
Slot for the &lt;code&gt;readLog&lt;/code&gt; action.&#xa; Read the current contents of the step log via JobLog.encode().
</description>
<tag name="@see">#readLog()</tag>
</field>

<!-- javax.baja.batchJob.BJobStepDetails.cancel -->
<field name="cancel"  public="true" static="true" final="true">
<type class="javax.baja.sys.Action"/>
<description>
Slot for the &lt;code&gt;cancel&lt;/code&gt; action.
</description>
<tag name="@see">#cancel()</tag>
</field>

<!-- javax.baja.batchJob.BJobStepDetails.dispose -->
<field name="dispose"  public="true" static="true" final="true">
<type class="javax.baja.sys.Action"/>
<description>
Slot for the &lt;code&gt;dispose&lt;/code&gt; action.&#xa; Remove all resources associated with this record
</description>
<tag name="@see">#dispose()</tag>
</field>

<!-- javax.baja.batchJob.BJobStepDetails.TYPE -->
<field name="TYPE"  public="true" static="true" final="true">
<type class="javax.baja.sys.Type"/>
<description/>
</field>

<!-- javax.baja.batchJob.BJobStepDetails.step -->
<field name="step"  protected="true">
<type class="javax.baja.batchJob.BJobStep"/>
<description/>
</field>

<!-- javax.baja.batchJob.BJobStepDetails.log -->
<field name="log"  protected="true">
<type class="javax.baja.job.JobLog"/>
<description/>
</field>

<!-- javax.baja.batchJob.BJobStepDetails.startTimeLocalTz -->
<field name="startTimeLocalTz"  protected="true">
<type class="javax.baja.timezone.BTimeZone"/>
<description/>
</field>

</class>
</bajadoc>
