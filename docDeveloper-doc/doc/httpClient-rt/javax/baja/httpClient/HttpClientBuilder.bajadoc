<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="httpClient" runtimeProfile="rt" qualifiedName="javax.baja.httpClient.HttpClientBuilder" name="HttpClientBuilder" packageName="javax.baja.httpClient" public="true">
<description>
Builder class for convenient construction of http client components.
</description>
<tag name="@author">Nick Dodd</tag>
<tag name="@since">Niagara 4.12</tag>
<extends>
<type class="java.lang.Object"/>
</extends>
<!-- javax.baja.httpClient.HttpClientBuilder.instance() -->
<method name="instance"  public="true" static="true">
<description/>
<return>
<type class="javax.baja.httpClient.HttpClientBuilder"/>
<description>
a new instance of HttpClientBuilder to construct a single new client.
</description>
</return>
</method>

<!-- javax.baja.httpClient.HttpClientBuilder.withMethod(javax.baja.httpClient.datatypes.BHttpRequestMethod) -->
<method name="withMethod"  public="true">
<description>
Specify the method type to use for the http client.
</description>
<parameter name="method">
<type class="javax.baja.httpClient.datatypes.BHttpRequestMethod"/>
<description>
the method type to use for the http client.
</description>
</parameter>
<return>
<type class="javax.baja.httpClient.HttpClientBuilder"/>
<description>
the builder instance
</description>
</return>
</method>

<!-- javax.baja.httpClient.HttpClientBuilder.withMethod(java.lang.String) -->
<method name="withMethod"  public="true">
<description>
Specify the method type to use for the http client.
</description>
<parameter name="methodStr">
<type class="java.lang.String"/>
<description>
the method type as a string to use for the http client. get/post/put
</description>
</parameter>
<return>
<type class="javax.baja.httpClient.HttpClientBuilder"/>
<description>
the builder instance
</description>
</return>
</method>

<!-- javax.baja.httpClient.HttpClientBuilder.withAddress(java.lang.String) -->
<method name="withAddress"  public="true">
<description>
Specify the url address of the client.
</description>
<parameter name="urlAddress">
<type class="java.lang.String"/>
<description>
the url address of the client. If including the parameter string, parameters will be added to the client.
</description>
</parameter>
<return>
<type class="javax.baja.httpClient.HttpClientBuilder"/>
<description>
the builder instance
</description>
</return>
</method>

<!-- javax.baja.httpClient.HttpClientBuilder.withAddress(boolean, java.lang.String, int, java.lang.String) -->
<method name="withAddress"  public="true">
<description>
Specify the address of the client.
</description>
<parameter name="secure">
<type class="boolean"/>
<description>
true to use https, false for http.
</description>
</parameter>
<parameter name="hostAddress">
<type class="java.lang.String"/>
<description>
the address hostname or ip address string.
</description>
</parameter>
<parameter name="port">
<type class="int"/>
<description>
the port to use.
</description>
</parameter>
<parameter name="path">
<type class="java.lang.String"/>
<description>
the path of the resource. Parameter string here will not result in parameters being added to the client.
</description>
</parameter>
<return>
<type class="javax.baja.httpClient.HttpClientBuilder"/>
<description>
the builder instance
</description>
</return>
</method>

<!-- javax.baja.httpClient.HttpClientBuilder.withHttpAddress(java.lang.String, java.lang.String) -->
<method name="withHttpAddress"  public="true">
<description>
Specify an insecure http address of the client.
</description>
<parameter name="hostAddress">
<type class="java.lang.String"/>
<description>
the address hostname or ip address string.
</description>
</parameter>
<parameter name="path">
<type class="java.lang.String"/>
<description>
the path of the resource. Parameter string here will not result in parameters being added to the client.
</description>
</parameter>
<return>
<type class="javax.baja.httpClient.HttpClientBuilder"/>
<description>
the builder instance
</description>
</return>
</method>

<!-- javax.baja.httpClient.HttpClientBuilder.withHttpsAddress(java.lang.String, java.lang.String) -->
<method name="withHttpsAddress"  public="true">
<description>
Specify a secure https address of the client.
</description>
<parameter name="hostAddress">
<type class="java.lang.String"/>
<description>
the address hostname or ip address string.
</description>
</parameter>
<parameter name="path">
<type class="java.lang.String"/>
<description>
the path of the resource. Parameter string here will not result in parameters being added to the client.
</description>
</parameter>
<return>
<type class="javax.baja.httpClient.HttpClientBuilder"/>
<description>
the builder instance
</description>
</return>
</method>

<!-- javax.baja.httpClient.HttpClientBuilder.withHeader(java.lang.String, javax.baja.sys.BSimple) -->
<method name="withHeader"  public="true">
<description>
Specify a header key/value pair for the client.
</description>
<parameter name="headerName">
<type class="java.lang.String"/>
<description>
name of the http header - this will be slot escaped.
</description>
</parameter>
<parameter name="headerValue">
<type class="javax.baja.sys.BSimple"/>
<description>
value of the header
</description>
</parameter>
<return>
<type class="javax.baja.httpClient.HttpClientBuilder"/>
<description>
the builder instance
</description>
</return>
</method>

<!-- javax.baja.httpClient.HttpClientBuilder.withParameter(java.lang.String, javax.baja.sys.BSimple) -->
<method name="withParameter"  public="true">
<description>
Specify a parameter key/value pair for the client.
</description>
<parameter name="parameterName">
<type class="java.lang.String"/>
<description>
name of the http parameter - this will be slot escaped.
</description>
</parameter>
<parameter name="parameterValue">
<type class="javax.baja.sys.BSimple"/>
<description>
value of the parameter
</description>
</parameter>
<return>
<type class="javax.baja.httpClient.HttpClientBuilder"/>
<description>
the builder instance
</description>
</return>
</method>

<!-- javax.baja.httpClient.HttpClientBuilder.withAuthenticator(javax.baja.util.BTypeSpec) -->
<method name="withAuthenticator"  public="true">
<description>
Specify the authenticator type to use in the client, without any config settings.
</description>
<parameter name="authType">
<type class="javax.baja.util.BTypeSpec"/>
<description>
authenticator type to use in the client.
</description>
</parameter>
<return>
<type class="javax.baja.httpClient.HttpClientBuilder"/>
<description>
the builder instance
</description>
</return>
</method>

<!-- javax.baja.httpClient.HttpClientBuilder.withBasicAuthenticator(java.lang.String, java.lang.String) -->
<method name="withBasicAuthenticator"  public="true">
<description>
Specify a http basic authenticator to use in the client.
</description>
<parameter name="username">
<type class="java.lang.String"/>
<description>
name credential.
</description>
</parameter>
<parameter name="password">
<type class="java.lang.String"/>
<description>
password credential.
</description>
</parameter>
<return>
<type class="javax.baja.httpClient.HttpClientBuilder"/>
<description>
the builder instance
</description>
</return>
</method>

<!-- javax.baja.httpClient.HttpClientBuilder.withHeaderTokenAuthenticator(java.lang.String, java.lang.String) -->
<method name="withHeaderTokenAuthenticator"  public="true">
<description>
Specify a http header token for use in authentication, such as an api key.&#xa; Value stored as a password.
</description>
<parameter name="headerName">
<type class="java.lang.String"/>
<description>
name of the heeader
</description>
</parameter>
<parameter name="headerValue">
<type class="java.lang.String"/>
<description>
value of the header token
</description>
</parameter>
<return>
<type class="javax.baja.httpClient.HttpClientBuilder"/>
<description>
the builder instance
</description>
</return>
</method>

<!-- javax.baja.httpClient.HttpClientBuilder.withParameterTokenAuthenticator(java.lang.String, java.lang.String) -->
<method name="withParameterTokenAuthenticator"  public="true">
<description>
Specify a http parameter token for use in authentication, such as an api key.&#xa; Value stored as a password.
</description>
<parameter name="parameterName">
<type class="java.lang.String"/>
<description>
name of the parameter
</description>
</parameter>
<parameter name="parameterValue">
<type class="java.lang.String"/>
<description>
value of the parameter token
</description>
</parameter>
<return>
<type class="javax.baja.httpClient.HttpClientBuilder"/>
<description>
the builder instance
</description>
</return>
</method>

<!-- javax.baja.httpClient.HttpClientBuilder.withBearerAuthenticator(java.lang.String) -->
<method name="withBearerAuthenticator"  public="true">
<description>
Specify a bearer token authenticator to use in the client.
</description>
<parameter name="token">
<type class="java.lang.String"/>
<description>
token value.
</description>
</parameter>
<return>
<type class="javax.baja.httpClient.HttpClientBuilder"/>
<description>
the builder instance
</description>
</return>
</method>

<!-- javax.baja.httpClient.HttpClientBuilder.withCookieAuthenticator(javax.baja.httpClient.IHttpClient, java.lang.String) -->
<method name="withCookieAuthenticator"  public="true">
<description>
Specify a response cookie authenticator to use in the client.
</description>
<parameter name="sourceClient">
<type class="javax.baja.httpClient.IHttpClient"/>
<description>
an existing http client instance which will supply the cookie header.
</description>
</parameter>
<parameter name="cookieName">
<type class="java.lang.String"/>
<description>
name of the cookie to seek in the source client.
</description>
</parameter>
<return>
<type class="javax.baja.httpClient.HttpClientBuilder"/>
<description>
the builder instance
</description>
</return>
</method>

<!-- javax.baja.httpClient.HttpClientBuilder.withNiagaraAuthenticator(java.lang.String, java.lang.String) -->
<method name="withNiagaraAuthenticator"  public="true">
<description>
Specify a Niagara scram-sha authenticator to use in the client.
</description>
<parameter name="username">
<type class="java.lang.String"/>
<description>
Niagara account name credential.
</description>
</parameter>
<parameter name="password">
<type class="java.lang.String"/>
<description>
Niagara account password credential.
</description>
</parameter>
<return>
<type class="javax.baja.httpClient.HttpClientBuilder"/>
<description>
the builder instance
</description>
</return>
</method>

<!-- javax.baja.httpClient.HttpClientBuilder.withStringPayload(java.lang.String) -->
<method name="withStringPayload"  public="true">
<description>
Specify a string payload to use in the client.
</description>
<parameter name="data">
<type class="java.lang.String"/>
<description>
payload as a string.
</description>
</parameter>
<return>
<type class="javax.baja.httpClient.HttpClientBuilder"/>
<description>
the builder instance
</description>
</return>
</method>

<!-- javax.baja.httpClient.HttpClientBuilder.withStringPayload(java.lang.String, java.lang.String) -->
<method name="withStringPayload"  public="true">
<description>
Specify a string payload to use in the client.
</description>
<parameter name="data">
<type class="java.lang.String"/>
<description>
payload as a string.
</description>
</parameter>
<parameter name="userContentType">
<type class="java.lang.String"/>
<description>
override for content-type header value.
</description>
</parameter>
<return>
<type class="javax.baja.httpClient.HttpClientBuilder"/>
<description>
the builder instance
</description>
</return>
</method>

<!-- javax.baja.httpClient.HttpClientBuilder.withFilePayload(javax.baja.naming.BOrd, java.lang.String) -->
<method name="withFilePayload"  public="true">
<description>
Specify a file to use as the request payload in the client.
</description>
<parameter name="fileOrd">
<type class="javax.baja.naming.BOrd"/>
<description>
ord of the file to use.
</description>
</parameter>
<parameter name="userContentType">
<type class="java.lang.String"/>
<description>
override for content-type header value.
</description>
</parameter>
<return>
<type class="javax.baja.httpClient.HttpClientBuilder"/>
<description>
the builder instance
</description>
</return>
</method>

<!-- javax.baja.httpClient.HttpClientBuilder.withFormPayload() -->
<method name="withFormPayload"  public="true">
<description>
Specify that client should create a form-data url encoded string from the parameters as a payload.
</description>
<return>
<type class="javax.baja.httpClient.HttpClientBuilder"/>
<description>
the builder instance
</description>
</return>
</method>

<!-- javax.baja.httpClient.HttpClientBuilder.withReportPayload(javax.baja.naming.BOrd) -->
<method name="withReportPayload"  public="true">
<description>
Specify a Niagara report to use as the request payload in the client.
</description>
<parameter name="reportSourceOrd">
<type class="javax.baja.naming.BOrd"/>
<description>
a Niagara report to use as the request payload in the client.
</description>
</parameter>
<return>
<type class="javax.baja.httpClient.HttpClientBuilder"/>
<description>
the builder instance
</description>
</return>
</method>

<!-- javax.baja.httpClient.HttpClientBuilder.withoutSendOnStart() -->
<method name="withoutSendOnStart"  public="true">
<description>
Switch off the send on start tuning setting in the client.
</description>
<return>
<type class="javax.baja.httpClient.HttpClientBuilder"/>
<description>
the builder instance
</description>
</return>
</method>

<!-- javax.baja.httpClient.HttpClientBuilder.mountAtOrd(java.lang.String, java.lang.String) -->
<method name="mountAtOrd"  public="true">
<description>
Specify the location for this client within the current running station.
</description>
<parameter name="slotPathOrd">
<type class="java.lang.String"/>
<description>
ord path at which the client should be mounted.
</description>
</parameter>
<parameter name="clientName">
<type class="java.lang.String"/>
<description>
name to use for the client - will be slot escaped.
</description>
</parameter>
<return>
<type class="javax.baja.httpClient.HttpClientBuilder"/>
<description>
the builder instance
</description>
</return>
</method>

<!-- javax.baja.httpClient.HttpClientBuilder.build() -->
<method name="build"  public="true">
<description>
Build and return the current client, it will be mounted in the station at this stage if that&#xa; has been requested.
</description>
<return>
<type class="javax.baja.httpClient.IHttpClient"/>
<description>
the configured client, possibly mounted in the station.
</description>
</return>
</method>

</class>
</bajadoc>
