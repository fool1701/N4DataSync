<?xml version="1.0" encoding="UTF-8"?>
<bajadoc version="2.0" createdBy="niagara-baja-doclet-1.0.9" createdAt="03-May-2024" createdOn="883e7f7a9875">
<class module="httpClient" runtimeProfile="rt" qualifiedName="javax.baja.httpClient.IHttpClient" name="IHttpClient" packageName="javax.baja.httpClient" public="true" interface="true" abstract="true" category="interface">
<description>
Public API interface for http clients.
</description>
<tag name="@author">Nick Dodd</tag>
<tag name="@since">Niagara 4.12</tag>
<!-- javax.baja.httpClient.IHttpClient.sendSync() -->
<method name="sendSync"  public="true" abstract="true">
<description>
Synchronously send a new http request.&#xa; (blocks current thread until send is completed)
</description>
<return>
<type class="java.lang.String"/>
<description>
the response body
</description>
</return>
<throws>
<type class="java.lang.Exception"/>
</throws>
</method>

<!-- javax.baja.httpClient.IHttpClient.sendAsync() -->
<method name="sendAsync"  public="true" abstract="true">
<description>
Asynchronously send a new http request and return control to calling thread.
</description>
<return>
<parameterizedType class="java.util.concurrent.Future">
<args>
<type class="javax.baja.httpClient.IHttpResponse"/>
</args>
</parameterizedType>
<description>
a future which can be used to await the message response.
</description>
</return>
</method>

<!-- javax.baja.httpClient.IHttpClient.send() -->
<method name="send"  public="true" abstract="true">
<annotation><type class="java.lang.SuppressWarnings"/>
<elementValue name="value">
<annotationValue kind="array">
<elementArray>
<annotationValue kind="expr">
<expression>&#x22;override&#x22;</expression>
</annotationValue>
</elementArray>
</annotationValue>
</elementValue>
</annotation>
<description>
Asynchronously send a new http request and return control to calling thread.
</description>
<return>
<type class="void"/>
</return>
</method>

<!-- javax.baja.httpClient.IHttpClient.getLastResult() -->
<method name="getLastResult"  public="true" abstract="true">
<description>
Get the last result of a send for this client.
</description>
<return>
<parameterizedType class="java.util.Optional">
<args>
<type class="javax.baja.httpClient.IHttpResponse"/>
</args>
</parameterizedType>
<description>
&lt;code&gt;<see ref="java.util.Optional">Optional</see>&lt;/code&gt;.empty if no request has been made, or an &lt;code&gt;<see ref="javax.baja.httpClient.IHttpResponse">IHttpResponse</see>&lt;/code&gt; if the request&#xa; has completed, regardless of whether then request succeeded or failed.
</description>
</return>
</method>

<!-- javax.baja.httpClient.IHttpClient.hasResponse() -->
<method name="hasResponse"  public="true" abstract="true">
<description>
Check if the client has ever received a response.
</description>
<return>
<type class="boolean"/>
<description>
true if the client has ever received a response.
</description>
</return>
</method>

<!-- javax.baja.httpClient.IHttpClient.getLastResponseBody() -->
<method name="getLastResponseBody"  public="true" abstract="true">
<description>
Convenience to get the latest response body as a string.
</description>
<return>
<type class="java.lang.String"/>
<description>
the latest response value as a string. This may be an empty string if the endpoint&#xa; returned no data in a good response, or possibly in an error response such as a 404/401/500.&#xa; If the request failed to send entirely than null is returned.
</description>
</return>
</method>

<!-- javax.baja.httpClient.IHttpClient.getLastResponseCode() -->
<method name="getLastResponseCode"  public="true" abstract="true">
<description>
Convenience to get the latest response code.
</description>
<return>
<type class="int"/>
<description>
the latest response code.
</description>
</return>
</method>

</class>
</bajadoc>
