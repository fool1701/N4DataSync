// In: com.mea.datasync.ui
package com.mea.datasync.ui;

import javax.baja.agent.AgentList;
import javax.baja.nre.annotations.AgentOn;
import javax.baja.nre.annotations.NiagaraType;
import javax.baja.sys.BComponent;
import javax.baja.sys.BComponentEvent;
import javax.baja.sys.BValue;
import javax.baja.sys.Context;
import javax.baja.sys.Property;
import javax.baja.sys.Subscriber;
import javax.baja.sys.Sys;
import javax.baja.sys.Type;
import javax.baja.workbench.tool.BWbNavNodeTool;

/**
 * BDataSyncTool serves as the entry point for the N4-DataSync module
 * within Niagara Workbench. It extends BWbNavNodeTool to appear in the
 * Tools menu and as a navigable node under the 'tool:' scheme.
 *
 * This tool acts as a container for enhanced connection profiles and provides
 * a clean, component-based architecture for managing data synchronization.
 *
 * CRITICAL: This tool MUST be registered as an agent on "workbench:Workbench"
 * in module-include.xml to appear in the Tools menu. Views register as agents
 * on "datasync:DataSyncTool" to appear when the tool is opened.
 */
@NiagaraType
@AgentOn(types = "workbench:Workbench")
public class BDataSyncTool extends BWbNavNodeTool {

//region /*+ ------------ BEGIN BAJA AUTO GENERATED CODE ------------ +*/
//@formatter:off
/*@ $com.mea.datasync.ui.BDataSyncTool(2979906276)1.0$ @*/
/* Generated by Slot-o-Matic (c) Tridium, Inc. 2012-2024 */

  //region Type

  @Override
  public Type getType() { return TYPE; }
  public static final Type TYPE = Sys.loadType(BDataSyncTool.class);

  //endregion Type

//@formatter:on
//endregion /*+ ------------ END BAJA AUTO GENERATED CODE -------------- +*/

////////////////////////////////////////////////////////////////
// Subscriber for Enhanced Profile Changes
////////////////////////////////////////////////////////////////

  /**
   * Subscriber to listen for property changes on enhanced profile objects.
   * This ensures that when users modify profile properties, the changes are saved.
   */
  private final Subscriber profileChangeSubscriber = new Subscriber() {
    @Override
    public void event(BComponentEvent event) {
      if (event.getId() == BComponentEvent.PROPERTY_CHANGED) {
        BComponent source = event.getSourceComponent();
        
        // Handle enhanced profiles
        if (source instanceof com.mea.datasync.model.BEnhancedConnectionProfile) {
          System.out.println("üîç Enhanced profile property changed via subscriber:");
          System.out.println("  Profile: " + source.getName());
          System.out.println("  Property: " + event.getSlot().getName());

          String profileName = source.getName();
          if (profileName == null || profileName.isEmpty()) {
            String slotPath = source.getSlotPath().toString();
            if (slotPath.contains(":")) {
              profileName = slotPath.substring(slotPath.lastIndexOf(":") + 1);
            }
          }

          if (profileName != null && !profileName.isEmpty()) {
            System.out.println("üíæ Saving modified enhanced profile: " + profileName);
            saveEnhancedProfileToJson((com.mea.datasync.model.BEnhancedConnectionProfile) source, profileName);
          } else {
            System.err.println("‚ùå Cannot determine enhanced profile name for saving");
          }
        }
      }
    }
  };

////////////////////////////////////////////////////////////////
// Lifecycle Methods
////////////////////////////////////////////////////////////////

  /**
   * Called when the tool is started.
   */
  @Override
  public void started() throws Exception {
    super.started();
    System.out.println("üöÄ === BDataSyncTool: Tool started successfully! ===");
    System.out.println("üöÄ Tool type: " + getType());
    System.out.println("üöÄ Tool name: " + getName());
    System.out.println("üöÄ Tool path: " + getSlotPath());
    System.out.println("üöÄ === BDataSyncTool: Initialization complete ===");
  }

  /**
   * Called when a child component is parented to this tool.
   * Save new enhanced profiles.
   */
  @Override
  public void childParented(Property property, BValue newChild, Context context) {
    System.out.println("üîç BDataSyncTool.childParented() called:");
    System.out.println("  Property: " + property.getName());
    System.out.println("  Child Type: " + newChild.getClass().getSimpleName());
    System.out.println("  Is BEnhancedConnectionProfile: " + (newChild instanceof com.mea.datasync.model.BEnhancedConnectionProfile));

    super.childParented(property, newChild, context);

    // Handle enhanced profiles
    if (newChild instanceof com.mea.datasync.model.BEnhancedConnectionProfile) {
      System.out.println("‚úÖ BDataSyncTool: Enhanced profile added: " + property.getName());

      // Subscribe to property changes on the profile
      if (newChild instanceof BComponent) {
        profileChangeSubscriber.subscribe((BComponent) newChild, 0, null);
        System.out.println("üîç Subscribed to property changes on enhanced profile: " + property.getName());
      }

      saveEnhancedProfileToJson((com.mea.datasync.model.BEnhancedConnectionProfile) newChild, property.getName());
    }
    
    else {
      System.out.println("‚ÑπÔ∏è BDataSyncTool: Non-profile component added: " + newChild.getClass().getSimpleName());
    }
  }

  /**
   * Called when a child component is unparented from this tool.
   * Unsubscribe from property changes.
   */
  @Override
  public void childUnparented(Property property, BValue oldChild, Context context) {
    System.out.println("üîç BDataSyncTool.childUnparented() called:");
    System.out.println("  Property: " + property.getName());
    System.out.println("  Child Type: " + oldChild.getClass().getSimpleName());

    super.childUnparented(property, oldChild, context);

    if (oldChild instanceof com.mea.datasync.model.BEnhancedConnectionProfile) {
      System.out.println("‚úÖ BDataSyncTool: Enhanced profile removed: " + property.getName());

      // Unsubscribe from property changes on the profile
      if (oldChild instanceof BComponent) {
        System.out.println("üîç Enhanced profile unparented: " + property.getName());
      }
    }
  }

  /**
   * Called when a property of this tool or its children changes.
   */
  @Override
  public void changed(Property property, Context context) {
    super.changed(property, context);

    // Enhanced profiles handle their own persistence through subscribers
    System.out.println("üîç BDataSyncTool.changed() called for property: " + property.getName());
  }

  /**
   * Override getAgents to provide all default BComponent views plus our custom views.
   * This gives the DataSync Tool the same rich set of views that BEnhancedConnectionProfile has.
   *
   * By default, BWbNavNodeTool hides all inherited agents to keep tools simple.
   * We override this to restore the full set of standard Niagara views.
   */
  @Override
  public AgentList getAgents(Context cx) {
    // Get the registry agents for BComponent to include all default views
    AgentList agents = Sys.getRegistry().getAgents(BComponent.TYPE.getTypeInfo());

    // Add our custom DataSync views
    agents.add("datasync:DataSyncProfileView");

    // Set the view order - custom views first, then standard views
    agents.toTop("datasync:DataSyncProfileView");

    System.out.println("üîç BDataSyncTool.getAgents() returning " + agents.size() + " views:");
    for (int i = 0; i < agents.size(); i++) {
      System.out.println("  " + (i + 1) + ". " + agents.get(i).getAgentId());
    }

    return agents;
  }

////////////////////////////////////////////////////////////////
// Enhanced Profile Management
////////////////////////////////////////////////////////////////

  /**
   * Create a new enhanced connection profile.
   * @param profileName Unique name for the profile
   * @return true if successful
   */
  public boolean createEnhancedProfile(String profileName) {
    try {
      System.out.println("üöÄ Creating enhanced profile: " + profileName);
      
      // Create new enhanced profile
      com.mea.datasync.model.BEnhancedConnectionProfile enhancedProfile = 
        new com.mea.datasync.model.BEnhancedConnectionProfile();
      
      // Set basic properties
      enhancedProfile.setStatus("Never Synced");
      enhancedProfile.setComponentsCreated(0);
      
      // Add to tool (this will trigger persistence)
      add(profileName, enhancedProfile);
      
      System.out.println("‚úÖ Enhanced profile created successfully: " + profileName);
      return true;
      
    } catch (Exception e) {
      System.err.println("‚ùå Error creating enhanced profile: " + e.getMessage());
      e.printStackTrace();
      return false;
    }
  }

  /**
   * Save a single enhanced profile to JSON storage.
   * TODO: Implement proper enhanced profile persistence
   */
  private void saveEnhancedProfileToJson(com.mea.datasync.model.BEnhancedConnectionProfile profile, String profileName) {
    System.out.println("üíæ BDataSyncTool.saveEnhancedProfileToJson() called for: " + profileName);
    try {
      // For now, create a simple JSON representation
      // TODO: Create proper EnhancedProfileManager
      System.out.println("üìù Enhanced profile persistence - creating basic JSON:");
      System.out.println("  Profile Name: " + profileName);
      System.out.println("  Data Source: " + (profile.getDataSourceConnection() != null ? 
        profile.getDataSourceConnection().getConnectionSummary() : "null"));
      System.out.println("  Status: " + profile.getStatus());
      
      // Create a marker file to show it's working
      java.io.File profilesDir = new java.io.File(System.getProperty("user.home"), ".datasync/enhanced_profiles");
      profilesDir.mkdirs();
      java.io.File markerFile = new java.io.File(profilesDir, profileName + "_enhanced.json");
      
      try (java.io.FileWriter writer = new java.io.FileWriter(markerFile)) {
        writer.write("{\n");
        writer.write("  \"profileName\": \"" + profileName + "\",\n");
        writer.write("  \"type\": \"enhanced\",\n");
        writer.write("  \"status\": \"" + profile.getStatus() + "\",\n");
        writer.write("  \"created\": \"" + new java.util.Date() + "\"\n");
        writer.write("}\n");
      }
      
      System.out.println("‚úÖ Enhanced profile marker saved: " + markerFile.getAbsolutePath());
      
    } catch (Exception e) {
      System.err.println("‚ùå Error saving enhanced profile to JSON: " + e.getMessage());
      e.printStackTrace();
    }
  }

////////////////////////////////////////////////////////////////
// Actions for UI Integration
////////////////////////////////////////////////////////////////

  /**
   * Action to create a new enhanced profile from the UI.
   */
  public void doCreateEnhancedProfile() {
    try {
      String profileName = "EnhancedProfile_" + System.currentTimeMillis();
      boolean success = createEnhancedProfile(profileName);
      
      if (success) {
        System.out.println("üéâ Enhanced profile created from UI: " + profileName);
        System.out.println("üìç Check the nav tree under DataSync Tool for the new profile");
      } else {
        System.err.println("‚ùå Failed to create enhanced profile from UI");
      }
    } catch (Exception e) {
      System.err.println("‚ùå Error in doCreateEnhancedProfile: " + e.getMessage());
      e.printStackTrace();
    }
  }

  /**
   * Get the number of enhanced profiles.
   * @return Profile count
   */
  public int getProfileCount() {
    return getChildren(com.mea.datasync.model.BEnhancedConnectionProfile.class).length;
  }
}
